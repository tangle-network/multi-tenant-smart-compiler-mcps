{
  "/.cargo/config.toml": "[env]\n# Temporary hack for Tangle blueprints to get the workspace root\n#\n# See: https://github.com/rust-lang/cargo/issues/3946#issuecomment-973132993\nCARGO_WORKSPACE_DIR = { value = \"\", relative = true }",
  "/.dockerignore": "### Rust template\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n# RustRover\n.idea/\n\n# Git\n.git/\n.github/\n\n# Testing\ntests/\ntest_assets/\n\n# Soldeer\ndependencies/\n",
  "/.gitignore": "# Generated by Cargo\ntarget/\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n# Project configuration\n.idea\n.vscode\n.zed\n\n.direnv\n.DS_Store\n# Solc Compiler files\ncache/\nout/\n\n# Ignores development broadcast logs\n!/broadcast\n/broadcast/*/31337/\n/broadcast/**/dry-run/\n\n# Docs\ndocs/\n\n# Dotenv file\n.env\n\n# Generated blueprint files\nblueprint.json\nblueprint.lock\n\n# Soldeer dependencies\ndependencies/\n",
  "/Cargo.lock": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"Inflector\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\ndependencies = [\n \"gimli 0.27.3\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb\"\ndependencies = [\n \"gimli 0.28.1\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"aes\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b169f7a6d4742236a0a00c541b845991d0ac43e546831af1249753ab4c3aa3a0\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"aes-gcm\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"831010a0f742e1209b3bcea8fab6a8e149051ba6099432c8cb2cc117dec3ead1\"\ndependencies = [\n \"aead\",\n \"aes\",\n \"cipher\",\n \"ctr\",\n \"ghash\",\n \"subtle\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"getrandom 0.2.15\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy 0.7.35\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923\"\n\n[[package]]\nname = \"alloy\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b4ae82946772d69f868b9ef81fc66acb1b149ef9b4601849bec4bcf5da6552e\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-contract\",\n \"alloy-core\",\n \"alloy-eips\",\n \"alloy-genesis\",\n \"alloy-json-rpc\",\n \"alloy-network\",\n \"alloy-provider\",\n \"alloy-pubsub\",\n \"alloy-rpc-client\",\n \"alloy-rpc-types\",\n \"alloy-serde\",\n \"alloy-signer\",\n \"alloy-signer-aws\",\n \"alloy-signer-local\",\n \"alloy-transport\",\n \"alloy-transport-http\",\n \"alloy-transport-ipc\",\n \"alloy-transport-ws\",\n]\n\n[[package]]\nname = \"alloy-chains\"\nversion = \"0.1.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28e2652684758b0d9b389d248b209ed9fd9989ef489a550265fe4bb8454fe7eb\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"num_enum\",\n \"strum 0.27.1\",\n]\n\n[[package]]\nname = \"alloy-consensus\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fbf458101ed6c389e9bb70a34ebc56039868ad10472540614816cdedc8f5265\"\ndependencies = [\n \"alloy-eips\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"alloy-serde\",\n \"alloy-trie\",\n \"auto_impl\",\n \"c-kzg\",\n \"derive_more 2.0.1\",\n \"either\",\n \"k256\",\n \"once_cell\",\n \"rand 0.8.5\",\n \"serde\",\n \"serde_with\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-consensus-any\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc982af629e511292310fe85b433427fd38cb3105147632b574abc997db44c91\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-eips\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"alloy-serde\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-contract\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd0a0c1ddee20ecc14308aae21c2438c994df7b39010c26d70f86e1d8fdb8db0\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-dyn-abi\",\n \"alloy-json-abi\",\n \"alloy-network\",\n \"alloy-network-primitives\",\n \"alloy-primitives 0.8.25\",\n \"alloy-provider\",\n \"alloy-pubsub\",\n \"alloy-rpc-types-eth\",\n \"alloy-sol-types 0.8.25\",\n \"alloy-transport\",\n \"futures\",\n \"futures-util\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-core\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d8bcce99ad10fe02640cfaec1c6bc809b837c783c1d52906aa5af66e2a196f6\"\ndependencies = [\n \"alloy-dyn-abi\",\n \"alloy-json-abi\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"alloy-sol-types 0.8.25\",\n]\n\n[[package]]\nname = \"alloy-dyn-abi\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb8e762aefd39a397ff485bc86df673465c4ad3ec8819cc60833a8a3ba5cdc87\"\ndependencies = [\n \"alloy-json-abi\",\n \"alloy-primitives 0.8.25\",\n \"alloy-sol-type-parser\",\n \"alloy-sol-types 0.8.25\",\n \"const-hex\",\n \"itoa\",\n \"serde\",\n \"serde_json\",\n \"winnow\",\n]\n\n[[package]]\nname = \"alloy-eip2124\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"675264c957689f0fd75f5993a73123c2cc3b5c235a38f5b9037fe6c826bfb2c0\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"crc\",\n \"serde\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-eip2930\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0069cf0642457f87a01a014f6dc29d5d893cd4fd8fddf0c3cdfad1bb3ebafc41\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-eip7702\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b15b13d38b366d01e818fe8e710d4d702ef7499eacd44926a06171dd9585d0c\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"k256\",\n \"serde\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-eips\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e86967eb559920e4b9102e4cb825fe30f2e9467988353ce4809f0d3f2c90cd4\"\ndependencies = [\n \"alloy-eip2124\",\n \"alloy-eip2930\",\n \"alloy-eip7702\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"alloy-serde\",\n \"auto_impl\",\n \"c-kzg\",\n \"derive_more 2.0.1\",\n \"either\",\n \"once_cell\",\n \"serde\",\n \"sha2 0.10.8\",\n]\n\n[[package]]\nname = \"alloy-genesis\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a40de6f5b53ecf5fd7756072942f41335426d9a3704cd961f77d854739933bcf\"\ndependencies = [\n \"alloy-eips\",\n \"alloy-primitives 0.8.25\",\n \"alloy-serde\",\n \"alloy-trie\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-json-abi\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe6beff64ad0aa6ad1019a3db26fef565aefeb011736150ab73ed3366c3cfd1b\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-sol-type-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"alloy-json-rpc\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27434beae2514d4a2aa90f53832cbdf6f23e4b5e2656d95eaf15f9276e2418b6\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-sol-types 0.8.25\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tracing\",\n]\n\n[[package]]\nname = \"alloy-network\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26a33a38c7486b1945f8d093ff027add2f3a8f83c7300dbad6165cc49150085e\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-consensus-any\",\n \"alloy-eips\",\n \"alloy-json-rpc\",\n \"alloy-network-primitives\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rpc-types-any\",\n \"alloy-rpc-types-eth\",\n \"alloy-serde\",\n \"alloy-signer\",\n \"alloy-sol-types 0.8.25\",\n \"async-trait\",\n \"auto_impl\",\n \"derive_more 2.0.1\",\n \"futures-utils-wasm\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-network-primitives\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db973a7a23cbe96f2958e5687c51ce2d304b5c6d0dc5ccb3de8667ad8476f50b\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-eips\",\n \"alloy-primitives 0.8.25\",\n \"alloy-serde\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-primitives\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0628ec0ba5b98b3370bb6be17b12f23bfce8ee4ad83823325a20546d9b03b78\"\ndependencies = [\n \"alloy-rlp\",\n \"bytes\",\n \"cfg-if 1.0.0\",\n \"const-hex\",\n \"derive_more 0.99.19\",\n \"hex-literal\",\n \"itoa\",\n \"proptest\",\n \"rand 0.8.5\",\n \"ruint\",\n \"serde\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"alloy-primitives\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c77490fe91a0ce933a1f219029521f20fc28c2c0ca95d53fa4da9c00b8d9d4e\"\ndependencies = [\n \"alloy-rlp\",\n \"bytes\",\n \"cfg-if 1.0.0\",\n \"const-hex\",\n \"derive_more 2.0.1\",\n \"foldhash\",\n \"hashbrown 0.15.2\",\n \"indexmap 2.9.0\",\n \"itoa\",\n \"k256\",\n \"keccak-asm\",\n \"paste\",\n \"proptest\",\n \"rand 0.8.5\",\n \"ruint\",\n \"rustc-hash 2.1.1\",\n \"serde\",\n \"sha3\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"alloy-provider\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b03bde77ad73feae14aa593bcabb932c8098c0f0750ead973331cfc0003a4e1\"\ndependencies = [\n \"alloy-chains\",\n \"alloy-consensus\",\n \"alloy-eips\",\n \"alloy-json-rpc\",\n \"alloy-network\",\n \"alloy-network-primitives\",\n \"alloy-primitives 0.8.25\",\n \"alloy-pubsub\",\n \"alloy-rpc-client\",\n \"alloy-rpc-types-anvil\",\n \"alloy-rpc-types-debug\",\n \"alloy-rpc-types-eth\",\n \"alloy-rpc-types-trace\",\n \"alloy-rpc-types-txpool\",\n \"alloy-sol-types 0.8.25\",\n \"alloy-transport\",\n \"alloy-transport-http\",\n \"alloy-transport-ipc\",\n \"alloy-transport-ws\",\n \"async-stream\",\n \"async-trait\",\n \"auto_impl\",\n \"dashmap\",\n \"futures\",\n \"futures-utils-wasm\",\n \"lru 0.13.0\",\n \"parking_lot 0.12.3\",\n \"pin-project\",\n \"reqwest 0.12.15\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tracing\",\n \"url\",\n \"wasmtimer\",\n]\n\n[[package]]\nname = \"alloy-pubsub\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"721aca709a9231815ad5903a2d284042cc77e7d9d382696451b30c9ee0950001\"\ndependencies = [\n \"alloy-json-rpc\",\n \"alloy-primitives 0.8.25\",\n \"alloy-transport\",\n \"bimap\",\n \"futures\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tokio-stream\",\n \"tower\",\n \"tracing\",\n]\n\n[[package]]\nname = \"alloy-rlp\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6c1d995bff8d011f7cd6c81820d51825e6e06d6db73914c1630ecf544d83d6\"\ndependencies = [\n \"alloy-rlp-derive\",\n \"arrayvec 0.7.6\",\n \"bytes\",\n]\n\n[[package]]\nname = \"alloy-rlp-derive\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a40e1ef334153322fd878d07e86af7a529bcb86b2439525920a88eba87bcf943\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"alloy-rpc-client\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445a3298c14fae7afb5b9f2f735dead989f3dd83020c2ab8e48ed95d7b6d1acb\"\ndependencies = [\n \"alloy-json-rpc\",\n \"alloy-primitives 0.8.25\",\n \"alloy-pubsub\",\n \"alloy-transport\",\n \"alloy-transport-http\",\n \"alloy-transport-ipc\",\n \"alloy-transport-ws\",\n \"async-stream\",\n \"futures\",\n \"pin-project\",\n \"reqwest 0.12.15\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tokio-stream\",\n \"tower\",\n \"tracing\",\n \"tracing-futures\",\n \"url\",\n \"wasmtimer\",\n]\n\n[[package]]\nname = \"alloy-rpc-types\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9157deaec6ba2ad7854f16146e4cd60280e76593eed79fdcb06e0fa8b6c60f77\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rpc-types-anvil\",\n \"alloy-rpc-types-engine\",\n \"alloy-rpc-types-eth\",\n \"alloy-rpc-types-trace\",\n \"alloy-rpc-types-txpool\",\n \"alloy-serde\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-anvil\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a80ee83ef97e7ffd667a81ebdb6154558dfd5e8f20d8249a10a12a1671a04b3\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rpc-types-eth\",\n \"alloy-serde\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-any\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"604dea1f00fd646debe8033abe8e767c732868bf8a5ae9df6321909ccbc99c56\"\ndependencies = [\n \"alloy-consensus-any\",\n \"alloy-rpc-types-eth\",\n \"alloy-serde\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-debug\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08b113a0087d226291b9768ed331818fa0b0744cc1207ae7c150687cf3fde1bd\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-engine\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"874ac9d1249ece0453e262d9ba72da9dbb3b7a2866220ded5940c2e47f1aa04d\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-eips\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"alloy-serde\",\n \"derive_more 2.0.1\",\n \"rand 0.8.5\",\n \"serde\",\n \"strum 0.27.1\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-eth\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e13d71eac04513a71af4b3df580f52f2b4dcbff9d971cc9a52519acf55514cb\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-consensus-any\",\n \"alloy-eips\",\n \"alloy-network-primitives\",\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"alloy-serde\",\n \"alloy-sol-types 0.8.25\",\n \"itertools 0.14.0\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-trace\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4747763aee39c1b0f5face79bde9be8932be05b2db7d8bdcebb93490f32c889c\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rpc-types-eth\",\n \"alloy-serde\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-rpc-types-txpool\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70132ebdbea1eaa68c4d6f7a62c2fadf0bdce83b904f895ab90ca4ec96f63468\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rpc-types-eth\",\n \"alloy-serde\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-serde\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a1cd73fc054de6353c7f22ff9b846b0f0f145cd0112da07d4119e41e9959207\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"alloy-signer\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c96fbde54bee943cd94ebacc8a62c50b38c7dfd2552dcd79ff61aea778b1bfcc\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"async-trait\",\n \"auto_impl\",\n \"either\",\n \"elliptic-curve\",\n \"k256\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-signer-aws\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e73835ed6689740b76cab0f59afbdce374a03d3f856ea33ba1fc054630a1b28\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-signer\",\n \"async-trait\",\n \"aws-sdk-kms\",\n \"k256\",\n \"spki\",\n \"thiserror 2.0.12\",\n \"tracing\",\n]\n\n[[package]]\nname = \"alloy-signer-local\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc6e72002cc1801d8b41e9892165e3a6551b7bd382bd9d0414b21e90c0c62551\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-signer\",\n \"async-trait\",\n \"coins-bip32 0.12.0\",\n \"coins-bip39 0.12.0\",\n \"k256\",\n \"rand 0.8.5\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"alloy-sol-macro\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a98ad1696a2e17f010ae8e43e9f2a1e930ed176a8e3ff77acfeff6dfb07b42c\"\ndependencies = [\n \"const-hex\",\n \"dunce\",\n \"heck 0.4.1\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"syn-solidity 0.4.2\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"alloy-sol-macro\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e10ae8e9a91d328ae954c22542415303919aabe976fe7a92eb06db1b68fd59f2\"\ndependencies = [\n \"alloy-sol-macro-expander\",\n \"alloy-sol-macro-input\",\n \"proc-macro-error2\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"alloy-sol-macro-expander\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ad5da86c127751bc607c174d6c9fe9b85ef0889a9ca0c641735d77d4f98f26\"\ndependencies = [\n \"alloy-json-abi\",\n \"alloy-sol-macro-input\",\n \"const-hex\",\n \"heck 0.5.0\",\n \"indexmap 2.9.0\",\n \"proc-macro-error2\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"syn-solidity 0.8.25\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"alloy-sol-macro-input\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3d30f0d3f9ba3b7686f3ff1de9ee312647aac705604417a2f40c604f409a9e\"\ndependencies = [\n \"alloy-json-abi\",\n \"const-hex\",\n \"dunce\",\n \"heck 0.5.0\",\n \"macro-string\",\n \"proc-macro2\",\n \"quote\",\n \"serde_json\",\n \"syn 2.0.100\",\n \"syn-solidity 0.8.25\",\n]\n\n[[package]]\nname = \"alloy-sol-type-parser\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d162f8524adfdfb0e4bd0505c734c985f3e2474eb022af32eef0d52a4f3935c\"\ndependencies = [\n \"serde\",\n \"winnow\",\n]\n\n[[package]]\nname = \"alloy-sol-types\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98d7107bed88e8f09f0ddcc3335622d87bfb6821f3e0c7473329fb1cfad5e015\"\ndependencies = [\n \"alloy-primitives 0.4.2\",\n \"alloy-sol-macro 0.4.2\",\n \"const-hex\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-sol-types\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d43d5e60466a440230c07761aa67671d4719d46f43be8ea6e7ed334d8db4a9ab\"\ndependencies = [\n \"alloy-json-abi\",\n \"alloy-primitives 0.8.25\",\n \"alloy-sol-macro 0.8.25\",\n \"const-hex\",\n \"serde\",\n]\n\n[[package]]\nname = \"alloy-transport\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec325c2af8562ef355c02aeb527c755a07e9d8cf6a1e65dda8d0bf23e29b2c\"\ndependencies = [\n \"alloy-json-rpc\",\n \"base64 0.22.1\",\n \"derive_more 2.0.1\",\n \"futures\",\n \"futures-utils-wasm\",\n \"parking_lot 0.12.3\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tower\",\n \"tracing\",\n \"url\",\n \"wasmtimer\",\n]\n\n[[package]]\nname = \"alloy-transport-http\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a082c9473c6642cce8b02405a979496126a03b096997888e86229afad05db06c\"\ndependencies = [\n \"alloy-json-rpc\",\n \"alloy-transport\",\n \"reqwest 0.12.15\",\n \"serde_json\",\n \"tower\",\n \"tracing\",\n \"url\",\n]\n\n[[package]]\nname = \"alloy-transport-ipc\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45a78cfda2cac16fa83f6b5dd8b4643caec6161433b25b67e484ce05d2194513\"\ndependencies = [\n \"alloy-json-rpc\",\n \"alloy-pubsub\",\n \"alloy-transport\",\n \"bytes\",\n \"futures\",\n \"interprocess\",\n \"pin-project\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n \"tracing\",\n]\n\n[[package]]\nname = \"alloy-transport-ws\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae865917bdabaae21f418010fe7e8837c6daa6611fde25f8d78a1778d6ecb523\"\ndependencies = [\n \"alloy-pubsub\",\n \"alloy-transport\",\n \"futures\",\n \"http 1.3.1\",\n \"rustls 0.23.26\",\n \"serde_json\",\n \"tokio\",\n \"tokio-tungstenite 0.26.2\",\n \"tracing\",\n \"ws_stream_wasm\",\n]\n\n[[package]]\nname = \"alloy-trie\"\nversion = \"0.7.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d95a94854e420f07e962f7807485856cde359ab99ab6413883e15235ad996e8b\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-rlp\",\n \"arrayvec 0.7.6\",\n \"derive_more 1.0.0\",\n \"nybbles\",\n \"serde\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3534e77181a9cc07539ad51f2141fe32f6c3ffd4df76db8ad92346b003ae4e\"\ndependencies = [\n \"anstyle\",\n \"once_cell\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.98\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e16d2d3311acee920a9eb8d33b8cbc1787ce4a264e85f964c2404b969bdcd487\"\n\n[[package]]\nname = \"approx\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"aquamarine\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21cc1548309245035eb18aa7f0967da6bc65587005170c56e6ef2788a4cf3f4e\"\ndependencies = [\n \"include_dir\",\n \"itertools 0.10.5\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ark-bls12-377\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb00293ba84f51ce3bd026bd0de55899c4e68f0a39a5728cebae3a73ffdc0a4f\"\ndependencies = [\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-bls12-377\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfedac3173d12820a5e0d6cd4de31b49719a74f4a41dc09b6652d0276a3b2cd4\"\ndependencies = [\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-std 0.5.0\",\n]\n\n[[package]]\nname = \"ark-bls12-377-ext\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20c7021f180a0cbea0380eba97c2af3c57074cdaffe0eef7e840e1c9f2841e55\"\ndependencies = [\n \"ark-bls12-377 0.4.0\",\n \"ark-ec 0.4.2\",\n \"ark-models-ext\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-bls12-381\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c775f0d12169cba7aae4caeb547bb6a50781c7449a8aa53793827c9ec4abf488\"\ndependencies = [\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-bls12-381\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3df4dcc01ff89867cd86b0da835f23c3f02738353aaee7dde7495af71363b8d5\"\ndependencies = [\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-std 0.5.0\",\n]\n\n[[package]]\nname = \"ark-bls12-381-ext\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1dc4b3d08f19e8ec06e949712f95b8361e43f1391d94f65e4234df03480631c\"\ndependencies = [\n \"ark-bls12-381 0.4.0\",\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-models-ext\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-bn254\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d69eab57e8d2663efa5c63135b2af4f396d66424f88954c21104125ab6b3e6bc\"\ndependencies = [\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-r1cs-std\",\n \"ark-std 0.5.0\",\n]\n\n[[package]]\nname = \"ark-bw6-761\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e0605daf0cc5aa2034b78d008aaf159f56901d92a52ee4f6ecdfdac4f426700\"\ndependencies = [\n \"ark-bls12-377 0.4.0\",\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-bw6-761-ext\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccee5fba47266f460067588ee1bf070a9c760bf2050c1c509982c5719aadb4f2\"\ndependencies = [\n \"ark-bw6-761\",\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-models-ext\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-ec\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"defd9a439d56ac24968cca0571f598a61bc8c55f71d50a89cda591cb750670ba\"\ndependencies = [\n \"ark-ff 0.4.2\",\n \"ark-poly 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n \"derivative\",\n \"hashbrown 0.13.2\",\n \"itertools 0.10.5\",\n \"num-traits\",\n \"rayon\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ec\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43d68f2d516162846c1238e755a7c4d131b892b70cc70c471a8e3ca3ed818fce\"\ndependencies = [\n \"ahash 0.8.11\",\n \"ark-ff 0.5.0\",\n \"ark-poly 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-std 0.5.0\",\n \"educe\",\n \"fnv\",\n \"hashbrown 0.15.2\",\n \"itertools 0.13.0\",\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ed-on-bls12-377\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b10d901b9ac4b38f9c32beacedfadcdd64e46f8d7f8e88c1ae1060022cf6f6c6\"\ndependencies = [\n \"ark-bls12-377 0.4.0\",\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-ed-on-bls12-377-ext\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"524a4fb7540df2e1a8c2e67a83ba1d1e6c3947f4f9342cc2359fc2e789ad731d\"\ndependencies = [\n \"ark-ec 0.4.2\",\n \"ark-ed-on-bls12-377\",\n \"ark-ff 0.4.2\",\n \"ark-models-ext\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-ed-on-bls12-381-bandersnatch\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9cde0f2aa063a2a5c28d39b47761aa102bda7c13c84fc118a61b87c7b2f785c\"\ndependencies = [\n \"ark-bls12-381 0.4.0\",\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-ed-on-bls12-381-bandersnatch-ext\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d15185f1acb49a07ff8cbe5f11a1adc5a93b19e211e325d826ae98e98e124346\"\ndependencies = [\n \"ark-ec 0.4.2\",\n \"ark-ed-on-bls12-381-bandersnatch\",\n \"ark-ff 0.4.2\",\n \"ark-models-ext\",\n \"ark-std 0.4.0\",\n]\n\n[[package]]\nname = \"ark-ff\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b3235cc41ee7a12aaaf2c575a2ad7b46713a8a50bda2fc3b003a04845c05dd6\"\ndependencies = [\n \"ark-ff-asm 0.3.0\",\n \"ark-ff-macros 0.3.0\",\n \"ark-serialize 0.3.0\",\n \"ark-std 0.3.0\",\n \"derivative\",\n \"num-bigint\",\n \"num-traits\",\n \"paste\",\n \"rustc_version 0.3.3\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ff\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec847af850f44ad29048935519032c33da8aa03340876d351dfab5660d2966ba\"\ndependencies = [\n \"ark-ff-asm 0.4.2\",\n \"ark-ff-macros 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n \"derivative\",\n \"digest 0.10.7\",\n \"itertools 0.10.5\",\n \"num-bigint\",\n \"num-traits\",\n \"paste\",\n \"rustc_version 0.4.1\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ff\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a177aba0ed1e0fbb62aa9f6d0502e9b46dad8c2eab04c14258a1212d2557ea70\"\ndependencies = [\n \"ark-ff-asm 0.5.0\",\n \"ark-ff-macros 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-std 0.5.0\",\n \"arrayvec 0.7.6\",\n \"digest 0.10.7\",\n \"educe\",\n \"itertools 0.13.0\",\n \"num-bigint\",\n \"num-traits\",\n \"paste\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ff-asm\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db02d390bf6643fb404d3d22d31aee1c4bc4459600aef9113833d17e786c6e44\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-ff-asm\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed4aa4fe255d0bc6d79373f7e31d2ea147bcf486cba1be5ba7ea85abdb92348\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-ff-asm\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62945a2f7e6de02a31fe400aa489f0e0f5b2502e69f95f853adb82a96c7a6b60\"\ndependencies = [\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ark-ff-macros\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fd794a08ccb318058009eefdf15bcaaaaf6f8161eb3345f907222bac38b20\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-ff-macros\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7abe79b0e4288889c4574159ab790824d0033b9fdcb2a112a3182fac2e514565\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-ff-macros\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09be120733ee33f7693ceaa202ca41accd5653b779563608f1234f78ae07c4b3\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ark-models-ext\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9eab5d4b5ff2f228b763d38442adc9b084b0a465409b059fac5c2308835ec2\"\ndependencies = [\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n \"derivative\",\n]\n\n[[package]]\nname = \"ark-poly\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d320bfc44ee185d899ccbadfa8bc31aab923ce1558716e1997a1e74057fe86bf\"\ndependencies = [\n \"ark-ff 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n \"derivative\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"ark-poly\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"579305839da207f02b89cd1679e50e67b4331e2f9294a57693e5051b7703fe27\"\ndependencies = [\n \"ahash 0.8.11\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-std 0.5.0\",\n \"educe\",\n \"fnv\",\n \"hashbrown 0.15.2\",\n]\n\n[[package]]\nname = \"ark-r1cs-std\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"941551ef1df4c7a401de7068758db6503598e6f01850bdb2cfdb614a1f9dbea1\"\ndependencies = [\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-relations\",\n \"ark-std 0.5.0\",\n \"educe\",\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n \"tracing\",\n]\n\n[[package]]\nname = \"ark-relations\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec46ddc93e7af44bcab5230937635b06fb5744464dd6a7e7b083e80ebd274384\"\ndependencies = [\n \"ark-ff 0.5.0\",\n \"ark-std 0.5.0\",\n \"tracing\",\n \"tracing-subscriber 0.2.25\",\n]\n\n[[package]]\nname = \"ark-scale\"\nversion = \"0.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f69c00b3b529be29528a6f2fd5fa7b1790f8bed81b9cdca17e326538545a179\"\ndependencies = [\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-std 0.4.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ark-serialize\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d6c2b318ee6e10f8c2853e73a83adc0ccb88995aa978d8a3408d492ab2ee671\"\ndependencies = [\n \"ark-std 0.3.0\",\n \"digest 0.9.0\",\n]\n\n[[package]]\nname = \"ark-serialize\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb7b85a02b83d2f22f89bd5cac66c9c89474240cb6207cb1efc16d098e822a5\"\ndependencies = [\n \"ark-serialize-derive 0.4.2\",\n \"ark-std 0.4.0\",\n \"digest 0.10.7\",\n \"num-bigint\",\n]\n\n[[package]]\nname = \"ark-serialize\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f4d068aaf107ebcd7dfb52bc748f8030e0fc930ac8e360146ca54c1203088f7\"\ndependencies = [\n \"ark-serialize-derive 0.5.0\",\n \"ark-std 0.5.0\",\n \"arrayvec 0.7.6\",\n \"digest 0.10.7\",\n \"num-bigint\",\n]\n\n[[package]]\nname = \"ark-serialize-derive\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae3281bc6d0fd7e549af32b52511e1302185bd688fd3359fa36423346ff682ea\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-serialize-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"213888f660fddcca0d257e88e54ac05bca01885f258ccdf695bafd77031bb69d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ark-std\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1df2c09229cbc5a028b1d70e00fdb2acee28b1055dfb5ca73eea49c5a25c4e7c\"\ndependencies = [\n \"num-traits\",\n \"rand 0.8.5\",\n]\n\n[[package]]\nname = \"ark-std\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94893f1e0c6eeab764ade8dc4c0db24caf4fe7cbbaafc0eba0a9030f447b5185\"\ndependencies = [\n \"num-traits\",\n \"rand 0.8.5\",\n \"rayon\",\n]\n\n[[package]]\nname = \"ark-std\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"246a225cc6131e9ee4f24619af0f19d67761fff15d7ccc22e42b80846e69449a\"\ndependencies = [\n \"num-traits\",\n \"rand 0.8.5\",\n]\n\n[[package]]\nname = \"array-bytes\"\nversion = \"6.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d5dde061bd34119e902bbb2d9b90c5692635cf59fb91d582c2b68043f1b8293\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9\"\ndependencies = [\n \"nodrop\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"ascii-canvas\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8824ecca2e851cec16968d54a01dd372ef8f95b244fb84b84e70128be347c3c6\"\ndependencies = [\n \"term\",\n]\n\n[[package]]\nname = \"asn1-rs\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5493c3bedbacf7fd7382c6346bbd66687d12bbaad3a89a2d2c303ee6cf20b048\"\ndependencies = [\n \"asn1-rs-derive\",\n \"asn1-rs-impl\",\n \"displaydoc\",\n \"nom\",\n \"num-traits\",\n \"rusticata-macros\",\n \"thiserror 1.0.69\",\n \"time\",\n]\n\n[[package]]\nname = \"asn1-rs-derive\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"965c2d33e53cb6b267e148a4cb0760bc01f4904c1cd4bb4002a085bb016d1490\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"asn1-rs-impl\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b18050c2cd6fe86c3a76584ef5e0baf286d038cda203eb6223df2cc413565f7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"assert_matches\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b34d609dfbaf33d6889b2b7106d3ca345eacad44200913df5ba02bfd31d2ba9\"\n\n[[package]]\nname = \"asset-test-utils\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0324df9ce91a9840632e865dd3272bd20162023856f1b189b7ae58afa5c6b61\"\ndependencies = [\n \"cumulus-pallet-parachain-system\",\n \"cumulus-pallet-xcmp-queue\",\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-assets\",\n \"pallet-balances\",\n \"pallet-collator-selection\",\n \"pallet-session\",\n \"pallet-timestamp\",\n \"pallet-xcm\",\n \"pallet-xcm-bridge-hub-router\",\n \"parachains-common\",\n \"parachains-runtimes-test-utils\",\n \"parity-scale-codec\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-parachain-info\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"substrate-wasm-builder\",\n]\n\n[[package]]\nname = \"assets-common\"\nversion = \"0.18.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c540587f89a03003946b14decef4fcadb083edc4e62f968de245b82e5402e923\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-asset-conversion\",\n \"pallet-assets\",\n \"pallet-xcm\",\n \"parachains-common\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-runtime\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"substrate-wasm-builder\",\n]\n\n[[package]]\nname = \"async-channel\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89b47800b0be77592da0afd425cc03468052844aff33b84e33cc696f64e77b6a\"\ndependencies = [\n \"concurrent-queue\",\n \"event-listener-strategy\",\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-executor\"\nversion = \"1.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30ca9a001c1e8ba5149f91a74362376cc6bc5b919d92d988668657bd570bdcec\"\ndependencies = [\n \"async-task\",\n \"concurrent-queue\",\n \"fastrand\",\n \"futures-lite\",\n \"slab\",\n]\n\n[[package]]\nname = \"async-fs\"\nversion = \"2.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebcd09b382f40fcd159c2d695175b2ae620ffa5f3bd6f664131efff4e8b9e04a\"\ndependencies = [\n \"async-lock\",\n \"blocking\",\n \"futures-lite\",\n]\n\n[[package]]\nname = \"async-io\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a2b323ccce0a1d90b449fd71f2a06ca7faa7c54c2751f06c9bd851fc061059\"\ndependencies = [\n \"async-lock\",\n \"cfg-if 1.0.0\",\n \"concurrent-queue\",\n \"futures-io\",\n \"futures-lite\",\n \"parking\",\n \"polling\",\n \"rustix 0.38.44\",\n \"slab\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"async-lock\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff6e472cdea888a4bd64f342f09b3f50e1886d32afe8df3d663c01140b811b18\"\ndependencies = [\n \"event-listener\",\n \"event-listener-strategy\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-net\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b948000fad4873c1c9339d60f2623323a0cfd3816e5181033c6a5cb68b2accf7\"\ndependencies = [\n \"async-io\",\n \"blocking\",\n \"futures-lite\",\n]\n\n[[package]]\nname = \"async-process\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"63255f1dc2381611000436537bbedfe83183faa303a5a0edaf191edef06526bb\"\ndependencies = [\n \"async-channel\",\n \"async-io\",\n \"async-lock\",\n \"async-signal\",\n \"async-task\",\n \"blocking\",\n \"cfg-if 1.0.0\",\n \"event-listener\",\n \"futures-lite\",\n \"rustix 0.38.44\",\n \"tracing\",\n]\n\n[[package]]\nname = \"async-recursion\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"async-signal\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"637e00349800c0bdf8bfc21ebbc0b6524abea702b0da4168ac00d070d0c0b9f3\"\ndependencies = [\n \"async-io\",\n \"async-lock\",\n \"atomic-waker\",\n \"cfg-if 1.0.0\",\n \"futures-core\",\n \"futures-io\",\n \"rustix 0.38.44\",\n \"signal-hook-registry\",\n \"slab\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"async-stream\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b5a71a6f37880a80d1d7f19efd781e4b5de42c88f0722cc13bcb6cc2cfe8476\"\ndependencies = [\n \"async-stream-impl\",\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-stream-impl\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7c24de15d275a1ecfd47a380fb4d5ec9bfe0933f309ed5e705b775596a3574d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"async-task\"\nversion = \"4.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b75356056920673b02621b35afd0f7dda9306d03c79a30f5c56c44cf256e3de\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e539d3fca749fcee5236ab05e93a52867dd549cc157c8cb7f99595f3cedffdb5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"async_io_stream\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6d7b9decdf35d8908a7e3ef02f64c5e9b1695e230154c0e8de3969142d9b94c\"\ndependencies = [\n \"futures\",\n \"pharos\",\n \"rustc_version 0.4.1\",\n]\n\n[[package]]\nname = \"asynchronous-codec\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a860072022177f903e59730004fb5dc13db9275b79bb2aef7ba8ce831956c233\"\ndependencies = [\n \"bytes\",\n \"futures-sink\",\n \"futures-util\",\n \"memchr\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"atomic-take\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8ab6b55fe97976e46f91ddbed8d147d966475dc29b2032757ba47e02376fbc3\"\n\n[[package]]\nname = \"atomic-waker\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0\"\n\n[[package]]\nname = \"attohttpc\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d9a9bf8b79a749ee0b911b91b671cc2b6c670bdbc7e3dfd537576ddc94bb2a2\"\ndependencies = [\n \"http 0.2.12\",\n \"log\",\n \"url\",\n]\n\n[[package]]\nname = \"auto_impl\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffdcb70bdbc4d478427380519163274ac86e52916e10f0a8889adf0f96d3fee7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"aws-credential-types\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4471bef4c22a06d2c7a1b6492493d3fdf24a805323109d6874f9c94d5906ac14\"\ndependencies = [\n \"aws-smithy-async\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"aws-lc-rs\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b756939cb2f8dc900aa6dcd505e6e2428e9cae7ff7b028c49e3946efa70878\"\ndependencies = [\n \"aws-lc-sys\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"aws-lc-sys\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9f7720b74ed28ca77f90769a71fd8c637a0137f6fae4ae947e1050229cff57f\"\ndependencies = [\n \"bindgen\",\n \"cc\",\n \"cmake\",\n \"dunce\",\n \"fs_extra\",\n]\n\n[[package]]\nname = \"aws-runtime\"\nversion = \"1.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0aff45ffe35196e593ea3b9dd65b320e51e2dda95aff4390bc459e461d09c6ad\"\ndependencies = [\n \"aws-credential-types\",\n \"aws-sigv4\",\n \"aws-smithy-async\",\n \"aws-smithy-http\",\n \"aws-smithy-runtime\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"aws-types\",\n \"bytes\",\n \"fastrand\",\n \"http 0.2.12\",\n \"http-body 0.4.6\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"tracing\",\n \"uuid 1.16.0\",\n]\n\n[[package]]\nname = \"aws-sdk-kms\"\nversion = \"1.65.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5325c5e2badf4148e850017cc56cc205888c6e0b52c9e29d3501ec577005230\"\ndependencies = [\n \"aws-credential-types\",\n \"aws-runtime\",\n \"aws-smithy-async\",\n \"aws-smithy-http\",\n \"aws-smithy-json\",\n \"aws-smithy-runtime\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"aws-types\",\n \"bytes\",\n \"fastrand\",\n \"http 0.2.12\",\n \"once_cell\",\n \"regex-lite\",\n \"tracing\",\n]\n\n[[package]]\nname = \"aws-sigv4\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69d03c3c05ff80d54ff860fe38c726f6f494c639ae975203a101335f223386db\"\ndependencies = [\n \"aws-credential-types\",\n \"aws-smithy-http\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"bytes\",\n \"form_urlencoded\",\n \"hex\",\n \"hmac 0.12.1\",\n \"http 0.2.12\",\n \"http 1.3.1\",\n \"once_cell\",\n \"percent-encoding\",\n \"sha2 0.10.8\",\n \"time\",\n \"tracing\",\n]\n\n[[package]]\nname = \"aws-smithy-async\"\nversion = \"1.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e190749ea56f8c42bf15dd76c65e14f8f765233e6df9b0506d9d934ebef867c\"\ndependencies = [\n \"futures-util\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"aws-smithy-http\"\nversion = \"0.62.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5949124d11e538ca21142d1fba61ab0a2a2c1bc3ed323cdb3e4b878bfb83166\"\ndependencies = [\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"bytes\",\n \"bytes-utils\",\n \"futures-core\",\n \"http 0.2.12\",\n \"http 1.3.1\",\n \"http-body 0.4.6\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"tracing\",\n]\n\n[[package]]\nname = \"aws-smithy-http-client\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8aff1159006441d02e57204bf57a1b890ba68bedb6904ffd2873c1c4c11c546b\"\ndependencies = [\n \"aws-smithy-async\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"h2 0.4.9\",\n \"http 0.2.12\",\n \"http 1.3.1\",\n \"http-body 0.4.6\",\n \"hyper 0.14.32\",\n \"hyper 1.6.0\",\n \"hyper-rustls 0.24.2\",\n \"hyper-rustls 0.27.5\",\n \"hyper-util\",\n \"pin-project-lite\",\n \"rustls 0.21.12\",\n \"rustls 0.23.26\",\n \"rustls-native-certs 0.8.1\",\n \"rustls-pki-types\",\n \"tokio\",\n \"tower\",\n \"tracing\",\n]\n\n[[package]]\nname = \"aws-smithy-json\"\nversion = \"0.61.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92144e45819cae7dc62af23eac5a038a58aa544432d2102609654376a900bd07\"\ndependencies = [\n \"aws-smithy-types\",\n]\n\n[[package]]\nname = \"aws-smithy-observability\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445d065e76bc1ef54963db400319f1dd3ebb3e0a74af20f7f7630625b0cc7cc0\"\ndependencies = [\n \"aws-smithy-runtime-api\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"aws-smithy-runtime\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0152749e17ce4d1b47c7747bdfec09dac1ccafdcbc741ebf9daa2a373356730f\"\ndependencies = [\n \"aws-smithy-async\",\n \"aws-smithy-http\",\n \"aws-smithy-http-client\",\n \"aws-smithy-observability\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"bytes\",\n \"fastrand\",\n \"http 0.2.12\",\n \"http 1.3.1\",\n \"http-body 0.4.6\",\n \"http-body 1.0.1\",\n \"once_cell\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"aws-smithy-runtime-api\"\nversion = \"1.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3da37cf5d57011cb1753456518ec76e31691f1f474b73934a284eb2a1c76510f\"\ndependencies = [\n \"aws-smithy-async\",\n \"aws-smithy-types\",\n \"bytes\",\n \"http 0.2.12\",\n \"http 1.3.1\",\n \"pin-project-lite\",\n \"tokio\",\n \"tracing\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"aws-smithy-types\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"836155caafba616c0ff9b07944324785de2ab016141c3550bd1c07882f8cee8f\"\ndependencies = [\n \"base64-simd\",\n \"bytes\",\n \"bytes-utils\",\n \"futures-core\",\n \"http 0.2.12\",\n \"http 1.3.1\",\n \"http-body 0.4.6\",\n \"http-body 1.0.1\",\n \"http-body-util\",\n \"itoa\",\n \"num-integer\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"ryu\",\n \"serde\",\n \"time\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n]\n\n[[package]]\nname = \"aws-types\"\nversion = \"1.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3873f8deed8927ce8d04487630dc9ff73193bab64742a61d050e57a68dec4125\"\ndependencies = [\n \"aws-credential-types\",\n \"aws-smithy-async\",\n \"aws-smithy-runtime-api\",\n \"aws-smithy-types\",\n \"rustc_version 0.4.1\",\n \"tracing\",\n]\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d\"\ndependencies = [\n \"addr2line 0.21.0\",\n \"cc\",\n \"cfg-if 1.0.0\",\n \"libc\",\n \"miniz_oxide 0.7.4\",\n \"object 0.32.2\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base-x\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cbbc9d0964165b47557570cce6c952866c2678457aca742aafc9fb771d30270\"\n\n[[package]]\nname = \"base16ct\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf\"\n\n[[package]]\nname = \"base58\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6107fe1be6682a68940da878d9e9f5e90ca5745b3dec9fd1bb393c8777d4f581\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"base64-simd\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"339abbe78e73178762e23bea9dfd08e697eb3f3301cd4be981c0f78ba5859195\"\ndependencies = [\n \"outref\",\n \"vsimd\",\n]\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89e25b6adfb930f02d1981565a6e5d9c547ac15a96606256d3b59040e5cd4ca3\"\n\n[[package]]\nname = \"bech32\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d86b93f97252c47b41663388e6d155714a9d0c398b99f1005cbc5f978b29f445\"\n\n[[package]]\nname = \"bimap\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"230c5f1ca6a325a32553f8640d31ac9b49f2411e901e427570154868b46da4f7\"\n\n[[package]]\nname = \"binary-merkle-tree\"\nversion = \"15.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"336bf780dd7526a9a4bc1521720b25c1994dc132cccd59553431923fa4d1a693\"\ndependencies = [\n \"hash-db\",\n \"log\",\n]\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.69.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"271383c67ccabffb7381723dea0672a673f292304fcb45c01cc648c7a8d58088\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"cexpr\",\n \"clang-sys\",\n \"itertools 0.12.1\",\n \"lazy_static\",\n \"lazycell\",\n \"log\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash 1.1.0\",\n \"shlex\",\n \"syn 2.0.100\",\n \"which\",\n]\n\n[[package]]\nname = \"bip39\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33415e24172c1b7d6066f6d999545375ab8e1d95421d6784bdfff9496f292387\"\ndependencies = [\n \"bitcoin_hashes 0.13.0\",\n \"serde\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"bit-set\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1\"\ndependencies = [\n \"bit-vec 0.6.3\",\n]\n\n[[package]]\nname = \"bit-set\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08807e080ed7f9d5433fa9b275196cfc35414f66a0c79d864dc51a0d825231a3\"\ndependencies = [\n \"bit-vec 0.8.0\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e764a1d40d510daf35e07be9eb06e75770908c27d411ee6c92109c9840eaaf7\"\n\n[[package]]\nname = \"bitcoin-internals\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9425c3bf7089c983facbae04de54513cce73b41c7f9ff8c845b54e7bc64ebbfb\"\n\n[[package]]\nname = \"bitcoin-io\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b47c4ab7a93edb0c7198c5535ed9b52b63095f4e9b45279c6736cec4b856baf\"\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1930a4dabfebb8d7d9992db18ebe3ae2876f0a305fab206fd168df931ede293b\"\ndependencies = [\n \"bitcoin-internals\",\n \"hex-conservative 0.1.2\",\n]\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb18c03d0db0247e147a21a6faafd5a7eb851c743db062de72018b6b7e8e4d16\"\ndependencies = [\n \"bitcoin-io\",\n \"hex-conservative 0.2.1\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c8214115b7bf84099f1309324e63141d4c5d7cc26862f97a0a857dbefe165bd\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"serde\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"blake2-rfc\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400\"\ndependencies = [\n \"arrayvec 0.4.12\",\n \"constant_time_eq 0.1.5\",\n]\n\n[[package]]\nname = \"blake2b_simd\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06e903a20b159e944f91ec8499fe1e55651480c541ea0a584f5d967c49ad9d99\"\ndependencies = [\n \"arrayref\",\n \"arrayvec 0.7.6\",\n \"constant_time_eq 0.3.1\",\n]\n\n[[package]]\nname = \"blake3\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"389a099b34312839e16420d499a9cad9650541715937ffbdd40d36f49e77eeb3\"\ndependencies = [\n \"arrayref\",\n \"arrayvec 0.7.6\",\n \"cc\",\n \"cfg-if 1.0.0\",\n \"constant_time_eq 0.3.1\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"blocking\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"703f41c54fc768e63e091340b424302bb1c29ef4aa0c7f10fe849dfb114d29ea\"\ndependencies = [\n \"async-channel\",\n \"async-task\",\n \"futures-io\",\n \"futures-lite\",\n \"piper\",\n]\n\n[[package]]\nname = \"blst\"\nversion = \"0.3.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"47c79a94619fade3c0b887670333513a67ac28a6a7e653eb260bf0d4103db38d\"\ndependencies = [\n \"cc\",\n \"glob\",\n \"threadpool\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"blueprint-build-utils\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e52a0a312ac29a005d3be2742ce43dc45a9fb4f6308798ef373954030cd38e9\"\ndependencies = [\n \"blueprint-std\",\n]\n\n[[package]]\nname = \"blueprint-chain-setup\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5758e9c018aa0af170b00a1e0b40a7d5ec81c5084404224bb8a331a52abca0e3\"\ndependencies = [\n \"blueprint-chain-setup-anvil\",\n \"blueprint-chain-setup-common\",\n \"blueprint-chain-setup-tangle\",\n]\n\n[[package]]\nname = \"blueprint-chain-setup-anvil\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa81479935847694c1973d68f8daf31528c50862b92bb32dff5a169f60a6048c\"\ndependencies = [\n \"alloy-contract\",\n \"alloy-provider\",\n \"alloy-rpc-types\",\n \"alloy-rpc-types-eth\",\n \"blueprint-core\",\n \"blueprint-core-testing-utils\",\n \"blueprint-keystore\",\n \"blueprint-std\",\n \"serde\",\n \"serde_json\",\n \"tempfile\",\n \"testcontainers\",\n \"thiserror 2.0.12\",\n \"tokio\",\n]\n\n[[package]]\nname = \"blueprint-chain-setup-common\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c692948d4b69ded43bc4c06832a49b2274cd9c7c2df2a8f4229f6beb4f999b77\"\ndependencies = [\n \"alloy-signer-local\",\n \"blueprint-clients\",\n \"blueprint-contexts\",\n \"blueprint-crypto\",\n \"blueprint-crypto-tangle-pair-signer\",\n \"blueprint-keystore\",\n \"blueprint-networking\",\n \"blueprint-std\",\n \"blueprint-tangle-extra\",\n \"color-eyre\",\n \"sp-core\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-chain-setup-tangle\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa7e16963472bcda9e80a6b226dbdee66deb0a704b1654ce6b868b90b48a018e\"\ndependencies = [\n \"alloy-json-abi\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-provider\",\n \"alloy-rpc-types\",\n \"alloy-rpc-types-eth\",\n \"alloy-signer-local\",\n \"alloy-sol-types 0.8.25\",\n \"alloy-transport\",\n \"blueprint-chain-setup-common\",\n \"blueprint-clients\",\n \"blueprint-contexts\",\n \"blueprint-core\",\n \"blueprint-crypto\",\n \"blueprint-crypto-tangle-pair-signer\",\n \"blueprint-keystore\",\n \"blueprint-networking\",\n \"blueprint-std\",\n \"blueprint-tangle-extra\",\n \"cargo_metadata 0.18.1\",\n \"color-eyre\",\n \"dialoguer\",\n \"dirs 6.0.0\",\n \"indicatif\",\n \"reqwest 0.12.15\",\n \"serde_json\",\n \"sp-core\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n \"tracing\",\n]\n\n[[package]]\nname = \"blueprint-client-core\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9443ea2202917e5aa4e8aed9a69ae9ba60c447319f0e13b76a5ad31b2e4d0251\"\ndependencies = [\n \"auto_impl\",\n \"blueprint-std\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-client-eigenlayer\"\nversion = \"0.1.0-alpha.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8be23f0feea667fefc188133a26872cb788a1f5a9278b0928fe22b0893de8a48\"\ndependencies = [\n \"alloy-contract\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-provider\",\n \"alloy-transport\",\n \"blueprint-client-core\",\n \"blueprint-core\",\n \"blueprint-evm-extra\",\n \"blueprint-runner\",\n \"blueprint-std\",\n \"eigensdk\",\n \"num-bigint\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-client-evm\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30586be1de7442e2828cef1afcedec92ed5f6fb739ba317888e3b7ccafbcea4c\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-json-rpc\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-provider\",\n \"alloy-pubsub\",\n \"alloy-rlp\",\n \"alloy-rpc-types\",\n \"alloy-rpc-types-eth\",\n \"alloy-transport\",\n \"blueprint-client-core\",\n \"blueprint-core\",\n \"blueprint-metrics-rpc-calls\",\n \"blueprint-std\",\n \"hex\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-client-tangle\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7f4b6d466df57449d08870cd4da27ad57ca8e0c7e0585914c414c5c17238b6e\"\ndependencies = [\n \"auto_impl\",\n \"blueprint-client-core\",\n \"blueprint-core\",\n \"blueprint-crypto-sp-core\",\n \"blueprint-keystore\",\n \"blueprint-runner\",\n \"blueprint-std\",\n \"serde\",\n \"serde_json\",\n \"sp-core\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n \"tokio\",\n]\n\n[[package]]\nname = \"blueprint-clients\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76d0967f11794e87317eb14d02829ea99df6cb59d0a3c698f3cdd3084951cdf0\"\ndependencies = [\n \"blueprint-client-core\",\n \"blueprint-client-eigenlayer\",\n \"blueprint-client-evm\",\n \"blueprint-client-tangle\",\n \"blueprint-std\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-context-derive\"\nversion = \"0.1.0-alpha.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036c80cad8d33763830978dd19796e31ad035dcb5ec03d3b9b50c9db5ceafb06\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"blueprint-contexts\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d71198fae857243afe99bcc9f8ac5310c9b4b60e91369948c9270e551b93455\"\ndependencies = [\n \"blueprint-clients\",\n \"blueprint-keystore\",\n \"blueprint-networking\",\n \"blueprint-runner\",\n \"blueprint-std\",\n \"tangle-subxt\",\n]\n\n[[package]]\nname = \"blueprint-core\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3fcdcf1bf52d32aa0b32ff59a572bb7f6da1adf086818d0a6b23a97a804fd26\"\ndependencies = [\n \"bytes\",\n \"futures-util\",\n \"hashbrown 0.15.2\",\n \"pin-project-lite\",\n \"tiny-keccak\",\n \"tower\",\n \"tracing\",\n]\n\n[[package]]\nname = \"blueprint-core-testing-utils\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"018be6b9497add1b08dd3842c31d7ca8d14d291c83fc89640352e6e89703e7ef\"\ndependencies = [\n \"blueprint-clients\",\n \"blueprint-core\",\n \"blueprint-keystore\",\n \"blueprint-router\",\n \"blueprint-runner\",\n \"cargo_toml\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"tracing-subscriber 0.3.19\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-crypto\"\nversion = \"0.1.0-alpha.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4481493418fc566bce1b6947138b53c0c9d364b1b5b327dc8d07136d99b96c\"\ndependencies = [\n \"blueprint-crypto-bls\",\n \"blueprint-crypto-bn254\",\n \"blueprint-crypto-core\",\n \"blueprint-crypto-ed25519\",\n \"blueprint-crypto-hashing\",\n \"blueprint-crypto-k256\",\n \"blueprint-crypto-sp-core\",\n \"blueprint-crypto-sr25519\",\n \"blueprint-crypto-tangle-pair-signer\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-crypto-bls\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0012239a4eac52e3a884a058b9b91da59105a99d320822d4ac058bbd619606d\"\ndependencies = [\n \"ark-serialize 0.5.0\",\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"hex\",\n \"paste\",\n \"serde\",\n \"serde_bytes\",\n \"thiserror 2.0.12\",\n \"tnt-bls\",\n]\n\n[[package]]\nname = \"blueprint-crypto-bn254\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d79ec28a62bcc5f66ce618cf06982c0f4f1ab06650c431bd4813bef6290f8804\"\ndependencies = [\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"hex\",\n \"num-bigint\",\n \"num-traits\",\n \"serde\",\n \"serde_bytes\",\n \"sha2 0.10.8\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-crypto-core\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf60fe93dc1f552e49ef9deb2cc01ee264286bd5ed660798546759ca1a809a2a\"\ndependencies = [\n \"blueprint-std\",\n \"clap\",\n \"serde\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-crypto-ed25519\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc9842695c9e4c66f91189011b9440ba0124e9774719b4ef242e1d17512db1c1\"\ndependencies = [\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"ed25519-zebra\",\n \"hex\",\n \"serde\",\n \"serde_bytes\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-crypto-hashing\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eb41ef58f1cf57f3985418a08cf4336a86029cdf06b9a9aa37eacfa638494ae\"\ndependencies = [\n \"blake3\",\n \"blueprint-std\",\n \"sha2 0.10.8\",\n \"sha3\",\n]\n\n[[package]]\nname = \"blueprint-crypto-k256\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"209f99e16da22202bb553a6302d53cac0b2938392269fea7d9a4c053134d6ecf\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-signer-local\",\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"hex\",\n \"k256\",\n \"serde\",\n \"serde_bytes\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-crypto-sp-core\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23df7aff9bfa2124e00490fb1e896fe250637396221996e64513180414ce6541\"\ndependencies = [\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"blueprint-crypto-bls\",\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"hex\",\n \"paste\",\n \"serde\",\n \"serde_bytes\",\n \"sp-core\",\n \"thiserror 2.0.12\",\n \"tnt-bls\",\n]\n\n[[package]]\nname = \"blueprint-crypto-sr25519\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"063d616e8b4cf75c33960f94a1adacedbdad497a911de4330958ef95f74a4751\"\ndependencies = [\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"hex\",\n \"schnorrkel\",\n \"serde\",\n \"serde_bytes\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-crypto-tangle-pair-signer\"\nversion = \"0.1.0-alpha.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e885cbf36d7fdbd2c42fb68d43295eab25b27f8f76402be1801159a97db0edb\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-signer-local\",\n \"blueprint-crypto-core\",\n \"blueprint-crypto-sp-core\",\n \"blueprint-std\",\n \"k256\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-eigenlayer-extra\"\nversion = \"0.1.0-alpha.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa98d09ae1291077f291776a090d41b575d7de0d5aab855539ebda450482b0d8\"\ndependencies = [\n \"alloy-contract\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-provider\",\n \"alloy-rpc-client\",\n \"alloy-sol-types 0.8.25\",\n \"alloy-transport\",\n \"blueprint-core\",\n \"blueprint-crypto-bn254\",\n \"blueprint-evm-extra\",\n \"eigensdk\",\n \"jsonrpc-core\",\n \"jsonrpc-http-server\",\n \"num-bigint\",\n \"reqwest 0.12.15\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tracing\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-evm-extra\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ccd4e827ae73a566cbc4a5a57ec5f07e0270448882b134b063aef9f683b0658\"\ndependencies = [\n \"alloy-consensus\",\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-provider\",\n \"alloy-rlp\",\n \"alloy-rpc-client\",\n \"alloy-rpc-types\",\n \"alloy-signer-local\",\n \"alloy-sol-types 0.8.25\",\n \"alloy-transport\",\n \"alloy-transport-http\",\n \"async-stream\",\n \"blueprint-core\",\n \"blueprint-std\",\n \"bytes\",\n \"document-features\",\n \"futures\",\n \"futures-util\",\n \"pin-project-lite\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tower\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-keystore\"\nversion = \"0.1.0-alpha.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89f04abc4820a78550bc50008ceb93fbe42ad9bb08e8585542fad4b39b397151\"\ndependencies = [\n \"alloy-network\",\n \"alloy-primitives 0.8.25\",\n \"alloy-signer\",\n \"alloy-signer-local\",\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"blake3\",\n \"blueprint-crypto\",\n \"blueprint-std\",\n \"ed25519-zebra\",\n \"eigensdk\",\n \"hex\",\n \"k256\",\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"paste\",\n \"ripemd\",\n \"rust-bls-bn254\",\n \"sc-keystore\",\n \"scale-info\",\n \"schnorrkel\",\n \"serde\",\n \"serde_bytes\",\n \"serde_json\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-io\",\n \"sp-keystore\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n \"tnt-bls\",\n \"tokio\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"blueprint-macros\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f0e48a537e894d71362f49b870e1f134285a8985207a5f6fda29ce5142c7d8a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"blueprint-metrics-rpc-calls\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0feac2b68669e65f3a0e7b77c7cba96015d0c590e30aec57158d65b362ea779\"\ndependencies = [\n \"metrics\",\n]\n\n[[package]]\nname = \"blueprint-networking\"\nversion = \"0.1.0-alpha.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b244c07d1b7ad045c0fad33aa3db351beec1d62b162f4e191e6536ee88d51faa\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"anyhow\",\n \"auto_impl\",\n \"bincode\",\n \"blake3\",\n \"blueprint-crypto\",\n \"blueprint-crypto-core\",\n \"blueprint-std\",\n \"crossbeam-channel\",\n \"dashmap\",\n \"futures\",\n \"hex\",\n \"itertools 0.14.0\",\n \"k256\",\n \"libp2p\",\n \"libsecp256k1\",\n \"lru-mem\",\n \"parking_lot 0.12.3\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tokio-stream\",\n \"tracing\",\n \"tracing-subscriber 0.3.19\",\n]\n\n[[package]]\nname = \"blueprint-producers-extra\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57673e0ad303f366eb8d746ed0b18475c8eb91bbe591a1884b70d67f8e0b4f4c\"\ndependencies = [\n \"blueprint-core\",\n \"document-features\",\n \"futures\",\n]\n\n[[package]]\nname = \"blueprint-router\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ba68ae32878027366e3c038b0117ce6ef7906853a32a2dd33724be059c543bf\"\ndependencies = [\n \"blueprint-core\",\n \"bytes\",\n \"document-features\",\n \"futures\",\n \"hashbrown 0.15.2\",\n \"pin-project-lite\",\n \"tower\",\n]\n\n[[package]]\nname = \"blueprint-runner\"\nversion = \"0.1.0-alpha.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81826bc29cc0cb7db0bc2f17493ff2c7599ca41d93b80a28771aa6aa3b757d4e\"\ndependencies = [\n \"alloy-contract\",\n \"alloy-primitives 0.8.25\",\n \"alloy-signer\",\n \"alloy-signer-local\",\n \"blueprint-core\",\n \"blueprint-crypto\",\n \"blueprint-evm-extra\",\n \"blueprint-keystore\",\n \"blueprint-networking\",\n \"blueprint-router\",\n \"blueprint-std\",\n \"blueprint-tangle-extra\",\n \"clap\",\n \"crossbeam-channel\",\n \"document-features\",\n \"dynosaur\",\n \"eigensdk\",\n \"futures\",\n \"futures-core\",\n \"futures-util\",\n \"k256\",\n \"libp2p\",\n \"sc-keystore\",\n \"serde\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tower\",\n \"tracing\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-sdk\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca49eb3534250185e61a3c7e89e40dae6ff109648169de45f35eb10c48a15361\"\ndependencies = [\n \"blueprint-build-utils\",\n \"blueprint-chain-setup\",\n \"blueprint-clients\",\n \"blueprint-context-derive\",\n \"blueprint-contexts\",\n \"blueprint-core\",\n \"blueprint-crypto\",\n \"blueprint-crypto-tangle-pair-signer\",\n \"blueprint-eigenlayer-extra\",\n \"blueprint-evm-extra\",\n \"blueprint-keystore\",\n \"blueprint-macros\",\n \"blueprint-producers-extra\",\n \"blueprint-router\",\n \"blueprint-runner\",\n \"blueprint-std\",\n \"blueprint-tangle-extra\",\n \"blueprint-testing-utils\",\n \"document-features\",\n \"tangle-subxt\",\n \"tempfile\",\n \"thiserror 2.0.12\",\n \"tokio\",\n]\n\n[[package]]\nname = \"blueprint-std\"\nversion = \"0.1.0-alpha.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b64be572320206fbf6731b8a19399c0b89678904867249877e36fee73f66dd18\"\ndependencies = [\n \"colored\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"blueprint-tangle-extra\"\nversion = \"0.1.0-alpha.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d48419f71de21aeb58f177073a0e1e11bd9524b2d5cc8e5ed6f8c422589b52f1\"\ndependencies = [\n \"blueprint-core\",\n \"bytes\",\n \"cargo_metadata 0.18.1\",\n \"cid\",\n \"document-features\",\n \"futures-core\",\n \"futures-util\",\n \"pin-project-lite\",\n \"serde\",\n \"serde_json\",\n \"tangle-subxt\",\n \"thiserror 2.0.12\",\n \"tower\",\n]\n\n[[package]]\nname = \"blueprint-tangle-testing-utils\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e70180087c3cddc1928ed5420c0f665e38525cba6eb87167a768d47f04041abf\"\ndependencies = [\n \"alloy-primitives 0.8.25\",\n \"alloy-signer-local\",\n \"blueprint-chain-setup\",\n \"blueprint-client-tangle\",\n \"blueprint-contexts\",\n \"blueprint-core\",\n \"blueprint-core-testing-utils\",\n \"blueprint-crypto-tangle-pair-signer\",\n \"blueprint-keystore\",\n \"blueprint-runner\",\n \"blueprint-std\",\n \"blueprint-tangle-extra\",\n \"futures\",\n \"sp-core\",\n \"tangle-subxt\",\n \"tempfile\",\n \"tnt-core-bytecode\",\n \"tokio\",\n \"tracing\",\n \"url\",\n]\n\n[[package]]\nname = \"blueprint-testing-utils\"\nversion = \"0.1.0-alpha.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25a41c76d33b872aae24a4e4a82d3d5668e963c0dc1d1358105a554421f3b1c7\"\ndependencies = [\n \"blueprint-core-testing-utils\",\n \"blueprint-tangle-testing-utils\",\n]\n\n[[package]]\nname = \"bollard\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97ccca1260af6a459d75994ad5acc1651bcabcbdbc41467cc9786519ab854c30\"\ndependencies = [\n \"base64 0.22.1\",\n \"bollard-stubs\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"hex\",\n \"home\",\n \"http 1.3.1\",\n \"http-body-util\",\n \"hyper 1.6.0\",\n \"hyper-named-pipe\",\n \"hyper-rustls 0.27.5\",\n \"hyper-util\",\n \"hyperlocal\",\n \"log\",\n \"pin-project-lite\",\n \"rustls 0.23.26\",\n \"rustls-native-certs 0.8.1\",\n \"rustls-pemfile 2.2.0\",\n \"rustls-pki-types\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"serde_repr\",\n \"serde_urlencoded\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n \"tower-service\",\n \"url\",\n \"winapi\",\n]\n\n[[package]]\nname = \"bollard-stubs\"\nversion = \"1.47.1-rc.27.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f179cfbddb6e77a5472703d4b30436bff32929c0aa8a9008ecf23d1d3cdd0da\"\ndependencies = [\n \"serde\",\n \"serde_repr\",\n \"serde_with\",\n]\n\n[[package]]\nname = \"bounded-collections\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ad8a0bed7827f0b07a5d23cec2e58cc02038a99e4ca81616cb2bb2025f804d\"\ndependencies = [\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"bp-header-chain\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"890df97cea17ee61ff982466bb9e90cb6b1462adb45380999019388d05e4b92d\"\ndependencies = [\n \"bp-runtime\",\n \"finality-grandpa\",\n \"frame-support\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-consensus-grandpa\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"bp-messages\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7efabf94339950b914ba87249497f1a0e35a73849934d164fecae4b275928cf6\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-runtime\",\n \"frame-support\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"bp-parachains\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9011e5c12c15caf3c4129a98f4f4916ea9165db8daf6ed85867c3106075f40df\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-polkadot-core\",\n \"bp-runtime\",\n \"frame-support\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"bp-polkadot\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa6277dd4333917ecfbcc35e9332a9f11682e0a506e76b617c336224660fce33\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-polkadot-core\",\n \"bp-runtime\",\n \"frame-support\",\n \"sp-api\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"bp-polkadot-core\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"345cf472bac11ef79d403e4846a666b7d22a13cd16d9c85b62cd6b5e16c4a042\"\ndependencies = [\n \"bp-messages\",\n \"bp-runtime\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"parity-util-mem\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"bp-relayers\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9465ad727e466d67d64244a1aa7bb19933a297913fdde34b8e9bda0a341bdeb\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-messages\",\n \"bp-parachains\",\n \"bp-runtime\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-utility\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"bp-runtime\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"746d9464f912b278f8a5e2400f10541f95da7fc6c7d688a2788b9a46296146ee\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"hash-db\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-trie\",\n \"trie-db\",\n]\n\n[[package]]\nname = \"bp-test-utils\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92e659078b54c0b6bd79896738212a305842ad37168976363233516754337826\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-parachains\",\n \"bp-polkadot-core\",\n \"bp-runtime\",\n \"ed25519-dalek\",\n \"finality-grandpa\",\n \"parity-scale-codec\",\n \"sp-application-crypto\",\n \"sp-consensus-grandpa\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"bp-xcm-bridge-hub\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0873c54562b3d492541cbc8a7974c6854a5157d07880a2a71f8ba888a69e17e9\"\ndependencies = [\n \"bp-messages\",\n \"bp-runtime\",\n \"frame-support\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"bp-xcm-bridge-hub-router\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9284820ca704f5c065563cad77d2e3d069a23cc9cb3a29db9c0de8dd3b173a87\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"bridge-hub-common\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c31b53c53d627e2da38f8910807944bf3121e154b5c0ac9e122995af9dfb13ed\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"pallet-message-queue\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"snowbridge-core\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"bridge-hub-test-utils\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de0b3aa5fd8481a06ca16e47fd3d2d9c6abe76b27d922ec8980a853f242173b3\"\ndependencies = [\n \"asset-test-utils\",\n \"bp-header-chain\",\n \"bp-messages\",\n \"bp-parachains\",\n \"bp-polkadot-core\",\n \"bp-relayers\",\n \"bp-runtime\",\n \"bp-test-utils\",\n \"bp-xcm-bridge-hub\",\n \"bridge-runtime-common\",\n \"cumulus-pallet-parachain-system\",\n \"cumulus-pallet-xcmp-queue\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-balances\",\n \"pallet-bridge-grandpa\",\n \"pallet-bridge-messages\",\n \"pallet-bridge-parachains\",\n \"pallet-bridge-relayers\",\n \"pallet-timestamp\",\n \"pallet-utility\",\n \"pallet-xcm\",\n \"pallet-xcm-bridge-hub\",\n \"parachains-common\",\n \"parachains-runtimes-test-utils\",\n \"parity-scale-codec\",\n \"sp-core\",\n \"sp-io\",\n \"sp-keyring\",\n \"sp-runtime\",\n \"sp-tracing\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"bridge-runtime-common\"\nversion = \"0.18.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"789eb7841c8791991317ec4b6e56c119e5e1c2e480ad293b8502736fd7f64b2e\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-messages\",\n \"bp-parachains\",\n \"bp-polkadot-core\",\n \"bp-relayers\",\n \"bp-runtime\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-bridge-grandpa\",\n \"pallet-bridge-messages\",\n \"pallet-bridge-parachains\",\n \"pallet-bridge-relayers\",\n \"pallet-transaction-payment\",\n \"pallet-utility\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-trie\",\n \"staging-xcm\",\n \"tuplex\",\n]\n\n[[package]]\nname = \"bs58\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf88ba1141d185c399bee5288d850d63b8369520c1eafc32a0430b5b6c287bf4\"\ndependencies = [\n \"sha2 0.10.8\",\n \"tinyvec\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"234113d19d0d7d613b40e86fb654acf958910802bcceab913a4f9e7cda03b1a4\"\ndependencies = [\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"build-helper\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdce191bf3fa4995ce948c8c83b4640a1745457a149e73c6db75b4ffe36aad5f\"\ndependencies = [\n \"semver 0.6.0\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1628fb46dfa0b37568d12e5edd512553eccf6a22a78e8bde00bb4aed84d5bdbf\"\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6b1fc10dbac614ebc03540c9dbd60e83887fda27794998c6528f1782047d540\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bytes-utils\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dafe3a8757b027e2be6e4e5601ed563c55989fcf1546e933c66c8eb3a058d35\"\ndependencies = [\n \"bytes\",\n \"either\",\n]\n\n[[package]]\nname = \"bzip2\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdb116a6ef3f6c3698828873ad02c3014b3c85cadb88496095628e3ef1e347f8\"\ndependencies = [\n \"bzip2-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"bzip2-sys\"\nversion = \"0.1.13+1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"225bff33b2141874fe80d71e07d6eec4f85c5c216453dd96388240f96e1acc14\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"c-kzg\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0307f72feab3300336fb803a57134159f6e20139af1357f36c54cb90d8e8928\"\ndependencies = [\n \"blst\",\n \"cc\",\n \"glob\",\n \"hex\",\n \"libc\",\n \"once_cell\",\n \"serde\",\n]\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e35af189006b9c0f00a064685c727031e3ed2d8020f7ba284d78cc2671bd36ea\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 1.0.26\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 1.0.26\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"cargo_toml\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fbd1fe9db3ebf71b89060adaf7b0504c2d6a425cf061313099547e382c2e472\"\ndependencies = [\n \"serde\",\n \"toml 0.8.20\",\n]\n\n[[package]]\nname = \"cbor4ii\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"472931dd4dfcc785075b09be910147f9c6258883fc4591d0dac6116392b2daa6\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e3a13707ac958681c13b39b458c073d0d9bc8a22cb1b2f4c8e55eb72c13f362\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cesu8\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-expr\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d067ad48b8650848b989a59a86c6c36a995d02d2bf778d45c3c5d57bc2718f02\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"chacha20\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3613f74bd2eac03dad61bd53dbe620703d4371614fe0bc3b9f04dd36fe4e818\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"chacha20poly1305\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10cd79432192d1c0f4e1a0fef9527696cc039165d729fb41b3f4f4f354c2dc35\"\ndependencies = [\n \"aead\",\n \"chacha20\",\n \"cipher\",\n \"poly1305\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a7964611d71df112cb1730f2ee67324fcf4d0fc6606acbbe9bfe06df124637c\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"serde\",\n \"windows-link\",\n]\n\n[[package]]\nname = \"cid\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3147d8272e8fa0ccd29ce51194dd98f79ddfb8191ba9e3409884e751798acf3a\"\ndependencies = [\n \"core2\",\n \"multibase\",\n \"multihash\",\n \"serde\",\n \"serde_bytes\",\n \"unsigned-varint 0.8.0\",\n]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad\"\ndependencies = [\n \"crypto-common\",\n \"inout\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eccb054f56cbd38340b380d4a8e69ef1f02f1af43db2f0cc817a4774d80ae071\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efd9466fac8543255d3b1fcad4762c5e116ffe808c8a3043d4263cd4fd4862a2\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09176aae279615badda0765c0c0b3f6ed53f4709118af73cf4655d85d1530cd7\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"cmake\"\nversion = \"0.1.54\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7caa3f9de89ddbe2c607f4101924c5abec803763ae9534e4f4d7d8f84aa81f0\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe6d2e5af09e8c8ad56c969f2157a3d4238cebc7c55f0a517728c38f7b200f81\"\ndependencies = [\n \"serde\",\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"coins-bip32\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b6be4a5df2098cd811f3194f64ddb96c267606bffd9689ac7b0160097b01ad3\"\ndependencies = [\n \"bs58\",\n \"coins-core 0.8.7\",\n \"digest 0.10.7\",\n \"hmac 0.12.1\",\n \"k256\",\n \"serde\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"coins-bip32\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2073678591747aed4000dd468b97b14d7007f7936851d3f2f01846899f5ebf08\"\ndependencies = [\n \"bs58\",\n \"coins-core 0.12.0\",\n \"digest 0.10.7\",\n \"hmac 0.12.1\",\n \"k256\",\n \"serde\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"coins-bip39\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3db8fba409ce3dc04f7d804074039eb68b960b0829161f8e06c95fea3f122528\"\ndependencies = [\n \"bitvec\",\n \"coins-bip32 0.8.7\",\n \"hmac 0.12.1\",\n \"once_cell\",\n \"pbkdf2 0.12.2\",\n \"rand 0.8.5\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"coins-bip39\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74b169b26623ff17e9db37a539fe4f15342080df39f129ef7631df7683d6d9d4\"\ndependencies = [\n \"bitvec\",\n \"coins-bip32 0.12.0\",\n \"hmac 0.12.1\",\n \"once_cell\",\n \"pbkdf2 0.12.2\",\n \"rand 0.8.5\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"coins-core\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5286a0843c21f8367f7be734f89df9b822e0321d8bcce8d6e735aadff7d74979\"\ndependencies = [\n \"base64 0.21.7\",\n \"bech32\",\n \"bs58\",\n \"digest 0.10.7\",\n \"generic-array\",\n \"hex\",\n \"ripemd\",\n \"serde\",\n \"serde_derive\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"coins-core\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b962ad8545e43a28e14e87377812ba9ae748dd4fd963f4c10e9fcc6d13475b\"\ndependencies = [\n \"base64 0.21.7\",\n \"bech32\",\n \"bs58\",\n \"const-hex\",\n \"digest 0.10.7\",\n \"generic-array\",\n \"ripemd\",\n \"serde\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"color-eyre\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55146f5e46f237f7423d74111267d4597b59b0dad0ffaf7303bce9945d843ad5\"\ndependencies = [\n \"backtrace\",\n \"color-spantrace\",\n \"eyre\",\n \"indenter\",\n \"once_cell\",\n \"owo-colors\",\n \"tracing-error\",\n]\n\n[[package]]\nname = \"color-spantrace\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd6be1b2a7e382e2b98b43b2adcca6bb0e465af0bdd38123873ae61eb17a72c2\"\ndependencies = [\n \"once_cell\",\n \"owo-colors\",\n \"tracing-core\",\n \"tracing-error\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"colored\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"combine\"\nversion = \"4.6.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd\"\ndependencies = [\n \"bytes\",\n \"memchr\",\n]\n\n[[package]]\nname = \"common-path\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2382f75942f4b3be3690fe4f86365e9c853c1587d6ee58212cebf6e2a9ccd101\"\n\n[[package]]\nname = \"concurrent-queue\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"054ccb5b10f9f2cbf51eb355ca1d05c2d279ce1804688d0db74b4733a5aeafd8\"\ndependencies = [\n \"encode_unicode\",\n \"libc\",\n \"once_cell\",\n \"unicode-width\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"const-hex\"\nversion = \"1.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b0485bab839b018a8f1723fc5391819fea5f8f0f32288ef8a735fd096b6160c\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cpufeatures\",\n \"hex\",\n \"proptest\",\n \"serde\",\n]\n\n[[package]]\nname = \"const-oid\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8\"\n\n[[package]]\nname = \"const-random\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87e00182fe74b066627d63b85fd550ac2998d4b0bd86bfed477a0ae4c7c71359\"\ndependencies = [\n \"const-random-macro\",\n]\n\n[[package]]\nname = \"const-random-macro\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9d839f2a20b0aee515dc581a6172f2321f96cab76c1a38a4c584a194955390e\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"once_cell\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c74b8349d32d297c9134b8c88677813a227df8f779daa29bfc29c183fe3dca6\"\n\n[[package]]\nname = \"constcat\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd7e35aee659887cbfb97aaf227ac12cad1a9d7c71e55ff3376839ed4e282d08\"\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b55271e5c8c478ad3f38ad24ef34923091e0548492a266d19b3c0b4d82574c63\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"core2\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b49ba7ef1ad6107f8824dbe97de947cbaac53c44e7f9756a1fba0d37c1eec505\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"cpp_demangle\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eeaa953eaad386a53111e47172c2fedba671e5684c8dd601a5f474f4f118710f\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"cranelift-bforest\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1277fbfa94bc82c8ec4af2ded3e639d49ca5f7f3c7eeab2c66accd135ece4e70\"\ndependencies = [\n \"cranelift-entity\",\n]\n\n[[package]]\nname = \"cranelift-codegen\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c6e8c31ad3b2270e9aeec38723888fe1b0ace3bea2b06b3f749ccf46661d3220\"\ndependencies = [\n \"bumpalo\",\n \"cranelift-bforest\",\n \"cranelift-codegen-meta\",\n \"cranelift-codegen-shared\",\n \"cranelift-entity\",\n \"cranelift-isle\",\n \"gimli 0.27.3\",\n \"hashbrown 0.13.2\",\n \"log\",\n \"regalloc2 0.6.1\",\n \"smallvec\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"cranelift-codegen-meta\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8ac5ac30d62b2d66f12651f6b606dbdfd9c2cfd0908de6b387560a277c5c9da\"\ndependencies = [\n \"cranelift-codegen-shared\",\n]\n\n[[package]]\nname = \"cranelift-codegen-shared\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd82b8b376247834b59ed9bdc0ddeb50f517452827d4a11bccf5937b213748b8\"\n\n[[package]]\nname = \"cranelift-entity\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40099d38061b37e505e63f89bab52199037a72b931ad4868d9089ff7268660b0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cranelift-frontend\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64a25d9d0a0ae3079c463c34115ec59507b4707175454f0eee0891e83e30e82d\"\ndependencies = [\n \"cranelift-codegen\",\n \"log\",\n \"smallvec\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"cranelift-isle\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80de6a7d0486e4acbd5f9f87ec49912bf4c8fb6aea00087b989685460d4469ba\"\n\n[[package]]\nname = \"cranelift-native\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb6b03e0e03801c4b3fd8ce0758a94750c07a44e7944cc0ffbf0d3f2e7c79b00\"\ndependencies = [\n \"cranelift-codegen\",\n \"libc\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"cranelift-wasm\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff3220489a3d928ad91e59dd7aeaa8b3de18afb554a6211213673a71c90737ac\"\ndependencies = [\n \"cranelift-codegen\",\n \"cranelift-entity\",\n \"cranelift-frontend\",\n \"itertools 0.10.5\",\n \"log\",\n \"smallvec\",\n \"wasmparser\",\n \"wasmtime-types\",\n]\n\n[[package]]\nname = \"crc\"\nversion = \"3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69e6e4d7b33a94f0991c26729976b10ebde1d34c3ee82408fb536164fa10d636\"\ndependencies = [\n \"crc-catalog\",\n]\n\n[[package]]\nname = \"crc-catalog\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f58bbc28f91df819d0aa2a2c00cd19754769c2fad90579b3592b1c9ba7a3115\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28\"\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43da5946c66ffcc7745f48db692ffbb10a83bfe0afd96235c5c2a4fb23994929\"\n\n[[package]]\nname = \"crypto-bigint\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dc92fb57ca44df6db8059111ab3af99a63d5d0f8375d9972e319a379c6bab76\"\ndependencies = [\n \"generic-array\",\n \"rand_core 0.6.4\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core 0.6.4\",\n \"typenum\",\n]\n\n[[package]]\nname = \"crypto-mac\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab\"\ndependencies = [\n \"generic-array\",\n \"subtle\",\n]\n\n[[package]]\nname = \"crypto_secretbox\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9d6cf87adf719ddf43a805e92c6870a531aedda35ff640442cbaf8674e141e1\"\ndependencies = [\n \"aead\",\n \"cipher\",\n \"generic-array\",\n \"poly1305\",\n \"salsa20\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ctor\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a2785755761f3ddc1492979ce1e48d2c00d09311c39e4466429188f3dd6501\"\ndependencies = [\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ctr\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0369ee1ad671834580515889b80f2ea915f23b8be8d0daa4bbaf2ac5c7590835\"\ndependencies = [\n \"cipher\",\n]\n\n[[package]]\nname = \"cumulus-pallet-aura-ext\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cbe2735fc7cf2b6521eab00cb1a1ab025abc1575cc36887b36dc8c5cb1c9434\"\ndependencies = [\n \"cumulus-pallet-parachain-system\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-aura\",\n \"pallet-timestamp\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-application-crypto\",\n \"sp-consensus-aura\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"cumulus-pallet-dmp-queue\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97263a8e758d201ebe81db7cea7b278b4fb869c11442f77acef70138ac1a252f\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"cumulus-pallet-parachain-system\"\nversion = \"0.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"546403ee1185f4051a74cc9c9d76e82c63cac3fb68e1bf29f61efb5604c96488\"\ndependencies = [\n \"bytes\",\n \"cumulus-pallet-parachain-system-proc-macro\",\n \"cumulus-primitives-core\",\n \"cumulus-primitives-parachain-inherent\",\n \"cumulus-primitives-proof-size-hostfunction\",\n \"environmental\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-message-queue\",\n \"parity-scale-codec\",\n \"polkadot-parachain-primitives\",\n \"polkadot-runtime-common\",\n \"polkadot-runtime-parachains\",\n \"scale-info\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-trie\",\n \"sp-version\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"trie-db\",\n]\n\n[[package]]\nname = \"cumulus-pallet-parachain-system-proc-macro\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"befbaf3a1ce23ac8476481484fef5f4d500cbd15b4dad6380ce1d28134b0c1f7\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"cumulus-pallet-session-benchmarking\"\nversion = \"19.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18168570689417abfb514ac8812fca7e6429764d01942750e395d7d8ce0716ef\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"cumulus-pallet-solo-to-para\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f42c74548c8cab75da6f2479a953f044b582cfce98479862344a24df7bbd215\"\ndependencies = [\n \"cumulus-pallet-parachain-system\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-sudo\",\n \"parity-scale-codec\",\n \"polkadot-primitives 16.0.0\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"cumulus-pallet-xcm\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e49231f6cd8274438b078305dc8ce44c54c0d3f4a28e902589bcbaa53d954608\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"cumulus-pallet-xcmp-queue\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"105767016b8136031f14cca439edf28c8493e3556e6781847758511bfef2477a\"\ndependencies = [\n \"bounded-collections\",\n \"bp-xcm-bridge-hub-router\",\n \"cumulus-primitives-core\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-message-queue\",\n \"parity-scale-codec\",\n \"polkadot-runtime-common\",\n \"polkadot-runtime-parachains\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"cumulus-ping\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f47128f797359951723e2d106a80e592d007bb7446c299958cdbafb1489ddbf0\"\ndependencies = [\n \"cumulus-pallet-xcm\",\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"cumulus-primitives-aura\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11e7825bcf3cc6c962a5b9b9f47e02dc381109e521d0bc00cad785c65da18471\"\ndependencies = [\n \"parity-scale-codec\",\n \"polkadot-core-primitives\",\n \"polkadot-primitives 15.0.0\",\n \"sp-api\",\n \"sp-consensus-aura\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"cumulus-primitives-core\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c6b5221a4a3097f2ebef66c84c1e6d7a0b8ec7e63f2bd5ae04c1e6d3fc7514e\"\ndependencies = [\n \"parity-scale-codec\",\n \"polkadot-core-primitives\",\n \"polkadot-parachain-primitives\",\n \"polkadot-primitives 16.0.0\",\n \"scale-info\",\n \"sp-api\",\n \"sp-runtime\",\n \"sp-trie\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"cumulus-primitives-parachain-inherent\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"842a694901e04a62d88995418dec35c22f7dba2b34d32d2b8de37d6b92f973ff\"\ndependencies = [\n \"async-trait\",\n \"cumulus-primitives-core\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"cumulus-primitives-proof-size-hostfunction\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"421f03af054aac7c89e87a49e47964886e53a8d7395990eab27b6f201d42524f\"\ndependencies = [\n \"sp-externalities\",\n \"sp-runtime-interface\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"cumulus-primitives-storage-weight-reclaim\"\nversion = \"8.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fc49dfec0ba3438afad73787736cc0dba88d15b5855881f12a4d8b812a72927\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"cumulus-primitives-proof-size-hostfunction\",\n \"docify\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"cumulus-primitives-timestamp\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33cffb8f010f39ac36b31d38994b8f9d9256d9b5e495d96b4ec59d3e30852d53\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"sp-inherents\",\n \"sp-timestamp\",\n]\n\n[[package]]\nname = \"cumulus-primitives-utility\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bdcf4d46dd93f1e6d5dd6d379133566a44042ba6476d04bdcbdb4981c622ae4\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"log\",\n \"pallet-asset-conversion\",\n \"parity-scale-codec\",\n \"polkadot-runtime-common\",\n \"sp-runtime\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"cumulus-test-relay-sproof-builder\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e570e41c3f05a8143ebff967bbb0c7dcaaa6f0bebd8639b9418b8005b13eda03\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"parity-scale-codec\",\n \"polkadot-primitives 16.0.0\",\n \"sp-runtime\",\n \"sp-state-machine\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest 0.10.7\",\n \"fiat-crypto\",\n \"rustc_version 0.4.1\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"cxx\"\nversion = \"1.0.157\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6354e975ea4ec28033ec3a36fa9baa1a02e3eb22ad740eeb4929370d4f5ba8\"\ndependencies = [\n \"cc\",\n \"cxxbridge-cmd\",\n \"cxxbridge-flags\",\n \"cxxbridge-macro\",\n \"foldhash\",\n \"link-cplusplus\",\n]\n\n[[package]]\nname = \"cxx-build\"\nversion = \"1.0.157\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b4400e26ea4b99417e4263b1ce2d8452404d750ba0809a7bd043072593d430d\"\ndependencies = [\n \"cc\",\n \"codespan-reporting\",\n \"proc-macro2\",\n \"quote\",\n \"scratch\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"cxxbridge-cmd\"\nversion = \"1.0.157\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31860c98f69fc14da5742c5deaf78983e846c7b27804ca8c8319e32eef421bde\"\ndependencies = [\n \"clap\",\n \"codespan-reporting\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"cxxbridge-flags\"\nversion = \"1.0.157\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0402a66013f3b8d3d9f2d7c9994656cc81e671054822b0728d7454d9231892f\"\n\n[[package]]\nname = \"cxxbridge-macro\"\nversion = \"1.0.157\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64c0b38f32d68f3324a981645ee39b2d686af36d03c98a386df3716108c9feae\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc7f46116c46ff9ab3eb1597a45688b6715c6e628b5c133e288e709a29bcb4ee\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d00b9596d185e565c2207a0b01f8bd1a135483d02d9b7b0a54b11da8d53412e\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc34b93ccb385b40dc71c6fceac4b2ad23662c7eeb248cf10d529b7e055b6ead\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"dashmap\"\nversion = \"6.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5041cc499144891f3790297212f32a74fb938e5136a14943f338ef9e0ae276cf\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"crossbeam-utils\",\n \"hashbrown 0.14.5\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core 0.9.10\",\n]\n\n[[package]]\nname = \"data-encoding\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a2330da5de22e8a3cb63252ce2abb30116bf5265e89c0e01bc17015ce30a476\"\n\n[[package]]\nname = \"data-encoding-macro\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"47ce6c96ea0102f01122a185683611bd5ac8d99e62bc59dd12e6bda344ee673d\"\ndependencies = [\n \"data-encoding\",\n \"data-encoding-macro-internal\",\n]\n\n[[package]]\nname = \"data-encoding-macro-internal\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d162beedaa69905488a8da94f5ac3edb4dd4788b732fadb7bd120b2625c1976\"\ndependencies = [\n \"data-encoding\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"der\"\nversion = \"0.7.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7c1832837b905bbfb5101e07cc24c8deddf52f93225eee6ead5f4d63d53ddcb\"\ndependencies = [\n \"const-oid\",\n \"pem-rfc7468\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"der-parser\"\nversion = \"9.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cd0a5c643689626bec213c4d8bd4d96acc8ffdb4ad4bb6bc16abf27d5f4b553\"\ndependencies = [\n \"asn1-rs\",\n \"displaydoc\",\n \"nom\",\n \"num-bigint\",\n \"num-traits\",\n \"rusticata-macros\",\n]\n\n[[package]]\nname = \"deranged\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c9e6a11ca8224451684bc0d7d5a7adbf8f2fd6887261a1cfc3c0432f9d4068e\"\ndependencies = [\n \"powerfmt\",\n \"serde\",\n]\n\n[[package]]\nname = \"derivative\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive-syn-parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d65d7ce8132b7c0e54497a4d9a55a1c2a0912a0d786cf894472ba818fba45762\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"derive-where\"\nversion = \"1.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62d671cc41a825ebabc75757b62d3d168c577f9149b2d49ece1dad1f72119d25\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3da29a38df43d6f156149c9b43ded5e018ddff2a855cf2cfd62e8cd7d079c69f\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version 0.4.1\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a9b99b9cbbe49445b21764dc0625032a89b145a2642e67603e1c936f5458d05\"\ndependencies = [\n \"derive_more-impl 1.0.0\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"093242cf7570c207c83073cf82f79706fe7b8317e98620a47d5be7c3d8497678\"\ndependencies = [\n \"derive_more-impl 2.0.1\",\n]\n\n[[package]]\nname = \"derive_more-impl\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb7330aeadfbe296029522e6c40f315320aba36fc43a5b3632f3795348f3bd22\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"derive_more-impl\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda628edc44c4bb645fbe0f758797143e4e07926f7ebf4e9bdfbd3d2ce621df3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"dialoguer\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"658bce805d770f407bc62102fca7c2c64ceef2fbcb2b8bd19d2765ce093980de\"\ndependencies = [\n \"console\",\n \"shell-words\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer 0.10.4\",\n \"const-oid\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"directories-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys 0.4.1\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"6.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3e8aa94d75141228480295a7d0e7feb620b1a5ad9f12bc40be62411e38cce4e\"\ndependencies = [\n \"dirs-sys 0.5.0\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users 0.4.6\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e01a3366d27ee9890022452ee61b2b63a67e6f13f58900b651ff5665f0bb1fab\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users 0.5.0\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users 0.4.6\",\n \"winapi\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"docify\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a772b62b1837c8f060432ddcc10b17aae1453ef17617a99bc07789252d2a5896\"\ndependencies = [\n \"docify_macros\",\n]\n\n[[package]]\nname = \"docify_macros\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60e6be249b0a462a14784a99b19bf35a667bb5e09de611738bb7362fa4c95ff7\"\ndependencies = [\n \"common-path\",\n \"derive-syn-parse\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn 2.0.100\",\n \"termcolor\",\n \"toml 0.8.20\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"docker_credential\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31951f49556e34d90ed28342e1df7e1cb7a229c4cab0aecc627b5d91edd41d07\"\ndependencies = [\n \"base64 0.21.7\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"doctest-file\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aac81fa3e28d21450aa4d2ac065992ba96a1d7303efbce51a95f4fd175b67562\"\n\n[[package]]\nname = \"document-features\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95249b50c6c185bee49034bcb378a49dc2b5dff0be90ff6616d31d64febab05d\"\ndependencies = [\n \"litrs\",\n]\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\"\n\n[[package]]\nname = \"dtoa\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6add3b8cff394282be81f3fc1a0605db594ed69890078ca6e2cab1c408bcf04\"\n\n[[package]]\nname = \"dunce\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813\"\n\n[[package]]\nname = \"dyn-clonable\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a36efbb9bfd58e1723780aa04b61aba95ace6a05d9ffabfdb0b43672552f0805\"\ndependencies = [\n \"dyn-clonable-impl\",\n \"dyn-clone\",\n]\n\n[[package]]\nname = \"dyn-clonable-impl\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e8671d54058979a37a26f3511fbf8d198ba1aa35ffb202c42587d918d77213a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c7a8fb8a9fbf66c1f703fe16184d10ca0ee9d23be5b4436400408ba54a95005\"\n\n[[package]]\nname = \"dynosaur\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"277b2cb52d2df4acece06bb16bc0bb0a006970c7bf504eac2d310927a6f65890\"\ndependencies = [\n \"dynosaur_derive\",\n \"trait-variant\",\n]\n\n[[package]]\nname = \"dynosaur_derive\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a4102713839a8c01c77c165bc38ef2e83948f6397fa1e1dcfacec0f07b149d3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ecdsa\"\nversion = \"0.16.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee27f32b5c5292967d2d4a9d7f1e0b0aed2c15daded5a60300e4abb9d8020bca\"\ndependencies = [\n \"der\",\n \"digest 0.10.7\",\n \"elliptic-curve\",\n \"rfc6979\",\n \"serdect\",\n \"signature\",\n \"spki\",\n]\n\n[[package]]\nname = \"ed25519\"\nversion = \"2.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53\"\ndependencies = [\n \"pkcs8\",\n \"signature\",\n]\n\n[[package]]\nname = \"ed25519-dalek\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a3daa8e81a3963a60642bcc1f90a670680bd4a77535faa384e9d1c79d620871\"\ndependencies = [\n \"curve25519-dalek\",\n \"ed25519\",\n \"rand_core 0.6.4\",\n \"serde\",\n \"sha2 0.10.8\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ed25519-zebra\"\nversion = \"4.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d9ce6874da5d4415896cd45ffbc4d1cfc0c4f9c079427bd870742c30f2f65a9\"\ndependencies = [\n \"curve25519-dalek\",\n \"ed25519\",\n \"hashbrown 0.14.5\",\n \"hex\",\n \"rand_core 0.6.4\",\n \"sha2 0.10.8\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"educe\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d7bc049e1bd8cdeb31b68bbd586a9464ecf9f3944af3958a7a9d0f8b9799417\"\ndependencies = [\n \"enum-ordinalize\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"eigen-client-avsregistry\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16480006823e3b09495cd5fee89d03364ba23fc254720a98efd97ee0a5a0f6c0\"\ndependencies = [\n \"alloy\",\n \"ark-ff 0.5.0\",\n \"async-trait\",\n \"eigen-client-elcontracts\",\n \"eigen-common\",\n \"eigen-crypto-bls\",\n \"eigen-logging\",\n \"eigen-types\",\n \"eigen-utils\",\n \"num-bigint\",\n \"thiserror 1.0.69\",\n \"tracing\",\n]\n\n[[package]]\nname = \"eigen-client-elcontracts\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c21afc43f721abbd0d49d42ad9ba26cb8ceed2eb86c3a056050d6945a8604780\"\ndependencies = [\n \"alloy\",\n \"eigen-common\",\n \"eigen-crypto-bls\",\n \"eigen-logging\",\n \"eigen-types\",\n \"eigen-utils\",\n \"thiserror 1.0.69\",\n \"tracing\",\n]\n\n[[package]]\nname = \"eigen-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"866a44244903cda1ea05d6f9cd2e5680a02236849c1290bf11cc8c3e305574b9\"\ndependencies = [\n \"alloy\",\n \"url\",\n]\n\n[[package]]\nname = \"eigen-crypto-bls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76af95503e08dfc9500910301220c4153d4de2345127326c5b4cf407fd1a02e2\"\ndependencies = [\n \"alloy\",\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-std 0.4.0\",\n \"eigen-crypto-bn254\",\n \"eigen-utils\",\n \"serde\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"eigen-crypto-bn254\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"039664a95a1c6e47fde635b9a5c07f3377901bf0463e10120f96627ac4386a8b\"\ndependencies = [\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"rust-bls-bn254\",\n]\n\n[[package]]\nname = \"eigen-logging\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2348fa5a3b774e75a6db59f389c04ee3edcabc182349eb8c4b5888ef68cd888\"\ndependencies = [\n \"ctor\",\n \"once_cell\",\n \"tracing\",\n \"tracing-subscriber 0.3.19\",\n]\n\n[[package]]\nname = \"eigen-services-avsregistry\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b84fc826c4bd9a019936469aa6da1a81ce23e8108c7e05459050f520751fc98d\"\ndependencies = [\n \"alloy\",\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"async-trait\",\n \"eigen-client-avsregistry\",\n \"eigen-crypto-bls\",\n \"eigen-services-operatorsinfo\",\n \"eigen-types\",\n \"eigen-utils\",\n]\n\n[[package]]\nname = \"eigen-services-blsaggregation\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89eae314e9bb7465bad361fb5d33d6ac5103e6fc700b86e2c8863104429e390d\"\ndependencies = [\n \"alloy\",\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"eigen-client-avsregistry\",\n \"eigen-common\",\n \"eigen-crypto-bls\",\n \"eigen-crypto-bn254\",\n \"eigen-logging\",\n \"eigen-services-avsregistry\",\n \"eigen-types\",\n \"parking_lot 0.12.3\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"tokio\",\n]\n\n[[package]]\nname = \"eigen-services-operatorsinfo\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f100e075eca078c7db5a49956d132a9a35e93044a2fc5de9d0da8e6f69f23bc\"\ndependencies = [\n \"alloy\",\n \"async-trait\",\n \"eigen-client-avsregistry\",\n \"eigen-common\",\n \"eigen-crypto-bls\",\n \"eigen-logging\",\n \"eigen-types\",\n \"eigen-utils\",\n \"eyre\",\n \"futures\",\n \"futures-util\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n]\n\n[[package]]\nname = \"eigen-signer\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aa4dbc5ac13e1ee9dd70df619baffa62d206412b7e89e081a7963d833645b62\"\ndependencies = [\n \"alloy\",\n \"async-trait\",\n \"aws-sdk-kms\",\n \"eth-keystore\",\n \"serde\",\n \"thiserror 1.0.69\",\n \"url\",\n]\n\n[[package]]\nname = \"eigen-types\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbaed5435c73bd3085feac3460a22d153ab472542caded78a7481a7a4247aab2\"\ndependencies = [\n \"alloy\",\n \"ark-ff 0.5.0\",\n \"eigen-crypto-bls\",\n \"eigen-utils\",\n \"ethers\",\n \"mime-sniffer\",\n \"num-bigint\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"url\",\n]\n\n[[package]]\nname = \"eigen-utils\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0813ece83d4e9c95eddad48bf6cbfe2e1c083ffbd9eac87a40d818225be31db0\"\ndependencies = [\n \"alloy\",\n \"regex\",\n \"reqwest 0.12.15\",\n]\n\n[[package]]\nname = \"eigensdk\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"755d34a0a79ad84792325ca94e7c5f72d7dc5dbe92cbdd51780fa8ac0b7ba7f6\"\ndependencies = [\n \"eigen-client-avsregistry\",\n \"eigen-client-elcontracts\",\n \"eigen-common\",\n \"eigen-crypto-bls\",\n \"eigen-crypto-bn254\",\n \"eigen-logging\",\n \"eigen-services-avsregistry\",\n \"eigen-services-blsaggregation\",\n \"eigen-services-operatorsinfo\",\n \"eigen-signer\",\n \"eigen-types\",\n \"eigen-utils\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48c757948c5ede0e46177b7add2e67155f70e33c07fea8284df6576da70b3719\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"elliptic-curve\"\nversion = \"0.13.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5e6043086bf7973472e0c7dff2142ea0b680d30e18d9cc40f267efbf222bd47\"\ndependencies = [\n \"base16ct\",\n \"crypto-bigint\",\n \"digest 0.10.7\",\n \"ff\",\n \"generic-array\",\n \"group\",\n \"pem-rfc7468\",\n \"pkcs8\",\n \"rand_core 0.6.4\",\n \"sec1\",\n \"serdect\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ena\"\nversion = \"0.14.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d248bdd43ce613d87415282f69b9bb99d947d290b10962dd6c56233312c2ad5\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75030f3c4f45dafd7586dd6780965a8c7e8e285a5ecb86713e63a79c5b2766f3\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"enr\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a3d8dc56e02f954cac8eb489772c552c473346fc34f67412bb6244fd647f7e4\"\ndependencies = [\n \"base64 0.21.7\",\n \"bytes\",\n \"hex\",\n \"k256\",\n \"log\",\n \"rand 0.8.5\",\n \"rlp\",\n \"serde\",\n \"sha3\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"enum-as-inner\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1e6a265c649f3f5979b601d26f1d05ada116434c87741c9493cb56218f76cbc\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"enum-ordinalize\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea0dcfa4e54eeb516fe454635a95753ddd39acda650ce703031c6973e315dd5\"\ndependencies = [\n \"enum-ordinalize-derive\",\n]\n\n[[package]]\nname = \"enum-ordinalize-derive\"\nversion = \"4.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d28318a75d4aead5c4db25382e8ef717932d0346600cacae6357eb5941bc5ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"enumflags2\"\nversion = \"0.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba2f4b465f5318854c6f8dd686ede6c0a9dc67d4b1ac241cf0eb51521a309147\"\ndependencies = [\n \"enumflags2_derive\",\n]\n\n[[package]]\nname = \"enumflags2_derive\"\nversion = \"0.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc4caf64a58d7a6d65ab00639b046ff54399a39f5f2554728895ace4b297cd79\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"enumn\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f9ed6b3789237c8a0c1c505af1c7eb2c560df6186f01b098c3a1064ea532f38\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580\"\ndependencies = [\n \"humantime\",\n \"is-terminal\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"environmental\"\nversion = \"1.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e48c92028aaa870e83d51c64e5d4e0b6981b360c522198c23959f219a4e1b15b\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"976dd42dc7e85965fe702eb8164f21f450704bdde31faefd6471dba214cb594e\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"etcetera\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"home\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"eth-keystore\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fda3bf123be441da5260717e0661c25a2fd9cb2b2c1d20bf2e05580047158ab\"\ndependencies = [\n \"aes\",\n \"ctr\",\n \"digest 0.10.7\",\n \"hex\",\n \"hmac 0.12.1\",\n \"pbkdf2 0.11.0\",\n \"rand 0.8.5\",\n \"scrypt 0.10.0\",\n \"serde\",\n \"serde_json\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"thiserror 1.0.69\",\n \"uuid 0.8.2\",\n]\n\n[[package]]\nname = \"ethabi\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7413c5f74cc903ea37386a8965a936cbeb334bd270862fdece542c1b2dcbc898\"\ndependencies = [\n \"ethereum-types\",\n \"hex\",\n \"once_cell\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sha3\",\n \"thiserror 1.0.69\",\n \"uint 0.9.5\",\n]\n\n[[package]]\nname = \"ethabi-decode\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09d398648d65820a727d6a81e58b962f874473396a047e4c30bafe3240953417\"\ndependencies = [\n \"ethereum-types\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"ethbloom\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c22d4b5885b6aa2fe5e8b9329fb8d232bf739e434e6b87347c63bdd00c120f60\"\ndependencies = [\n \"crunchy\",\n \"fixed-hash\",\n \"impl-codec 0.6.0\",\n \"impl-rlp\",\n \"impl-serde 0.4.0\",\n \"scale-info\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"ethereum-types\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02d215cbf040552efcbe99a38372fe80ab9d00268e20012b79fcd0f073edd8ee\"\ndependencies = [\n \"ethbloom\",\n \"fixed-hash\",\n \"impl-codec 0.6.0\",\n \"impl-rlp\",\n \"impl-serde 0.4.0\",\n \"primitive-types 0.12.2\",\n \"scale-info\",\n \"uint 0.9.5\",\n]\n\n[[package]]\nname = \"ethers\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"816841ea989f0c69e459af1cf23a6b0033b19a55424a1ea3a30099becdb8dec0\"\ndependencies = [\n \"ethers-addressbook\",\n \"ethers-contract\",\n \"ethers-core\",\n \"ethers-etherscan\",\n \"ethers-middleware\",\n \"ethers-providers\",\n \"ethers-signers\",\n \"ethers-solc\",\n]\n\n[[package]]\nname = \"ethers-addressbook\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5495afd16b4faa556c3bba1f21b98b4983e53c1755022377051a975c3b021759\"\ndependencies = [\n \"ethers-core\",\n \"once_cell\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"ethers-contract\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fceafa3578c836eeb874af87abacfb041f92b4da0a78a5edd042564b8ecdaaa\"\ndependencies = [\n \"const-hex\",\n \"ethers-contract-abigen\",\n \"ethers-contract-derive\",\n \"ethers-core\",\n \"ethers-providers\",\n \"futures-util\",\n \"once_cell\",\n \"pin-project\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"ethers-contract-abigen\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04ba01fbc2331a38c429eb95d4a570166781f14290ef9fdb144278a90b5a739b\"\ndependencies = [\n \"Inflector\",\n \"const-hex\",\n \"dunce\",\n \"ethers-core\",\n \"ethers-etherscan\",\n \"eyre\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"reqwest 0.11.27\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.100\",\n \"toml 0.8.20\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"ethers-contract-derive\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87689dcabc0051cde10caaade298f9e9093d65f6125c14575db3fd8c669a168f\"\ndependencies = [\n \"Inflector\",\n \"const-hex\",\n \"ethers-contract-abigen\",\n \"ethers-core\",\n \"proc-macro2\",\n \"quote\",\n \"serde_json\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ethers-core\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82d80cc6ad30b14a48ab786523af33b37f28a8623fc06afd55324816ef18fb1f\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"bytes\",\n \"cargo_metadata 0.18.1\",\n \"chrono\",\n \"const-hex\",\n \"elliptic-curve\",\n \"ethabi\",\n \"generic-array\",\n \"k256\",\n \"num_enum\",\n \"once_cell\",\n \"open-fastrlp\",\n \"rand 0.8.5\",\n \"rlp\",\n \"serde\",\n \"serde_json\",\n \"strum 0.26.3\",\n \"syn 2.0.100\",\n \"tempfile\",\n \"thiserror 1.0.69\",\n \"tiny-keccak\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"ethers-etherscan\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79e5973c26d4baf0ce55520bd732314328cabe53193286671b47144145b9649\"\ndependencies = [\n \"chrono\",\n \"ethers-core\",\n \"reqwest 0.11.27\",\n \"semver 1.0.26\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"tracing\",\n]\n\n[[package]]\nname = \"ethers-middleware\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48f9fdf09aec667c099909d91908d5eaf9be1bd0e2500ba4172c1d28bfaa43de\"\ndependencies = [\n \"async-trait\",\n \"auto_impl\",\n \"ethers-contract\",\n \"ethers-core\",\n \"ethers-etherscan\",\n \"ethers-providers\",\n \"ethers-signers\",\n \"futures-channel\",\n \"futures-locks\",\n \"futures-util\",\n \"instant\",\n \"reqwest 0.11.27\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tracing\",\n \"tracing-futures\",\n \"url\",\n]\n\n[[package]]\nname = \"ethers-providers\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6434c9a33891f1effc9c75472e12666db2fa5a0fec4b29af6221680a6fe83ab2\"\ndependencies = [\n \"async-trait\",\n \"auto_impl\",\n \"base64 0.21.7\",\n \"bytes\",\n \"const-hex\",\n \"enr\",\n \"ethers-core\",\n \"futures-core\",\n \"futures-timer\",\n \"futures-util\",\n \"hashers\",\n \"http 0.2.12\",\n \"instant\",\n \"jsonwebtoken\",\n \"once_cell\",\n \"pin-project\",\n \"reqwest 0.11.27\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-tungstenite 0.20.1\",\n \"tracing\",\n \"tracing-futures\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"ws_stream_wasm\",\n]\n\n[[package]]\nname = \"ethers-signers\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"228875491c782ad851773b652dd8ecac62cda8571d3bc32a5853644dd26766c2\"\ndependencies = [\n \"async-trait\",\n \"coins-bip32 0.8.7\",\n \"coins-bip39 0.8.7\",\n \"const-hex\",\n \"elliptic-curve\",\n \"eth-keystore\",\n \"ethers-core\",\n \"rand 0.8.5\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n \"tracing\",\n]\n\n[[package]]\nname = \"ethers-solc\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"66244a771d9163282646dbeffe0e6eca4dda4146b6498644e678ac6089b11edd\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"const-hex\",\n \"dirs 5.0.1\",\n \"dunce\",\n \"ethers-core\",\n \"glob\",\n \"home\",\n \"md-5\",\n \"num_cpus\",\n \"once_cell\",\n \"path-slash\",\n \"rayon\",\n \"regex\",\n \"semver 1.0.26\",\n \"serde\",\n \"serde_json\",\n \"solang-parser\",\n \"svm-rs\",\n \"thiserror 1.0.69\",\n \"tiny-keccak\",\n \"tokio\",\n \"tracing\",\n \"walkdir\",\n \"yansi\",\n]\n\n[[package]]\nname = \"event-listener\"\nversion = \"5.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3492acde4c3fc54c845eaab3eed8bd00c7a7d881f78bfc801e43a93dec1331ae\"\ndependencies = [\n \"concurrent-queue\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"event-listener-strategy\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8be9f3dfaaffdae2972880079a491a1a8bb7cbed0b8dd7a347f668b4150a3b93\"\ndependencies = [\n \"event-listener\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"expander\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2c470c71d91ecbd179935b24170459e926382eaaa86b590b78814e180d8a8e2\"\ndependencies = [\n \"blake2\",\n \"file-guard\",\n \"fs-err\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"eyre\"\nversion = \"0.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7cd915d99f24784cdc19fd37ef22b97e3ff0ae756c7e492e9fbfe897d61e2aec\"\ndependencies = [\n \"indenter\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be\"\n\n[[package]]\nname = \"fastrlp\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"139834ddba373bbdd213dffe02c8d110508dcf1726c2be27e8d1f7d7e1856418\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"auto_impl\",\n \"bytes\",\n]\n\n[[package]]\nname = \"fastrlp\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce8dba4714ef14b8274c371879b175aa55b16b30f269663f19d576f380018dc4\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"auto_impl\",\n \"bytes\",\n]\n\n[[package]]\nname = \"ff\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0b50bfb653653f9ca9095b427bed08ab8d75a137839d9ad64eb11810d5b6393\"\ndependencies = [\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"file-guard\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21ef72acf95ec3d7dbf61275be556299490a245f017cf084bd23b4f68cf9407c\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"file-per-thread-logger\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84f2e425d9790201ba4af4630191feac6dcc98765b118d4d18e91d23c2353866\"\ndependencies = [\n \"env_logger\",\n \"log\",\n]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"libredox\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"finality-grandpa\"\nversion = \"0.16.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4f8f43dc520133541781ec03a8cab158ae8b7f7169cdf22e9050aa6cf0fbdfc\"\ndependencies = [\n \"either\",\n \"futures\",\n \"futures-timer\",\n \"log\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand 0.8.5\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fixedbitset\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80\"\n\n[[package]]\nname = \"flate2\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ced92e76e966ca2fd84c8f7aa01a4aea65b0eb6648d72f7c8f3e2764a67fece\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide 0.8.8\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9c4f5dac5e15c24eb999c26181a6ca40b39fe946cbe4c263c7209467bc83af2\"\n\n[[package]]\nname = \"foo-blueprint-bin\"\nversion = \"0.1.0\"\ndependencies = [\n \"blueprint-sdk\",\n \"foo-blueprint-lib\",\n \"tokio\",\n \"tower\",\n \"tracing\",\n \"tracing-subscriber 0.3.19\",\n]\n\n[[package]]\nname = \"foo-blueprint-lib\"\nversion = \"0.1.0\"\ndependencies = [\n \"blueprint-sdk\",\n \"color-eyre\",\n \"tokio\",\n]\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"frame-benchmarking\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a01bdd47c2d541b38bd892da647d1e972c9d85b4ecd7094ad64f7600175da54d\"\ndependencies = [\n \"frame-support\",\n \"frame-support-procedural\",\n \"frame-system\",\n \"linregress\",\n \"log\",\n \"parity-scale-codec\",\n \"paste\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-runtime-interface\",\n \"sp-storage\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"frame-benchmarking-pallet-pov\"\nversion = \"28.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ffde6f573a63eeb1ccb7d2667c5741a11ce93bc30f33712e5326b9d8a811c29\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"frame-decode\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7af3d1149d6063985bb62d97f3ea83060ce4d6f2d04c21f551d270e8d84a27c\"\ndependencies = [\n \"frame-metadata 18.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-info\",\n \"scale-type-resolver\",\n \"sp-crypto-hashing\",\n]\n\n[[package]]\nname = \"frame-election-provider-solution-type\"\nversion = \"14.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8156f209055d352994ecd49e19658c6b469d7c6de923bd79868957d0dcfb6f71\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"frame-election-provider-support\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c36f5116192c63d39f1b4556fa30ac7db5a6a52575fa241b045f7dfa82ecc2be\"\ndependencies = [\n \"frame-election-provider-solution-type\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-npos-elections\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"frame-executive\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c365bf3879de25bbee28e9584096955a02fbe8d7e7624e10675800317f1cee5b\"\ndependencies = [\n \"aquamarine\",\n \"frame-support\",\n \"frame-system\",\n \"frame-try-runtime\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-tracing\",\n]\n\n[[package]]\nname = \"frame-metadata\"\nversion = \"16.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cf1549fba25a6fcac22785b61698317d958e96cac72a59102ea45b9ae64692\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"frame-metadata\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daaf440c68eb2c3d88e5760fe8c7af3f9fee9181fab6c2f2c4e7cc48dcc40bb8\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"frame-metadata-hash-extension\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56ac71dbd97039c49fdd69f416a4dd5d8da3652fdcafc3738b45772ad79eb4ec\"\ndependencies = [\n \"array-bytes\",\n \"docify\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"frame-support\"\nversion = \"38.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7dd8b9f161a8289e3b9fe6c1068519358dbff2270d38097a923d3d1b4459dca\"\ndependencies = [\n \"aquamarine\",\n \"array-bytes\",\n \"bitflags 1.3.2\",\n \"docify\",\n \"environmental\",\n \"frame-metadata 16.0.0\",\n \"frame-support-procedural\",\n \"impl-trait-for-tuples\",\n \"k256\",\n \"log\",\n \"macro_magic\",\n \"parity-scale-codec\",\n \"paste\",\n \"scale-info\",\n \"serde\",\n \"serde_json\",\n \"smallvec\",\n \"sp-api\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-crypto-hashing-proc-macro\",\n \"sp-debug-derive\",\n \"sp-genesis-builder\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-metadata-ir\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-tracing\",\n \"sp-weights\",\n \"static_assertions\",\n \"tt-call\",\n]\n\n[[package]]\nname = \"frame-support-procedural\"\nversion = \"30.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da784d943f2a945be923ab081a7c0837355b38045c50945d7ec1a138e2f3c52\"\ndependencies = [\n \"Inflector\",\n \"cfg-expr\",\n \"derive-syn-parse\",\n \"docify\",\n \"expander\",\n \"frame-support-procedural-tools\",\n \"itertools 0.11.0\",\n \"macro_magic\",\n \"proc-macro-warning\",\n \"proc-macro2\",\n \"quote\",\n \"sp-crypto-hashing\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"frame-support-procedural-tools\"\nversion = \"13.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81a088fd6fda5f53ff0c17fc7551ce8bd0ead14ba742228443c8196296a7369b\"\ndependencies = [\n \"frame-support-procedural-tools-derive\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"frame-support-procedural-tools-derive\"\nversion = \"12.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed971c6435503a099bdac99fe4c5bea08981709e5b5a0a8535a1856f48561191\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"frame-system\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3c7fa02f8c305496d2ae52edaecdb9d165f11afa965e05686d7d7dd1ce93611\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"docify\",\n \"frame-support\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-version\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"frame-system-benchmarking\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9693b2a736beb076e673520e1e8dee4fc128b8d35b020ef3e8a4b1b5ad63d9f2\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"frame-system-rpc-runtime-api\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"475c4f8604ba7e4f05cd2c881ba71105093e638b9591ec71a8db14a64b3b4ec3\"\ndependencies = [\n \"docify\",\n \"parity-scale-codec\",\n \"sp-api\",\n]\n\n[[package]]\nname = \"frame-try-runtime\"\nversion = \"0.44.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83c811a5a1f5429c7fb5ebbf6cf9502d8f9b673fd395c12cf46c44a30a7daf0e\"\ndependencies = [\n \"frame-support\",\n \"parity-scale-codec\",\n \"sp-api\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"fs-err\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88a41f105fe1d5b6b34b2055e3dc59bb79b46b48b2040b9e6c7b4b5de097aa41\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"fs_extra\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42703706b716c37f96a77aea830392ad231f44c9e9a67872fa5548707e11b11c\"\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-bounded\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91f328e7fb845fc832912fb6a34f40cf6d1888c92f974d1893a54e97b5ff542e\"\ndependencies = [\n \"futures-timer\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5edaec856126859abb19ed65f39e90fea3a9574b9707f13539acf4abf7eb532\"\ndependencies = [\n \"fastrand\",\n \"futures-core\",\n \"futures-io\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"futures-locks\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45ec6fe3675af967e67c5536c0b9d44e34e6c52f86bedc4ea49c5317b8e94d06\"\ndependencies = [\n \"futures-channel\",\n \"futures-task\",\n]\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"futures-rustls\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f2f12607f92c69b12ed746fabf9ca4f5c482cba46679c1a75b874ed7c26adb\"\ndependencies = [\n \"futures-io\",\n \"rustls 0.23.26\",\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988\"\n\n[[package]]\nname = \"futures-timer\"\nversion = \"3.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f288b0a4f20f9a56b5d1da57e2227c661b7b16168e2f72365f57b63326e29b24\"\ndependencies = [\n \"gloo-timers\",\n \"send_wrapper 0.4.0\",\n]\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"futures-utils-wasm\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42012b0f064e01aa58b545fe3727f90f7dd4020f4a3ea735b50344965f5a57e9\"\n\n[[package]]\nname = \"fxhash\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"generator\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc6bd114ceda131d3b1d665eba35788690ad37f5916457286b32ab6fd3c438dd\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"log\",\n \"rustversion\",\n \"windows 0.58.0\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"js-sys\",\n \"libc\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73fea8450eea4bac3940448fb7ae50d91f034f941199fcd9d909a5a07aa455f0\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"js-sys\",\n \"libc\",\n \"r-efi\",\n \"wasi 0.14.2+wasi-0.2.4\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand 0.8.5\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"ghash\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0d8a4362ccb29cb0b265253fb0a2728f592895ee6854fd9bc13f2ffda266ff1\"\ndependencies = [\n \"opaque-debug\",\n \"polyval\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.27.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c80984affa11d98d1b88b66ac8853f143217b399d3c74116778ff8fdb4ed2e\"\ndependencies = [\n \"fallible-iterator 0.2.0\",\n \"indexmap 1.9.3\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253\"\ndependencies = [\n \"fallible-iterator 0.3.0\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8d1add55171497b4705a648c6b583acafb01d58050a51727785f0b2c8e0a2b2\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54a1028dfc5f5df5da8a56a73e6c153c9a9708ec57232470703592a3f18e49f5\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"log\",\n \"regex-automata 0.4.9\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"gloo-timers\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b995a66bb87bebce9a0f4a95aed01daca4872c050bfcb21653361c03bc35e5c\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"group\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63\"\ndependencies = [\n \"ff\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http 0.2.12\",\n \"indexmap 2.9.0\",\n \"slab\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n \"tracing\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75249d144030531f8dee69fe9cea04d3edf809a017ae445e2abdff6629e86633\"\ndependencies = [\n \"atomic-waker\",\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"http 1.3.1\",\n \"indexmap 2.9.0\",\n \"slab\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hash-db\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e7d7786361d7425ae2fe4f9e407eb0efaa0840f5212d109cc018c40c35c6ab4\"\n\n[[package]]\nname = \"hash256-std-hasher\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92c171d55b98633f4ed3860808f004099b36c1cc29c42cfc53aa8591b21efcf2\"\ndependencies = [\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.8\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\n \"ahash 0.8.11\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash 0.8.11\",\n \"allocator-api2\",\n \"serde\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\ndependencies = [\n \"allocator-api2\",\n \"equivalent\",\n \"foldhash\",\n \"serde\",\n]\n\n[[package]]\nname = \"hashers\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2bca93b15ea5a746f220e56587f71e73c6165eab783df9e26590069953e3c30\"\ndependencies = [\n \"fxhash\",\n]\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af\"\ndependencies = [\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbd780fe5cc30f81464441920d82ac8740e2e46b29a6fad543ddd075229ce37e\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"212ab92002354b4819390025006c897e8140934349e8635c9b077f47b4dcbd20\"\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5313b072ce3c597065a808dbf612c4c8e8590bdbf8b579508bf7a762c5eae6cd\"\ndependencies = [\n \"arrayvec 0.7.6\",\n]\n\n[[package]]\nname = \"hex-literal\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fe2267d4ed49bc07b63801559be28c718ea06c4738b7a03c94df7386d2cde46\"\n\n[[package]]\nname = \"hex_fmt\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b07f60793ff0a4d9cef0f18e63b5357e06209987153a64648c972c1e5aff336f\"\n\n[[package]]\nname = \"hickory-proto\"\nversion = \"0.25.0-alpha.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d00147af6310f4392a31680db52a3ed45a2e0f68eb18e8c3fe5537ecc96d9e2\"\ndependencies = [\n \"async-recursion\",\n \"async-trait\",\n \"cfg-if 1.0.0\",\n \"data-encoding\",\n \"enum-as-inner\",\n \"futures-channel\",\n \"futures-io\",\n \"futures-util\",\n \"idna\",\n \"ipnet\",\n \"once_cell\",\n \"rand 0.9.1\",\n \"socket2\",\n \"thiserror 2.0.12\",\n \"tinyvec\",\n \"tokio\",\n \"tracing\",\n \"url\",\n]\n\n[[package]]\nname = \"hickory-resolver\"\nversion = \"0.25.0-alpha.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5762f69ebdbd4ddb2e975cd24690bf21fe6b2604039189c26acddbc427f12887\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"futures-util\",\n \"hickory-proto\",\n \"ipconfig\",\n \"moka\",\n \"once_cell\",\n \"parking_lot 0.12.3\",\n \"rand 0.9.1\",\n \"resolv-conf\",\n \"smallvec\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hkdf\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b5f8eb2ad728638ea2c7d47a21db23b7b58a72ed6a38256b8a1849f15fbbdf7\"\ndependencies = [\n \"hmac 0.12.1\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"126888268dcc288495a26bf004b38c5fdbb31682f992c84ceb046a1f0fe38840\"\ndependencies = [\n \"crypto-mac\",\n \"digest 0.9.0\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"hmac-drbg\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17ea0a1394df5b6574da6e0c1ade9e78868c9fb0a4e5ef4428e32da4676b85b1\"\ndependencies = [\n \"digest 0.9.0\",\n \"generic-array\",\n \"hmac 0.8.1\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"hostname\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a56f203cd1c76362b69e3863fd987520ac36cf70a8c92627449b2f64a8cf7d65\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"windows-link\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4a85d31aea989eead29a3aaf9e1115a180df8282431156e533de47660892565\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2\"\ndependencies = [\n \"bytes\",\n \"http 0.2.12\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184\"\ndependencies = [\n \"bytes\",\n \"http 1.3.1\",\n]\n\n[[package]]\nname = \"http-body-util\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b021d93e26becf5dc7e1b75b1bed1fd93124b374ceb73f43d4d4eafec896a64a\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"http 1.3.1\",\n \"http-body 1.0.1\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dbf3de79e51f3d586ab4cb9d5c3e2c14aa28ed23d180cf89b4df0454a69cc87\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b112acc8b3adf4b107a8ec20977da0273a8c386765a3ec0229bd500a1443f9f\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41dfc780fdec9373c01bae43289ea34c972e40ee3c9f6b3c8801a35f35586ce7\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2 0.3.26\",\n \"http 0.2.12\",\n \"http-body 0.4.6\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc2b571658e38e0c01b1fdca3bbbe93c00d3d71693ff2770043f8c29bc7d6f80\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-util\",\n \"h2 0.4.9\",\n \"http 1.3.1\",\n \"http-body 1.0.1\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"smallvec\",\n \"tokio\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-named-pipe\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b7d8abf35697b81a825e386fc151e0d503e8cb5fcb93cc8669c376dfd6f278\"\ndependencies = [\n \"hex\",\n \"hyper 1.6.0\",\n \"hyper-util\",\n \"pin-project-lite\",\n \"tokio\",\n \"tower-service\",\n \"winapi\",\n]\n\n[[package]]\nname = \"hyper-rustls\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590\"\ndependencies = [\n \"futures-util\",\n \"http 0.2.12\",\n \"hyper 0.14.32\",\n \"log\",\n \"rustls 0.21.12\",\n \"rustls-native-certs 0.6.3\",\n \"tokio\",\n \"tokio-rustls 0.24.1\",\n]\n\n[[package]]\nname = \"hyper-rustls\"\nversion = \"0.27.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d191583f3da1305256f22463b9bb0471acad48a4e534a5218b9963e9c1f59b2\"\ndependencies = [\n \"futures-util\",\n \"http 1.3.1\",\n \"hyper 1.6.0\",\n \"hyper-util\",\n \"rustls 0.23.26\",\n \"rustls-native-certs 0.8.1\",\n \"rustls-pki-types\",\n \"tokio\",\n \"tokio-rustls 0.26.2\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70206fc6890eaca9fde8a0bf71caa2ddfc9fe045ac9e5c70df101a7dbde866e0\"\ndependencies = [\n \"bytes\",\n \"http-body-util\",\n \"hyper 1.6.0\",\n \"hyper-util\",\n \"native-tls\",\n \"tokio\",\n \"tokio-native-tls\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"hyper-util\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"497bbc33a26fdd4af9ed9c70d63f61cf56a938375fbb32df34db9b1cd6d643f2\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-util\",\n \"http 1.3.1\",\n \"http-body 1.0.1\",\n \"hyper 1.6.0\",\n \"libc\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hyperlocal\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"986c5ce3b994526b3cd75578e62554abd09f0899d6206de48b3e96ab34ccc8c7\"\ndependencies = [\n \"hex\",\n \"http-body-util\",\n \"hyper 1.6.0\",\n \"hyper-util\",\n \"pin-project-lite\",\n \"tokio\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"log\",\n \"wasm-bindgen\",\n \"windows-core 0.61.0\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7515e6d781098bf9f7205ab3fc7e9709d34554ae0b21ddbcb5febfa4bc7df11d\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5e8338228bdc8ab83303f16b797e177953730f601a96c25d10cb3ab0daa0cb7\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85fb8799753b75aee8d2a21d7c14d9f38921b54b3dbda10f5a3c7a7b82dba5e2\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"if-addrs\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cabb0019d51a643781ff15c9c8a3e5dedc365c47211270f4e8f82812fedd8f0a\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"if-watch\"\nversion = \"3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdf9d64cfcf380606e64f9a0bcf493616b65331199f984151a6fa11a7b3cde38\"\ndependencies = [\n \"async-io\",\n \"core-foundation 0.9.4\",\n \"fnv\",\n \"futures\",\n \"if-addrs\",\n \"ipnet\",\n \"log\",\n \"netlink-packet-core\",\n \"netlink-packet-route\",\n \"netlink-proto\",\n \"netlink-sys\",\n \"rtnetlink\",\n \"system-configuration 0.6.1\",\n \"tokio\",\n \"windows 0.53.0\",\n]\n\n[[package]]\nname = \"igd-next\"\nversion = \"0.15.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76b0d7d4541def58a37bf8efc559683f21edce7c82f0d866c93ac21f7e098f93\"\ndependencies = [\n \"async-trait\",\n \"attohttpc\",\n \"bytes\",\n \"futures\",\n \"http 1.3.1\",\n \"http-body-util\",\n \"hyper 1.6.0\",\n \"hyper-util\",\n \"log\",\n \"rand 0.8.5\",\n \"tokio\",\n \"url\",\n \"xmltree\",\n]\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d40b9d5e17727407e55028eafc22b2dc68781786e6d7eb8a21103f5058e3a14\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-rlp\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f28220f89297a075ddc7245cd538076ee98b01f2a9c23a53a4f1105d5a322808\"\ndependencies = [\n \"rlp\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a143eada6a1ec4aefa5049037a26a6d597bfd64f8c026d07b77133e02b7dd0b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"include_dir\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"923d117408f1e49d914f1a379a309cffe4f18c05cf4e3d12e613a15fc81bd0dd\"\ndependencies = [\n \"include_dir_macros\",\n]\n\n[[package]]\nname = \"include_dir_macros\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7cab85a7ed0bd5f0e76d93846e0147172bed2e2d3f859bcc33a8d9699cad1a75\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"indenter\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n \"serde\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cea70ddb795996207ad57735b50c5982d8844f38ba9ee5f1aedcfb708a2aa11e\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.2\",\n \"serde\",\n]\n\n[[package]]\nname = \"indexmap-nostd\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e04e2fd2b8188ea827b32ef11de88377086d690286ab35747ef7f9bf3ccb590\"\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.17.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"183b3088984b400f4cfac3620d5e076c84da5364016b4f49473de574b2586235\"\ndependencies = [\n \"console\",\n \"number_prefix\",\n \"portable-atomic\",\n \"web-time\",\n]\n\n[[package]]\nname = \"inout\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"879f10e63c20629ecabbb64a8010319738c66a5cd0c29b02d63d272b03751d01\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"integer-sqrt\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"276ec31bcb4a9ee45f58bec6f9ec700ae4cf4f4f8f2fa7e06cb406bd5ffdd770\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"interprocess\"\nversion = \"2.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d941b405bd2322993887859a8ee6ac9134945a24ec5ec763a8a962fc64dfec2d\"\ndependencies = [\n \"doctest-file\",\n \"futures-core\",\n \"libc\",\n \"recvmsg\",\n \"tokio\",\n \"widestring\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2\"\ndependencies = [\n \"hermit-abi 0.3.9\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"ipconfig\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b58db92f96b720de98181bbbe63c831e87005ab460c1bf306eb2622b4707997f\"\ndependencies = [\n \"socket2\",\n \"widestring\",\n \"windows-sys 0.48.0\",\n \"winreg\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"469fb0b9cefa57e3ef31275ee7cacb78f2fdca44e4765491884a2b119d4eb130\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e04d7f318608d35d4b61ddd75cbdaee86b023ebe2bd5a66ee0915f0bf93095a9\"\ndependencies = [\n \"hermit-abi 0.5.0\",\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1c173a5686ce8bfa551b3563d0c2170bf24ca44da99c7ca4bfdab5418c3fe57\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b192c782037fadd9cfa75548310488aabdbf3d2da73885b31bd0abd03351285\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c\"\n\n[[package]]\nname = \"jni\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97\"\ndependencies = [\n \"cesu8\",\n \"cfg-if 1.0.0\",\n \"combine\",\n \"jni-sys\",\n \"log\",\n \"thiserror 1.0.69\",\n \"walkdir\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"jni-sys\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38f262f097c174adebe41eb73d66ae9c06b2844fb0da69969647bbddd9b0538a\"\ndependencies = [\n \"getrandom 0.3.2\",\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.77\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f\"\ndependencies = [\n \"once_cell\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"jsonrpc-core\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14f7f76aef2d054868398427f6c54943cf3d1caa9a7ec7d0c38d69df97a965eb\"\ndependencies = [\n \"futures\",\n \"futures-executor\",\n \"futures-util\",\n \"log\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"jsonrpc-http-server\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1dea6e07251d9ce6a552abfb5d7ad6bc290a4596c8dcc3d795fae2bbdc1f3ff\"\ndependencies = [\n \"futures\",\n \"hyper 0.14.32\",\n \"jsonrpc-core\",\n \"jsonrpc-server-utils\",\n \"log\",\n \"net2\",\n \"parking_lot 0.11.2\",\n \"unicase\",\n]\n\n[[package]]\nname = \"jsonrpc-server-utils\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4fdea130485b572c39a460d50888beb00afb3e35de23ccd7fad8ff19f0e0d4\"\ndependencies = [\n \"bytes\",\n \"futures\",\n \"globset\",\n \"jsonrpc-core\",\n \"lazy_static\",\n \"log\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-util 0.6.10\",\n \"unicase\",\n]\n\n[[package]]\nname = \"jsonrpsee\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37b26c20e2178756451cfeb0661fb74c47dd5988cb7e3939de7e9241fd604d42\"\ndependencies = [\n \"jsonrpsee-client-transport\",\n \"jsonrpsee-core\",\n \"jsonrpsee-types\",\n \"jsonrpsee-ws-client\",\n]\n\n[[package]]\nname = \"jsonrpsee-client-transport\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bacb85abf4117092455e1573625e21b8f8ef4dec8aff13361140b2dc266cdff2\"\ndependencies = [\n \"base64 0.22.1\",\n \"futures-util\",\n \"http 1.3.1\",\n \"jsonrpsee-core\",\n \"pin-project\",\n \"rustls 0.23.26\",\n \"rustls-pki-types\",\n \"rustls-platform-verifier\",\n \"soketto\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-rustls 0.26.2\",\n \"tokio-util 0.7.14\",\n \"tracing\",\n \"url\",\n]\n\n[[package]]\nname = \"jsonrpsee-core\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"456196007ca3a14db478346f58c7238028d55ee15c1df15115596e411ff27925\"\ndependencies = [\n \"async-trait\",\n \"futures-timer\",\n \"futures-util\",\n \"jsonrpsee-types\",\n \"pin-project\",\n \"rustc-hash 2.1.1\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"tokio-stream\",\n \"tracing\",\n]\n\n[[package]]\nname = \"jsonrpsee-types\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08a8e70baf945b6b5752fc8eb38c918a48f1234daf11355e07106d963f860089\"\ndependencies = [\n \"http 1.3.1\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"jsonrpsee-ws-client\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01b3323d890aa384f12148e8d2a1fd18eb66e9e7e825f9de4fa53bcc19b93eef\"\ndependencies = [\n \"http 1.3.1\",\n \"jsonrpsee-client-transport\",\n \"jsonrpsee-core\",\n \"jsonrpsee-types\",\n \"url\",\n]\n\n[[package]]\nname = \"jsonwebtoken\"\nversion = \"8.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6971da4d9c3aa03c3d8f3ff0f4155b534aad021292003895a469716b2a230378\"\ndependencies = [\n \"base64 0.21.7\",\n \"pem 1.1.1\",\n \"ring 0.16.20\",\n \"serde\",\n \"serde_json\",\n \"simple_asn1\",\n]\n\n[[package]]\nname = \"k256\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6e3919bbaa2945715f0bb6d3934a173d1e9a59ac23767fbaaef277265a7411b\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"ecdsa\",\n \"elliptic-curve\",\n \"once_cell\",\n \"serdect\",\n \"sha2 0.10.8\",\n \"signature\",\n]\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"keccak-asm\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"505d1856a39b200489082f90d897c3f07c455563880bc5952e38eabf731c83b6\"\ndependencies = [\n \"digest 0.10.7\",\n \"sha3-asm\",\n]\n\n[[package]]\nname = \"keccak-hash\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e1b8590eb6148af2ea2d75f38e7d29f5ca970d5a4df456b3ef19b8b415d0264\"\ndependencies = [\n \"primitive-types 0.13.1\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"lalrpop\"\nversion = \"0.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cb077ad656299f160924eb2912aa147d7339ea7d69e1b5517326fdcec3c1ca\"\ndependencies = [\n \"ascii-canvas\",\n \"bit-set 0.5.3\",\n \"ena\",\n \"itertools 0.11.0\",\n \"lalrpop-util\",\n \"petgraph\",\n \"regex\",\n \"regex-syntax 0.8.5\",\n \"string_cache\",\n \"term\",\n \"tiny-keccak\",\n \"unicode-xid\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"lalrpop-util\"\nversion = \"0.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"507460a910eb7b32ee961886ff48539633b788a36b65692b95f225b844c82553\"\ndependencies = [\n \"regex-automata 0.4.9\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.172\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d750af042f7ef4f724306de029d18836c26c1765a54a6a3f094cbd23a7267ffa\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8355be11b20d696c8f18f6cc018c4e372165b1fa8126cef092399c9951984ffa\"\n\n[[package]]\nname = \"libp2p\"\nversion = \"0.55.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b72dc443ddd0254cb49a794ed6b6728400ee446a0f7ab4a07d0209ee98de20e9\"\ndependencies = [\n \"bytes\",\n \"either\",\n \"futures\",\n \"futures-timer\",\n \"getrandom 0.2.15\",\n \"libp2p-allow-block-list\",\n \"libp2p-autonat\",\n \"libp2p-connection-limits\",\n \"libp2p-core\",\n \"libp2p-dcutr\",\n \"libp2p-dns\",\n \"libp2p-gossipsub\",\n \"libp2p-identify\",\n \"libp2p-identity\",\n \"libp2p-kad\",\n \"libp2p-mdns\",\n \"libp2p-metrics\",\n \"libp2p-noise\",\n \"libp2p-ping\",\n \"libp2p-quic\",\n \"libp2p-relay\",\n \"libp2p-request-response\",\n \"libp2p-swarm\",\n \"libp2p-tcp\",\n \"libp2p-upnp\",\n \"libp2p-yamux\",\n \"multiaddr\",\n \"pin-project\",\n \"rw-stream-sink\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"libp2p-allow-block-list\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38944b7cb981cc93f2f0fb411ff82d0e983bd226fbcc8d559639a3a73236568b\"\ndependencies = [\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n]\n\n[[package]]\nname = \"libp2p-autonat\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e297bfc6cabb70c6180707f8fa05661b77ecb9cb67e8e8e1c469301358fa21d0\"\ndependencies = [\n \"async-trait\",\n \"asynchronous-codec\",\n \"either\",\n \"futures\",\n \"futures-bounded\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-request-response\",\n \"libp2p-swarm\",\n \"quick-protobuf\",\n \"quick-protobuf-codec\",\n \"rand 0.8.5\",\n \"rand_core 0.6.4\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-connection-limits\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efe9323175a17caa8a2ed4feaf8a548eeef5e0b72d03840a0eab4bcb0210ce1c\"\ndependencies = [\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n]\n\n[[package]]\nname = \"libp2p-core\"\nversion = \"0.43.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"193c75710ba43f7504ad8f58a62ca0615b1d7e572cb0f1780bc607252c39e9ef\"\ndependencies = [\n \"either\",\n \"fnv\",\n \"futures\",\n \"futures-timer\",\n \"libp2p-identity\",\n \"multiaddr\",\n \"multihash\",\n \"multistream-select\",\n \"once_cell\",\n \"parking_lot 0.12.3\",\n \"pin-project\",\n \"quick-protobuf\",\n \"rand 0.8.5\",\n \"rw-stream-sink\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"unsigned-varint 0.8.0\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-dcutr\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a6c2c365b66866da34d06dfe41e001b49b9cfb5cafff6b9c4718eb2da7e35a4\"\ndependencies = [\n \"asynchronous-codec\",\n \"either\",\n \"futures\",\n \"futures-bounded\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"lru 0.12.5\",\n \"quick-protobuf\",\n \"quick-protobuf-codec\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-dns\"\nversion = \"0.43.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b780a1150214155b0ed1cdf09fbd2e1b0442604f9146a431d1b21d23eef7bd7\"\ndependencies = [\n \"async-trait\",\n \"futures\",\n \"hickory-resolver\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"parking_lot 0.12.3\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-gossipsub\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d558548fa3b5a8e9b66392f785921e363c57c05dcadfda4db0d41ae82d313e4a\"\ndependencies = [\n \"async-channel\",\n \"asynchronous-codec\",\n \"base64 0.22.1\",\n \"byteorder\",\n \"bytes\",\n \"either\",\n \"fnv\",\n \"futures\",\n \"futures-timer\",\n \"getrandom 0.2.15\",\n \"hashlink\",\n \"hex_fmt\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"prometheus-client\",\n \"quick-protobuf\",\n \"quick-protobuf-codec\",\n \"rand 0.8.5\",\n \"regex\",\n \"serde\",\n \"sha2 0.10.8\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-identify\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8c06862544f02d05d62780ff590cc25a75f5c2b9df38ec7a370dcae8bb873cf\"\ndependencies = [\n \"asynchronous-codec\",\n \"either\",\n \"futures\",\n \"futures-bounded\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"quick-protobuf\",\n \"quick-protobuf-codec\",\n \"smallvec\",\n \"thiserror 2.0.12\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-identity\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"257b5621d159b32282eac446bed6670c39c7dc68a200a992d8f056afa0066f6d\"\ndependencies = [\n \"bs58\",\n \"ed25519-dalek\",\n \"hkdf\",\n \"multihash\",\n \"quick-protobuf\",\n \"rand 0.8.5\",\n \"serde\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n \"tracing\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"libp2p-kad\"\nversion = \"0.47.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bab0466a27ebe955bcbc27328fae5429c5b48c915fd6174931414149802ec23\"\ndependencies = [\n \"asynchronous-codec\",\n \"bytes\",\n \"either\",\n \"fnv\",\n \"futures\",\n \"futures-bounded\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"quick-protobuf\",\n \"quick-protobuf-codec\",\n \"rand 0.8.5\",\n \"serde\",\n \"sha2 0.10.8\",\n \"smallvec\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"uint 0.10.0\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-mdns\"\nversion = \"0.47.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d0ba095e1175d797540e16b62e7576846b883cb5046d4159086837b36846cc\"\ndependencies = [\n \"futures\",\n \"hickory-proto\",\n \"if-watch\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"rand 0.8.5\",\n \"smallvec\",\n \"socket2\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-metrics\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ce58c64292e87af624fcb86465e7dd8342e46a388d71e8fec0ab37ee789630a\"\ndependencies = [\n \"futures\",\n \"libp2p-core\",\n \"libp2p-dcutr\",\n \"libp2p-gossipsub\",\n \"libp2p-identify\",\n \"libp2p-identity\",\n \"libp2p-kad\",\n \"libp2p-ping\",\n \"libp2p-relay\",\n \"libp2p-swarm\",\n \"pin-project\",\n \"prometheus-client\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-noise\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afcc133e0f3cea07acde6eb8a9665cb11b600bd61110b010593a0210b8153b16\"\ndependencies = [\n \"asynchronous-codec\",\n \"bytes\",\n \"futures\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"multiaddr\",\n \"multihash\",\n \"once_cell\",\n \"quick-protobuf\",\n \"rand 0.8.5\",\n \"snow\",\n \"static_assertions\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"x25519-dalek\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"libp2p-ping\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b2529993ff22deb2504c0130a58b60fb77f036be555053922db1a0490b5798b\"\ndependencies = [\n \"futures\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"rand 0.8.5\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-quic\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41432a159b00424a0abaa2c80d786cddff81055ac24aa127e0cf375f7858d880\"\ndependencies = [\n \"futures\",\n \"futures-timer\",\n \"if-watch\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-tls\",\n \"quinn\",\n \"rand 0.8.5\",\n \"ring 0.17.14\",\n \"rustls 0.23.26\",\n \"socket2\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-relay\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08a41e346681395877118c270cf993f90d57d045fbf0913ca2f07b59ec6062e4\"\ndependencies = [\n \"asynchronous-codec\",\n \"bytes\",\n \"either\",\n \"futures\",\n \"futures-bounded\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"quick-protobuf\",\n \"quick-protobuf-codec\",\n \"rand 0.8.5\",\n \"static_assertions\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-request-response\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"548fe44a80ff275d400f1b26b090d441d83ef73efabbeb6415f4ce37e5aed865\"\ndependencies = [\n \"async-trait\",\n \"cbor4ii\",\n \"futures\",\n \"futures-bounded\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm\",\n \"rand 0.8.5\",\n \"serde\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-swarm\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"803399b4b6f68adb85e63ab573ac568154b193e9a640f03e0f2890eabbcb37f8\"\ndependencies = [\n \"either\",\n \"fnv\",\n \"futures\",\n \"futures-timer\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"libp2p-swarm-derive\",\n \"lru 0.12.5\",\n \"multistream-select\",\n \"once_cell\",\n \"rand 0.8.5\",\n \"smallvec\",\n \"tokio\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"libp2p-swarm-derive\"\nversion = \"0.35.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"206e0aa0ebe004d778d79fb0966aa0de996c19894e2c0605ba2f8524dd4443d8\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"libp2p-tcp\"\nversion = \"0.43.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65346fb4d36035b23fec4e7be4c320436ba53537ce9b6be1d1db1f70c905cad0\"\ndependencies = [\n \"futures\",\n \"futures-timer\",\n \"if-watch\",\n \"libc\",\n \"libp2p-core\",\n \"socket2\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-tls\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42bbf5084fb44133267ad4caaa72a253d68d709edd2ed1cf9b42431a8ead8fd5\"\ndependencies = [\n \"futures\",\n \"futures-rustls\",\n \"libp2p-core\",\n \"libp2p-identity\",\n \"rcgen\",\n \"ring 0.17.14\",\n \"rustls 0.23.26\",\n \"rustls-webpki 0.101.7\",\n \"thiserror 2.0.12\",\n \"x509-parser\",\n \"yasna\",\n]\n\n[[package]]\nname = \"libp2p-upnp\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d457b9ecceb66e7199f049926fad447f1f17f040e8d29d690c086b4cab8ed14a\"\ndependencies = [\n \"futures\",\n \"futures-timer\",\n \"igd-next\",\n \"libp2p-core\",\n \"libp2p-swarm\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"libp2p-yamux\"\nversion = \"0.47.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f15df094914eb4af272acf9adaa9e287baa269943f32ea348ba29cfb9bfc60d8\"\ndependencies = [\n \"either\",\n \"futures\",\n \"libp2p-core\",\n \"thiserror 2.0.12\",\n \"tracing\",\n \"yamux 0.12.1\",\n \"yamux 0.13.4\",\n]\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"libc\",\n \"redox_syscall 0.5.11\",\n]\n\n[[package]]\nname = \"libsecp256k1\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79019718125edc905a079a70cfa5f3820bc76139fc91d6f9abc27ea2a887139\"\ndependencies = [\n \"arrayref\",\n \"base64 0.22.1\",\n \"digest 0.9.0\",\n \"hmac-drbg\",\n \"libsecp256k1-core\",\n \"libsecp256k1-gen-ecmult\",\n \"libsecp256k1-gen-genmult\",\n \"rand 0.8.5\",\n \"serde\",\n \"sha2 0.9.9\",\n \"typenum\",\n]\n\n[[package]]\nname = \"libsecp256k1-core\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5be9b9bb642d8522a44d533eab56c16c738301965504753b03ad1de3425d5451\"\ndependencies = [\n \"crunchy\",\n \"digest 0.9.0\",\n \"subtle\",\n]\n\n[[package]]\nname = \"libsecp256k1-gen-ecmult\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3038c808c55c87e8a172643a7d87187fc6c4174468159cb3090659d55bcb4809\"\ndependencies = [\n \"libsecp256k1-core\",\n]\n\n[[package]]\nname = \"libsecp256k1-gen-genmult\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3db8d6ba2cec9eacc40e6e8ccc98931840301f1006e95647ceb2dd5c3aa06f7c\"\ndependencies = [\n \"libsecp256k1-core\",\n]\n\n[[package]]\nname = \"link-cplusplus\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a6f6da007f968f9def0d65a05b187e2960183de70c160204ecfccf0ee330212\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"linregress\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9eda9dcf4f2a99787827661f312ac3219292549c2ee992bf9a6248ffb066bf7\"\ndependencies = [\n \"nalgebra\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f051f77a7c8e6957c0696eac88f26b0117e54f52d3fc682ab19397a8812846a4\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d26c52dbd32dccf2d10cac7725f8eae5296885fb5703b261f7d0a0739ec807ab\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23fb14cb19457329c82206317a5663005a4d404783dc74f4252769b0d5f42856\"\n\n[[package]]\nname = \"litrs\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4ce301924b7887e9d637144fdade93f9dfff9b60981d4ac161db09720d39aa5\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94\"\n\n[[package]]\nname = \"loom\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"419e0dc8046cb947daa77eb95ae174acfbddb7673b4151f56d1eed8e93fbfaca\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"generator\",\n \"scoped-tls\",\n \"tracing\",\n \"tracing-subscriber 0.3.19\",\n]\n\n[[package]]\nname = \"lru\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6e8aaa3f231bb4bd57b84b2d5dc3ae7f350265df8aa96492e0bc394a1571909\"\ndependencies = [\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"lru\"\nversion = \"0.12.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"234cf4f4a04dc1f57e24b96cc0cd600cf2af460d4161ac5ecdd0af8e1f3b2a38\"\ndependencies = [\n \"hashbrown 0.15.2\",\n]\n\n[[package]]\nname = \"lru\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"227748d55f2f0ab4735d87fd623798cb6b664512fe979705f829c9f81c934465\"\ndependencies = [\n \"hashbrown 0.15.2\",\n]\n\n[[package]]\nname = \"lru-mem\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf5c8c26d903a41c80d4cc171940a57a4d1bc51139ebd6aad87e2f9ae3774780\"\ndependencies = [\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"mach\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"macro-string\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b27834086c65ec3f9387b096d66e99f221cf081c2b738042aa252bcd41204e3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"macro_magic\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc33f9f0351468d26fbc53d9ce00a096c8522ecb42f19b50f34f2c422f76d21d\"\ndependencies = [\n \"macro_magic_core\",\n \"macro_magic_macros\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"macro_magic_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1687dc887e42f352865a393acae7cf79d98fab6351cde1f58e9e057da89bf150\"\ndependencies = [\n \"const-random\",\n \"derive-syn-parse\",\n \"macro_magic_core_macros\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"macro_magic_core_macros\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b02abfe41815b5bd98dbd4260173db2c116dda171dc0fe7838cb206333b83308\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"macro_magic_macros\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73ea28ee64b88876bf45277ed9a5817c1817df061a74f2b988971a12570e5869\"\ndependencies = [\n \"macro_magic_core\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"matrixmultiply\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9380b911e3e96d10c1f415da0876389aaf1b56759054eeb0de7df940c456ba1a\"\ndependencies = [\n \"autocfg\",\n \"rawpointer\",\n]\n\n[[package]]\nname = \"md-5\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memfd\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2cffa4ad52c6f791f4f8b15f0c05f9824b2ced1160e88cc393d64fff9a8ac64\"\ndependencies = [\n \"rustix 0.38.44\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"memory-db\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808b50db46293432a45e63bc15ea51e0ab4c0a1647b8eb114e31a3e698dd6fbe\"\ndependencies = [\n \"hash-db\",\n]\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core 0.6.4\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"metrics\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a7deb012b3b2767169ff203fadb4c6b0b82b947512e5eb9e0b78c2e186ad9e3\"\ndependencies = [\n \"ahash 0.8.11\",\n \"portable-atomic\",\n]\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"mime-sniffer\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b8b2a64cd735f1d5f17ff6701ced3cc3c54851f9448caf454cd9c923d812408\"\ndependencies = [\n \"mime\",\n \"url\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3be647b768db090acb35d5ec5db2b0e1f1de11133ca123b9eacf5137868f892a\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2886843bf800fba2e3377cff24abf6379b4c4d5c6681eaf9ea5b0d15090450bd\"\ndependencies = [\n \"libc\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"moka\"\nversion = \"0.12.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9321642ca94a4282428e6ea4af8cc2ca4eac48ac7a6a4ea8f33f76d0ce70926\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n \"loom\",\n \"parking_lot 0.12.3\",\n \"portable-atomic\",\n \"rustc_version 0.4.1\",\n \"smallvec\",\n \"tagptr\",\n \"thiserror 1.0.69\",\n \"uuid 1.16.0\",\n]\n\n[[package]]\nname = \"multi-stash\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"685a9ac4b61f4e728e1d2c6a7844609c16527aeb5e6c865915c08e619c16410f\"\n\n[[package]]\nname = \"multiaddr\"\nversion = \"0.18.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe6351f60b488e04c1d21bc69e56b89cb3f5e8f5d22557d6e8031bdfd79b6961\"\ndependencies = [\n \"arrayref\",\n \"byteorder\",\n \"data-encoding\",\n \"libp2p-identity\",\n \"multibase\",\n \"multihash\",\n \"percent-encoding\",\n \"serde\",\n \"static_assertions\",\n \"unsigned-varint 0.8.0\",\n \"url\",\n]\n\n[[package]]\nname = \"multibase\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b3539ec3c1f04ac9748a260728e855f261b4977f5c3406612c884564f329404\"\ndependencies = [\n \"base-x\",\n \"data-encoding\",\n \"data-encoding-macro\",\n]\n\n[[package]]\nname = \"multihash\"\nversion = \"0.19.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b430e7953c29dd6a09afc29ff0bb69c6e306329ee6794700aee27b76a1aea8d\"\ndependencies = [\n \"core2\",\n \"serde\",\n \"unsigned-varint 0.8.0\",\n]\n\n[[package]]\nname = \"multistream-select\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea0df8e5eec2298a62b326ee4f0d7fe1a6b90a09dfcf9df37b38f947a8c42f19\"\ndependencies = [\n \"bytes\",\n \"futures\",\n \"log\",\n \"pin-project\",\n \"smallvec\",\n \"unsigned-varint 0.7.2\",\n]\n\n[[package]]\nname = \"nalgebra\"\nversion = \"0.33.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26aecdf64b707efd1310e3544d709c5c0ac61c13756046aaaba41be5c4f66a3b\"\ndependencies = [\n \"approx\",\n \"matrixmultiply\",\n \"num-complex\",\n \"num-rational\",\n \"num-traits\",\n \"simba\",\n \"typenum\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87de3442987e9dbec73158d5c715e7ad9072fda936bb03d19d7fa10e00520f0e\"\ndependencies = [\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework 2.11.1\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"net2\"\nversion = \"0.2.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b13b648036a2339d06de780866fbdfda0dde886de7b3af2ddeba8b14f4ee34ac\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"netlink-packet-core\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72724faf704479d67b388da142b186f916188505e7e0b26719019c525882eda4\"\ndependencies = [\n \"anyhow\",\n \"byteorder\",\n \"netlink-packet-utils\",\n]\n\n[[package]]\nname = \"netlink-packet-route\"\nversion = \"0.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"053998cea5a306971f88580d0829e90f270f940befd7cf928da179d4187a5a66\"\ndependencies = [\n \"anyhow\",\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"libc\",\n \"netlink-packet-core\",\n \"netlink-packet-utils\",\n]\n\n[[package]]\nname = \"netlink-packet-utils\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ede8a08c71ad5a95cdd0e4e52facd37190977039a4704eb82a283f713747d34\"\ndependencies = [\n \"anyhow\",\n \"byteorder\",\n \"paste\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"netlink-proto\"\nversion = \"0.11.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72452e012c2f8d612410d89eea01e2d9b56205274abb35d53f60200b2ec41d60\"\ndependencies = [\n \"bytes\",\n \"futures\",\n \"log\",\n \"netlink-packet-core\",\n \"netlink-sys\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"netlink-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16c903aa70590cb93691bf97a767c8d1d6122d2cc9070433deb3bbf36ce8bd23\"\ndependencies = [\n \"bytes\",\n \"futures\",\n \"libc\",\n \"log\",\n \"tokio\",\n]\n\n[[package]]\nname = \"new_debug_unreachable\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"650eef8c711430f1a879fdd01d4745a7deea475becfb90269c06775983bbf086\"\n\n[[package]]\nname = \"nix\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"598beaf3cc6fdd9a5dfb1630c2800c7acd31df7aaf0f565796fba2b53ca1af1b\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if 1.0.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"nodrop\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n\n[[package]]\nname = \"nohash-hasher\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451\"\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n \"serde\",\n]\n\n[[package]]\nname = \"num-complex\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73f88a1307638156682bada9d7604135552957b7818057dcef22705b4d509495\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-conv\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n\n[[package]]\nname = \"num-derive\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed3955f1a9c7c0c15e092f9c887db08b1fc683305fdf6eb6684f22555355e202\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"num-format\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a652d9771a63711fd3c3deb670acfbe5c30a4072e664d7a3bf5a9e1056ac72c3\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"itoa\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f83d14da390562dca69fc84082e73e548e1ad308d24accdedd2720017cb37824\"\ndependencies = [\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi 0.3.9\",\n \"libc\",\n]\n\n[[package]]\nname = \"num_enum\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e613fc340b2220f734a8595782c551f1250e969d87d3be1ae0579e8d4065179\"\ndependencies = [\n \"num_enum_derive\",\n]\n\n[[package]]\nname = \"num_enum_derive\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af1844ef2428cc3e1cb900be36181049ef3d3193c63e43026cfe202983b27a56\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"nybbles\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8983bb634df7248924ee0c4c3a749609b5abcb082c28fffe3254b3eb3602b307\"\ndependencies = [\n \"alloy-rlp\",\n \"const-hex\",\n \"proptest\",\n \"serde\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.30.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03b4680b86d9cfafba8fc491dc9b6df26b68cf40e9e6cd73909194759a63c385\"\ndependencies = [\n \"crc32fast\",\n \"hashbrown 0.13.2\",\n \"indexmap 1.9.3\",\n \"memchr\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.32.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"oid-registry\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8d8034d9489cdaf79228eb9f6a3b8d7bb32ba00d6645ebd48eef4077ceb5bd9\"\ndependencies = [\n \"asn1-rs\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.21.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381\"\n\n[[package]]\nname = \"open-fastrlp\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"786393f80485445794f6043fd3138854dd109cc6c4bd1a6383db304c9ce9b9ce\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"auto_impl\",\n \"bytes\",\n \"ethereum-types\",\n \"open-fastrlp-derive\",\n]\n\n[[package]]\nname = \"open-fastrlp-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"003b2be5c6c53c1cfeb0a238b8a1c3915cd410feb684457a36c10038f764bb1c\"\ndependencies = [\n \"bytes\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fedfea7d58a1f73118430a55da6a286e7b044961736ce96a16a17068ea25e5da\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"cfg-if 1.0.0\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d05e27ee213611ffe7d6348b942e8f942b37114c00cc03cec254295a4a17852e\"\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.107\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8288979acd84749c744a9014b4382d42b8f7b2592847b5afb2ed29e5d16ede07\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"outref\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a80800c0488c3a21695ea981a54918fbb37abf04f4d0720c453632255e2ff0e\"\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"owo-colors\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1b04fb49957986fdce4d6ee7a65027d55d4b6d2265e5848bbb507b58ccfdb6f\"\n\n[[package]]\nname = \"pallet-alliance\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59378a648a0aa279a4b10650366c3389cd0a1239b1876f74bfecd268eecb086b\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-collective\",\n \"pallet-identity\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-crypto-hashing\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-asset-conversion\"\nversion = \"20.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33f0078659ae95efe6a1bf138ab5250bc41ab98f22ff3651d0208684f08ae797\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-asset-conversion-ops\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3edbeda834bcd6660f311d4eead3dabdf6d385b7308ac75b0fae941a960e6c3a\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-asset-conversion\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-asset-conversion-tx-payment\"\nversion = \"20.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ab66c4c22ac0f20e620a954ce7ba050118d6d8011e2d02df599309502064e98\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"pallet-asset-conversion\",\n \"pallet-transaction-payment\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-asset-rate\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71b2149aa741bc39466bbcc92d9d0ab6e9adcf39d2790443a735ad573b3191e7\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-asset-tx-payment\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"406a486466d15acc48c99420191f96f1af018f3381fde829c467aba489030f18\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-transaction-payment\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-assets\"\nversion = \"40.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f45f4eb6027fc34c4650e0ed6a7e57ed3335cc364be74b4531f714237676bcee\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-assets-freezer\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"127adc2250b89416b940850ce2175dab10a9297b503b1fcb05dc555bd9bd3207\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-assets\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-atomic-swap\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15906a685adeabe6027e49c814a34066222dd6136187a8a79c213d0d739b6634\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-aura\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b31da6e794d655d1f9c4da6557a57399538d75905a7862a2ed3f7e5fb711d7e4\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-timestamp\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-application-crypto\",\n \"sp-consensus-aura\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-authority-discovery\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffb0208f0538d58dcb78ce1ff5e6e8641c5f37b23b20b05587e51da30ab13541\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-application-crypto\",\n \"sp-authority-discovery\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-authorship\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"625d47577cabbe1318ccec5d612e2379002d1b6af1ab6edcef3243c66ec246df\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-babe\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ee096c0def13832475b340d00121025e0225de29604d44bc6dfcaa294c995b4\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-authorship\",\n \"pallet-session\",\n \"pallet-timestamp\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-application-crypto\",\n \"sp-consensus-babe\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-bags-list\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fd23a6f94ba9c1e57c8a7f8a41327d132903a79c55c0c83f36cbae19946cf10\"\ndependencies = [\n \"aquamarine\",\n \"docify\",\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-tracing\",\n]\n\n[[package]]\nname = \"pallet-balances\"\nversion = \"39.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcb1f72d7048fbd11e884b4693f7d438b8202340ff252e2a402e04c638fe2d02\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-beefy\"\nversion = \"39.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"014d177a3aba19ac144fc6b2b5eb94930b9874734b91fd014902b6706288bb5f\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-authorship\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-consensus-beefy\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-beefy-mmr\"\nversion = \"39.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c64f536e7f04cf3a0a17fdf20870ddb3d63a7690419c40f75cfd2f72b6e6d22\"\ndependencies = [\n \"array-bytes\",\n \"binary-merkle-tree\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-beefy\",\n \"pallet-mmr\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-consensus-beefy\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-state-machine\",\n]\n\n[[package]]\nname = \"pallet-bounties\"\nversion = \"37.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59f3d032f78624b12238a31b6e80ab3e112381a7bc222df152650e33bb2ce190\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-treasury\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-bridge-grandpa\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d825fbed9fb68bc5d344311653dc0f69caeabe647365abf79a539310b2245f6\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-runtime\",\n \"bp-test-utils\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-consensus-grandpa\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"pallet-bridge-messages\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1decdc9fb885e46eb17f850aa14f8cf39e17f31574aa6a5fa1a9e603cc526a2\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-messages\",\n \"bp-runtime\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"pallet-bridge-parachains\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41450a8d214f20eaff57aeca8e647b20c0df7d66871ee2262609b90824bd4cca\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-parachains\",\n \"bp-polkadot-core\",\n \"bp-runtime\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-bridge-grandpa\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"pallet-bridge-relayers\"\nversion = \"0.18.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fe3be7077b7ddee7178b1b12e9171435da73778d093788e10b1bdfad1e10962\"\ndependencies = [\n \"bp-header-chain\",\n \"bp-messages\",\n \"bp-relayers\",\n \"bp-runtime\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-bridge-grandpa\",\n \"pallet-bridge-messages\",\n \"pallet-bridge-parachains\",\n \"pallet-transaction-payment\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"pallet-broker\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"018b477d7d464c451b1d09a4ce9e792c3c65b15fd764b23da38ff9980e786065\"\ndependencies = [\n \"bitvec\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-child-bounties\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f3bc38ae6584b5f57e4de3e49e5184bfc0f20692829530ae1465ffe04e09e7\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-bounties\",\n \"pallet-treasury\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-collator-selection\"\nversion = \"19.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"658798d70c9054165169f6a6a96cfa9d6a5e7d24a524bc19825bf17fcbc5cc5a\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-authorship\",\n \"pallet-balances\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-collective\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e149f1aefd444c9a1da6ec5a94bc8a7671d7a33078f85dd19ae5b06e3438e60\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-collective-content\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38a6a5cbe781d9c711be74855ba32ef138f3779d6c54240c08e6d1b4bbba4d1d\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-contracts\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5df77077745d891c822b4275f273f336077a97e69e62a30134776aa721c96fee\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"environmental\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-balances\",\n \"pallet-contracts-proc-macro\",\n \"pallet-contracts-uapi\",\n \"parity-scale-codec\",\n \"paste\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"serde\",\n \"smallvec\",\n \"sp-api\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"wasm-instrument\",\n \"wasmi\",\n]\n\n[[package]]\nname = \"pallet-contracts-mock-network\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"309666537ed001c61a99f59fa7b98680f4a6e4e361ed3bc64f7b0237da3e3e06\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"pallet-assets\",\n \"pallet-balances\",\n \"pallet-contracts\",\n \"pallet-contracts-proc-macro\",\n \"pallet-contracts-uapi\",\n \"pallet-insecure-randomness-collective-flip\",\n \"pallet-message-queue\",\n \"pallet-proxy\",\n \"pallet-timestamp\",\n \"pallet-utility\",\n \"pallet-xcm\",\n \"parity-scale-codec\",\n \"polkadot-parachain-primitives\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-parachains\",\n \"scale-info\",\n \"sp-api\",\n \"sp-core\",\n \"sp-io\",\n \"sp-keystore\",\n \"sp-runtime\",\n \"sp-tracing\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"xcm-simulator\",\n]\n\n[[package]]\nname = \"pallet-contracts-proc-macro\"\nversion = \"23.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e35aaa3d7f1dba4ea7b74d7015e6068b753d1f7f63b39a4ce6377de1bc51b476\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"pallet-contracts-uapi\"\nversion = \"12.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d3e13d72cda1a30083a1c080acc56fc5f286d09c89d9d91e8e4942a230c58c8\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"parity-scale-codec\",\n \"paste\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pallet-conviction-voting\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"999c242491b74395b8c5409ef644e782fe426d87ae36ad92240ffbf21ff0a76e\"\ndependencies = [\n \"assert_matches\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-core-fellowship\"\nversion = \"22.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93052dd8d5910e1b939441541cec416e629b2c0ab92680124c2e5a137e12c285\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-ranked-collective\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-delegated-staking\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8502ef7c76f4c0613b4f6bd70413caba7068eeed6fc5fd2ac84fd61afc07d559\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-democracy\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6d1dc655f50b7c65bb2fb14086608ba11af02ef2936546f7a67db980ec1f133\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-dev-mode\"\nversion = \"20.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae1d8050c09c5e003d502c1addc7fdfbde21a854bd57787e94447078032710c8\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-election-provider-multi-phase\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f9ad5ae0c13ba3727183dadf1825b6b7b0b0598ed5c366f8697e13fd540f7d\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-election-provider-support-benchmarking\",\n \"parity-scale-codec\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-npos-elections\",\n \"sp-runtime\",\n \"strum 0.26.3\",\n]\n\n[[package]]\nname = \"pallet-election-provider-support-benchmarking\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4111d0d27545c260c9dd0d6fc504961db59c1ec4b42e1bcdc28ebd478895c22\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"sp-npos-elections\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-elections-phragmen\"\nversion = \"39.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"705c66d6c231340c6d085a0df0319a6ce42a150f248171e88e389ab1e3ce20f5\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-npos-elections\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-fast-unstake\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0ee60e8ef10b3936f2700bd61fa45dcc190c61124becc63bed787addcfa0d20\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-glutton\"\nversion = \"24.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1c79ab340890f6ab088a638c350ac1173a1b2a79c18004787523032025582b4\"\ndependencies = [\n \"blake2\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-grandpa\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d3a570a4aac3173ea46b600408183ca2bcfdaadc077f802f11e6055963e2449\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-authorship\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-application-crypto\",\n \"sp-consensus-grandpa\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-identity\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a4288548de9a755e39fcb82ffb9024b6bb1ba0f582464a44423038dd7a892e\"\ndependencies = [\n \"enumflags2\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-im-online\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c6fd95270cf029d16cb40fe6bd9f8ab9c78cd966666dccbca4d8bfec35c5bba5\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-authorship\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-indices\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5e4b97de630427a39d50c01c9e81ab8f029a00e56321823958b39b438f7b940\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-keyring\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-insecure-randomness-collective-flip\"\nversion = \"26.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dce7ad80675d78bd38a7a66ecbbf2d218dd32955e97f8e301d0afe6c87b0f251\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"safe-mix\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-lottery\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae0920ee53cf7b0665cfb6d275759ae0537dc3850ec78da5f118d814c99d3562\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-membership\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1868b5dca4bbfd1f4a222cbb80735a5197020712a71577b496bbb7e19aaa5394\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-message-queue\"\nversion = \"41.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"983f7d1be18e9a089a3e23670918f5085705b4403acd3fdde31878d57b76a1a8\"\ndependencies = [\n \"environmental\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"pallet-migrations\"\nversion = \"8.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b417fc975636bce94e7c6d707e42d0706d67dfa513e72f5946918e1044beef1\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-mixnet\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf3fa2b7f759a47f698a403ab40c54bc8935e2969387947224cbdb4e2bc8a28a\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-io\",\n \"sp-mixnet\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-mmr\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6932dfb85f77a57c2d1fdc28a7b3a59ffe23efd8d5bb02dc3039d91347e4a3b\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-mmr-primitives\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-multisig\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e5099c9a4442efcc1568d88ca1d22d624e81ab96358f99f616c67fbd82532d2\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-nft-fractionalization\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168792cf95a32fa3baf9b874efec82a45124da0a79cee1ae3c98a823e6841959\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-assets\",\n \"pallet-nfts\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-nfts\"\nversion = \"32.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59e2aad461a0849d7f0471576eeb1fe3151795bcf2ec9e15eca5cca5b9d743b2\"\ndependencies = [\n \"enumflags2\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-nfts-runtime-api\"\nversion = \"24.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a1f50c217e19dc50ff586a71eb5915df6a05bc0b25564ea20674c8cd182c1f\"\ndependencies = [\n \"pallet-nfts\",\n \"parity-scale-codec\",\n \"sp-api\",\n]\n\n[[package]]\nname = \"pallet-nis\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ac349e119880b7df1a7c4c36d919b33a498d0e9548af3c237365c654ae0c73d\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-node-authorization\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39ec3133be9e767b8feafbb26edd805824faa59956da008d2dc7fcf4b4720e56\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-nomination-pools\"\nversion = \"35.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04f3b3eb893cd3da58c86db519d8d5f2f1c014ff08942b087cb475e789cd45cf\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n \"sp-tracing\",\n]\n\n[[package]]\nname = \"pallet-nomination-pools-benchmarking\"\nversion = \"36.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d2eaca0349bcda923343226b8b64d25a80b67e0a1ebaaa5b0ab1e1b3b225bc\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-bags-list\",\n \"pallet-delegated-staking\",\n \"pallet-nomination-pools\",\n \"pallet-staking\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-runtime-interface\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-nomination-pools-runtime-api\"\nversion = \"33.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03eea431eba0658ca763a078bd849e0622c37c85eddd011b8e886460b50c0827\"\ndependencies = [\n \"pallet-nomination-pools\",\n \"parity-scale-codec\",\n \"sp-api\",\n]\n\n[[package]]\nname = \"pallet-offences\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c4379cf853465696c1c5c03e7e8ce80aeaca0a6139d698abe9ecb3223fd732a\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-offences-benchmarking\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69aa1b24cdffc3fa8c89cdea32c83f1bf9c1c82a87fa00e57ae4be8e85f5e24f\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-babe\",\n \"pallet-balances\",\n \"pallet-grandpa\",\n \"pallet-im-online\",\n \"pallet-offences\",\n \"pallet-session\",\n \"pallet-staking\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-paged-list\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e099fb116068836b17ca4232dc52f762b69dc8cd4e33f509372d958de278b0\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-metadata-ir\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-parameters\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9aba424d55e17b2a2bec766a41586eab878137704d4803c04bebd6a4743db7b\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"paste\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-preimage\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"407828bc48c6193ac076fdf909b2fadcaaecd65f42b0b0a04afe22fe8e563834\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-proxy\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d39df395f0dbcf07dafe842916adea3266a87ce36ed87b5132184b6bcd746393\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-ranked-collective\"\nversion = \"38.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15a640e732164203eb5298823cc8c29cfc563763c43c9114e76153b3166b8b9d\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-recovery\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"406a116aa6d05f88f3c10d79ff89cf577323680a48abd8e5550efb47317e67fa\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-referenda\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3008c20531d1730c9b457ae77ecf0e3c9b07aaf8c4f5d798d61ef6f0b9e2d4b\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-arithmetic\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-remark\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e8cae0e20888065ec73dda417325c6ecabf797f4002329484b59c25ecc34d4\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-revive\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be02c94dcbadd206a910a244ec19b493aac793eed95e23d37d6699547234569f\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"environmental\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-balances\",\n \"pallet-revive-fixtures\",\n \"pallet-revive-proc-macro\",\n \"pallet-revive-uapi\",\n \"parity-scale-codec\",\n \"paste\",\n \"polkavm 0.10.0\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n]\n\n[[package]]\nname = \"pallet-revive-fixtures\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a38c27f1531f36e5327f3084eb24cf1c9dd46b372e030c0169e843ce363105e\"\ndependencies = [\n \"anyhow\",\n \"frame-system\",\n \"parity-wasm\",\n \"polkavm-linker 0.10.0\",\n \"sp-runtime\",\n \"tempfile\",\n \"toml 0.8.20\",\n]\n\n[[package]]\nname = \"pallet-revive-mock-network\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60e74591d44dbd78db02c8593f5caa75bd61bcc4d63999302150223fb969ae37\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"pallet-assets\",\n \"pallet-balances\",\n \"pallet-message-queue\",\n \"pallet-proxy\",\n \"pallet-revive\",\n \"pallet-revive-proc-macro\",\n \"pallet-revive-uapi\",\n \"pallet-timestamp\",\n \"pallet-utility\",\n \"pallet-xcm\",\n \"parity-scale-codec\",\n \"polkadot-parachain-primitives\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-parachains\",\n \"scale-info\",\n \"sp-api\",\n \"sp-core\",\n \"sp-io\",\n \"sp-keystore\",\n \"sp-runtime\",\n \"sp-tracing\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"xcm-simulator\",\n]\n\n[[package]]\nname = \"pallet-revive-proc-macro\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8aee42afa416be6324cf6650c137da9742f27dc7be3c7ed39ad9748baf3b9ae\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"pallet-revive-uapi\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecb4686c8415619cc13e43fadef146ffff46424d9b4d037fe4c069de52708aac\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"parity-scale-codec\",\n \"paste\",\n \"polkavm-derive 0.10.0\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pallet-root-offences\"\nversion = \"35.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b35774b830928daaeeca7196cead7c56eeed952a6616ad6dc5ec068d8c85c81a\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"pallet-session\",\n \"pallet-staking\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-root-testing\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be95e7c320ac1d381715364cd721e67ab3152ab727f8e4defd3a92e41ebbc880\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-safe-mode\"\nversion = \"19.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d3e67dd4644c168cedbf257ac3dd2527aad81acf4a0d413112197094e549f76\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-balances\",\n \"pallet-proxy\",\n \"pallet-utility\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-salary\"\nversion = \"23.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3af2d92b1fef1c379c0692113b505c108c186e09c25c72b38e879b6e0f172ebe\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-ranked-collective\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-scheduler\"\nversion = \"39.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26899a331e7ab5f7d5966cbf203e1cf5bd99cd110356d7ddcaa7597087cdc0b5\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"pallet-scored-pool\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f84b48bb4702712c902f43931c4077d3a1cb6773c8d8c290d4a6251f6bc2a5c\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-session\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8474b62b6b7622f891e83d922a589e2ad5be5471f5ca47d45831a797dba0b3f4\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-timestamp\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n \"sp-state-machine\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"pallet-session-benchmarking\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8aadce7df0fee981721983795919642648b846dab5ab9096f82c2cea781007d0\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-session\",\n \"pallet-staking\",\n \"parity-scale-codec\",\n \"rand 0.8.5\",\n \"sp-runtime\",\n \"sp-session\",\n]\n\n[[package]]\nname = \"pallet-skip-feeless-payment\"\nversion = \"13.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8c2cb0dae13d2c2d2e76373f337d408468f571459df1900cbd7458f21cf6c01\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-society\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1dc69fea8a8de343e71691f009d5fece6ae302ed82b7bb357882b2ea6454143\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"rand_chacha 0.3.1\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-staking\"\nversion = \"38.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8efdbfe23385add01c734e6ddd7967e11a04fad0da7e4e42e6ae2501d1e12016\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-authorship\",\n \"pallet-session\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-application-crypto\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-staking-reward-fn\"\nversion = \"22.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b982dbfe9fbc548dc7f9a3078214989ed58cabf521a8313ae1767d6b4b53b9b\"\ndependencies = [\n \"log\",\n \"sp-arithmetic\",\n]\n\n[[package]]\nname = \"pallet-staking-runtime-api\"\nversion = \"24.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7298559ef3a6b2f5dfbe9a3b8f3d22f2ff9b073c97f4c4853d2b316d973e72d\"\ndependencies = [\n \"parity-scale-codec\",\n \"sp-api\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"pallet-state-trie-migration\"\nversion = \"40.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"138c15b4200b9dc4c3e031def6a865a235cdc76ff91ee96fba19ca1787c9dda6\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-statement\"\nversion = \"20.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e03e147efa900e75cd106337f36da3d7dcd185bd9e5f5c3df474c08c3c37d16\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-statement-store\",\n]\n\n[[package]]\nname = \"pallet-sudo\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1574fe2aed3d52db4a389b77b53d8c9758257b121e3e7bbe24c4904e11681e0e\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-timestamp\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9ba9b71bbfd33ae672f23ba7efaeed2755fdac37b8f946cb7474fc37841b7e1\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-storage\",\n \"sp-timestamp\",\n]\n\n[[package]]\nname = \"pallet-tips\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa1d4371a70c309ba11624933f8f5262fe4edad0149c556361d31f26190da936\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-treasury\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-transaction-payment\"\nversion = \"38.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cdb86580c72b58145f9cddba21a0c1814742ca56abc9caac3c1ac72f6bde649\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-transaction-payment-rpc-runtime-api\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49fdf5ab71e9dbcadcf7139736b6ea6bac8ec4a83985d46cbd130e1eec770e41\"\ndependencies = [\n \"pallet-transaction-payment\",\n \"parity-scale-codec\",\n \"sp-api\",\n \"sp-runtime\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"pallet-transaction-storage\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8c337a972a6a796c0a0acc6c03b5e02901c43ad721ce79eb87b45717d75c93b\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-transaction-storage-proof\",\n]\n\n[[package]]\nname = \"pallet-treasury\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98bfdd3bb9b58fb010bcd419ff5bf940817a8e404cdbf7886a53ac730f5dda2b\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-tx-pause\"\nversion = \"19.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cee153f5be5efc84ebd53aa581e5361cde17dc3669ef80d8ad327f4041d89ebe\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-balances\",\n \"pallet-proxy\",\n \"pallet-utility\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-uniques\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2b13cdaedf2d5bd913a5f6e637cb52b5973d8ed4b8d45e56d921bc4d627006f\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-utility\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fdcade6efc0b66fc7fc4138964802c02d0ffb7380d894e26b9dd5073727d2b3\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-vesting\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"807df2ef13ab6bf940879352c3013bfa00b670458b4c125c2f60e5753f68e3d5\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-whitelist\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ef17df925290865cf37096dd0cb76f787df11805bba01b1d0ca3e106d06280b\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"pallet-xcm\"\nversion = \"17.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff8893d5736d085729ed6d698a727a1511dd2b787b48ad0dc2d86136f142cc3e\"\ndependencies = [\n \"bounded-collections\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"tracing\",\n \"xcm-runtime-apis\",\n]\n\n[[package]]\nname = \"pallet-xcm-benchmarks\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2da423463933b42f4a4c74175f9e9295a439de26719579b894ce533926665e4a\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"pallet-xcm-bridge-hub\"\nversion = \"0.13.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3bdb76fff08633830063a4cb36664f0cf2f926ac0da02ee439d4f521763e26b7\"\ndependencies = [\n \"bp-messages\",\n \"bp-runtime\",\n \"bp-xcm-bridge-hub\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-bridge-messages\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"pallet-xcm-bridge-hub-router\"\nversion = \"0.15.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fabf1fdcf451ac79995f11cb9b6a0761924c57bb79442c2d91b3bbefe4dfa081\"\ndependencies = [\n \"bp-xcm-bridge-hub-router\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n]\n\n[[package]]\nname = \"parachains-common\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9460a69f409be27c62161d8b4d36ffc32735d09a4f9097f9c789db0cca7196c\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"cumulus-primitives-utility\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-asset-tx-payment\",\n \"pallet-assets\",\n \"pallet-authorship\",\n \"pallet-balances\",\n \"pallet-collator-selection\",\n \"pallet-message-queue\",\n \"pallet-xcm\",\n \"parity-scale-codec\",\n \"polkadot-primitives 16.0.0\",\n \"scale-info\",\n \"sp-consensus-aura\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"staging-parachain-info\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n \"substrate-wasm-builder\",\n]\n\n[[package]]\nname = \"parachains-runtimes-test-utils\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"287d2db0a2d19466caa579a69f021bfdc6fa352f382c8395dade58d1d0c6adfe\"\ndependencies = [\n \"cumulus-pallet-parachain-system\",\n \"cumulus-pallet-xcmp-queue\",\n \"cumulus-primitives-core\",\n \"cumulus-primitives-parachain-inherent\",\n \"cumulus-test-relay-sproof-builder\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-balances\",\n \"pallet-collator-selection\",\n \"pallet-session\",\n \"pallet-timestamp\",\n \"pallet-xcm\",\n \"parity-scale-codec\",\n \"polkadot-parachain-primitives\",\n \"sp-consensus-aura\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-tracing\",\n \"staging-parachain-info\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n \"substrate-wasm-builder\",\n]\n\n[[package]]\nname = \"parity-bip39\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e69bf016dc406eff7d53a7d3f7cf1c2e72c82b9088aac1118591e36dd2cd3e9\"\ndependencies = [\n \"bitcoin_hashes 0.13.0\",\n \"rand 0.8.5\",\n \"rand_core 0.6.4\",\n \"serde\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"parity-bytes\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b56e3a2420138bdb970f84dfb9c774aea80fa0e7371549eedec0d80c209c67\"\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"bytes\",\n \"const_format\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"rustversion\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"parity-util-mem\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d32c34f4f5ca7f9196001c0aba5a1f9a5a12382c8944b8b0f90233282d1e8f8\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"ethereum-types\",\n \"hashbrown 0.12.3\",\n \"impl-trait-for-tuples\",\n \"lru 0.8.1\",\n \"parity-util-mem-derive\",\n \"parking_lot 0.12.3\",\n \"primitive-types 0.12.2\",\n \"smallvec\",\n \"winapi\",\n]\n\n[[package]]\nname = \"parity-util-mem-derive\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f557c32c6d268a07c921471619c0295f5efad3a0e76d4f97a05c091a51d110b2\"\ndependencies = [\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"parity-wasm\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1ad0aff30c1da14b1254fcb2af73e1fa9a28670e584a626f53a369d0e157304\"\n\n[[package]]\nname = \"parking\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\"\ndependencies = [\n \"instant\",\n \"lock_api\",\n \"parking_lot_core 0.8.6\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core 0.9.10\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"instant\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"smallvec\",\n \"winapi\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"redox_syscall 0.5.11\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"parse-display\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"914a1c2265c98e2446911282c6ac86d8524f495792c38c5bd884f80499c7538a\"\ndependencies = [\n \"parse-display-derive\",\n \"regex\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"parse-display-derive\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ae7800a4c974efd12df917266338e79a7a74415173caf7e70aa0a0707345281\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"regex-syntax 0.8.5\",\n \"structmeta\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7676374caaee8a325c9e7a2ae557f216c5563a171d6997b0ef8a65af35147700\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"346f04948ba92c43e8469c1ee6736c7563d71012b17d40745260fe106aac2166\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"path-slash\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e91099d4268b0e11973f036e885d652fb0b21fedcf69738c627f94db6a44f42\"\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917\"\ndependencies = [\n \"digest 0.10.7\",\n \"hmac 0.12.1\",\n \"password-hash 0.4.2\",\n \"sha2 0.10.8\",\n]\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2\"\ndependencies = [\n \"digest 0.10.7\",\n \"hmac 0.12.1\",\n \"password-hash 0.5.0\",\n]\n\n[[package]]\nname = \"pem\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8835c273a76a90455d7344889b0964598e3316e2a79ede8e36f16bdcf2228b8\"\ndependencies = [\n \"base64 0.13.1\",\n]\n\n[[package]]\nname = \"pem\"\nversion = \"3.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38af38e8470ac9dee3ce1bae1af9c1671fffc44ddfd8bd1d0a3445bf349a8ef3\"\ndependencies = [\n \"base64 0.22.1\",\n \"serde\",\n]\n\n[[package]]\nname = \"pem-rfc7468\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412\"\ndependencies = [\n \"base64ct\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"198db74531d58c70a361c42201efde7e2591e976d518caf7662a47dc5720e7b6\"\ndependencies = [\n \"memchr\",\n \"thiserror 2.0.12\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"petgraph\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db\"\ndependencies = [\n \"fixedbitset\",\n \"indexmap 2.9.0\",\n]\n\n[[package]]\nname = \"pharos\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9567389417feee6ce15dd6527a8a1ecac205ef62c2932bcf3d9f6fc5b78b414\"\ndependencies = [\n \"futures\",\n \"rustc_version 0.4.1\",\n]\n\n[[package]]\nname = \"phf\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd6780a80ae0c52cc120a26a1a42c1ae51b247a253e4e06113d23d2c2edd078\"\ndependencies = [\n \"phf_macros\",\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_generator\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c80231409c20246a13fddb31776fb942c38553c51e871f8cbd687a4cfb5843d\"\ndependencies = [\n \"phf_shared\",\n \"rand 0.8.5\",\n]\n\n[[package]]\nname = \"phf_macros\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f84ac04429c13a7ff43785d75ad27569f2951ce0ffd30a3321230db2fc727216\"\ndependencies = [\n \"phf_generator\",\n \"phf_shared\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67eabc2ef2a60eb7faa00097bd1ffdb5bd28e62bf39990626a582201b7a754e5\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a\"\ndependencies = [\n \"pin-project-internal\",\n]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"piper\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96c8c490f422ef9a4efd2cb5b42b76c8613d7e7dfc1caf667b8a3350a5acc066\"\ndependencies = [\n \"atomic-waker\",\n \"fastrand\",\n \"futures-io\",\n]\n\n[[package]]\nname = \"pkcs8\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7\"\ndependencies = [\n \"der\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7edddbd0b52d732b21ad9a5fab5c704c14cd949e5e9a1ec5929a24fded1b904c\"\n\n[[package]]\nname = \"polkadot-ckb-merkle-mountain-range\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4b44320e5f7ce2c18227537a3032ae5b2c476a7e8eddba45333e1011fc31b92\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"itertools 0.10.5\",\n]\n\n[[package]]\nname = \"polkadot-core-primitives\"\nversion = \"15.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2900d3b857e34c480101618a950c3a4fbcddc8c0d50573d48553376185908b8\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"polkadot-parachain-primitives\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52b5648a2e8ce1f9a0f8c41c38def670cefd91932cd793468e1a5b0b0b4e4af1\"\ndependencies = [\n \"bounded-collections\",\n \"derive_more 0.99.19\",\n \"parity-scale-codec\",\n \"polkadot-core-primitives\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"polkadot-primitives\"\nversion = \"15.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b57bc055fa389372ec5fc0001b99aeffd50f3fd379280ce572d935189bb58dd8\"\ndependencies = [\n \"bitvec\",\n \"hex-literal\",\n \"log\",\n \"parity-scale-codec\",\n \"polkadot-core-primitives\",\n \"polkadot-parachain-primitives\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-authority-discovery\",\n \"sp-consensus-slots\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-keystore\",\n \"sp-runtime\",\n \"sp-staking 34.0.0\",\n]\n\n[[package]]\nname = \"polkadot-primitives\"\nversion = \"16.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bb20b75d33212150242d39890d7ededab55f1084160c337f15d0eb8ca8c3ad4\"\ndependencies = [\n \"bitvec\",\n \"hex-literal\",\n \"log\",\n \"parity-scale-codec\",\n \"polkadot-core-primitives\",\n \"polkadot-parachain-primitives\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-authority-discovery\",\n \"sp-consensus-slots\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-keystore\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"polkadot-runtime-common\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc15154ba5ca55d323fcf7af0f5dcd39d58dcb4dfac3d9b30404840a6d8bbde4\"\ndependencies = [\n \"bitvec\",\n \"frame-benchmarking\",\n \"frame-election-provider-support\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"libsecp256k1\",\n \"log\",\n \"pallet-asset-rate\",\n \"pallet-authorship\",\n \"pallet-balances\",\n \"pallet-broker\",\n \"pallet-election-provider-multi-phase\",\n \"pallet-fast-unstake\",\n \"pallet-identity\",\n \"pallet-session\",\n \"pallet-staking\",\n \"pallet-staking-reward-fn\",\n \"pallet-timestamp\",\n \"pallet-transaction-payment\",\n \"pallet-treasury\",\n \"pallet-vesting\",\n \"parity-scale-codec\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-parachains\",\n \"rustc-hex\",\n \"scale-info\",\n \"serde\",\n \"serde_derive\",\n \"slot-range-helper\",\n \"sp-api\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-npos-elections\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"polkadot-runtime-metrics\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c306f1ace7644a24de860479f92cf8d6467393bb0c9b0777c57e2d42c9d452a\"\ndependencies = [\n \"bs58\",\n \"frame-benchmarking\",\n \"parity-scale-codec\",\n \"polkadot-primitives 16.0.0\",\n \"sp-tracing\",\n]\n\n[[package]]\nname = \"polkadot-runtime-parachains\"\nversion = \"17.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d4cdf181c2419b35c2cbde813da2d8ee777b69b4a6fa346b962d144e3521976\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"bitvec\",\n \"derive_more 0.99.19\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-authority-discovery\",\n \"pallet-authorship\",\n \"pallet-babe\",\n \"pallet-balances\",\n \"pallet-broker\",\n \"pallet-message-queue\",\n \"pallet-mmr\",\n \"pallet-session\",\n \"pallet-staking\",\n \"pallet-timestamp\",\n \"pallet-vesting\",\n \"parity-scale-codec\",\n \"polkadot-core-primitives\",\n \"polkadot-parachain-primitives\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-metrics\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-keystore\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"polkadot-sdk\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb819108697967452fa6d8d96ab4c0d48cbaa423b3156499dcb24f1cf95d6775\"\ndependencies = [\n \"asset-test-utils\",\n \"assets-common\",\n \"binary-merkle-tree\",\n \"bp-header-chain\",\n \"bp-messages\",\n \"bp-parachains\",\n \"bp-polkadot\",\n \"bp-polkadot-core\",\n \"bp-relayers\",\n \"bp-runtime\",\n \"bp-test-utils\",\n \"bp-xcm-bridge-hub\",\n \"bp-xcm-bridge-hub-router\",\n \"bridge-hub-common\",\n \"bridge-hub-test-utils\",\n \"bridge-runtime-common\",\n \"cumulus-pallet-aura-ext\",\n \"cumulus-pallet-dmp-queue\",\n \"cumulus-pallet-parachain-system\",\n \"cumulus-pallet-parachain-system-proc-macro\",\n \"cumulus-pallet-session-benchmarking\",\n \"cumulus-pallet-solo-to-para\",\n \"cumulus-pallet-xcm\",\n \"cumulus-pallet-xcmp-queue\",\n \"cumulus-ping\",\n \"cumulus-primitives-aura\",\n \"cumulus-primitives-core\",\n \"cumulus-primitives-parachain-inherent\",\n \"cumulus-primitives-proof-size-hostfunction\",\n \"cumulus-primitives-storage-weight-reclaim\",\n \"cumulus-primitives-timestamp\",\n \"cumulus-primitives-utility\",\n \"cumulus-test-relay-sproof-builder\",\n \"frame-benchmarking\",\n \"frame-benchmarking-pallet-pov\",\n \"frame-election-provider-support\",\n \"frame-executive\",\n \"frame-metadata-hash-extension\",\n \"frame-support\",\n \"frame-support-procedural\",\n \"frame-system\",\n \"frame-system-benchmarking\",\n \"frame-system-rpc-runtime-api\",\n \"frame-try-runtime\",\n \"pallet-alliance\",\n \"pallet-asset-conversion\",\n \"pallet-asset-conversion-ops\",\n \"pallet-asset-conversion-tx-payment\",\n \"pallet-asset-rate\",\n \"pallet-asset-tx-payment\",\n \"pallet-assets\",\n \"pallet-assets-freezer\",\n \"pallet-atomic-swap\",\n \"pallet-aura\",\n \"pallet-authority-discovery\",\n \"pallet-authorship\",\n \"pallet-babe\",\n \"pallet-bags-list\",\n \"pallet-balances\",\n \"pallet-beefy\",\n \"pallet-beefy-mmr\",\n \"pallet-bounties\",\n \"pallet-bridge-grandpa\",\n \"pallet-bridge-messages\",\n \"pallet-bridge-parachains\",\n \"pallet-bridge-relayers\",\n \"pallet-broker\",\n \"pallet-child-bounties\",\n \"pallet-collator-selection\",\n \"pallet-collective\",\n \"pallet-collective-content\",\n \"pallet-contracts\",\n \"pallet-contracts-mock-network\",\n \"pallet-conviction-voting\",\n \"pallet-core-fellowship\",\n \"pallet-delegated-staking\",\n \"pallet-democracy\",\n \"pallet-dev-mode\",\n \"pallet-election-provider-multi-phase\",\n \"pallet-election-provider-support-benchmarking\",\n \"pallet-elections-phragmen\",\n \"pallet-fast-unstake\",\n \"pallet-glutton\",\n \"pallet-grandpa\",\n \"pallet-identity\",\n \"pallet-im-online\",\n \"pallet-indices\",\n \"pallet-insecure-randomness-collective-flip\",\n \"pallet-lottery\",\n \"pallet-membership\",\n \"pallet-message-queue\",\n \"pallet-migrations\",\n \"pallet-mixnet\",\n \"pallet-mmr\",\n \"pallet-multisig\",\n \"pallet-nft-fractionalization\",\n \"pallet-nfts\",\n \"pallet-nfts-runtime-api\",\n \"pallet-nis\",\n \"pallet-node-authorization\",\n \"pallet-nomination-pools\",\n \"pallet-nomination-pools-benchmarking\",\n \"pallet-nomination-pools-runtime-api\",\n \"pallet-offences\",\n \"pallet-offences-benchmarking\",\n \"pallet-paged-list\",\n \"pallet-parameters\",\n \"pallet-preimage\",\n \"pallet-proxy\",\n \"pallet-ranked-collective\",\n \"pallet-recovery\",\n \"pallet-referenda\",\n \"pallet-remark\",\n \"pallet-revive\",\n \"pallet-revive-fixtures\",\n \"pallet-revive-mock-network\",\n \"pallet-root-offences\",\n \"pallet-root-testing\",\n \"pallet-safe-mode\",\n \"pallet-salary\",\n \"pallet-scheduler\",\n \"pallet-scored-pool\",\n \"pallet-session\",\n \"pallet-session-benchmarking\",\n \"pallet-skip-feeless-payment\",\n \"pallet-society\",\n \"pallet-staking\",\n \"pallet-staking-reward-fn\",\n \"pallet-staking-runtime-api\",\n \"pallet-state-trie-migration\",\n \"pallet-statement\",\n \"pallet-sudo\",\n \"pallet-timestamp\",\n \"pallet-tips\",\n \"pallet-transaction-payment\",\n \"pallet-transaction-payment-rpc-runtime-api\",\n \"pallet-transaction-storage\",\n \"pallet-treasury\",\n \"pallet-tx-pause\",\n \"pallet-uniques\",\n \"pallet-utility\",\n \"pallet-vesting\",\n \"pallet-whitelist\",\n \"pallet-xcm\",\n \"pallet-xcm-benchmarks\",\n \"pallet-xcm-bridge-hub\",\n \"pallet-xcm-bridge-hub-router\",\n \"parachains-common\",\n \"parachains-runtimes-test-utils\",\n \"polkadot-core-primitives\",\n \"polkadot-parachain-primitives\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-common\",\n \"polkadot-runtime-metrics\",\n \"polkadot-runtime-parachains\",\n \"polkadot-sdk-frame\",\n \"sc-executor\",\n \"slot-range-helper\",\n \"snowbridge-beacon-primitives\",\n \"snowbridge-core\",\n \"snowbridge-ethereum\",\n \"snowbridge-outbound-queue-merkle-tree\",\n \"snowbridge-outbound-queue-runtime-api\",\n \"snowbridge-pallet-ethereum-client\",\n \"snowbridge-pallet-ethereum-client-fixtures\",\n \"snowbridge-pallet-inbound-queue\",\n \"snowbridge-pallet-inbound-queue-fixtures\",\n \"snowbridge-pallet-outbound-queue\",\n \"snowbridge-pallet-system\",\n \"snowbridge-router-primitives\",\n \"snowbridge-runtime-common\",\n \"snowbridge-runtime-test-common\",\n \"snowbridge-system-runtime-api\",\n \"sp-api\",\n \"sp-api-proc-macro\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-authority-discovery\",\n \"sp-block-builder\",\n \"sp-consensus-aura\",\n \"sp-consensus-babe\",\n \"sp-consensus-beefy\",\n \"sp-consensus-grandpa\",\n \"sp-consensus-pow\",\n \"sp-consensus-slots\",\n \"sp-core\",\n \"sp-core-hashing\",\n \"sp-crypto-ec-utils\",\n \"sp-crypto-hashing\",\n \"sp-debug-derive\",\n \"sp-externalities\",\n \"sp-genesis-builder\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-keyring\",\n \"sp-keystore\",\n \"sp-metadata-ir\",\n \"sp-mixnet\",\n \"sp-mmr-primitives\",\n \"sp-npos-elections\",\n \"sp-offchain\",\n \"sp-runtime\",\n \"sp-runtime-interface\",\n \"sp-session\",\n \"sp-staking 36.0.0\",\n \"sp-state-machine\",\n \"sp-statement-store\",\n \"sp-std\",\n \"sp-storage\",\n \"sp-timestamp\",\n \"sp-tracing\",\n \"sp-transaction-pool\",\n \"sp-transaction-storage-proof\",\n \"sp-trie\",\n \"sp-version\",\n \"sp-wasm-interface\",\n \"sp-weights\",\n \"staging-parachain-info\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n \"substrate-bip39\",\n \"testnet-parachains-constants\",\n \"xcm-runtime-apis\",\n]\n\n[[package]]\nname = \"polkadot-sdk-frame\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbdeb15ce08142082461afe1a62c15f7ce10a731d91b203ad6a8dc8d2e4a6a54\"\ndependencies = [\n \"docify\",\n \"frame-benchmarking\",\n \"frame-executive\",\n \"frame-support\",\n \"frame-system\",\n \"frame-system-benchmarking\",\n \"frame-system-rpc-runtime-api\",\n \"frame-try-runtime\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-arithmetic\",\n \"sp-block-builder\",\n \"sp-consensus-aura\",\n \"sp-consensus-grandpa\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-offchain\",\n \"sp-runtime\",\n \"sp-session\",\n \"sp-storage\",\n \"sp-transaction-pool\",\n \"sp-version\",\n]\n\n[[package]]\nname = \"polkavm\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a3693e5efdb2bf74e449cd25fd777a28bd7ed87e41f5d5da75eb31b4de48b94\"\ndependencies = [\n \"libc\",\n \"log\",\n \"polkavm-assembler 0.9.0\",\n \"polkavm-common 0.9.0\",\n \"polkavm-linux-raw 0.9.0\",\n]\n\n[[package]]\nname = \"polkavm\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7ec0c5935f2eff23cfc4653002f4f8d12b37f87a720e0631282d188c32089d6\"\ndependencies = [\n \"libc\",\n \"log\",\n \"polkavm-assembler 0.10.0\",\n \"polkavm-common 0.10.0\",\n \"polkavm-linux-raw 0.10.0\",\n]\n\n[[package]]\nname = \"polkavm-assembler\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fa96d6d868243acc12de813dd48e756cbadcc8e13964c70d272753266deadc1\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"polkavm-assembler\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8e4fd5a43100bf1afe9727b8130d01f966f5cfc9144d5604b21e795c2bcd80e\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d9428a5cfcc85c5d7b9fc4b6a18c4b802d0173d768182a51cc7751640f08b92\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0097b48bc0bedf9f3f537ce8f37e8f1202d8d83f9b621bdb21ff2c59b9097c50\"\ndependencies = [\n \"log\",\n \"polkavm-assembler 0.10.0\",\n]\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8c4bea6f3e11cd89bb18bcdddac10bd9a24015399bd1c485ad68a985a19606\"\ndependencies = [\n \"polkavm-derive-impl-macro 0.9.0\",\n]\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dcc701385c08c31bdb0569f0c51a290c580d892fa77f1dd88a7352a62679ecf\"\ndependencies = [\n \"polkavm-derive-impl-macro 0.10.0\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c4fdfc49717fb9a196e74a5d28e0bc764eb394a2c803eb11133a31ac996c60c\"\ndependencies = [\n \"polkavm-common 0.9.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7855353a5a783dd5d09e3b915474bddf66575f5a3cf45dec8d1c5e051ba320dc\"\ndependencies = [\n \"polkavm-common 0.10.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl-macro\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ba81f7b5faac81e528eb6158a6f3c9e0bb1008e0ffa19653bc8dea925ecb429\"\ndependencies = [\n \"polkavm-derive-impl 0.9.0\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl-macro\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9324fe036de37c17829af233b46ef6b5562d4a0c09bb7fdb9f8378856dee30cf\"\ndependencies = [\n \"polkavm-derive-impl 0.10.0\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"polkavm-linker\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c7be503e60cf56c0eb785f90aaba4b583b36bff00e93997d93fef97f9553c39\"\ndependencies = [\n \"gimli 0.28.1\",\n \"hashbrown 0.14.5\",\n \"log\",\n \"object 0.32.2\",\n \"polkavm-common 0.9.0\",\n \"regalloc2 0.9.3\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"polkavm-linker\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d704edfe7bdcc876784f19436d53d515b65eb07bc9a0fae77085d552c2dbbb5\"\ndependencies = [\n \"gimli 0.28.1\",\n \"hashbrown 0.14.5\",\n \"log\",\n \"object 0.36.7\",\n \"polkavm-common 0.10.0\",\n \"regalloc2 0.9.3\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"polkavm-linux-raw\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26e85d3456948e650dff0cfc85603915847faf893ed1e66b020bb82ef4557120\"\n\n[[package]]\nname = \"polkavm-linux-raw\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26e45fa59c7e1bb12ef5289080601e9ec9b31435f6e32800a5c90c132453d126\"\n\n[[package]]\nname = \"polling\"\nversion = \"3.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a604568c3202727d1507653cb121dbd627a58684eb09a820fd746bee38b4442f\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"concurrent-queue\",\n \"hermit-abi 0.4.0\",\n \"pin-project-lite\",\n \"rustix 0.38.44\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"poly1305\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8159bd90725d2df49889a078b54f4f79e87f1f8a8444194cdca81d38f5393abf\"\ndependencies = [\n \"cpufeatures\",\n \"opaque-debug\",\n \"universal-hash\",\n]\n\n[[package]]\nname = \"polyval\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d1fe60d06143b2430aa532c94cfe9e29783047f06c0d7fd359a9a51b729fa25\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cpufeatures\",\n \"opaque-debug\",\n \"universal-hash\",\n]\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"350e9b48cbc6b0e028b0473b114454c6316e57336ee184ceab6e53f72c178b3e\"\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9\"\ndependencies = [\n \"zerocopy 0.8.24\",\n]\n\n[[package]]\nname = \"precomputed-hash\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n\n[[package]]\nname = \"prettyplease\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"664ec5419c51e34154eec046ebcba56312d5a2fc3b09a06da188e1ad21afadf6\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec 0.6.0\",\n \"impl-rlp\",\n \"impl-serde 0.4.0\",\n \"scale-info\",\n \"uint 0.9.5\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d15600a7d856470b7d278b3fe0e311fe28c2526348549f8ef2ff7db3299c87f5\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec 0.7.1\",\n \"impl-serde 0.5.0\",\n \"scale-info\",\n \"uint 0.10.0\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\ndependencies = [\n \"toml_edit\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96de42df36bb9bba5542fe9f1a054b8cc87e172759a1868aa05c1f3acc89dfc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"proc-macro-error2\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec05c52be0a07b08061f7dd003e7d7092e0472bc731b4af7bb1ef876109802\"\ndependencies = [\n \"proc-macro-error-attr2\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"proc-macro-warning\"\nversion = \"1.84.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75eea531cfcd120e0851a3f8aed42c4841f78c889eefafd96339c72677ae42c3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02b3e5e68a3a1a02aad3ec490a98007cbc13c37cbe84a3cd7b8e406d76e7f778\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"prometheus-client\"\nversion = \"0.22.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"504ee9ff529add891127c4827eb481bd69dc0ebc72e9a682e187db4caa60c3ca\"\ndependencies = [\n \"dtoa\",\n \"itoa\",\n \"parking_lot 0.12.3\",\n \"prometheus-client-derive-encode\",\n]\n\n[[package]]\nname = \"prometheus-client-derive-encode\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"440f724eba9f6996b75d63681b0a92b06947f1457076d503a4d2e2c8f56442b8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"proptest\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14cae93065090804185d3b75f0bf93b8eeda30c7a9b4a33d3bdb3988d6229e50\"\ndependencies = [\n \"bit-set 0.8.0\",\n \"bit-vec 0.8.0\",\n \"bitflags 2.9.0\",\n \"lazy_static\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_xorshift\",\n \"regex-syntax 0.8.5\",\n \"rusty-fork\",\n \"tempfile\",\n \"unarray\",\n]\n\n[[package]]\nname = \"psm\"\nversion = \"0.1.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f58e5423e24c18cc840e1c98370b3993c6649cd1678b4d24318bcf0a083cbe88\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"quick-error\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n\n[[package]]\nname = \"quick-protobuf\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d6da84cc204722a989e01ba2f6e1e276e190f22263d0cb6ce8526fcdb0d2e1f\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"quick-protobuf-codec\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15a0580ab32b169745d7a39db2ba969226ca16738931be152a3209b409de2474\"\ndependencies = [\n \"asynchronous-codec\",\n \"bytes\",\n \"quick-protobuf\",\n \"thiserror 1.0.69\",\n \"unsigned-varint 0.8.0\",\n]\n\n[[package]]\nname = \"quinn\"\nversion = \"0.11.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3bd15a6f2967aef83887dcb9fec0014580467e33720d073560cf015a5683012\"\ndependencies = [\n \"bytes\",\n \"cfg_aliases\",\n \"futures-io\",\n \"pin-project-lite\",\n \"quinn-proto\",\n \"quinn-udp\",\n \"rustc-hash 2.1.1\",\n \"rustls 0.23.26\",\n \"socket2\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"quinn-proto\"\nversion = \"0.11.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b820744eb4dc9b57a3398183639c511b5a26d2ed702cedd3febaa1393caa22cc\"\ndependencies = [\n \"bytes\",\n \"getrandom 0.3.2\",\n \"rand 0.9.1\",\n \"ring 0.17.14\",\n \"rustc-hash 2.1.1\",\n \"rustls 0.23.26\",\n \"rustls-pki-types\",\n \"slab\",\n \"thiserror 2.0.12\",\n \"tinyvec\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"quinn-udp\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"541d0f57c6ec747a90738a52741d3221f7960e8ac2f0ff4b1a63680e033b4ab5\"\ndependencies = [\n \"cfg_aliases\",\n \"libc\",\n \"once_cell\",\n \"socket2\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"r-efi\"\nversion = \"5.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74765f6d916ee2faa39bc8e68e4f3ed8949b48cccdac59983d287a7cb71ce9c5\"\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"serde\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fbfd9d094a40bf3ae768db9361049ace4c0e04a4fd6b359518bd7b73a73dd97\"\ndependencies = [\n \"rand_chacha 0.9.0\",\n \"rand_core 0.9.3\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3022b5f1df60f26e1ffddd6c66e8aa15de382ae63b3a0c1bfc0e4d3e3f325cb\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.9.3\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom 0.2.15\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99d9a13982dcf210057a8a78572b2217b667c3beacbf3a0d8b454f6f82837d38\"\ndependencies = [\n \"getrandom 0.3.2\",\n]\n\n[[package]]\nname = \"rand_xorshift\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\ndependencies = [\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rawpointer\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3\"\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"rcgen\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75e669e5202259b5314d1ea5397316ad400819437857b90861765f24c4cf80a2\"\ndependencies = [\n \"pem 3.0.5\",\n \"ring 0.17.14\",\n \"rustls-pki-types\",\n \"time\",\n \"yasna\",\n]\n\n[[package]]\nname = \"recvmsg\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3edd4d5d42c92f0a659926464d4cce56b562761267ecf0f469d85b7de384175\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2f103c6d277498fbceb16e84d317e2a400f160f46904d5f5410848c829511a3\"\ndependencies = [\n \"bitflags 2.9.0\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"libredox\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd6f9d3d47bdd2ad6945c5015a226ec6155d0bcdfd8f7cd29f86b71f8de99d2b\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"libredox\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"ref-cast\"\nversion = \"1.0.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a0ae411dbe946a674d89546582cea4ba2bb8defac896622d6496f14c23ba5cf\"\ndependencies = [\n \"ref-cast-impl\",\n]\n\n[[package]]\nname = \"ref-cast-impl\"\nversion = \"1.0.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1165225c21bff1f3bbce98f5a1f889949bc902d3575308cc7b0de30b4f6d27c7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"regalloc2\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80535183cae11b149d618fbd3c37e38d7cda589d82d7769e196ca9a9042d7621\"\ndependencies = [\n \"fxhash\",\n \"log\",\n \"slice-group-by\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"regalloc2\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad156d539c879b7a24a363a2016d77961786e71f48f2e2fc8302a92abd2429a6\"\ndependencies = [\n \"hashbrown 0.13.2\",\n \"log\",\n \"rustc-hash 1.1.0\",\n \"slice-group-by\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.9\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-lite\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53a49587ad06b26609c52e423de037e7f57f20d53535d66e08c695f347df952a\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd67538700a17451e7cba03ac727fb961abb7607553461627b97de0b89cf4a62\"\ndependencies = [\n \"base64 0.21.7\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2 0.3.26\",\n \"http 0.2.12\",\n \"http-body 0.4.6\",\n \"hyper 0.14.32\",\n \"hyper-rustls 0.24.2\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustls 0.21.12\",\n \"rustls-pemfile 1.0.4\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"sync_wrapper 0.1.2\",\n \"system-configuration 0.5.1\",\n \"tokio\",\n \"tokio-rustls 0.24.1\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"webpki-roots 0.25.4\",\n \"winreg\",\n]\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.12.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d19c46a6fdd48bc4dab94b6103fccc55d34c67cc0ad04653aad4ea2a07cd7bbb\"\ndependencies = [\n \"base64 0.22.1\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2 0.4.9\",\n \"http 1.3.1\",\n \"http-body 1.0.1\",\n \"http-body-util\",\n \"hyper 1.6.0\",\n \"hyper-rustls 0.27.5\",\n \"hyper-tls\",\n \"hyper-util\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"native-tls\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustls-pemfile 2.2.0\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"sync_wrapper 1.0.2\",\n \"system-configuration 0.6.1\",\n \"tokio\",\n \"tokio-native-tls\",\n \"tower\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"windows-registry\",\n]\n\n[[package]]\nname = \"resolv-conf\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48375394603e3dd4b2d64371f7148fd8c7baa2680e28741f2cb8d23b59e3d4c4\"\ndependencies = [\n \"hostname\",\n]\n\n[[package]]\nname = \"rfc6979\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8dd2a808d456c4a54e300a23e9f5a67e122c3024119acbfd73e3bf664491cb2\"\ndependencies = [\n \"hmac 0.12.1\",\n \"subtle\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.16.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"once_cell\",\n \"spin 0.5.2\",\n \"untrusted 0.7.1\",\n \"web-sys\",\n \"winapi\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4689e6c2294d81e88dc6261c768b63bc4fcdb852be6d1352498b114f61383b7\"\ndependencies = [\n \"cc\",\n \"cfg-if 1.0.0\",\n \"getrandom 0.2.15\",\n \"libc\",\n \"untrusted 0.9.0\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ripemd\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd124222d17ad93a644ed9d011a40f4fb64aa54275c08cc216524a9ea82fb09f\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"rlp\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb919243f34364b6bd2fc10ef797edbfa75f33c252e7998527479c6d6b47e1ec\"\ndependencies = [\n \"bytes\",\n \"rlp-derive\",\n \"rustc-hex\",\n]\n\n[[package]]\nname = \"rlp-derive\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e33d7b2abe0c340d8797fe2907d3f20d3b5ea5908683618bfe80df7f621f672a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"rococo-runtime-constants\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1ec6683a2e52fe3be2eaf942a80619abd99eb36e973c5ab4489a2f3b100db5c\"\ndependencies = [\n \"frame-support\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-common\",\n \"smallvec\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-weights\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n]\n\n[[package]]\nname = \"rtnetlink\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a552eb82d19f38c3beed3f786bd23aa434ceb9ac43ab44419ca6d67a7e186c0\"\ndependencies = [\n \"futures\",\n \"log\",\n \"netlink-packet-core\",\n \"netlink-packet-route\",\n \"netlink-packet-utils\",\n \"netlink-proto\",\n \"netlink-sys\",\n \"nix\",\n \"thiserror 1.0.69\",\n \"tokio\",\n]\n\n[[package]]\nname = \"ruint\"\nversion = \"1.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78a46eb779843b2c4f21fac5773e25d6d5b7c8f0922876c91541790d2ca27eef\"\ndependencies = [\n \"alloy-rlp\",\n \"ark-ff 0.3.0\",\n \"ark-ff 0.4.2\",\n \"bytes\",\n \"fastrlp 0.3.1\",\n \"fastrlp 0.4.0\",\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"primitive-types 0.12.2\",\n \"proptest\",\n \"rand 0.8.5\",\n \"rand 0.9.1\",\n \"rlp\",\n \"ruint-macro\",\n \"serde\",\n \"valuable\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ruint-macro\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48fd7bd8a6377e15ad9d42a8ec25371b94ddc67abe7c8b9127bec79bebaaae18\"\n\n[[package]]\nname = \"rust-bls-bn254\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84ab37c09dbee7ec3b610ecd703c6a79708aef66d52052ee7bfec0bbb9e7a8cd\"\ndependencies = [\n \"aes\",\n \"ark-bn254\",\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-std 0.5.0\",\n \"ctr\",\n \"hex\",\n \"hkdf\",\n \"num-bigint\",\n \"num-traits\",\n \"pbkdf2 0.12.2\",\n \"rand 0.8.5\",\n \"scrypt 0.11.0\",\n \"serde\",\n \"serde_json\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n \"unicode-normalization\",\n \"uuid 0.8.2\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\ndependencies = [\n \"semver 0.9.0\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0dfe2087c51c460008730de8b57e6a320782fbfb312e1f4d520e6c6fae155ee\"\ndependencies = [\n \"semver 0.11.0\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92\"\ndependencies = [\n \"semver 1.0.26\",\n]\n\n[[package]]\nname = \"rusticata-macros\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"faf0c4a6ece9950b9abdb62b1cfcf2a68b3b67a10ba445b3bb85be2a293d0632\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.36.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"305efbd14fde4139eb501df5f136994bb520b033fa9fbdce287507dc23b8c7ed\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys 0.1.4\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdb5bc1ae2baa591800df16c9ca78619bf65c0488b41b96ccec5d11220d8c154\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys 0.4.15\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d97817398dd4bb2e6da002002db259209759911da105da92bec29ccb12cf58bf\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys 0.9.4\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.21.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e\"\ndependencies = [\n \"log\",\n \"ring 0.17.14\",\n \"rustls-webpki 0.101.7\",\n \"sct\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df51b5869f3a441595eac5e8ff14d486ff285f7b8c0df8770e49c3b56351f0f0\"\ndependencies = [\n \"aws-lc-rs\",\n \"log\",\n \"once_cell\",\n \"ring 0.17.14\",\n \"rustls-pki-types\",\n \"rustls-webpki 0.103.1\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pemfile 1.0.4\",\n \"schannel\",\n \"security-framework 2.11.1\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcff2dd52b58a8d98a70243663a0d234c4e2b79235637849d15913394a247d3\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pki-types\",\n \"schannel\",\n \"security-framework 3.2.0\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c\"\ndependencies = [\n \"base64 0.21.7\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dce314e5fee3f39953d46bb63bb8a46d40c2f8fb7cc5a3b6cab2bde9721d6e50\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"917ce264624a4b4db1c364dcc35bfca9ded014d0a958cd47ad3e960e988ea51c\"\ndependencies = [\n \"web-time\",\n]\n\n[[package]]\nname = \"rustls-platform-verifier\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a5467026f437b4cb2a533865eaa73eb840019a0916f4b9ec563c6e617e086c9\"\ndependencies = [\n \"core-foundation 0.10.0\",\n \"core-foundation-sys\",\n \"jni\",\n \"log\",\n \"once_cell\",\n \"rustls 0.23.26\",\n \"rustls-native-certs 0.8.1\",\n \"rustls-platform-verifier-android\",\n \"rustls-webpki 0.103.1\",\n \"security-framework 3.2.0\",\n \"security-framework-sys\",\n \"webpki-root-certs\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"rustls-platform-verifier-android\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f87165f0995f63a9fbeea62b64d10b4d9d8e78ec6d7d51fb2125fda7bb36788f\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.101.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765\"\ndependencies = [\n \"ring 0.17.14\",\n \"untrusted 0.9.0\",\n]\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.103.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fef8b8769aaccf73098557a87cd1816b4f9c7c16811c9c77142aa695c16f2c03\"\ndependencies = [\n \"aws-lc-rs\",\n \"ring 0.17.14\",\n \"rustls-pki-types\",\n \"untrusted 0.9.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n\n[[package]]\nname = \"rusty-fork\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb3dcc6e454c328bb824492db107ab7c0ae8fcffe4ad210136ef014458c1bc4f\"\ndependencies = [\n \"fnv\",\n \"quick-error\",\n \"tempfile\",\n \"wait-timeout\",\n]\n\n[[package]]\nname = \"ruzstd\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5174a470eeb535a721ae9fdd6e291c2411a906b96592182d05217591d5c5cf7b\"\ndependencies = [\n \"byteorder\",\n \"derive_more 0.99.19\",\n]\n\n[[package]]\nname = \"rw-stream-sink\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8c9026ff5d2f23da5e45bbc283f156383001bfb09c4e44256d02c1a685fe9a1\"\ndependencies = [\n \"futures\",\n \"pin-project\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f\"\n\n[[package]]\nname = \"safe-mix\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d3d055a2582e6b00ed7a31c1524040aa391092bf636328350813f3a0605215c\"\ndependencies = [\n \"rustc_version 0.2.3\",\n]\n\n[[package]]\nname = \"safe_arch\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96b02de82ddbe1b636e6170c21be622223aea188ef2e139be0a5b219ec215323\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"salsa20\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97a22f5af31f73a954c10289c93e8a50cc23d971e80ee446f1f6f7137a088213\"\ndependencies = [\n \"cipher\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"sc-allocator\"\nversion = \"29.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b975ee3a95eaacb611e7b415737a7fa2db4d8ad7b880cc1b97371b04e95c7903\"\ndependencies = [\n \"log\",\n \"sp-core\",\n \"sp-wasm-interface\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"sc-executor\"\nversion = \"0.40.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f0cc0a3728fd033589183460c5a49b2e7545d09dc89a098216ef9e9aadcd9dc\"\ndependencies = [\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"sc-executor-common\",\n \"sc-executor-polkavm\",\n \"sc-executor-wasmtime\",\n \"schnellru\",\n \"sp-api\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-io\",\n \"sp-panic-handler\",\n \"sp-runtime-interface\",\n \"sp-trie\",\n \"sp-version\",\n \"sp-wasm-interface\",\n \"tracing\",\n]\n\n[[package]]\nname = \"sc-executor-common\"\nversion = \"0.35.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c3b703a33dcb7cddf19176fdf12294b9a6408125836b0f4afee3e6969e7f190\"\ndependencies = [\n \"polkavm 0.9.3\",\n \"sc-allocator\",\n \"sp-maybe-compressed-blob\",\n \"sp-wasm-interface\",\n \"thiserror 1.0.69\",\n \"wasm-instrument\",\n]\n\n[[package]]\nname = \"sc-executor-polkavm\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26fe58d9cacfab73e5595fa84b80f7bd03efebe54a0574daaeb221a1d1f7ab80\"\ndependencies = [\n \"log\",\n \"polkavm 0.9.3\",\n \"sc-executor-common\",\n \"sp-wasm-interface\",\n]\n\n[[package]]\nname = \"sc-executor-wasmtime\"\nversion = \"0.35.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8cd498f2f77ec1f861c30804f5bfd796d4afcc8ce44ea1f11bfbe2847551d161\"\ndependencies = [\n \"anyhow\",\n \"cfg-if 1.0.0\",\n \"libc\",\n \"log\",\n \"parking_lot 0.12.3\",\n \"rustix 0.36.17\",\n \"sc-allocator\",\n \"sc-executor-common\",\n \"sp-runtime-interface\",\n \"sp-wasm-interface\",\n \"wasmtime\",\n]\n\n[[package]]\nname = \"sc-keystore\"\nversion = \"33.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebd4b5b5713006117641c049cb082e8a439dd6ac5e7b171e5cef5ce1c9f8af8\"\ndependencies = [\n \"array-bytes\",\n \"parking_lot 0.12.3\",\n \"serde_json\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-keystore\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27243ab0d2d6235072b017839c5f0cd1a3b1ce45c0f7a715363b0c7d36c76c94\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"scale-type-resolver\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d78196772d25b90a98046794ce0fe2588b39ebdfbdc1e45b4c6c85dd43bebad\"\ndependencies = [\n \"parity-scale-codec\",\n \"primitive-types 0.13.1\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-type-resolver\",\n \"smallvec\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f4b54a1211260718b92832b661025d1f1a4b6930fbadd6908e00edd265fa5f7\"\ndependencies = [\n \"darling\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64901733157f9d25ef86843bd783eda439fac7efb0ad5a615d12d2cf3a29464b\"\ndependencies = [\n \"parity-scale-codec\",\n \"primitive-types 0.13.1\",\n \"scale-bits\",\n \"scale-encode-derive\",\n \"scale-type-resolver\",\n \"smallvec\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78a3993a13b4eafa89350604672c8757b7ea84c7c5947d4b3691e3169c96379b\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"346a3b32eba2640d17a9cb5927056b08f3de90f65b72fe09402c2ad07d684d0b\"\ndependencies = [\n \"bitvec\",\n \"cfg-if 1.0.0\",\n \"derive_more 1.0.0\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c6630024bf739e2179b91fb424b28898baf819414262c5d376677dbff1fe7ebf\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"scale-type-resolver\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0cded6518aa0bd6c1be2b88ac81bf7044992f0f154bfbabd5ad34f43512abcb\"\ndependencies = [\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-typegen\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc3173be608895eb117cf397ab4f31f00e2ed2c7af1c6e0b8f5d51d0a0967053\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"scale-info\",\n \"syn 2.0.100\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"scale-value\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ca8b26b451ecb7fd7b62b259fa28add63d12ec49bbcac0e01fcb4b5ae0c09aa\"\ndependencies = [\n \"base58\",\n \"blake2\",\n \"either\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-type-resolver\",\n \"serde\",\n \"thiserror 2.0.12\",\n \"yap\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"schnellru\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"356285bbf17bea63d9e52e96bd18f039672ac92b55b8cb997d6162a2a37d1649\"\ndependencies = [\n \"ahash 0.8.11\",\n \"cfg-if 1.0.0\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec 0.7.6\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core 0.6.4\",\n \"serde_bytes\",\n \"sha2 0.10.8\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"scoped-tls\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"scratch\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f6280af86e5f559536da57a45ebc84948833b3bee313a7dd25232e09c878a52\"\n\n[[package]]\nname = \"scrypt\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f9e24d2b632954ded8ab2ef9fea0a0c769ea56ea98bddbafbad22caeeadf45d\"\ndependencies = [\n \"hmac 0.12.1\",\n \"pbkdf2 0.11.0\",\n \"salsa20\",\n \"sha2 0.10.8\",\n]\n\n[[package]]\nname = \"scrypt\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0516a385866c09368f0b5bcd1caff3366aace790fcd46e2bb032697bb172fd1f\"\ndependencies = [\n \"password-hash 0.5.0\",\n \"pbkdf2 0.12.2\",\n \"salsa20\",\n \"sha2 0.10.8\",\n]\n\n[[package]]\nname = \"sct\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414\"\ndependencies = [\n \"ring 0.17.14\",\n \"untrusted 0.9.0\",\n]\n\n[[package]]\nname = \"sec1\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3e97a565f76233a6003f9f5c54be1d9c5bdfa3eccfb189469f11ec4901c47dc\"\ndependencies = [\n \"base16ct\",\n \"der\",\n \"generic-array\",\n \"pkcs8\",\n \"serdect\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys 0.9.2\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.30.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b50c5943d326858130af85e049f2661ba3c78b26589b8ab98e65e80ae44a1252\"\ndependencies = [\n \"bitcoin_hashes 0.14.0\",\n \"rand 0.8.5\",\n \"secp256k1-sys 0.10.1\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4387882333d3aa8cb20530a17c69a3752e97837832f34f6dccc760e715001d9\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"secrecy\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e\"\ndependencies = [\n \"zeroize\",\n]\n\n[[package]]\nname = \"secrecy\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e891af845473308773346dc847b2c23ee78fe442e0472ac50e22a18a93d3ae5a\"\ndependencies = [\n \"zeroize\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"core-foundation 0.9.4\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"271720403f46ca04f7ba6f55d438f8bd878d6b8ca0a1046e8228c4145bcbb316\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"core-foundation 0.10.0\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49db231d56a190491cb4aeda9527f1ad45345af50b0851622a7adb8c03b01c32\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\ndependencies = [\n \"semver-parser 0.7.0\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\ndependencies = [\n \"semver-parser 0.7.0\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser 0.10.3\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56e6fa9c48d24d85fb3de5ad847117517440f6beceb7798af16b4a87d616b8d0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9900206b54a3527fdc7b8a938bffd94a568bac4f4aa8113b209df75a09c0dec2\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"send_wrapper\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f638d531eccd6e23b980caf34876660d38e265409d8e99b397ab71eb3612fad0\"\n\n[[package]]\nname = \"send_wrapper\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd0b0ec5f1c1ca621c432a25813d8d60c88abe6d3e08a3eb9cf37d97a0fe3d73\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.219\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-big-array\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd31f59f6fe2b0c055371bb2f16d7f0aa7d8881676c04a55b1596d1a17cd10a4\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8437fd221bde2d4ca316d61b90e337e9e702b3820b87d63caa9ba6c02bd06d96\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.219\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.140\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20068b6e96dc6c9bd23e01df8827e6c7e1f2fddd43c21810382803c136b99373\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_repr\"\nversion = \"0.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"175ee3e80ae9982737ca543e96133087cbd9a485eecc3bc4de9c1a37b47ea59c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6b6f7f2fcb69f747921f79f3926bd1e203fce4fef62c268dd3abfb6d86029aa\"\ndependencies = [\n \"base64 0.22.1\",\n \"chrono\",\n \"hex\",\n \"indexmap 1.9.3\",\n \"indexmap 2.9.0\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"serde_with_macros\",\n \"time\",\n]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d00caa5193a3c8362ac2b73be6b9e768aa5a4b2f721d8f4b339600c3cb51f8e\"\ndependencies = [\n \"darling\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"serdect\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a84f14a19e9a014bb9f4512488d9829a68e04ecabffb0f9904cd1ace94598177\"\ndependencies = [\n \"base16ct\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cpufeatures\",\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"\ndependencies = [\n \"block-buffer 0.9.0\",\n \"cfg-if 1.0.0\",\n \"cpufeatures\",\n \"digest 0.9.0\",\n \"opaque-debug\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cpufeatures\",\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest 0.10.7\",\n \"keccak\",\n]\n\n[[package]]\nname = \"sha3-asm\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c28efc5e327c837aa837c59eae585fc250715ef939ac32881bcc11677cd02d46\"\ndependencies = [\n \"cc\",\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24188a676b6ae68c3b2cb3a01be17fbf7240ce009799bb56d5b1409051e78fde\"\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"signature\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de\"\ndependencies = [\n \"digest 0.10.7\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"simba\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3a386a501cd104797982c15ae17aafe8b9261315b5d07e3ec803f2ea26be0fa\"\ndependencies = [\n \"approx\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"wide\",\n]\n\n[[package]]\nname = \"simple-mermaid\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"620a1d43d70e142b1d46a929af51d44f383db9c7a2ec122de2cd992ccfcf3c18\"\n\n[[package]]\nname = \"simple_asn1\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"297f631f50729c8c99b84667867963997ec0b50f32b2a7dbcab828ef0541e8bb\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"thiserror 2.0.12\",\n \"time\",\n]\n\n[[package]]\nname = \"siphasher\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"slice-group-by\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"826167069c09b99d56f31e9ae5c99049e932a98c9dc2dac47645b08dbbf76ba7\"\n\n[[package]]\nname = \"slot-range-helper\"\nversion = \"15.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e34f1146a457a5c554dedeae6c7273aa54c3b031f3e9eb0abd037b5511e2ce9\"\ndependencies = [\n \"enumn\",\n \"parity-scale-codec\",\n \"paste\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8917285742e9f3e1683f0a9c4e6b57960b7314d0b08d30d1ecd426713ee2eee9\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"smol\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a33bd3e260892199c3ccfc487c88b2da2265080acb316cd920da72fdfd7c599f\"\ndependencies = [\n \"async-channel\",\n \"async-executor\",\n \"async-fs\",\n \"async-io\",\n \"async-lock\",\n \"async-net\",\n \"async-process\",\n \"blocking\",\n \"futures-lite\",\n]\n\n[[package]]\nname = \"smoldot\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"966e72d77a3b2171bb7461d0cb91f43670c63558c62d7cf42809cae6c8b6b818\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"async-lock\",\n \"atomic-take\",\n \"base64 0.22.1\",\n \"bip39\",\n \"blake2-rfc\",\n \"bs58\",\n \"chacha20\",\n \"crossbeam-queue\",\n \"derive_more 0.99.19\",\n \"ed25519-zebra\",\n \"either\",\n \"event-listener\",\n \"fnv\",\n \"futures-lite\",\n \"futures-util\",\n \"hashbrown 0.14.5\",\n \"hex\",\n \"hmac 0.12.1\",\n \"itertools 0.13.0\",\n \"libm\",\n \"libsecp256k1\",\n \"merlin\",\n \"nom\",\n \"num-bigint\",\n \"num-rational\",\n \"num-traits\",\n \"pbkdf2 0.12.2\",\n \"pin-project\",\n \"poly1305\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"ruzstd\",\n \"schnorrkel\",\n \"serde\",\n \"serde_json\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"siphasher\",\n \"slab\",\n \"smallvec\",\n \"soketto\",\n \"twox-hash\",\n \"wasmi\",\n \"x25519-dalek\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"smoldot-light\"\nversion = \"0.16.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a33b06891f687909632ce6a4e3fd7677b24df930365af3d0bcb078310129f3f\"\ndependencies = [\n \"async-channel\",\n \"async-lock\",\n \"base64 0.22.1\",\n \"blake2-rfc\",\n \"bs58\",\n \"derive_more 0.99.19\",\n \"either\",\n \"event-listener\",\n \"fnv\",\n \"futures-channel\",\n \"futures-lite\",\n \"futures-util\",\n \"hashbrown 0.14.5\",\n \"hex\",\n \"itertools 0.13.0\",\n \"log\",\n \"lru 0.12.5\",\n \"parking_lot 0.12.3\",\n \"pin-project\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"serde\",\n \"serde_json\",\n \"siphasher\",\n \"slab\",\n \"smol\",\n \"smoldot\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"snow\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"850948bee068e713b8ab860fe1adc4d109676ab4c3b621fd8147f06b261f2f85\"\ndependencies = [\n \"aes-gcm\",\n \"blake2\",\n \"chacha20poly1305\",\n \"curve25519-dalek\",\n \"rand_core 0.6.4\",\n \"ring 0.17.14\",\n \"rustc_version 0.4.1\",\n \"sha2 0.10.8\",\n \"subtle\",\n]\n\n[[package]]\nname = \"snowbridge-amcl\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"460a9ed63cdf03c1b9847e8a12a5f5ba19c4efd5869e4a737e05be25d7c427e5\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"snowbridge-beacon-primitives\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25492622eb3e9e8f4e1c8abdfc4253b71735ea2dd8f571c5054292849b1a31cd\"\ndependencies = [\n \"byte-slice-cast\",\n \"frame-support\",\n \"hex\",\n \"parity-scale-codec\",\n \"rlp\",\n \"scale-info\",\n \"serde\",\n \"snowbridge-ethereum\",\n \"snowbridge-milagro-bls\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"ssz_rs\",\n \"ssz_rs_derive\",\n]\n\n[[package]]\nname = \"snowbridge-core\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6be61e4db95d1e253a1d5e722953b2d2f6605e5f9761f0a919e5d3fbdbff9da9\"\ndependencies = [\n \"ethabi-decode\",\n \"frame-support\",\n \"frame-system\",\n \"hex-literal\",\n \"parity-scale-codec\",\n \"polkadot-parachain-primitives\",\n \"scale-info\",\n \"serde\",\n \"snowbridge-beacon-primitives\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n]\n\n[[package]]\nname = \"snowbridge-ethereum\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc3d6d549c57df27cf89ec852f932fa4008eea877a6911a87e03e8002104eabd\"\ndependencies = [\n \"ethabi-decode\",\n \"ethbloom\",\n \"ethereum-types\",\n \"hex-literal\",\n \"parity-bytes\",\n \"parity-scale-codec\",\n \"rlp\",\n \"scale-info\",\n \"serde\",\n \"serde-big-array\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"snowbridge-milagro-bls\"\nversion = \"1.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"026aa8638f690a53e3f7676024b9e913b1cab0111d1b7b92669d40a188f9d7e6\"\ndependencies = [\n \"hex\",\n \"lazy_static\",\n \"parity-scale-codec\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"snowbridge-amcl\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"snowbridge-outbound-queue-merkle-tree\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74c6a9b65fa61711b704f0c6afb3663c6288288e8822ddae5cc1146fe3ad9ce8\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"snowbridge-outbound-queue-runtime-api\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d27b8d9cb8022637a5ce4f52692520fa75874f393e04ef5cd75bd8795087f6\"\ndependencies = [\n \"frame-support\",\n \"parity-scale-codec\",\n \"snowbridge-core\",\n \"snowbridge-outbound-queue-merkle-tree\",\n \"sp-api\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"snowbridge-pallet-ethereum-client\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65826ed8585a614c0818e5e8da5a57bb0da36ba3e540e193672ac66d2f131d6c\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-timestamp\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"snowbridge-beacon-primitives\",\n \"snowbridge-core\",\n \"snowbridge-ethereum\",\n \"snowbridge-pallet-ethereum-client-fixtures\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"snowbridge-pallet-ethereum-client-fixtures\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3984b98465af1d862d4e87ba783e1731f2a3f851b148d6cb98d526cebd351185\"\ndependencies = [\n \"hex-literal\",\n \"snowbridge-beacon-primitives\",\n \"snowbridge-core\",\n \"sp-core\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"snowbridge-pallet-inbound-queue\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82a21efb385a4ec84476b1eb3d850905d77a395e5e477047752981daaadcdca7\"\ndependencies = [\n \"alloy-primitives 0.4.2\",\n \"alloy-sol-types 0.4.2\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"pallet-balances\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"snowbridge-beacon-primitives\",\n \"snowbridge-core\",\n \"snowbridge-pallet-inbound-queue-fixtures\",\n \"snowbridge-router-primitives\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"snowbridge-pallet-inbound-queue-fixtures\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f251e579b3d3d93cf833c8e503122808742dee33e7ea53b0f292a76c024d66\"\ndependencies = [\n \"hex-literal\",\n \"snowbridge-beacon-primitives\",\n \"snowbridge-core\",\n \"sp-core\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"snowbridge-pallet-outbound-queue\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7d49478041b6512c710d0d4655675d146fe00a8e0c1624e5d8a1d6c161d490f\"\ndependencies = [\n \"bridge-hub-common\",\n \"ethabi-decode\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"snowbridge-core\",\n \"snowbridge-outbound-queue-merkle-tree\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"snowbridge-pallet-system\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"674db59b3c8013382e5c07243ad9439b64d81d2e8b3c4f08d752b55aa5de697e\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"snowbridge-core\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"snowbridge-router-primitives\"\nversion = \"0.16.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aefe74eafeac92e1d9e46b7bb76ec297f6182b4a023f7e7eb7eb8be193f93bef\"\ndependencies = [\n \"frame-support\",\n \"hex-literal\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"snowbridge-core\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"snowbridge-runtime-common\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6093f0e73d6cfdd2eea8712155d1d75b5063fc9b1d854d2665b097b4bb29570d\"\ndependencies = [\n \"frame-support\",\n \"log\",\n \"parity-scale-codec\",\n \"snowbridge-core\",\n \"sp-arithmetic\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"snowbridge-runtime-test-common\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"893480d6cde2489051c65efb5d27fa87efe047b3b61216d8e27bb2f0509b7faf\"\ndependencies = [\n \"cumulus-pallet-parachain-system\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-balances\",\n \"pallet-collator-selection\",\n \"pallet-message-queue\",\n \"pallet-session\",\n \"pallet-timestamp\",\n \"pallet-utility\",\n \"pallet-xcm\",\n \"parachains-runtimes-test-utils\",\n \"parity-scale-codec\",\n \"snowbridge-core\",\n \"snowbridge-pallet-ethereum-client\",\n \"snowbridge-pallet-ethereum-client-fixtures\",\n \"snowbridge-pallet-outbound-queue\",\n \"snowbridge-pallet-system\",\n \"sp-core\",\n \"sp-io\",\n \"sp-keyring\",\n \"sp-runtime\",\n \"staging-parachain-info\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"snowbridge-system-runtime-api\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68b8b83b3db781c49844312a23965073e4d93341739a35eafe526c53b578d3b7\"\ndependencies = [\n \"parity-scale-codec\",\n \"snowbridge-core\",\n \"sp-api\",\n \"sp-std\",\n \"staging-xcm\",\n]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f5fd57c80058a56cf5c777ab8a126398ece8e442983605d280a44ce79d0edef\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"soketto\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e859df029d160cb88608f5d7df7fb4753fd20fdfb4de5644f3d8b8440841721\"\ndependencies = [\n \"base64 0.22.1\",\n \"bytes\",\n \"futures\",\n \"httparse\",\n \"log\",\n \"rand 0.8.5\",\n \"sha1\",\n]\n\n[[package]]\nname = \"solang-parser\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c425ce1c59f4b154717592f0bdf4715c3a1d55058883622d3157e1f0908a5b26\"\ndependencies = [\n \"itertools 0.11.0\",\n \"lalrpop\",\n \"lalrpop-util\",\n \"phf\",\n \"thiserror 1.0.69\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"sp-api\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbce492e0482134128b7729ea36f5ef1a9f9b4de2d48ff8dde7b5e464e28ce75\"\ndependencies = [\n \"docify\",\n \"hash-db\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api-proc-macro\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-metadata-ir\",\n \"sp-runtime\",\n \"sp-runtime-interface\",\n \"sp-state-machine\",\n \"sp-trie\",\n \"sp-version\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"sp-api-proc-macro\"\nversion = \"20.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9aadf9e97e694f0e343978aa632938c5de309cbcc8afed4136cb71596737278\"\ndependencies = [\n \"Inflector\",\n \"blake2\",\n \"expander\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"sp-application-crypto\"\nversion = \"38.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d8133012faa5f75b2f0b1619d9f720c1424ac477152c143e5f7dbde2fe1a958\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n]\n\n[[package]]\nname = \"sp-arithmetic\"\nversion = \"26.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9971b30935cea3858664965039dabd80f67aca74cc6cc6dd42ff1ab14547bc53\"\ndependencies = [\n \"docify\",\n \"integer-sqrt\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"sp-authority-discovery\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"519c33af0e25ba2dd2eb3790dc404d634b6e4ce0801bcc8fa3574e07c365e734\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-block-builder\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74738809461e3d4bd707b5b94e0e0c064a623a74a6a8fe5c98514417a02858dd\"\ndependencies = [\n \"sp-api\",\n \"sp-inherents\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-consensus-aura\"\nversion = \"0.40.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a8faaa05bbcb9c41f0cc535c4c1315abf6df472b53eae018678d1b4d811ac47\"\ndependencies = [\n \"async-trait\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-consensus-slots\",\n \"sp-inherents\",\n \"sp-runtime\",\n \"sp-timestamp\",\n]\n\n[[package]]\nname = \"sp-consensus-babe\"\nversion = \"0.40.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36ee95e17ee8dcd14db7d584b899a426565ca9abe5a266ab82277977fc547f86\"\ndependencies = [\n \"async-trait\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-consensus-slots\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-runtime\",\n \"sp-timestamp\",\n]\n\n[[package]]\nname = \"sp-consensus-beefy\"\nversion = \"22.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1d97e8cd75d85d15cda6f1923cf3834e848f80d5a6de1cf4edbbc5f0ad607eb\"\ndependencies = [\n \"lazy_static\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-crypto-hashing\",\n \"sp-io\",\n \"sp-keystore\",\n \"sp-mmr-primitives\",\n \"sp-runtime\",\n \"sp-weights\",\n \"strum 0.26.3\",\n]\n\n[[package]]\nname = \"sp-consensus-grandpa\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"587b791efe6c5f18e09dbbaf1ece0ee7b5fe51602c233e7151a3676b0de0260b\"\ndependencies = [\n \"finality-grandpa\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-keystore\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-consensus-pow\"\nversion = \"0.40.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fa6b7d199a1c16cea1b74ee7cee174bf08f2120ab66a87bee7b12353100b47c\"\ndependencies = [\n \"parity-scale-codec\",\n \"sp-api\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-consensus-slots\"\nversion = \"0.40.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbafb7ed44f51c22fa277fb39b33dc601fa426133a8e2b53f3f46b10f07fba43\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-timestamp\",\n]\n\n[[package]]\nname = \"sp-core\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c961a5e33fb2962fa775c044ceba43df9c6f917e2c35d63bfe23738468fa76a7\"\ndependencies = [\n \"array-bytes\",\n \"bitflags 1.3.2\",\n \"blake2\",\n \"bounded-collections\",\n \"bs58\",\n \"dyn-clonable\",\n \"ed25519-zebra\",\n \"futures\",\n \"hash-db\",\n \"hash256-std-hasher\",\n \"impl-serde 0.4.0\",\n \"itertools 0.11.0\",\n \"k256\",\n \"libsecp256k1\",\n \"log\",\n \"merlin\",\n \"parity-bip39\",\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"paste\",\n \"primitive-types 0.12.2\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1 0.28.2\",\n \"secrecy 0.8.0\",\n \"serde\",\n \"sp-crypto-hashing\",\n \"sp-debug-derive\",\n \"sp-externalities\",\n \"sp-runtime-interface\",\n \"sp-std\",\n \"sp-storage\",\n \"ss58-registry\",\n \"substrate-bip39\",\n \"thiserror 1.0.69\",\n \"tracing\",\n \"w3f-bls\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"sp-core-hashing\"\nversion = \"16.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f812cb2dff962eb378c507612a50f1c59f52d92eb97b710f35be3c2346a3cd7\"\ndependencies = [\n \"sp-crypto-hashing\",\n]\n\n[[package]]\nname = \"sp-crypto-ec-utils\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2acb24f8a607a48a87f0ee4c090fc5d577eee49ff39ced6a3c491e06eca03c37\"\ndependencies = [\n \"ark-bls12-377 0.4.0\",\n \"ark-bls12-377-ext\",\n \"ark-bls12-381 0.4.0\",\n \"ark-bls12-381-ext\",\n \"ark-bw6-761\",\n \"ark-bw6-761-ext\",\n \"ark-ec 0.4.2\",\n \"ark-ed-on-bls12-377\",\n \"ark-ed-on-bls12-377-ext\",\n \"ark-ed-on-bls12-381-bandersnatch\",\n \"ark-ed-on-bls12-381-bandersnatch-ext\",\n \"ark-scale\",\n \"sp-runtime-interface\",\n]\n\n[[package]]\nname = \"sp-crypto-hashing\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc9927a7f81334ed5b8a98a4a978c81324d12bd9713ec76b5c68fd410174c5eb\"\ndependencies = [\n \"blake2b_simd\",\n \"byteorder\",\n \"digest 0.10.7\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"twox-hash\",\n]\n\n[[package]]\nname = \"sp-crypto-hashing-proc-macro\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b85d0f1f1e44bd8617eb2a48203ee854981229e3e79e6f468c7175d5fd37489b\"\ndependencies = [\n \"quote\",\n \"sp-crypto-hashing\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"sp-debug-derive\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d09fa0a5f7299fb81ee25ae3853d26200f7a348148aed6de76be905c007dbe\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"sp-externalities\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a904407d61cb94228c71b55a9d3708e9d6558991f9e83bd42bd91df37a159d30\"\ndependencies = [\n \"environmental\",\n \"parity-scale-codec\",\n \"sp-storage\",\n]\n\n[[package]]\nname = \"sp-genesis-builder\"\nversion = \"0.15.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a646ed222fd86d5680faa4a8967980eb32f644cae6c8523e1c689a6deda3e8\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde_json\",\n \"sp-api\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-inherents\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afffbddc380d99a90c459ba1554bbbc01d62e892de9f1485af6940b89c4c0d57\"\ndependencies = [\n \"async-trait\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"sp-io\"\nversion = \"38.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47cb95e32bd5f7e2d8d6cd222a14c207a8da05b3f5ab9699d338e99c791320d\"\ndependencies = [\n \"bytes\",\n \"docify\",\n \"ed25519-dalek\",\n \"libsecp256k1\",\n \"log\",\n \"parity-scale-codec\",\n \"polkavm-derive 0.9.1\",\n \"rustversion\",\n \"secp256k1 0.28.2\",\n \"sp-core\",\n \"sp-crypto-hashing\",\n \"sp-externalities\",\n \"sp-keystore\",\n \"sp-runtime-interface\",\n \"sp-state-machine\",\n \"sp-tracing\",\n \"sp-trie\",\n \"tracing\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"sp-keyring\"\nversion = \"39.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c0e20624277f578b27f44ecfbe2ebc2e908488511ee2c900c5281599f700ab3\"\ndependencies = [\n \"sp-core\",\n \"sp-runtime\",\n \"strum 0.26.3\",\n]\n\n[[package]]\nname = \"sp-keystore\"\nversion = \"0.40.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0248b4d784cb4a01472276928977121fa39d977a5bb24793b6b15e64b046df42\"\ndependencies = [\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"sp-core\",\n \"sp-externalities\",\n]\n\n[[package]]\nname = \"sp-maybe-compressed-blob\"\nversion = \"11.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0c768c11afbe698a090386876911da4236af199cd38a5866748df4d8628aeff\"\ndependencies = [\n \"thiserror 1.0.69\",\n \"zstd 0.12.4\",\n]\n\n[[package]]\nname = \"sp-metadata-ir\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a616fa51350b35326682a472ee8e6ba742fdacb18babac38ecd46b3e05ead869\"\ndependencies = [\n \"frame-metadata 16.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"sp-mixnet\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b0b017dd54823b6e62f9f7171a1df350972e5c6d0bf17e0c2f78680b5c31942\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-application-crypto\",\n]\n\n[[package]]\nname = \"sp-mmr-primitives\"\nversion = \"34.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a12dd76e368f1e48144a84b4735218b712f84b3f976970e2f25a29b30440e10\"\ndependencies = [\n \"log\",\n \"parity-scale-codec\",\n \"polkadot-ckb-merkle-mountain-range\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-core\",\n \"sp-debug-derive\",\n \"sp-runtime\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"sp-npos-elections\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af922f112c7c1ed199eabe14f12a82ceb75e1adf0804870eccfbcf3399492847\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-offchain\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d9de237d72ecffd07f90826eef18360208b16d8de939d54e61591fac0fcbf99\"\ndependencies = [\n \"sp-api\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-panic-handler\"\nversion = \"13.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8b52e69a577cbfdea62bfaf16f59eb884422ce98f78b5cd8d9bf668776bced1\"\ndependencies = [\n \"backtrace\",\n \"regex\",\n]\n\n[[package]]\nname = \"sp-runtime\"\nversion = \"39.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1e00503b83cf48fffe48746b91b9b832d6785d4e2eeb0941558371eac6baac6\"\ndependencies = [\n \"docify\",\n \"either\",\n \"hash256-std-hasher\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"paste\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"serde\",\n \"simple-mermaid\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n \"sp-weights\",\n \"tracing\",\n]\n\n[[package]]\nname = \"sp-runtime-interface\"\nversion = \"28.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"985eb981f40c689c6a0012c937b68ed58dabb4341d06f2dfe4dfd5ed72fa4017\"\ndependencies = [\n \"bytes\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"polkavm-derive 0.9.1\",\n \"primitive-types 0.12.2\",\n \"sp-externalities\",\n \"sp-runtime-interface-proc-macro\",\n \"sp-std\",\n \"sp-storage\",\n \"sp-tracing\",\n \"sp-wasm-interface\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"sp-runtime-interface-proc-macro\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0195f32c628fee3ce1dfbbf2e7e52a30ea85f3589da9fe62a8b816d70fc06294\"\ndependencies = [\n \"Inflector\",\n \"expander\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"sp-session\"\nversion = \"36.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00a3a307fedc423fb8cd2a7726a3bbb99014f1b4b52f26153993e2aae3338fe6\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-core\",\n \"sp-keystore\",\n \"sp-runtime\",\n \"sp-staking 36.0.0\",\n]\n\n[[package]]\nname = \"sp-staking\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"143a764cacbab58347d8b2fd4c8909031fb0888d7b02a0ec9fa44f81f780d732\"\ndependencies = [\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-staking\"\nversion = \"36.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a73eedb4b85f4cd420d31764827546aa22f82ce1646d0fd258993d051de7a90\"\ndependencies = [\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-state-machine\"\nversion = \"0.43.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"930104d6ae882626e8880d9b1578da9300655d337a3ffb45e130c608b6c89660\"\ndependencies = [\n \"hash-db\",\n \"log\",\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"rand 0.8.5\",\n \"smallvec\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-panic-handler\",\n \"sp-trie\",\n \"thiserror 1.0.69\",\n \"tracing\",\n \"trie-db\",\n]\n\n[[package]]\nname = \"sp-statement-store\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c219bc34ef4d1f9835f3ed881f965643c32034fcc030eb33b759dadbc802c1c2\"\ndependencies = [\n \"aes-gcm\",\n \"curve25519-dalek\",\n \"ed25519-dalek\",\n \"hkdf\",\n \"parity-scale-codec\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"sha2 0.10.8\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-crypto-hashing\",\n \"sp-externalities\",\n \"sp-runtime\",\n \"sp-runtime-interface\",\n \"thiserror 1.0.69\",\n \"x25519-dalek\",\n]\n\n[[package]]\nname = \"sp-std\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12f8ee986414b0a9ad741776762f4083cd3a5128449b982a3919c4df36874834\"\n\n[[package]]\nname = \"sp-storage\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99c82989b3a4979a7e1ad848aad9f5d0b4388f1f454cc131766526601ab9e8f8\"\ndependencies = [\n \"impl-serde 0.4.0\",\n \"parity-scale-codec\",\n \"ref-cast\",\n \"serde\",\n \"sp-debug-derive\",\n]\n\n[[package]]\nname = \"sp-timestamp\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72a1cb4df653d62ccc0dbce1db45d1c9443ec60247ee9576962d24da4c9c6f07\"\ndependencies = [\n \"async-trait\",\n \"parity-scale-codec\",\n \"sp-inherents\",\n \"sp-runtime\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"sp-tracing\"\nversion = \"17.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6147a5b8c98b9ed4bf99dc033fab97a468b4645515460974c8784daeb7c35433\"\ndependencies = [\n \"parity-scale-codec\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber 0.3.19\",\n]\n\n[[package]]\nname = \"sp-transaction-pool\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc4bf251059485a7dd38fe4afeda8792983511cc47f342ff4695e2dcae6b5247\"\ndependencies = [\n \"sp-api\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"sp-transaction-storage-proof\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c765c2e9817d95f13d42a9f2295c60723464669765c6e5acbacebd2f54932f67\"\ndependencies = [\n \"async-trait\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-core\",\n \"sp-inherents\",\n \"sp-runtime\",\n \"sp-trie\",\n]\n\n[[package]]\nname = \"sp-trie\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6282aef9f4b6ecd95a67a45bcdb67a71f4a4155c09a53c10add4ffe823db18cd\"\ndependencies = [\n \"ahash 0.8.11\",\n \"hash-db\",\n \"lazy_static\",\n \"memory-db\",\n \"nohash-hasher\",\n \"parity-scale-codec\",\n \"parking_lot 0.12.3\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"schnellru\",\n \"sp-core\",\n \"sp-externalities\",\n \"thiserror 1.0.69\",\n \"tracing\",\n \"trie-db\",\n \"trie-root\",\n]\n\n[[package]]\nname = \"sp-version\"\nversion = \"37.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d521a405707b5be561367cd3d442ff67588993de24062ce3adefcf8437ee9fe1\"\ndependencies = [\n \"impl-serde 0.4.0\",\n \"parity-scale-codec\",\n \"parity-wasm\",\n \"scale-info\",\n \"serde\",\n \"sp-crypto-hashing-proc-macro\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-version-proc-macro\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"sp-version-proc-macro\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aee8f6730641a65fcf0c8f9b1e448af4b3bb083d08058b47528188bccc7b7a7\"\ndependencies = [\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"sp-wasm-interface\"\nversion = \"21.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b066baa6d57951600b14ffe1243f54c47f9c23dd89c262e17ca00ae8dca58be9\"\ndependencies = [\n \"anyhow\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"wasmtime\",\n]\n\n[[package]]\nname = \"sp-weights\"\nversion = \"31.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"515aa194eabac059041df2dbee75b059b99981213ec680e9de85b45b6988346a\"\ndependencies = [\n \"bounded-collections\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"smallvec\",\n \"sp-arithmetic\",\n \"sp-debug-derive\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"spki\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d91ed6c858b01f942cd56b37a94b3e0a1798290327d1236e4d9cf4eaca44d29d\"\ndependencies = [\n \"base64ct\",\n \"der\",\n]\n\n[[package]]\nname = \"ss58-registry\"\nversion = \"1.51.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19409f13998e55816d1c728395af0b52ec066206341d939e22e7766df9b494b8\"\ndependencies = [\n \"Inflector\",\n \"num-format\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"ssz_rs\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"057291e5631f280978fa9c8009390663ca4613359fc1318e36a8c24c392f6d1f\"\ndependencies = [\n \"bitvec\",\n \"num-bigint\",\n \"sha2 0.9.9\",\n \"ssz_rs_derive\",\n]\n\n[[package]]\nname = \"ssz_rs_derive\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f07d54c4d01a1713eb363b55ba51595da15f6f1211435b71466460da022aa140\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"staging-parachain-info\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d28266dfddbfff721d70ad2f873380845b569adfab32f257cf97d9cedd894b68\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"staging-xcm\"\nversion = \"14.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"250c5290c308d1f462403dc4e7926976727917e98a196de1ea4a49c86341f21c\"\ndependencies = [\n \"array-bytes\",\n \"bounded-collections\",\n \"derivative\",\n \"environmental\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-runtime\",\n \"sp-weights\",\n \"xcm-procedural\",\n]\n\n[[package]]\nname = \"staging-xcm-builder\"\nversion = \"17.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1693870a07e3fd8115c02b44e1223ce149b6cfa0b60f59a1c0fbc26637766a5\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-asset-conversion\",\n \"pallet-transaction-payment\",\n \"parity-scale-codec\",\n \"polkadot-parachain-primitives\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-weights\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"staging-xcm-executor\"\nversion = \"17.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c89045f495097293ce29df1f3f459e9ccc991ff2ee88a4a91e8110a6886d2c8\"\ndependencies = [\n \"environmental\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-weights\",\n \"staging-xcm\",\n \"tracing\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"string-interner\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c6a0d765f5807e98a091107bae0a56ea3799f66a5de47b2c84c94a39c09974e\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"hashbrown 0.14.5\",\n \"serde\",\n]\n\n[[package]]\nname = \"string_cache\"\nversion = \"0.8.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf776ba3fa74f83bf4b63c3dcbbf82173db2632ed8452cb2d891d33f459de70f\"\ndependencies = [\n \"new_debug_unreachable\",\n \"parking_lot 0.12.3\",\n \"phf_shared\",\n \"precomputed-hash\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"structmeta\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e1575d8d40908d70f6fd05537266b90ae71b15dbbe7a8b7dffa2b759306d329\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"structmeta-derive\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"structmeta-derive\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"152a0b65a590ff6c3da95cabe2353ee04e6167c896b28e3b14478c2636c922fc\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"strum\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"063e6045c0e62079840579a7e47a355ae92f60eb74daaf156fb1e84ba164e63f\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\"\ndependencies = [\n \"strum_macros 0.26.4\",\n]\n\n[[package]]\nname = \"strum\"\nversion = \"0.27.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f64def088c51c9510a8579e3c5d67c65349dcf755e5479ad3d010aa6454e2c32\"\ndependencies = [\n \"strum_macros 0.27.1\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59\"\ndependencies = [\n \"heck 0.4.1\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.27.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c77a8c5abcaf0f9ce05d62342b7d298c346515365c36b673df4ebe3ced01fde8\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"substrate-bip39\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca58ffd742f693dc13d69bdbb2e642ae239e0053f6aab3b104252892f856700a\"\ndependencies = [\n \"hmac 0.12.1\",\n \"pbkdf2 0.12.2\",\n \"schnorrkel\",\n \"sha2 0.10.8\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"substrate-wasm-builder\"\nversion = \"24.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf035ffe7335fb24053edfe4d0a5780250eda772082a1b80ae25835dd4c09265\"\ndependencies = [\n \"build-helper\",\n \"cargo_metadata 0.15.4\",\n \"console\",\n \"filetime\",\n \"jobserver\",\n \"parity-wasm\",\n \"polkavm-linker 0.9.2\",\n \"sp-maybe-compressed-blob\",\n \"strum 0.26.3\",\n \"tempfile\",\n \"toml 0.8.20\",\n \"walkdir\",\n \"wasm-opt\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"subxt\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"797dd0ed45245ea027fc6a2afadcf4c03027aa7bcb06dc7043e75a060d7ce180\"\ndependencies = [\n \"async-trait\",\n \"derive-where\",\n \"either\",\n \"frame-metadata 18.0.0\",\n \"futures\",\n \"hex\",\n \"impl-serde 0.5.0\",\n \"jsonrpsee\",\n \"parity-scale-codec\",\n \"polkadot-sdk\",\n \"primitive-types 0.13.1\",\n \"scale-bits\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"scale-value\",\n \"serde\",\n \"serde_json\",\n \"subxt-core\",\n \"subxt-lightclient\",\n \"subxt-macro\",\n \"subxt-metadata\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n \"tracing\",\n \"url\",\n \"wasm-bindgen-futures\",\n \"web-time\",\n]\n\n[[package]]\nname = \"subxt-codegen\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b622b426e571fdd86b08ad0bec4ef0e323d937bb56ff5edcfaf4716f50384ca\"\ndependencies = [\n \"heck 0.5.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"scale-info\",\n \"scale-typegen\",\n \"subxt-metadata\",\n \"syn 2.0.100\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"subxt-core\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e7617b6c7ed846d3f69c0eafb11884730c9161217c82e1edc370e3872c2e5cf\"\ndependencies = [\n \"base58\",\n \"blake2\",\n \"derive-where\",\n \"frame-decode\",\n \"frame-metadata 18.0.0\",\n \"hashbrown 0.14.5\",\n \"hex\",\n \"impl-serde 0.5.0\",\n \"keccak-hash\",\n \"parity-scale-codec\",\n \"polkadot-sdk\",\n \"primitive-types 0.13.1\",\n \"scale-bits\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"scale-value\",\n \"serde\",\n \"serde_json\",\n \"subxt-metadata\",\n \"thiserror 2.0.12\",\n \"tracing\",\n]\n\n[[package]]\nname = \"subxt-lightclient\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcf5e44c8eb70f4f95e7017df85bc626356c633384b2615900ee09825ee79ef1\"\ndependencies = [\n \"futures\",\n \"futures-util\",\n \"serde\",\n \"serde_json\",\n \"smoldot-light\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tokio-stream\",\n \"tracing\",\n]\n\n[[package]]\nname = \"subxt-macro\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a12ac44222225bf0eb96a32d663d00fac8d2917f4873e4f6b5d00cdd1f5b6e7b\"\ndependencies = [\n \"darling\",\n \"parity-scale-codec\",\n \"proc-macro-error2\",\n \"quote\",\n \"scale-typegen\",\n \"subxt-codegen\",\n \"subxt-utils-fetchmetadata\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"subxt-metadata\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"330f692b6e2c590265d222be717e9f88c017ee4b2ddb50907f31fffdf26072a5\"\ndependencies = [\n \"frame-decode\",\n \"frame-metadata 18.0.0\",\n \"hashbrown 0.14.5\",\n \"parity-scale-codec\",\n \"polkadot-sdk\",\n \"scale-info\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"subxt-signer\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcd700f4d7cc146414ca7bdc47eac84f3465418ce310e10232a67c2040afd704\"\ndependencies = [\n \"base64 0.22.1\",\n \"bip39\",\n \"cfg-if 1.0.0\",\n \"crypto_secretbox\",\n \"hex\",\n \"hmac 0.12.1\",\n \"parity-scale-codec\",\n \"pbkdf2 0.12.2\",\n \"polkadot-sdk\",\n \"regex\",\n \"schnorrkel\",\n \"scrypt 0.11.0\",\n \"secp256k1 0.30.0\",\n \"secrecy 0.10.3\",\n \"serde\",\n \"serde_json\",\n \"sha2 0.10.8\",\n \"subxt-core\",\n \"thiserror 2.0.12\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"subxt-utils-fetchmetadata\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"526a07767a8f16a9471dda6e3d41c23f9656b302e9cdefdcd7d5a74830284a5d\"\ndependencies = [\n \"hex\",\n \"parity-scale-codec\",\n \"thiserror 2.0.12\",\n]\n\n[[package]]\nname = \"svm-rs\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11297baafe5fa0c99d5722458eac6a5e25c01eb1b8e5cd137f54079093daa7a4\"\ndependencies = [\n \"dirs 5.0.1\",\n \"fs2\",\n \"hex\",\n \"once_cell\",\n \"reqwest 0.11.27\",\n \"semver 1.0.26\",\n \"serde\",\n \"serde_json\",\n \"sha2 0.10.8\",\n \"thiserror 1.0.69\",\n \"url\",\n \"zip\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.100\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn-solidity\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b837ef12ab88835251726eb12237655e61ec8dc8a280085d1961cdc3dfd047\"\ndependencies = [\n \"paste\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"syn-solidity\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4560533fbd6914b94a8fb5cc803ed6801c3455668db3b810702c57612bac9412\"\ndependencies = [\n \"paste\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bf256ce5efdfa370213c1dabab5935a12e49f2c58d15e9eac2870d3b4f27263\"\ndependencies = [\n \"futures-core\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"system-configuration\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation 0.9.4\",\n \"system-configuration-sys 0.5.0\",\n]\n\n[[package]]\nname = \"system-configuration\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c879d448e9d986b661742763247d3693ed13609438cf3d006f51f5368a5ba6b\"\ndependencies = [\n \"bitflags 2.9.0\",\n \"core-foundation 0.9.4\",\n \"system-configuration-sys 0.6.0\",\n]\n\n[[package]]\nname = \"system-configuration-sys\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"system-configuration-sys\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e1d1b10ced5ca923a1fcb8d03e96b8d3268065d724548c0211415ff6ac6bac4\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"tagptr\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b2093cf4c8eb1e67749a6762251bc9cd836b6fc171623bd0a9d324d37af2417\"\n\n[[package]]\nname = \"tangle-subxt\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96a67cb08b9287064e14221a69ddec5db1f3dcc59e831510beef7c284ca3714d\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"subxt\",\n \"subxt-core\",\n \"subxt-signer\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.12.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61c41af27dd6d1e27b1b16b489db798443478cef1f06a660c96db617ba5de3b1\"\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.19.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7437ac7763b9b123ccf33c338a5cc1bac6f69b45a136c19bdd8a65e3916435bf\"\ndependencies = [\n \"fastrand\",\n \"getrandom 0.3.2\",\n \"once_cell\",\n \"rustix 1.0.5\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"term\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f\"\ndependencies = [\n \"dirs-next\",\n \"rustversion\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"testcontainers\"\nversion = \"0.23.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59a4f01f39bb10fc2a5ab23eb0d888b1e2bb168c157f61a1b98e6c501c639c74\"\ndependencies = [\n \"async-trait\",\n \"bollard\",\n \"bollard-stubs\",\n \"bytes\",\n \"docker_credential\",\n \"either\",\n \"etcetera\",\n \"futures\",\n \"log\",\n \"memchr\",\n \"parse-display\",\n \"pin-project-lite\",\n \"serde\",\n \"serde_json\",\n \"serde_with\",\n \"thiserror 2.0.12\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-tar\",\n \"tokio-util 0.7.14\",\n \"url\",\n]\n\n[[package]]\nname = \"testnet-parachains-constants\"\nversion = \"10.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94bceae6f7c89d47daff6c7e05f712551a01379f61b07d494661941144878589\"\ndependencies = [\n \"cumulus-primitives-core\",\n \"frame-support\",\n \"polkadot-core-primitives\",\n \"rococo-runtime-constants\",\n \"smallvec\",\n \"sp-runtime\",\n \"staging-xcm\",\n \"westend-runtime-constants\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl 1.0.69\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708\"\ndependencies = [\n \"thiserror-impl 2.0.12\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"threadpool\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa\"\ndependencies = [\n \"num_cpus\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a7619e19bc266e0f9c5e6686659d394bc57973859340060a69221e57dbc0c40\"\ndependencies = [\n \"deranged\",\n \"itoa\",\n \"num-conv\",\n \"powerfmt\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9e9a38711f559d9e3ce1cdb06dd7c5b8ea546bc90052da6d06bb76da74bb07c\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3526739392ec93fd8b359c8e98514cb3e8e021beb4e5f597b00a0221f8ed8a49\"\ndependencies = [\n \"num-conv\",\n \"time-core\",\n]\n\n[[package]]\nname = \"tiny-keccak\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c9d3793400a45f954c52e73d068316d76b6f4e36977e3fcebb13a2721e80237\"\ndependencies = [\n \"crunchy\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tnt-bls\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6990a03a2e5c1c972663de4b29d9551aebe1808f46fdf4a46dda76cf6606e120\"\ndependencies = [\n \"ark-bls12-377 0.5.0\",\n \"ark-bls12-381 0.5.0\",\n \"ark-ec 0.5.0\",\n \"ark-ff 0.5.0\",\n \"ark-serialize 0.5.0\",\n \"ark-serialize-derive 0.5.0\",\n \"arrayref\",\n \"constcat\",\n \"digest 0.10.7\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"thiserror 1.0.69\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"tnt-core-bytecode\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2720c6e903ef89a610b5aa82f37d4034f987c59bdc30fb6198d96d0dc6182106\"\ndependencies = [\n \"serde_json\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.44.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6b88822cbe49de4185e3a4cbf8321dd487cf5fe0c5c65695fef6346371e9c48\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"parking_lot 0.12.3\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e06d43f1345a3bcd39f6a56dbb7dcab2ba47e68e8ac134855e7e2bdbaf8cab8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"\ndependencies = [\n \"native-tls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-rustls\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081\"\ndependencies = [\n \"rustls 0.21.12\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-rustls\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e727b36a1a0e8b74c376ac2211e40c2c8af09fb4013c60d910495810f008e9b\"\ndependencies = [\n \"rustls 0.23.26\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca58d7bba4a75707817a2c44174253f9236b2d5fbd055602e9d5c07c139a047\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n \"tokio\",\n \"tokio-util 0.7.14\",\n]\n\n[[package]]\nname = \"tokio-tar\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d5714c010ca3e5c27114c1cdeb9d14641ace49874aa5626d7149e47aedace75\"\ndependencies = [\n \"filetime\",\n \"futures-core\",\n \"libc\",\n \"redox_syscall 0.3.5\",\n \"tokio\",\n \"tokio-stream\",\n \"xattr\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"212d5dcb2a1ce06d81107c3d0ffa3121fe974b73f068c8282cb1c32328113b6c\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"rustls 0.21.12\",\n \"tokio\",\n \"tokio-rustls 0.24.1\",\n \"tungstenite 0.20.1\",\n \"webpki-roots 0.25.4\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a9daff607c6d2bf6c16fd681ccb7eecc83e4e2cdc1ca067ffaadfca5de7f084\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"rustls 0.23.26\",\n \"rustls-pki-types\",\n \"tokio\",\n \"tokio-rustls 0.26.2\",\n \"tungstenite 0.26.2\",\n \"webpki-roots 0.26.8\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.6.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36943ee01a6d67977dd3f84a5a1d2efeb4ada3a1ae771cadfaa535d9d9fc6507\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"log\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b9590b93e6fcc1739458317cccd391ad3955e2bde8913edf6f95f9e65a8f034\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-io\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd87a5cdd6ffab733b2f74bc4fd7ee5fff6634124999ac278c35fc78c6120148\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\ndependencies = [\n \"indexmap 2.9.0\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tower\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d039ad9159c98b70ecfd540b2573b97f7f52c3e8d9f8ad57a24b916a536975f9\"\ndependencies = [\n \"futures-core\",\n \"futures-util\",\n \"pin-project-lite\",\n \"sync_wrapper 1.0.2\",\n \"tokio\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"log\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-error\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b1581020d7a273442f5b45074a6a57d5757ad0a47dac0e9f0bd57b81936f3db\"\ndependencies = [\n \"tracing\",\n \"tracing-subscriber 0.3.19\",\n]\n\n[[package]]\nname = \"tracing-futures\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2\"\ndependencies = [\n \"futures\",\n \"futures-task\",\n \"pin-project\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-serde\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"704b1aeb7be0d0a84fc9828cae51dab5970fee5088f83d1dd7ee6f6246fc6ff1\"\ndependencies = [\n \"serde\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71\"\ndependencies = [\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"time\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-serde\",\n]\n\n[[package]]\nname = \"trait-variant\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70977707304198400eb4835a78f6a9f928bf41bba420deb8fdb175cd965d77a7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"trie-db\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c992b4f40c234a074d48a757efeabb1a6be88af84c0c23f7ca158950cb0ae7f\"\ndependencies = [\n \"hash-db\",\n \"log\",\n \"rustc-hex\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"trie-root\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4ed310ef5ab98f5fa467900ed906cb9232dd5376597e00fd4cba2a449d06c0b\"\ndependencies = [\n \"hash-db\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b\"\n\n[[package]]\nname = \"tt-call\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f195fd851901624eee5a58c4bb2b4f06399148fcd0ed336e6f1cb60a9881df\"\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e3dac10fd62eaf6617d3a904ae222845979aec67c615d1c842b4002c7666fb9\"\ndependencies = [\n \"byteorder\",\n \"bytes\",\n \"data-encoding\",\n \"http 0.2.12\",\n \"httparse\",\n \"log\",\n \"rand 0.8.5\",\n \"rustls 0.21.12\",\n \"sha1\",\n \"thiserror 1.0.69\",\n \"url\",\n \"utf-8\",\n]\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4793cb5e56680ecbb1d843515b23b6de9a75eb04b66643e256a396d43be33c13\"\ndependencies = [\n \"bytes\",\n \"data-encoding\",\n \"http 1.3.1\",\n \"httparse\",\n \"log\",\n \"rand 0.9.1\",\n \"rustls 0.23.26\",\n \"rustls-pki-types\",\n \"sha1\",\n \"thiserror 2.0.12\",\n \"utf-8\",\n]\n\n[[package]]\nname = \"tuplex\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"676ac81d5454c4dcf37955d34fa8626ede3490f744b86ca14a7b90168d2a08aa\"\n\n[[package]]\nname = \"twox-hash\"\nversion = \"1.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"digest 0.10.7\",\n \"rand 0.8.5\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2896d95c02a80c6d6a5d6e953d479f5ddf2dfdb6a244441010e373ac0fb88971\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"uint\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"909988d098b2f738727b161a106cfc7cab00c539c2687a8836f8e565976fb53e\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unarray\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eaea85b334db583fe3274d12b4cd1880032beab409c0d774be044d4480ab9a94\"\n\n[[package]]\nname = \"unicase\"\nversion = \"2.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b844d17643ee918803943289730bec8aac480150456169e647ed0b576ba539\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n\n[[package]]\nname = \"universal-hash\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc1de2c688dc15305988b563c3854064043356019f97a4b46276fe734c4f07ea\"\ndependencies = [\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"unsigned-varint\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6889a77d49f1f013504cec6bf97a2c730394adedaeb1deb5ea08949a50541105\"\n\n[[package]]\nname = \"unsigned-varint\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb066959b24b5196ae73cb057f45598450d2c5f71460e98c49b738086eff9c06\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"url\"\nversion = \"2.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"utf-8\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9\"\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"uuid\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"serde\",\n]\n\n[[package]]\nname = \"uuid\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"458f7a779bf54acc9f347480ac654f68407d3aab21269a6e3c9f922acd9e2da9\"\ndependencies = [\n \"getrandom 0.3.2\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"vsimd\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c3082ca00d5a5ef149bb8b555a72ae84c9c59f7250f013ac822ac2e49b19c64\"\n\n[[package]]\nname = \"w3f-bls\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6bfb937b3d12077654a9e43e32a4e9c20177dd9fea0f3aba673e7840bb54f32\"\ndependencies = [\n \"ark-bls12-377 0.4.0\",\n \"ark-bls12-381 0.4.0\",\n \"ark-ec 0.4.2\",\n \"ark-ff 0.4.2\",\n \"ark-serialize 0.4.2\",\n \"ark-serialize-derive 0.4.2\",\n \"arrayref\",\n \"digest 0.10.7\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"wait-timeout\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ac3b126d3914f9849036f826e054cbabdc8519970b8998ddaf3b5bd3c65f11\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.14.2+wasi-0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3\"\ndependencies = [\n \"wit-bindgen-rt\",\n]\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.100\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"once_cell\",\n \"rustversion\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.100\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"js-sys\",\n \"once_cell\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.100\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.100\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.100\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"wasm-instrument\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a47ecb37b9734d1085eaa5ae1a81e60801fd8c28d4cabdd8aedb982021918bc\"\ndependencies = [\n \"parity-wasm\",\n]\n\n[[package]]\nname = \"wasm-opt\"\nversion = \"0.116.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fd87a4c135535ffed86123b6fb0f0a5a0bc89e50416c942c5f0662c645f679c\"\ndependencies = [\n \"anyhow\",\n \"libc\",\n \"strum 0.24.1\",\n \"strum_macros 0.24.3\",\n \"tempfile\",\n \"thiserror 1.0.69\",\n \"wasm-opt-cxx-sys\",\n \"wasm-opt-sys\",\n]\n\n[[package]]\nname = \"wasm-opt-cxx-sys\"\nversion = \"0.116.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c57b28207aa724318fcec6575fe74803c23f6f266fce10cbc9f3f116762f12e\"\ndependencies = [\n \"anyhow\",\n \"cxx\",\n \"cxx-build\",\n \"wasm-opt-sys\",\n]\n\n[[package]]\nname = \"wasm-opt-sys\"\nversion = \"0.116.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a1cce564dc768dacbdb718fc29df2dba80bd21cb47d8f77ae7e3d95ceb98cbe\"\ndependencies = [\n \"anyhow\",\n \"cc\",\n \"cxx\",\n \"cxx-build\",\n]\n\n[[package]]\nname = \"wasmi\"\nversion = \"0.32.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50386c99b9c32bd2ed71a55b6dd4040af2580530fae8bdb9a6576571a80d0cca\"\ndependencies = [\n \"arrayvec 0.7.6\",\n \"multi-stash\",\n \"num-derive\",\n \"num-traits\",\n \"smallvec\",\n \"spin 0.9.8\",\n \"wasmi_collections\",\n \"wasmi_core\",\n \"wasmparser-nostd\",\n]\n\n[[package]]\nname = \"wasmi_collections\"\nversion = \"0.32.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c128c039340ffd50d4195c3f8ce31aac357f06804cfc494c8b9508d4b30dca4\"\ndependencies = [\n \"ahash 0.8.11\",\n \"hashbrown 0.14.5\",\n \"string-interner\",\n]\n\n[[package]]\nname = \"wasmi_core\"\nversion = \"0.32.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a23b3a7f6c8c3ceeec6b83531ee61f0013c56e51cbf2b14b0f213548b23a4b41\"\ndependencies = [\n \"downcast-rs\",\n \"libm\",\n \"num-traits\",\n \"paste\",\n]\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.102.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48134de3d7598219ab9eaf6b91b15d8e50d31da76b8519fe4ecfcec2cf35104b\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"url\",\n]\n\n[[package]]\nname = \"wasmparser-nostd\"\nversion = \"0.100.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5a015fe95f3504a94bb1462c717aae75253e39b9dd6c3fb1062c934535c64aa\"\ndependencies = [\n \"indexmap-nostd\",\n]\n\n[[package]]\nname = \"wasmtime\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f907fdead3153cb9bfb7a93bbd5b62629472dc06dee83605358c64c52ed3dda9\"\ndependencies = [\n \"anyhow\",\n \"bincode\",\n \"cfg-if 1.0.0\",\n \"indexmap 1.9.3\",\n \"libc\",\n \"log\",\n \"object 0.30.4\",\n \"once_cell\",\n \"paste\",\n \"psm\",\n \"rayon\",\n \"serde\",\n \"target-lexicon\",\n \"wasmparser\",\n \"wasmtime-cache\",\n \"wasmtime-cranelift\",\n \"wasmtime-environ\",\n \"wasmtime-jit\",\n \"wasmtime-runtime\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-asm-macros\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3b9daa7c14cd4fa3edbf69de994408d5f4b7b0959ac13fa69d465f6597f810d\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"wasmtime-cache\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c86437fa68626fe896e5afc69234bb2b5894949083586535f200385adfd71213\"\ndependencies = [\n \"anyhow\",\n \"base64 0.21.7\",\n \"bincode\",\n \"directories-next\",\n \"file-per-thread-logger\",\n \"log\",\n \"rustix 0.36.17\",\n \"serde\",\n \"sha2 0.10.8\",\n \"toml 0.5.11\",\n \"windows-sys 0.45.0\",\n \"zstd 0.11.2+zstd.1.5.2\",\n]\n\n[[package]]\nname = \"wasmtime-cranelift\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1cefde0cce8cb700b1b21b6298a3837dba46521affd7b8c38a9ee2c869eee04\"\ndependencies = [\n \"anyhow\",\n \"cranelift-codegen\",\n \"cranelift-entity\",\n \"cranelift-frontend\",\n \"cranelift-native\",\n \"cranelift-wasm\",\n \"gimli 0.27.3\",\n \"log\",\n \"object 0.30.4\",\n \"target-lexicon\",\n \"thiserror 1.0.69\",\n \"wasmparser\",\n \"wasmtime-cranelift-shared\",\n \"wasmtime-environ\",\n]\n\n[[package]]\nname = \"wasmtime-cranelift-shared\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd041e382ef5aea1b9fc78442394f1a4f6d676ce457e7076ca4cb3f397882f8b\"\ndependencies = [\n \"anyhow\",\n \"cranelift-codegen\",\n \"cranelift-native\",\n \"gimli 0.27.3\",\n \"object 0.30.4\",\n \"target-lexicon\",\n \"wasmtime-environ\",\n]\n\n[[package]]\nname = \"wasmtime-environ\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a990198cee4197423045235bf89d3359e69bd2ea031005f4c2d901125955c949\"\ndependencies = [\n \"anyhow\",\n \"cranelift-entity\",\n \"gimli 0.27.3\",\n \"indexmap 1.9.3\",\n \"log\",\n \"object 0.30.4\",\n \"serde\",\n \"target-lexicon\",\n \"thiserror 1.0.69\",\n \"wasmparser\",\n \"wasmtime-types\",\n]\n\n[[package]]\nname = \"wasmtime-jit\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0de48df552cfca1c9b750002d3e07b45772dd033b0b206d5c0968496abf31244\"\ndependencies = [\n \"addr2line 0.19.0\",\n \"anyhow\",\n \"bincode\",\n \"cfg-if 1.0.0\",\n \"cpp_demangle\",\n \"gimli 0.27.3\",\n \"log\",\n \"object 0.30.4\",\n \"rustc-demangle\",\n \"serde\",\n \"target-lexicon\",\n \"wasmtime-environ\",\n \"wasmtime-jit-debug\",\n \"wasmtime-jit-icache-coherence\",\n \"wasmtime-runtime\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-jit-debug\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e0554b84c15a27d76281d06838aed94e13a77d7bf604bbbaf548aa20eb93846\"\ndependencies = [\n \"object 0.30.4\",\n \"once_cell\",\n \"rustix 0.36.17\",\n]\n\n[[package]]\nname = \"wasmtime-jit-icache-coherence\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aecae978b13f7f67efb23bd827373ace4578f2137ec110bbf6a4a7cde4121bbd\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-runtime\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"658cf6f325232b6760e202e5255d823da5e348fdea827eff0a2a22319000b441\"\ndependencies = [\n \"anyhow\",\n \"cc\",\n \"cfg-if 1.0.0\",\n \"indexmap 1.9.3\",\n \"libc\",\n \"log\",\n \"mach\",\n \"memfd\",\n \"memoffset\",\n \"paste\",\n \"rand 0.8.5\",\n \"rustix 0.36.17\",\n \"wasmtime-asm-macros\",\n \"wasmtime-environ\",\n \"wasmtime-jit-debug\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-types\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4f6fffd2a1011887d57f07654dd112791e872e3ff4a2e626aee8059ee17f06f\"\ndependencies = [\n \"cranelift-entity\",\n \"serde\",\n \"thiserror 1.0.69\",\n \"wasmparser\",\n]\n\n[[package]]\nname = \"wasmtimer\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0048ad49a55b9deb3953841fa1fc5858f0efbcb7a18868c899a360269fac1b23\"\ndependencies = [\n \"futures\",\n \"js-sys\",\n \"parking_lot 0.12.3\",\n \"pin-utils\",\n \"slab\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.77\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"web-time\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki-root-certs\"\nversion = \"0.26.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09aed61f5e8d2c18344b3faa33a4c837855fe56642757754775548fee21386c4\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.25.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f20c57d8d7db6d3b86154206ae5d8fba62dd39573114de97c2cb0578251f8e1\"\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2210b291f7ea53617fbafcc4939f10914214ec15aace5ba62293a668f322c5c9\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"westend-runtime-constants\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06861bf945aadac59f4be23b44c85573029520ea9bd3d6c9ab21c8b306e81cdc\"\ndependencies = [\n \"frame-support\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-common\",\n \"smallvec\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-weights\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\n \"either\",\n \"home\",\n \"once_cell\",\n \"rustix 0.38.44\",\n]\n\n[[package]]\nname = \"wide\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41b5576b9a81633f3e8df296ce0063042a73507636cbe956c61133dd7034ab22\"\ndependencies = [\n \"bytemuck\",\n \"safe_arch\",\n]\n\n[[package]]\nname = \"widestring\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd7cf3379ca1aac9eea11fba24fd7e315d621f8dfe35c8d7d2be8b793726e07d\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efc5cf48f83140dcaab716eeaea345f9e93d0018fb81162753a3f76c3397b538\"\ndependencies = [\n \"windows-core 0.53.0\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd04d41d93c4992d421894c18c8b43496aa748dd4c081bac0dc93eb0489272b6\"\ndependencies = [\n \"windows-core 0.58.0\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dcc5b895a6377f1ab9fa55acedab1fd5ac0db66ad1e6c7f47e28a22e446a5dd\"\ndependencies = [\n \"windows-result 0.1.2\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba6d44ec8c2591c134257ce647b7ea6b20335bf6379a27dac5f1641fcf59f99\"\ndependencies = [\n \"windows-implement 0.58.0\",\n \"windows-interface 0.58.0\",\n \"windows-result 0.2.0\",\n \"windows-strings 0.1.0\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.61.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4763c1de310c86d75a878046489e2e5ba02c649d185f21c67d4cf8a56d098980\"\ndependencies = [\n \"windows-implement 0.60.0\",\n \"windows-interface 0.59.1\",\n \"windows-link\",\n \"windows-result 0.3.2\",\n \"windows-strings 0.4.0\",\n]\n\n[[package]]\nname = \"windows-implement\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"windows-implement\"\nversion = \"0.60.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"windows-interface\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"windows-interface\"\nversion = \"0.59.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"windows-link\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76840935b766e1b0a05c0066835fb9ec80071d4c09a16f6bd5f7e655e3c14c38\"\n\n[[package]]\nname = \"windows-registry\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4286ad90ddb45071efd1a66dfa43eb02dd0dfbae1545ad6cc3c51cf34d7e8ba3\"\ndependencies = [\n \"windows-result 0.3.2\",\n \"windows-strings 0.3.1\",\n \"windows-targets 0.53.0\",\n]\n\n[[package]]\nname = \"windows-result\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e383302e8ec8515204254685643de10811af0ed97ea37210dc26fb0032647f8\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-result\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-result\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c64fd11a4fd95df68efcfee5f44a294fe71b8bc6a91993e2791938abcc712252\"\ndependencies = [\n \"windows-link\",\n]\n\n[[package]]\nname = \"windows-strings\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10\"\ndependencies = [\n \"windows-result 0.2.0\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-strings\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87fa48cc5d406560701792be122a10132491cff9d0aeb23583cc2dcafc847319\"\ndependencies = [\n \"windows-link\",\n]\n\n[[package]]\nname = \"windows-strings\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a2ba9642430ee452d5a7aa78d72907ebe8cfda358e8cb7918a2050581322f97\"\ndependencies = [\n \"windows-link\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm 0.52.6\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1e4c7e8ceaaf9cb7d7507c974735728ab453b67ef8f18febdd7c11fe59dca8b\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.53.0\",\n \"windows_aarch64_msvc 0.53.0\",\n \"windows_i686_gnu 0.53.0\",\n \"windows_i686_gnullvm 0.53.0\",\n \"windows_i686_msvc 0.53.0\",\n \"windows_x86_64_gnu 0.53.0\",\n \"windows_x86_64_gnullvm 0.53.0\",\n \"windows_x86_64_msvc 0.53.0\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.53.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"63d3fcd9bba44b03821e7d699eeee959f3126dcc4aa8e4ae18ec617c2a5cea10\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winreg\"\nversion = \"0.50.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"wit-bindgen-rt\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1\"\ndependencies = [\n \"bitflags 2.9.0\",\n]\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"ws_stream_wasm\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7999f5f4217fe3818726b66257a4475f71e74ffd190776ad053fa159e50737f5\"\ndependencies = [\n \"async_io_stream\",\n \"futures\",\n \"js-sys\",\n \"log\",\n \"pharos\",\n \"rustc_version 0.4.1\",\n \"send_wrapper 0.6.0\",\n \"thiserror 1.0.69\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"x25519-dalek\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7e468321c81fb07fa7f4c636c3972b9100f0346e5b6a9f2bd0603a52f7ed277\"\ndependencies = [\n \"curve25519-dalek\",\n \"rand_core 0.6.4\",\n \"serde\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"x509-parser\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcbc162f30700d6f3f82a24bf7cc62ffe7caea42c0b2cba8bf7f3ae50cf51f69\"\ndependencies = [\n \"asn1-rs\",\n \"data-encoding\",\n \"der-parser\",\n \"lazy_static\",\n \"nom\",\n \"oid-registry\",\n \"rusticata-macros\",\n \"thiserror 1.0.69\",\n \"time\",\n]\n\n[[package]]\nname = \"xattr\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d65cbf2f12c15564212d48f4e3dfb87923d25d611f2aed18f4cb23f0413d89e\"\ndependencies = [\n \"libc\",\n \"rustix 1.0.5\",\n]\n\n[[package]]\nname = \"xcm-procedural\"\nversion = \"10.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87fb4f14094d65c500a59bcf540cf42b99ee82c706edd6226a92e769ad60563e\"\ndependencies = [\n \"Inflector\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"xcm-runtime-apis\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9820d596ca59a981951d2d01924ba0d45b0ab5671fd24dacf68415dbe1fe1053\"\ndependencies = [\n \"frame-support\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api\",\n \"sp-weights\",\n \"staging-xcm\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"xcm-simulator\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"058e21bfc3e1180bbd83cad3690d0e63f34f43ab309e338afe988160aa776fcf\"\ndependencies = [\n \"frame-support\",\n \"frame-system\",\n \"parity-scale-codec\",\n \"paste\",\n \"polkadot-core-primitives\",\n \"polkadot-parachain-primitives\",\n \"polkadot-primitives 16.0.0\",\n \"polkadot-runtime-parachains\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"staging-xcm\",\n \"staging-xcm-builder\",\n \"staging-xcm-executor\",\n]\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a62ce76d9b56901b19a74f19431b0d8b3bc7ca4ad685a746dfd78ca8f4fc6bda\"\n\n[[package]]\nname = \"xmltree\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7d8a75eaf6557bb84a65ace8609883db44a29951042ada9b393151532e41fcb\"\ndependencies = [\n \"xml-rs\",\n]\n\n[[package]]\nname = \"yamux\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed0164ae619f2dc144909a9f082187ebb5893693d8c0196e8085283ccd4b776\"\ndependencies = [\n \"futures\",\n \"log\",\n \"nohash-hasher\",\n \"parking_lot 0.12.3\",\n \"pin-project\",\n \"rand 0.8.5\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"yamux\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17610762a1207ee816c6fadc29220904753648aba0a9ed61c7b8336e80a559c4\"\ndependencies = [\n \"futures\",\n \"log\",\n \"nohash-hasher\",\n \"parking_lot 0.12.3\",\n \"pin-project\",\n \"rand 0.8.5\",\n \"static_assertions\",\n \"web-time\",\n]\n\n[[package]]\nname = \"yansi\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n\n[[package]]\nname = \"yap\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfe269e7b803a5e8e20cbd97860e136529cd83bf2c9c6d37b142467e7e1f051f\"\n\n[[package]]\nname = \"yasna\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd\"\ndependencies = [\n \"time\",\n]\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"zerocopy-derive 0.7.35\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.8.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2586fea28e186957ef732a5f8b3be2da217d65c5969d4b1e17f973ebbe876879\"\ndependencies = [\n \"zerocopy-derive 0.8.24\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.8.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a996a8f63c5c4448cd959ac1bab0aaa3306ccfd060472f85943ee0750f0169be\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50cc42e0333e05660c3587f3bf9d0478688e15d870fab3346451ce7f8c9fbea5\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d71e5d6e06ab090c67b5e44993ec16b72dcbaabc526db883a360057678b48502\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.100\",\n]\n\n[[package]]\nname = \"zip\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"760394e246e4c28189f19d488c058bf16f564016aefac5d32bb1f3b51d5e9261\"\ndependencies = [\n \"aes\",\n \"byteorder\",\n \"bzip2\",\n \"constant_time_eq 0.1.5\",\n \"crc32fast\",\n \"crossbeam-utils\",\n \"flate2\",\n \"hmac 0.12.1\",\n \"pbkdf2 0.11.0\",\n \"sha1\",\n \"time\",\n \"zstd 0.11.2+zstd.1.5.2\",\n]\n\n[[package]]\nname = \"zstd\"\nversion = \"0.11.2+zstd.1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20cc960326ece64f010d2d2107537f26dc589a6573a316bd5b1dba685fa5fde4\"\ndependencies = [\n \"zstd-safe 5.0.2+zstd.1.5.2\",\n]\n\n[[package]]\nname = \"zstd\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a27595e173641171fc74a1232b7b1c7a7cb6e18222c11e9dfb9888fa424c53c\"\ndependencies = [\n \"zstd-safe 6.0.6\",\n]\n\n[[package]]\nname = \"zstd-safe\"\nversion = \"5.0.2+zstd.1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d2a5585e04f9eea4b2a3d1eca508c4dee9592a89ef6f450c11719da0726f4db\"\ndependencies = [\n \"libc\",\n \"zstd-sys\",\n]\n\n[[package]]\nname = \"zstd-safe\"\nversion = \"6.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee98ffd0b48ee95e6c5168188e44a54550b1564d9d530ee21d5f0eaed1069581\"\ndependencies = [\n \"libc\",\n \"zstd-sys\",\n]\n\n[[package]]\nname = \"zstd-sys\"\nversion = \"2.0.15+zstd.1.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb81183ddd97d0c74cedf1d50d85c8d08c1b8b68ee863bdee9e706eedba1a237\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n",
  "/Cargo.toml": "[workspace]\nresolver = \"2\"\nmembers = [\"demo-lib\", \"demo-bin\"]\n\n[workspace.package]\nversion = \"0.1.0\"\ndescription = \"demo\"\nedition = \"2024\"\nauthors = [\"Daniel Bui <79790753+danielbui12@users.noreply.github.com>\"]\nlicense = \"MIT OR Apache-2.0\"\nhomepage = \"demo\"\nrepository = \"https://github.com/demo/demo\"\nreadme = \"README.md\"\ncategories = [\"cryptography\", \"cryptography::cryptocurrencies\"]\nkeywords = [\"tangle\", \"blueprint\", \"avs\"]\n\n[workspace.dependencies]\ndemo-blueprint-lib = { path = \"demo-lib\" }\n\nblueprint-sdk = { version = \"0.1.0-alpha.6\", default-features = false }\ntokio = { version = \"1\", default-features = false }\ncolor-eyre = \"0.6\"\ntower = { version = \"0.5\", default-features = false }\ntracing-subscriber = { version = \"0.3\", features = [\"env-filter\"] }\ntracing = \"0.1\"\n",
  "/LICENSE-APACHE": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "/LICENSE-MIT": "MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "/contracts/.gitignore": "# Compiler files\ncache/\nout/\n\n# Ignores development broadcast logs\n!/broadcast\n/broadcast/*/31337/\n/broadcast/**/dry-run/\n\n# Docs\ndocs/\n\n# Dotenv file\n.env\n",
  "/contracts/src/HelloBlueprint.sol": "// SPDX-License-Identifier: UNLICENSE\npragma solidity >=0.8.13;\n\nimport \"tnt-core/BlueprintServiceManagerBase.sol\";\n\n/**\n * @title HelloBlueprint\n * @dev This contract is an example of a service blueprint that provides a single service.\n * @dev For all supported hooks, check the `BlueprintServiceManagerBase` contract.\n */\ncontract HelloBlueprint is BlueprintServiceManagerBase {\n    /**\n     * @dev Hook for service operator registration. Called when a service operator\n     * attempts to register with the blueprint.\n     * @param operator The operator's details.\n     * @param registrationInputs Inputs required for registration in bytes format.\n     */\n    function onRegister(\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata registrationInputs\n    )\n    external\n    payable\n    virtual\n    override\n    onlyFromMaster\n    {\n        // Do something with the operator's details\n    }\n\n    /**\n     *  @dev Hook for service instance requests. Called when a user requests a service\n     *  instance from the blueprint but this does not mean the service is initiated yet.\n     *  To get notified when the service is initiated, implement the `onServiceInitialized` hook.\n     *\n     *  @param params The parameters for the service request.\n     */\n    function onRequest(ServiceOperators.RequestParams calldata params) external payable virtual override onlyFromMaster\n    {\n        // Do something with the service request\n    }\n\n    /**\n     * @dev Hook for handling job result. Called when operators send the result\n     * of a job execution.\n     * @param serviceId The ID of the service related to the job.\n     * @param job The job identifier.\n     * @param jobCallId The unique ID for the job call.\n     * @param operator The operator sending the result in bytes format.\n     * @param inputs Inputs used for the job execution in bytes format.\n     * @param outputs Outputs resulting from the job execution in bytes format.\n     */\n    function onJobResult(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata inputs,\n        bytes calldata outputs\n    )\n    external\n    payable\n    virtual\n    override\n    onlyFromMaster\n    {\n        // Do something with the job call result\n    }\n\n    /**\n     * @dev Converts a public key to an operator address.\n     * @param publicKey The public key to convert.\n     * @return operator address The operator address.\n     */\n    function operatorAddressFromPublicKey(bytes calldata publicKey) internal pure returns (address operator) {\n        return address(uint160(uint256(keccak256(publicKey))));\n    }\n}\n",
  "/demo-bin/Cargo.toml": "[package]\nname = \"demo-blueprint-bin\"\nversion = \"0.1.0\"\ndescription.workspace = true\nedition.workspace = true\nauthors.workspace = true\nlicense.workspace = true\nhomepage.workspace = true\nrepository.workspace = true\nreadme.workspace = true\ncategories.workspace = true\nkeywords.workspace = true\n\n[dependencies]\ndemo-blueprint-lib.workspace = true\n\nblueprint-sdk = { workspace = true, features = [\"std\"] }\ntokio = { workspace = true, features = [\"rt-multi-thread\"] }\ntracing-subscriber = { workspace = true, features = [\"env-filter\"] }\ntracing = { workspace = true }\ntower.workspace = true\n\n[build-dependencies]\ndemo-blueprint-lib.workspace = true\nblueprint-sdk = { workspace = true, features = [\"macros\", \"build\"] }\n\n[package.metadata.blueprint]\nsources = [\n    \n    \n]\n",
  "/demo-bin/build.rs": "use blueprint_sdk::build;\nuse blueprint_sdk::tangle::blueprint;\nuse std::path::Path;\nuse std::process;\nuse demo_blueprint_lib::say_hello;\n\nfn main() {\n    // Automatically update dependencies with `soldeer` (if available), and build the contracts.\n    //\n    // Note that this is provided for convenience, and is not necessary if you wish to handle the\n    // contract build step yourself.\n    let contracts_dir = Path::new(env!(\"CARGO_MANIFEST_DIR\"))\n        .parent()\n        .unwrap()\n        .join(\"contracts\");\n\n    let contract_dirs: Vec<&str> = vec![contracts_dir.to_str().unwrap()];\n    build::utils::soldeer_install();\n    build::utils::soldeer_update();\n    build::utils::build_contracts(contract_dirs);\n\n    println!(\"cargo::rerun-if-changed=../demo-lib\");\n\n    // The `blueprint!` macro generates the info necessary for the `blueprint.json`.\n    // See its docs for all available metadata fields.\n    let blueprint = blueprint! {\n        name: \"demo\",\n        master_manager_revision: \"Latest\",\n        manager: { Evm = \"HelloBlueprint\" },\n        jobs: [say_hello]\n    };\n\n    match blueprint {\n        Ok(blueprint) => {\n            // TODO: Should be a helper function probably\n            let json = blueprint_sdk::tangle::metadata::macros::ext::serde_json::to_string_pretty(\n                &blueprint,\n            )\n                .unwrap();\n            std::fs::write(\n                Path::new(env!(\"CARGO_WORKSPACE_DIR\")).join(\"blueprint.json\"),\n                json.as_bytes(),\n            )\n                .unwrap();\n        }\n        Err(e) => {\n            println!(\"cargo::error={e:?}\");\n            process::exit(1);\n        }\n    }\n}\n",
  "/demo-bin/src/main.rs": "use blueprint_sdk::Job;\nuse blueprint_sdk::Router;\nuse blueprint_sdk::contexts::tangle::TangleClientContext;\nuse blueprint_sdk::crypto::sp_core::SpSr25519;\nuse blueprint_sdk::crypto::tangle_pair_signer::TanglePairSigner;\nuse blueprint_sdk::keystore::backends::Backend;\nuse blueprint_sdk::runner::BlueprintRunner;\nuse blueprint_sdk::runner::config::BlueprintEnvironment;\nuse blueprint_sdk::runner::tangle::config::TangleConfig;\nuse blueprint_sdk::tangle::consumer::TangleConsumer;\nuse blueprint_sdk::tangle::filters::MatchesServiceId;\nuse blueprint_sdk::tangle::layers::TangleLayer;\nuse blueprint_sdk::tangle::producer::TangleProducer;\nuse demo_blueprint_lib::{MyContext, SAY_HELLO_JOB_ID, say_hello};\nuse tower::filter::FilterLayer;\nuse tracing::error;\nuse tracing::level_filters::LevelFilter;\n\n#[tokio::main]\nasync fn main() -> Result<(), blueprint_sdk::Error> {\n    setup_log();\n\n    let env = BlueprintEnvironment::load()?;\n    let sr25519_signer = env.keystore().first_local::<SpSr25519>()?;\n    let sr25519_pair = env.keystore().get_secret::<SpSr25519>(&sr25519_signer)?;\n    let sr25519_signer = TanglePairSigner::new(sr25519_pair.0);\n\n    let tangle_client = env.tangle_client().await?;\n    let tangle_producer =\n        TangleProducer::finalized_blocks(tangle_client.rpc_client.clone()).await?;\n    let tangle_consumer = TangleConsumer::new(tangle_client.rpc_client.clone(), sr25519_signer);\n\n    let tangle_config = TangleConfig::default();\n\n    let service_id = env.protocol_settings.tangle()?.service_id.unwrap();\n    let result = BlueprintRunner::builder(tangle_config, env)\n        .router(\n            // A router\n            //\n            // Each \"route\" is a job ID and the job function. We can also support arbitrary `Service`s from `tower`,\n            // which may make it easier for people to port over existing services to a blueprint.\n            Router::new()\n                // The route defined here has a `TangleLayer`, which adds metadata to the\n                // produced `JobResult`s, making it visible to a `TangleConsumer`.\n                .route(SAY_HELLO_JOB_ID, say_hello.layer(TangleLayer))\n                // Add the `FilterLayer` to filter out job calls that don't match the service ID\n                //\n                // This layer is global to the router, and is applied to every job call.\n                .layer(FilterLayer::new(MatchesServiceId(service_id)))\n                // We can add a context to the router, which will be passed to all job functions\n                // that have the `Context` extractor.\n                //\n                // A context can be used for global state between job calls, such as a database.\n                //\n                // It is important to note that the context is **cloned** for each job call, so\n                // the context must be cheaply cloneable.\n                .with_context(MyContext::new()),\n        )\n        // Add potentially many producers\n        //\n        // A producer is simply a `Stream` that outputs `JobCall`s, which are passed down to the intended\n        // job functions.\n        .producer(tangle_producer)\n        // Add potentially many consumers\n        //\n        // A consumer is simply a `Sink` that consumes `JobResult`s, which are the output of the job functions.\n        // Every result will be passed to every consumer. It is the responsibility of the consumer\n        // to determine whether or not to process a result.\n        .consumer(tangle_consumer)\n        // Custom shutdown handlers\n        //\n        // Now users can specify what to do when an error occurs and the runner is shutting down.\n        // That can be cleanup logic, finalizing database transactions, etc.\n        .with_shutdown_handler(async { println!(\"Shutting down!\") })\n        .run()\n        .await;\n\n    if let Err(e) = result {\n        error!(\"Runner failed! {e:?}\");\n    }\n\n    Ok(())\n}\n\npub fn setup_log() {\n    use tracing_subscriber::util::SubscriberInitExt;\n\n    let _ = tracing_subscriber::fmt::SubscriberBuilder::default()\n        .without_time()\n        .with_span_events(tracing_subscriber::fmt::format::FmtSpan::NONE)\n        .with_env_filter(\n            tracing_subscriber::EnvFilter::builder()\n                .with_default_directive(LevelFilter::INFO.into())\n                .from_env_lossy(),\n        )\n        .finish()\n        .try_init();\n}\n",
  "/demo-lib/Cargo.toml": "[package]\nname = \"demo-blueprint-lib\"\nversion = \"0.1.0\"\ndescription.workspace = true\nedition.workspace = true\nauthors.workspace = true\nlicense.workspace = true\nhomepage.workspace = true\nrepository.workspace = true\nreadme.workspace = true\ncategories.workspace = true\nkeywords.workspace = true\n\n[dependencies]\nblueprint-sdk = { workspace = true, features = [\"std\", \"tangle\", \"macros\"] }\ntokio = { workspace = true, features = [\"sync\"] }\n\n[dev-dependencies]\nblueprint-sdk = { workspace = true, features = [\"testing\", \"tangle\"] }\ntokio = { workspace = true, features = [\"macros\"] }\ncolor-eyre = { workspace = true }\n",
  "/demo-lib/src/lib.rs": "use blueprint_sdk::extract::Context;\nuse blueprint_sdk::tangle::extract::{Optional, TangleArg, TangleResult};\nuse std::sync::Arc;\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\n// The job ID (to be generated?)\npub const SAY_HELLO_JOB_ID: u32 = 0;\n\n// A context struct\n//\n// The context of a blueprint is set in the `Router`, and passed down to the job functions. See\n// `foo-bin/src/main.rs`.\n//\n// This simply counts the number of times the `say_hello` job has been called, but it could be any\n// global state needed by the blueprint.\n#[derive(Clone)]\npub struct MyContext {\n    total_greetings: Arc<AtomicUsize>,\n}\n\nimpl MyContext {\n    pub fn new() -> Self {\n        Self {\n            total_greetings: Arc::new(AtomicUsize::new(0)),\n        }\n    }\n}\n\n// The job function\n//\n// The arguments are made up of \"extractors\", which take a portion of the `JobCall` to convert into the\n// target type.\n//\n// The context is passed in as a parameter, and can be used to store any shared state between job calls.\npub async fn say_hello(\n    Context(ctx): Context<MyContext>,\n    TangleArg(Optional(who)): TangleArg<Optional<String>>,\n) -> TangleResult<String> {\n    let greeting = match who {\n        Some(who) => format!(\"Hello, {who}!\"),\n        None => \"Hello World!\".to_string(),\n    };\n\n    ctx.total_greetings.fetch_add(1, Ordering::SeqCst);\n\n    // The result is then converted into a `JobResult` to be sent back to the caller.\n    TangleResult(greeting)\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use blueprint_sdk::{JobResult, IntoJobResult, tangle_subxt};\n    use tangle_subxt::tangle_testnet_runtime::api::runtime_types::tangle_primitives::services::field::Field;\n    use tangle_subxt::subxt_core::utils::AccountId32;\n    use blueprint_sdk::tangle::serde::new_bounded_string;\n    use tangle_subxt::parity_scale_codec::Decode;\n\n    #[tokio::test]\n    async fn it_works() {\n        let context = MyContext::new();\n        let JobResult::Ok {\n            body: result_raw, ..\n        } = say_hello(Context(context.clone()), TangleArg(None.into()))\n            .await\n            .into_job_result()\n            .unwrap()\n        else {\n            panic!(\"Job call failed\");\n        };\n\n        let result = Vec::<Field<AccountId32>>::decode(&mut (&*result_raw)).expect(\"Bad result\");\n        assert_eq!(\n            result,\n            vec![Field::String(new_bounded_string(\"Hello World!\"))]\n        );\n\n        let JobResult::Ok {\n            body: result2_raw, ..\n        } = say_hello(\n            Context(context.clone()),\n            TangleArg(Some(\"Alice\".to_string()).into()),\n        )\n            .await\n            .into_job_result()\n            .unwrap()\n        else {\n            panic!(\"Job call failed\");\n        };\n        let result2 = Vec::<Field<AccountId32>>::decode(&mut (&*result2_raw)).expect(\"Bad result\");\n        assert_eq!(\n            result2,\n            vec![Field::String(new_bounded_string(\"Hello, Alice!\"))]\n        );\n\n        assert_eq!(context.total_greetings.load(Ordering::SeqCst), 2);\n    }\n}\n",
  "/demo-lib/tests/e2e.rs": "use blueprint_sdk::Job;\nuse blueprint_sdk::tangle::layers::TangleLayer;\nuse blueprint_sdk::testing::tempfile;\nuse blueprint_sdk::testing::utils::setup_log;\nuse blueprint_sdk::testing::utils::tangle::TangleTestHarness;\nuse blueprint_sdk::tangle::serde::to_field;\nuse demo_blueprint_lib::{MyContext, say_hello};\n\n// The number of nodes to spawn in the test\nconst N: usize = 1;\n\n#[tokio::test]\nasync fn test_blueprint() -> color_eyre::Result<()> {\n    setup_log();\n\n    // Initialize test harness (node, keys, deployment)\n    let temp_dir = tempfile::TempDir::new()?;\n    let context = MyContext::new();\n    let harness = TangleTestHarness::setup(temp_dir).await?;\n\n    // Setup service with `N` nodes\n    let (mut test_env, service_id, _) = harness.setup_services::<N>(false).await?;\n\n    // Setup the node(s)\n    test_env.initialize().await?;\n    test_env.add_job(say_hello.layer(TangleLayer)).await;\n\n    // Start the test environment. It is now ready to receive job calls.\n    test_env.start(context).await?;\n\n    // Submit the job call\n    let job_inputs = vec![to_field(Some(\"Alice\")).unwrap()];\n    let job = harness.submit_job(service_id, 0, job_inputs).await?;\n\n    let results = harness.wait_for_job_execution(service_id, job).await?;\n\n    // Verify results match expected output\n    let expected_outputs = vec![to_field(\"Hello, Alice!\").unwrap()];\n    harness.verify_job(&results, expected_outputs);\n\n    assert_eq!(results.service_id, service_id);\n    Ok(())\n}\n",
  "/dependencies/tnt-core-0.3.0/.envrc": "if ! has nix_direnv_version || ! nix_direnv_version 2.3.0; then\n    source_url \"https://raw.githubusercontent.com/nix-community/nix-direnv/2.3.0/direnvrc\" \"sha256-Dmd+j63L84wuzgyjITIfSxSD57Tx7v51DMxVZOsiUD8=\"\nfi\nuse flake\ndotenv_if_exists\n# vi: ft=sh\n",
  "/dependencies/tnt-core-0.3.0/.github/workflows/foundry.yml": "name: Foundry CI\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n  workflow_dispatch:\n\nconcurrency:\n  group: forge-validation-${{ github.head_ref }}\n  cancel-in-progress: true\n\nenv:\n  FOUNDRY_PROFILE: ci\n\njobs:\n  foundry-check:\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n      fail-fast: true\n\n    name: Foundry project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: v0.3.0\n\n      - name: Install Solidity Dependencies\n        run: forge soldeer update -d\n\n      - name: Run Forge build\n        run: |\n          forge --version\n          forge build --sizes --color always\n        id: build\n\n      - name: Run Forge tests\n        run: |\n          forge test -vvv --color always\n        id: test\n\n  coverage_report:\n    name: Generate coverage report\n    needs: foundry-check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: v0.3.0\n\n      - name: Install Solidity Dependencies\n        run: forge soldeer update -d\n\n      - name: Setup LCOV\n        uses: hrishikesh-kadam/setup-lcov@v1\n\n      - name: Run Forge Coverage\n        run: forge coverage --color always --report lcov\n        id: coverage\n\n      - name: Report code coverage\n        uses: zgosalvez/github-actions-report-lcov@v4\n        with:\n          coverage-files: lcov.info\n          minimum-coverage: 85\n          artifact-name: code-coverage-report\n          github-token: ${{ secrets.GH_TOKEN }}\n          update-comment: true\n",
  "/dependencies/tnt-core-0.3.0/.gitignore": "# Build\ntarget\n\n# Docs\ndocs/\n\n# directories\n.yarn/*\n!.yarn/patches\n!.yarn/releases\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# Compiler files\n**/cache\n**/node_modules\n**/out\n\n# files\n*.env\n*.env.*\n*.html\n*.log\n.DS_Store\n.pnp.*\nlcov.info\nyarn-debug.log*\nyarn-error.log*\ndeployments.json\n\n# Ignores development broadcast logs\n!/broadcast\n/broadcast/*\n/broadcast/*/31337/\n/broadcast/**/dry-run/\n\n# Soldeer\n/dependencies\n",
  "/dependencies/tnt-core-0.3.0/README.md": "# tnt-core\n\nThis repo contains interfaces and abstractions for using Tangle's restaking infrastructure for the creation of new\nservice blueprints. The service blueprint is a set of smart contracts that define the rules of the service and allow the gadget developer to customize the service to their needs, how it is used, how it is paid for, and how it is managed.\n\n## Getting Started\n\n## Usage\n\nHere's a list of the most frequently needed commands.\n\n### Install\n\nInstall the dependencies\n```sh\nforge soldeer update\n```\n\n### Build\n\nBuild the contracts:\n\n```sh\nforge build\n```\n",
  "/dependencies/tnt-core-0.3.0/bytecode/Cargo.lock": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60946a68e5f9d28b0dc1c21bb8a97ee7d018a8b322fa57838ba31cc878e22d99\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1a2d0a644769cc99faa24c3ad26b379b786fe7c36fd3c546254801650e6dd\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.218\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8dfc9d19bdbf6d17e22319da49161d5d0108e4188e8b680aef6299eed22df60\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.218\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f09503e191f4e797cb8aac08e9a4a4695c5edf6a2e70e376d961ddd5c969f82b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.139\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44f86c3acccc9c65b153fe1b85a3be07fe5515274ec9f0653b4a0875731c72a6\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.98\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36147f1a48ae0ec2b5b3bc5b537d267457555a10dc06f3dbc8cb11ba3006d3b1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tnt-core-bytecode\"\nversion = \"0.4.0\"\ndependencies = [\n \"serde_json\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00e2473a93778eb0bad35909dff6a10d28e63f792f16ed15e404fca9d5eeedbe\"\n",
  "/dependencies/tnt-core-0.3.0/bytecode/Cargo.toml": "[package]\nname = \"tnt-core-bytecode\"\nversion = \"0.4.0\"\nedition = \"2021\"\ndescription = \"Bytecode exports for TNT Core Solidity contracts\"\nlicense = \"MIT\"\n\n[features]\ndefault = [\"build-script\"]\nbuild-script = []\n\n[build-dependencies]\nserde_json = \"1.0\"\n",
  "/dependencies/tnt-core-0.3.0/bytecode/build.rs": "use std::env;\nuse std::fs;\nuse std::path::Path;\nuse std::process::Command;\n\nfn to_screaming_snake_case(name: &str) -> String {\n    let mut result = String::new();\n    let mut prev_char_is_lowercase = false;\n\n    for (i, c) in name.chars().enumerate() {\n        if i > 0\n            && c.is_uppercase()\n            && (prev_char_is_lowercase\n                || (i + 1 < name.len() && name.chars().nth(i + 1).unwrap().is_lowercase()))\n        {\n            result.push('_');\n        }\n        result.push(c.to_ascii_uppercase());\n        prev_char_is_lowercase = c.is_lowercase();\n    }\n    result\n}\n\nfn main() {\n    // Only run the build script if the build-script feature is enabled\n    if env::var(\"CARGO_FEATURE_BUILD_SCRIPT\").is_err() {\n        return;\n    }\n\n    // Your existing build script logic here\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    println!(\"cargo:rerun-if-changed=../src\");\n\n    // Run forge build\n    let status = Command::new(\"forge\")\n        .arg(\"build\")\n        .current_dir(\"..\")\n        .status()\n        .expect(\"Failed to build contracts\");\n\n    if !status.success() {\n        panic!(\"Failed to build contracts\");\n    }\n\n    // List of contracts to generate bytecode for\n    let contracts = vec![\"MasterBlueprintServiceManager\"];\n\n    let mut rust_code = String::from(\n        r#\"//! TNT Core contract bytecode exports\n//!\n//! This crate exports the bytecode of TNT Core contracts as constant byte vectors\n//! that can be easily imported and used in other Rust projects.\n\n/// Module containing all contract bytecodes\n#[rustfmt::skip]\npub mod bytecode {\n\"#,\n    );\n\n    for contract in contracts {\n        let json_path = Path::new(\"..\")\n            .join(\"out\")\n            .join(format!(\"{}.sol\", contract))\n            .join(format!(\"{}.json\", contract));\n\n        let json_str = fs::read_to_string(&json_path)\n            .unwrap_or_else(|_| panic!(\"Failed to read {}\", json_path.display()));\n\n        let json: serde_json::Value =\n            serde_json::from_str(&json_str).expect(\"Failed to parse JSON\");\n\n        let bytecode = json[\"bytecode\"]\n            .as_object()\n            .and_then(|obj| obj.get(\"object\"))\n            .and_then(|obj| obj.as_str())\n            .unwrap_or_else(|| json[\"bytecode\"].as_str().expect(\"Failed to get bytecode\"));\n\n        let bytecode = bytecode.strip_prefix(\"0x\").unwrap_or(bytecode);\n        let bytes: Vec<String> = bytecode\n            .as_bytes()\n            .chunks(2)\n            .map(|chunk| {\n                let hex = std::str::from_utf8(chunk).unwrap();\n                format!(\"0x{}\", hex)\n            })\n            .collect();\n\n        let const_name = to_screaming_snake_case(contract);\n\n        rust_code.push_str(&format!(\n            r#\"    /// Bytecode for the {} contract\n    pub const {}: &[u8] = &[{}];\n\n\"#,\n            contract,\n            const_name,\n            bytes.join(\", \")\n        ));\n    }\n\n    rust_code.push_str(\n        r#\"}\n\"#,\n    );\n\n    // Write directly to lib.rs\n    fs::write(Path::new(\"src\").join(\"lib.rs\"), rust_code).expect(\"Failed to write to lib.rs\");\n}\n",
  "/dependencies/tnt-core-0.3.0/bytecode/src/lib.rs": "//! TNT Core contract bytecode exports\n//!\n//! This crate exports the bytecode of TNT Core contracts as constant byte vectors\n//! that can be easily imported and used in other Rust projects.\n\n/// Module containing all contract bytecodes\n#[rustfmt::skip]\npub mod bytecode {\n    /// Bytecode for the MasterBlueprintServiceManager contract\n    pub const MASTER_BLUEPRINT_SERVICE_MANAGER: &[u8] = &[0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15, 0x62, 0x00, 0x00, 0x10, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x60, 0x40, 0x51, 0x62, 0x00, 0x42, 0x95, 0x38, 0x03, 0x80, 0x62, 0x00, 0x42, 0x95, 0x83, 0x39, 0x81, 0x01, 0x60, 0x40, 0x81, 0x90, 0x52, 0x62, 0x00, 0x00, 0x33, 0x91, 0x62, 0x00, 0x03, 0xe2, 0x56, 0x5b, 0x60, 0x02, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x90, 0x55, 0x62, 0x00, 0x00, 0x49, 0x5f, 0x33, 0x62, 0x00, 0x00, 0xf5, 0x56, 0x5b, 0x50, 0x62, 0x00, 0x00, 0x76, 0x7f, 0x65, 0xd7, 0xa2, 0x8e, 0x32, 0x65, 0xb3, 0x7a, 0x64, 0x74, 0x92, 0x9f, 0x33, 0x65, 0x21, 0xb3, 0x32, 0xc1, 0x68, 0x1b, 0x93, 0x3f, 0x6c, 0xb9, 0xf3, 0x37, 0x66, 0x73, 0x44, 0x0d, 0x86, 0x2a, 0x33, 0x62, 0x00, 0x00, 0xf5, 0x56, 0x5b, 0x50, 0x62, 0x00, 0x00, 0xa3, 0x7f, 0x68, 0x28, 0x86, 0xe4, 0xaa, 0x03, 0x6c, 0xe8, 0xb1, 0x76, 0x18, 0x50, 0xf7, 0x68, 0xc4, 0x60, 0x46, 0x76, 0xf1, 0x85, 0x6f, 0x59, 0x6f, 0x45, 0x3e, 0xcc, 0x49, 0xee, 0x4d, 0x73, 0x54, 0x54, 0x33, 0x62, 0x00, 0x00, 0xf5, 0x56, 0x5b, 0x50, 0x62, 0x00, 0x00, 0xc4, 0x5f, 0x73, 0x09, 0xdf, 0x6a, 0x94, 0x1e, 0xe0, 0x3b, 0x1e, 0x63, 0x29, 0x04, 0xe3, 0x82, 0xe1, 0x08, 0x62, 0xfa, 0x9c, 0xc0, 0xe3, 0x62, 0x00, 0x00, 0xf5, 0x56, 0x5b, 0x50, 0x62, 0x00, 0x00, 0xcf, 0x62, 0x00, 0x01, 0x89, 0x56, 0x5b, 0x60, 0x0b, 0x80, 0x54, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x19, 0x16, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x92, 0x90, 0x92, 0x16, 0x91, 0x90, 0x91, 0x17, 0x90, 0x55, 0x62, 0x00, 0x04, 0x8d, 0x56, 0x5b, 0x5f, 0x82, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x90, 0x81, 0x52, 0x60, 0x40, 0x80, 0x83, 0x20, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x85, 0x16, 0x84, 0x52, 0x90, 0x91, 0x52, 0x81, 0x20, 0x54, 0x60, 0xff, 0x16, 0x62, 0x00, 0x01, 0x80, 0x57, 0x5f, 0x83, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x81, 0x81, 0x52, 0x60, 0x40, 0x80, 0x84, 0x20, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x87, 0x16, 0x80, 0x86, 0x52, 0x92, 0x52, 0x80, 0x84, 0x20, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x90, 0x93, 0x17, 0x90, 0x92, 0x55, 0x90, 0x51, 0x33, 0x92, 0x86, 0x91, 0x7f, 0x2f, 0x87, 0x88, 0x11, 0x7e, 0x7e, 0xff, 0x1d, 0x82, 0xe9, 0x26, 0xec, 0x79, 0x49, 0x01, 0xd1, 0x7c, 0x78, 0x02, 0x4a, 0x50, 0x27, 0x09, 0x40, 0x30, 0x45, 0x40, 0xa7, 0x33, 0x65, 0x6f, 0x0d, 0x91, 0x90, 0xa4, 0x50, 0x60, 0x01, 0x62, 0x00, 0x01, 0x83, 0x56, 0x5b, 0x50, 0x5f, 0x5b, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x40, 0x80, 0x51, 0x60, 0x04, 0x80, 0x82, 0x52, 0x60, 0xa0, 0x82, 0x01, 0x90, 0x92, 0x52, 0x5f, 0x91, 0x81, 0x60, 0x20, 0x01, 0x5b, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91, 0x52, 0x5f, 0x80, 0x82, 0x52, 0x60, 0x20, 0x82, 0x01, 0x52, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x60, 0x01, 0x90, 0x03, 0x90, 0x81, 0x62, 0x00, 0x01, 0xa0, 0x57, 0x50, 0x50, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91, 0x52, 0x5f, 0x80, 0x82, 0x52, 0x61, 0x13, 0x88, 0x60, 0x20, 0x83, 0x01, 0x52, 0x82, 0x51, 0x92, 0x93, 0x50, 0x90, 0x91, 0x83, 0x91, 0x90, 0x62, 0x00, 0x01, 0xf5, 0x57, 0x62, 0x00, 0x01, 0xf5, 0x62, 0x00, 0x04, 0x25, 0x56, 0x5b, 0x60, 0x20, 0x90, 0x81, 0x02, 0x91, 0x90, 0x91, 0x01, 0x01, 0x52, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91, 0x52, 0x80, 0x60, 0x01, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x07, 0xd0, 0x61, 0xff, 0xff, 0x16, 0x81, 0x52, 0x50, 0x81, 0x60, 0x01, 0x81, 0x51, 0x81, 0x10, 0x62, 0x00, 0x02, 0x32, 0x57, 0x62, 0x00, 0x02, 0x32, 0x62, 0x00, 0x04, 0x25, 0x56, 0x5b, 0x60, 0x20, 0x90, 0x81, 0x02, 0x91, 0x90, 0x91, 0x01, 0x01, 0x52, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91, 0x52, 0x80, 0x60, 0x02, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x03, 0xe8, 0x61, 0xff, 0xff, 0x16, 0x81, 0x52, 0x50, 0x81, 0x60, 0x02, 0x81, 0x51, 0x81, 0x10, 0x62, 0x00, 0x02, 0x6f, 0x57, 0x62, 0x00, 0x02, 0x6f, 0x62, 0x00, 0x04, 0x25, 0x56, 0x5b, 0x60, 0x20, 0x90, 0x81, 0x02, 0x91, 0x90, 0x91, 0x01, 0x01, 0x52, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91, 0x52, 0x80, 0x60, 0x03, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x07, 0xd0, 0x61, 0xff, 0xff, 0x16, 0x81, 0x52, 0x50, 0x81, 0x60, 0x03, 0x81, 0x51, 0x81, 0x10, 0x62, 0x00, 0x02, 0xac, 0x57, 0x62, 0x00, 0x02, 0xac, 0x62, 0x00, 0x04, 0x25, 0x56, 0x5b, 0x60, 0x20, 0x90, 0x81, 0x02, 0x91, 0x90, 0x91, 0x01, 0x01, 0x52, 0x62, 0x00, 0x02, 0xc2, 0x81, 0x62, 0x00, 0x03, 0x68, 0x56, 0x5b, 0x5f, 0x5b, 0x81, 0x51, 0x81, 0x10, 0x15, 0x62, 0x00, 0x03, 0x64, 0x57, 0x60, 0x0a, 0x82, 0x82, 0x81, 0x51, 0x81, 0x10, 0x62, 0x00, 0x02, 0xe5, 0x57, 0x62, 0x00, 0x02, 0xe5, 0x62, 0x00, 0x04, 0x25, 0x56, 0x5b, 0x60, 0x20, 0x90, 0x81, 0x02, 0x91, 0x90, 0x91, 0x01, 0x81, 0x01, 0x51, 0x82, 0x54, 0x60, 0x01, 0x81, 0x81, 0x01, 0x85, 0x55, 0x5f, 0x94, 0x85, 0x52, 0x92, 0x90, 0x93, 0x20, 0x81, 0x51, 0x93, 0x01, 0x80, 0x54, 0x91, 0x93, 0x90, 0x92, 0x90, 0x91, 0x83, 0x91, 0x60, 0xff, 0x19, 0x90, 0x91, 0x16, 0x90, 0x83, 0x60, 0x03, 0x81, 0x11, 0x15, 0x62, 0x00, 0x03, 0x2c, 0x57, 0x62, 0x00, 0x03, 0x2c, 0x62, 0x00, 0x04, 0x11, 0x56, 0x5b, 0x02, 0x17, 0x90, 0x55, 0x50, 0x60, 0x20, 0x91, 0x90, 0x91, 0x01, 0x51, 0x81, 0x54, 0x61, 0xff, 0xff, 0x90, 0x91, 0x16, 0x61, 0x01, 0x00, 0x02, 0x62, 0xff, 0xff, 0x00, 0x19, 0x90, 0x91, 0x16, 0x17, 0x90, 0x55, 0x80, 0x62, 0x00, 0x03, 0x5b, 0x81, 0x62, 0x00, 0x04, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x62, 0x00, 0x02, 0xc4, 0x56, 0x5b, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5b, 0x82, 0x51, 0x81, 0x10, 0x15, 0x62, 0x00, 0x03, 0xba, 0x57, 0x82, 0x81, 0x81, 0x51, 0x81, 0x10, 0x62, 0x00, 0x03, 0x8a, 0x57, 0x62, 0x00, 0x03, 0x8a, 0x62, 0x00, 0x04, 0x25, 0x56, 0x5b, 0x60, 0x20, 0x02, 0x60, 0x20, 0x01, 0x01, 0x51, 0x60, 0x20, 0x01, 0x51, 0x82, 0x62, 0x00, 0x03, 0xa3, 0x91, 0x90, 0x62, 0x00, 0x04, 0x68, 0x56, 0x5b, 0x91, 0x50, 0x80, 0x62, 0x00, 0x03, 0xb1, 0x81, 0x62, 0x00, 0x04, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x62, 0x00, 0x03, 0x6b, 0x56, 0x5b, 0x50, 0x61, 0xff, 0xff, 0x81, 0x16, 0x61, 0x27, 0x10, 0x14, 0x62, 0x00, 0x03, 0x64, 0x57, 0x60, 0x40, 0x51, 0x63, 0x04, 0xbe, 0x90, 0xa9, 0x60, 0xe5, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x62, 0x00, 0x03, 0xf3, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x81, 0x16, 0x81, 0x14, 0x62, 0x00, 0x04, 0x0a, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x21, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x32, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x11, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x5f, 0x60, 0x01, 0x82, 0x01, 0x62, 0x00, 0x04, 0x61, 0x57, 0x62, 0x00, 0x04, 0x61, 0x62, 0x00, 0x04, 0x39, 0x56, 0x5b, 0x50, 0x60, 0x01, 0x01, 0x90, 0x56, 0x5b, 0x61, 0xff, 0xff, 0x81, 0x81, 0x16, 0x83, 0x82, 0x16, 0x01, 0x90, 0x80, 0x82, 0x11, 0x15, 0x62, 0x00, 0x04, 0x86, 0x57, 0x62, 0x00, 0x04, 0x86, 0x62, 0x00, 0x04, 0x39, 0x56, 0x5b, 0x50, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x61, 0x3d, 0xfa, 0x80, 0x62, 0x00, 0x04, 0x9b, 0x5f, 0x39, 0x5f, 0xf3, 0xfe, 0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x04, 0x36, 0x10, 0x61, 0x02, 0x3e, 0x57, 0x5f, 0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0x7e, 0x09, 0x8e, 0xe3, 0x11, 0x61, 0x01, 0x34, 0x57, 0x80, 0x63, 0xa5, 0xe3, 0xe0, 0x27, 0x11, 0x61, 0x00, 0xb3, 0x57, 0x80, 0x63, 0xd5, 0x47, 0x74, 0x1f, 0x11, 0x61, 0x00, 0x78, 0x57, 0x80, 0x63, 0xd5, 0x47, 0x74, 0x1f, 0x14, 0x61, 0x06, 0x4f, 0x57, 0x80, 0x63, 0xd9, 0x0a, 0x65, 0x47, 0x14, 0x61, 0x06, 0x6e, 0x57, 0x80, 0x63, 0xe3, 0x29, 0x16, 0xd0, 0x14, 0x61, 0x06, 0xa1, 0x57, 0x80, 0x63, 0xe6, 0x3a, 0xb1, 0xe9, 0x14, 0x61, 0x06, 0xc0, 0x57, 0x80, 0x63, 0xea, 0x1f, 0x48, 0xfa, 0x14, 0x61, 0x06, 0xf3, 0x57, 0x80, 0x63, 0xf9, 0xe1, 0x38, 0x45, 0x14, 0x61, 0x07, 0x12, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0xa5, 0xe3, 0xe0, 0x27, 0x14, 0x61, 0x05, 0xe4, 0x57, 0x80, 0x63, 0xa6, 0xa7, 0x85, 0x38, 0x14, 0x61, 0x06, 0x03, 0x57, 0x80, 0x63, 0xa8, 0xf7, 0xc5, 0xed, 0x14, 0x61, 0x06, 0x16, 0x57, 0x80, 0x63, 0xb8, 0x9a, 0xf9, 0x04, 0x14, 0x61, 0x06, 0x29, 0x57, 0x80, 0x63, 0xb9, 0x31, 0x5d, 0x3a, 0x14, 0x61, 0x06, 0x3c, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0x8e, 0x6f, 0x8c, 0x60, 0x11, 0x61, 0x00, 0xf9, 0x57, 0x80, 0x63, 0x8e, 0x6f, 0x8c, 0x60, 0x14, 0x61, 0x05, 0x58, 0x57, 0x80, 0x63, 0x91, 0xd1, 0x48, 0x54, 0x14, 0x61, 0x05, 0x77, 0x57, 0x80, 0x63, 0x98, 0x7a, 0xb9, 0xdb, 0x14, 0x61, 0x05, 0x96, 0x57, 0x80, 0x63, 0xa2, 0x17, 0xfd, 0xdf, 0x14, 0x61, 0x05, 0xb5, 0x57, 0x80, 0x63, 0xa4, 0xd9, 0x1f, 0xe9, 0x14, 0x61, 0x05, 0xc8, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0x7e, 0x09, 0x8e, 0xe3, 0x14, 0x61, 0x04, 0xd3, 0x57, 0x80, 0x63, 0x82, 0xa1, 0x4a, 0xad, 0x14, 0x61, 0x04, 0xf2, 0x57, 0x80, 0x63, 0x82, 0xa1, 0xec, 0xe4, 0x14, 0x61, 0x05, 0x11, 0x57, 0x80, 0x63, 0x84, 0x56, 0xcb, 0x59, 0x14, 0x61, 0x05, 0x24, 0x57, 0x80, 0x63, 0x88, 0x46, 0x73, 0xac, 0x14, 0x61, 0x05, 0x38, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0x2f, 0x2f, 0xf1, 0x5d, 0x11, 0x61, 0x01, 0xc0, 0x57, 0x80, 0x63, 0x49, 0x84, 0xee, 0x6b, 0x11, 0x61, 0x01, 0x85, 0x57, 0x80, 0x63, 0x49, 0x84, 0xee, 0x6b, 0x14, 0x61, 0x04, 0x4f, 0x57, 0x80, 0x63, 0x5c, 0x97, 0x5a, 0xbb, 0x14, 0x61, 0x04, 0x62, 0x57, 0x80, 0x63, 0x62, 0xf3, 0x76, 0x5e, 0x14, 0x61, 0x04, 0x79, 0x57, 0x80, 0x63, 0x67, 0x9f, 0xdd, 0xb6, 0x14, 0x61, 0x04, 0xa1, 0x57, 0x80, 0x63, 0x72, 0x73, 0x91, 0xf2, 0x14, 0x61, 0x04, 0xc0, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0x2f, 0x2f, 0xf1, 0x5d, 0x14, 0x61, 0x03, 0xbf, 0x57, 0x80, 0x63, 0x36, 0x56, 0x8a, 0xbe, 0x14, 0x61, 0x03, 0xde, 0x57, 0x80, 0x63, 0x3f, 0x4b, 0xa8, 0x3a, 0x14, 0x61, 0x03, 0xfd, 0x57, 0x80, 0x63, 0x41, 0x0f, 0xde, 0xc8, 0x14, 0x61, 0x04, 0x11, 0x57, 0x80, 0x63, 0x45, 0x9b, 0xa2, 0x2c, 0x14, 0x61, 0x04, 0x30, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0x1f, 0xb2, 0x7b, 0x34, 0x11, 0x61, 0x02, 0x06, 0x57, 0x80, 0x63, 0x1f, 0xb2, 0x7b, 0x34, 0x14, 0x61, 0x03, 0x02, 0x57, 0x80, 0x63, 0x21, 0x6e, 0x80, 0x42, 0x14, 0x61, 0x03, 0x21, 0x57, 0x80, 0x63, 0x24, 0x8a, 0x9c, 0xa3, 0x14, 0x61, 0x03, 0x36, 0x57, 0x80, 0x63, 0x26, 0xc2, 0x59, 0x62, 0x14, 0x61, 0x03, 0x73, 0x57, 0x80, 0x63, 0x27, 0x4e, 0xf0, 0x15, 0x14, 0x61, 0x03, 0xa0, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x63, 0x01, 0xff, 0xc9, 0xa7, 0x14, 0x61, 0x02, 0x42, 0x57, 0x80, 0x63, 0x06, 0x33, 0xda, 0x77, 0x14, 0x61, 0x02, 0x76, 0x57, 0x80, 0x63, 0x0d, 0x0d, 0xd3, 0x99, 0x14, 0x61, 0x02, 0x97, 0x57, 0x80, 0x63, 0x19, 0x41, 0x32, 0x68, 0x14, 0x61, 0x02, 0xcd, 0x57, 0x80, 0x63, 0x19, 0x48, 0xfd, 0xbc, 0x14, 0x61, 0x02, 0xec, 0x57, 0x5b, 0x5f, 0x80, 0xfd, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x02, 0x4d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x61, 0x61, 0x02, 0x5c, 0x36, 0x60, 0x04, 0x61, 0x26, 0x26, 0x56, 0x5b, 0x61, 0x07, 0x25, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x90, 0x15, 0x15, 0x81, 0x52, 0x60, 0x20, 0x01, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x02, 0x81, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x02, 0x90, 0x36, 0x60, 0x04, 0x61, 0x26, 0x8b, 0x56, 0x5b, 0x61, 0x07, 0x5b, 0x56, 0x5b, 0x00, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x02, 0xa2, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5f, 0x54, 0x61, 0x02, 0xb5, 0x90, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x81, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x90, 0x91, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x02, 0x6d, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x02, 0xd8, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x61, 0x61, 0x02, 0xe7, 0x36, 0x60, 0x04, 0x61, 0x26, 0xe9, 0x56, 0x5b, 0x61, 0x08, 0x7a, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x02, 0xf7, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0xb5, 0x62, 0x7e, 0x87, 0xd5, 0x81, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0x0d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x03, 0x1c, 0x36, 0x60, 0x04, 0x61, 0x27, 0x46, 0x56, 0x5b, 0x61, 0x09, 0x09, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0x2c, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x62, 0x7e, 0x87, 0xd5, 0x61, 0x02, 0xb5, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0x41, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x03, 0x65, 0x61, 0x03, 0x50, 0x36, 0x60, 0x04, 0x61, 0x27, 0x92, 0x56, 0x5b, 0x5f, 0x90, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x81, 0x90, 0x52, 0x60, 0x40, 0x90, 0x91, 0x20, 0x01, 0x54, 0x90, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x90, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x02, 0x6d, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0x7e, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x03, 0x92, 0x61, 0x03, 0x8d, 0x36, 0x60, 0x04, 0x61, 0x27, 0x92, 0x56, 0x5b, 0x61, 0x0a, 0x06, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x61, 0x02, 0x6d, 0x92, 0x91, 0x90, 0x61, 0x27, 0xbd, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0xab, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0xb5, 0x61, 0x03, 0xba, 0x36, 0x60, 0x04, 0x61, 0x27, 0xe4, 0x56, 0x5b, 0x61, 0x0a, 0x32, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0xca, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x03, 0xd9, 0x36, 0x60, 0x04, 0x61, 0x28, 0x1b, 0x56, 0x5b, 0x61, 0x0a, 0xc3, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x03, 0xe9, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x03, 0xf8, 0x36, 0x60, 0x04, 0x61, 0x28, 0x1b, 0x56, 0x5b, 0x61, 0x0a, 0xee, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0x08, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x0b, 0x26, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0x1c, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x04, 0x2b, 0x36, 0x60, 0x04, 0x61, 0x28, 0x3e, 0x56, 0x5b, 0x61, 0x0b, 0x63, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0x3b, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x04, 0x4a, 0x36, 0x60, 0x04, 0x61, 0x26, 0xe9, 0x56, 0x5b, 0x61, 0x0c, 0xd7, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x04, 0x5d, 0x36, 0x60, 0x04, 0x61, 0x28, 0xe6, 0x56, 0x5b, 0x61, 0x0d, 0x50, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0x6d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x60, 0x02, 0x54, 0x60, 0xff, 0x16, 0x61, 0x02, 0x61, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0x84, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x04, 0x8e, 0x61, 0x27, 0x10, 0x81, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x61, 0xff, 0xff, 0x90, 0x91, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x61, 0x02, 0x6d, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0xac, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x04, 0xbb, 0x36, 0x60, 0x04, 0x61, 0x29, 0x6c, 0x56, 0x5b, 0x61, 0x0e, 0x64, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x04, 0xce, 0x36, 0x60, 0x04, 0x61, 0x29, 0xe0, 0x56, 0x5b, 0x61, 0x0f, 0x78, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0xde, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x60, 0x0b, 0x54, 0x61, 0x02, 0xb5, 0x90, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x81, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x04, 0xfd, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x05, 0x0c, 0x36, 0x60, 0x04, 0x61, 0x2a, 0x53, 0x56, 0x5b, 0x61, 0x10, 0x7b, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x05, 0x1f, 0x36, 0x60, 0x04, 0x61, 0x2a, 0xc1, 0x56, 0x5b, 0x61, 0x10, 0xaf, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0x2f, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x14, 0xc6, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0x43, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0xb5, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x81, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0x63, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0xb5, 0x61, 0x05, 0x72, 0x36, 0x60, 0x04, 0x61, 0x27, 0xe4, 0x56, 0x5b, 0x61, 0x15, 0x00, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0x82, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x61, 0x61, 0x05, 0x91, 0x36, 0x60, 0x04, 0x61, 0x28, 0x1b, 0x56, 0x5b, 0x61, 0x15, 0x4e, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0xa1, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x61, 0x02, 0xb5, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0xc0, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x03, 0x65, 0x5f, 0x81, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0xd3, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5f, 0x54, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x61, 0x02, 0xb5, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x05, 0xef, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x05, 0xfe, 0x36, 0x60, 0x04, 0x61, 0x29, 0x6c, 0x56, 0x5b, 0x61, 0x15, 0x78, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x06, 0x11, 0x36, 0x60, 0x04, 0x61, 0x27, 0x46, 0x56, 0x5b, 0x61, 0x16, 0x7c, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x06, 0x24, 0x36, 0x60, 0x04, 0x61, 0x2b, 0x88, 0x56, 0x5b, 0x61, 0x17, 0x6c, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x06, 0x37, 0x36, 0x60, 0x04, 0x61, 0x2c, 0x5b, 0x56, 0x5b, 0x61, 0x18, 0x8c, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x06, 0x4a, 0x36, 0x60, 0x04, 0x61, 0x2c, 0xb3, 0x56, 0x5b, 0x61, 0x19, 0x5f, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x06, 0x5a, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x06, 0x69, 0x36, 0x60, 0x04, 0x61, 0x28, 0x1b, 0x56, 0x5b, 0x61, 0x1a, 0x6e, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x06, 0x79, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x03, 0x65, 0x7f, 0x68, 0x28, 0x86, 0xe4, 0xaa, 0x03, 0x6c, 0xe8, 0xb1, 0x76, 0x18, 0x50, 0xf7, 0x68, 0xc4, 0x60, 0x46, 0x76, 0xf1, 0x85, 0x6f, 0x59, 0x6f, 0x45, 0x3e, 0xcc, 0x49, 0xee, 0x4d, 0x73, 0x54, 0x54, 0x81, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x06, 0xac, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x95, 0x61, 0x06, 0xbb, 0x36, 0x60, 0x04, 0x61, 0x26, 0xe9, 0x56, 0x5b, 0x61, 0x1a, 0x93, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x06, 0xcb, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x03, 0x65, 0x7f, 0x65, 0xd7, 0xa2, 0x8e, 0x32, 0x65, 0xb3, 0x7a, 0x64, 0x74, 0x92, 0x9f, 0x33, 0x65, 0x21, 0xb3, 0x32, 0xc1, 0x68, 0x1b, 0x93, 0x3f, 0x6c, 0xb9, 0xf3, 0x37, 0x66, 0x73, 0x44, 0x0d, 0x86, 0x2a, 0x81, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x06, 0xfe, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x61, 0x61, 0x07, 0x0d, 0x36, 0x60, 0x04, 0x61, 0x26, 0xe9, 0x56, 0x5b, 0x61, 0x1a, 0xd9, 0x56, 0x5b, 0x61, 0x02, 0x95, 0x61, 0x07, 0x20, 0x36, 0x60, 0x04, 0x61, 0x2d, 0x21, 0x56, 0x5b, 0x61, 0x1b, 0x20, 0x56, 0x5b, 0x5f, 0x60, 0x01, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x19, 0x82, 0x16, 0x63, 0x79, 0x65, 0xdb, 0x0b, 0x60, 0xe0, 0x1b, 0x14, 0x80, 0x61, 0x07, 0x55, 0x57, 0x50, 0x63, 0x01, 0xff, 0xc9, 0xa7, 0x60, 0xe0, 0x1b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x19, 0x83, 0x16, 0x14, 0x5b, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x07, 0xa2, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x61, 0x07, 0xaa, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x07, 0xbf, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x86, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x0a, 0x24, 0xe8, 0xa9, 0x60, 0xe4, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x84, 0x81, 0x16, 0x60, 0x24, 0x83, 0x01, 0x52, 0x91, 0x92, 0x50, 0x90, 0x82, 0x16, 0x90, 0x63, 0xa2, 0x4e, 0x8a, 0x90, 0x90, 0x60, 0x44, 0x01, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x08, 0x12, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x08, 0x24, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x60, 0x40, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x85, 0x16, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x87, 0x16, 0x93, 0x50, 0x87, 0x16, 0x91, 0x50, 0x7f, 0x52, 0x67, 0x93, 0x2e, 0x6c, 0x1b, 0x67, 0x8e, 0x74, 0xef, 0xba, 0x1e, 0x4d, 0x6c, 0x8b, 0x3f, 0xd7, 0x50, 0x4c, 0xf0, 0xfa, 0x8e, 0xea, 0x46, 0x2e, 0xfa, 0xc2, 0xc5, 0x90, 0xa2, 0x1d, 0x56, 0x90, 0x60, 0x20, 0x01, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa3, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x61, 0x08, 0x90, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x87, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x61, 0x54, 0x5f, 0xdd, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x61, 0x54, 0x5f, 0xdd, 0x90, 0x61, 0x08, 0xc1, 0x90, 0x87, 0x90, 0x87, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0x90, 0x56, 0x5b, 0x60, 0x20, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x86, 0x5a, 0xfa, 0x15, 0x80, 0x15, 0x61, 0x08, 0xdc, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x60, 0x40, 0x51, 0x3d, 0x60, 0x1f, 0x19, 0x60, 0x1f, 0x82, 0x01, 0x16, 0x82, 0x01, 0x80, 0x60, 0x40, 0x52, 0x50, 0x81, 0x01, 0x90, 0x61, 0x09, 0x00, 0x91, 0x90, 0x61, 0x2e, 0xb1, 0x56, 0x5b, 0x95, 0x94, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x09, 0x47, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x09, 0x4f, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x09, 0x64, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x43, 0x46, 0x98, 0xbb, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x43, 0x46, 0x98, 0xbb, 0x90, 0x61, 0x09, 0x93, 0x90, 0x85, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0xd0, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x09, 0xaa, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x09, 0xbc, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x82, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0xde, 0x25, 0xc2, 0xb1, 0x46, 0xdb, 0x36, 0xcb, 0xc9, 0x17, 0x15, 0xfd, 0xf2, 0x9c, 0xb0, 0xeb, 0x55, 0x6e, 0xed, 0x76, 0x78, 0xe0, 0xbf, 0x13, 0x56, 0x3b, 0xf7, 0x05, 0x0e, 0x8f, 0x0b, 0xbd, 0x83, 0x60, 0x40, 0x51, 0x61, 0x09, 0xf9, 0x91, 0x90, 0x61, 0x2e, 0xd0, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa2, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x0a, 0x81, 0x81, 0x54, 0x81, 0x10, 0x61, 0x0a, 0x15, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x5f, 0x91, 0x82, 0x52, 0x60, 0x20, 0x90, 0x91, 0x20, 0x01, 0x54, 0x60, 0xff, 0x81, 0x16, 0x91, 0x50, 0x61, 0x01, 0x00, 0x90, 0x04, 0x61, 0xff, 0xff, 0x16, 0x82, 0x56, 0x5b, 0x5f, 0x80, 0x61, 0x0a, 0x48, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x86, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x74, 0xce, 0xeb, 0x55, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x60, 0x04, 0x82, 0x01, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x74, 0xce, 0xeb, 0x55, 0x90, 0x60, 0x24, 0x01, 0x5b, 0x60, 0x20, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x86, 0x5a, 0xfa, 0x15, 0x80, 0x15, 0x61, 0x0a, 0x97, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x60, 0x40, 0x51, 0x3d, 0x60, 0x1f, 0x19, 0x60, 0x1f, 0x82, 0x01, 0x16, 0x82, 0x01, 0x80, 0x60, 0x40, 0x52, 0x50, 0x81, 0x01, 0x90, 0x61, 0x0a, 0xbb, 0x91, 0x90, 0x61, 0x2e, 0xe2, 0x56, 0x5b, 0x94, 0x93, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x82, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x81, 0x90, 0x52, 0x60, 0x40, 0x90, 0x91, 0x20, 0x01, 0x54, 0x61, 0x0a, 0xde, 0x81, 0x61, 0x1c, 0xd3, 0x56, 0x5b, 0x61, 0x0a, 0xe8, 0x83, 0x83, 0x61, 0x1c, 0xdd, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x81, 0x16, 0x33, 0x14, 0x61, 0x0b, 0x17, 0x57, 0x60, 0x40, 0x51, 0x63, 0x33, 0x4b, 0xd9, 0x19, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x61, 0x0b, 0x21, 0x82, 0x82, 0x61, 0x1d, 0x53, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x7f, 0x65, 0xd7, 0xa2, 0x8e, 0x32, 0x65, 0xb3, 0x7a, 0x64, 0x74, 0x92, 0x9f, 0x33, 0x65, 0x21, 0xb3, 0x32, 0xc1, 0x68, 0x1b, 0x93, 0x3f, 0x6c, 0xb9, 0xf3, 0x37, 0x66, 0x73, 0x44, 0x0d, 0x86, 0x2a, 0x61, 0x0b, 0x50, 0x81, 0x61, 0x1c, 0xd3, 0x56, 0x5b, 0x61, 0x0b, 0x58, 0x61, 0x1d, 0xbe, 0x56, 0x5b, 0x61, 0x0b, 0x60, 0x61, 0x1d, 0xe1, 0x56, 0x5b, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x0b, 0xa1, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x0b, 0xa9, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x0b, 0xbe, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x86, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x41, 0x0e, 0x3d, 0xf1, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x82, 0x1c, 0x7b, 0xe2, 0x90, 0x61, 0x0b, 0xef, 0x90, 0x86, 0x90, 0x86, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0xfd, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x0c, 0x06, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x0c, 0x18, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x16, 0x5f, 0x90, 0x81, 0x52, 0x60, 0x09, 0x60, 0x20, 0x52, 0x60, 0x40, 0x81, 0x20, 0x80, 0x54, 0x60, 0x01, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x19, 0x16, 0x81, 0x55, 0x91, 0x50, 0x61, 0x0c, 0x4f, 0x60, 0x01, 0x83, 0x01, 0x82, 0x61, 0x25, 0x33, 0x56, 0x5b, 0x61, 0x0c, 0x5c, 0x60, 0x02, 0x83, 0x01, 0x5f, 0x61, 0x25, 0x51, 0x56, 0x5b, 0x61, 0x0c, 0x69, 0x60, 0x03, 0x83, 0x01, 0x5f, 0x61, 0x25, 0x88, 0x56, 0x5b, 0x50, 0x60, 0x04, 0x81, 0x01, 0x80, 0x54, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x19, 0x16, 0x90, 0x55, 0x60, 0x05, 0x81, 0x01, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x90, 0x55, 0x5f, 0x60, 0x06, 0x82, 0x01, 0x81, 0x90, 0x55, 0x60, 0x07, 0x90, 0x91, 0x01, 0x55, 0x60, 0x40, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x81, 0x16, 0x91, 0x90, 0x86, 0x16, 0x90, 0x7f, 0x4c, 0xa4, 0x8d, 0x7c, 0xb4, 0x11, 0x03, 0x5a, 0x93, 0x1d, 0xa7, 0xa6, 0x86, 0xea, 0x77, 0xbc, 0x41, 0x30, 0x69, 0xde, 0x12, 0xd8, 0x44, 0xc4, 0x7d, 0xaf, 0x92, 0x42, 0xb7, 0x65, 0xcb, 0xa4, 0x90, 0x61, 0x08, 0x6c, 0x90, 0x87, 0x90, 0x61, 0x2e, 0xd0, 0x56, 0x5b, 0x5f, 0x61, 0x0c, 0xec, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x86, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x56, 0xd3, 0x01, 0xc1, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0xad, 0xa6, 0x03, 0x82, 0x90, 0x61, 0x0d, 0x1d, 0x90, 0x86, 0x90, 0x86, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0x90, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x0d, 0x34, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x0d, 0x46, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x0d, 0x8e, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x0d, 0x96, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x0d, 0xab, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x89, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x98, 0x38, 0xca, 0xa3, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x98, 0x38, 0xca, 0xa3, 0x90, 0x61, 0x0d, 0xe2, 0x90, 0x89, 0x90, 0x89, 0x90, 0x89, 0x90, 0x89, 0x90, 0x89, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2f, 0x27, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x0d, 0xf9, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x0e, 0x0b, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x60, 0x40, 0x80, 0x51, 0x60, 0xff, 0x89, 0x16, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x88, 0x81, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x80, 0x8b, 0x16, 0x94, 0x50, 0x8b, 0x16, 0x92, 0x50, 0x7f, 0xa9, 0xaa, 0xae, 0xf6, 0x24, 0xd1, 0x96, 0xd9, 0x61, 0xd0, 0x53, 0xfc, 0x29, 0xd4, 0x33, 0x1e, 0x5c, 0xb4, 0x5d, 0x62, 0x19, 0x5d, 0x99, 0x81, 0x4d, 0x29, 0xa9, 0x4f, 0x46, 0xfa, 0x9d, 0x4b, 0x91, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa3, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x0e, 0xa2, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x0e, 0xaa, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x0e, 0xbf, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x88, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x08, 0x81, 0x89, 0x8f, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x08, 0x81, 0x89, 0x8f, 0x90, 0x61, 0x0e, 0xf4, 0x90, 0x88, 0x90, 0x88, 0x90, 0x88, 0x90, 0x88, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2f, 0x67, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x0f, 0x0b, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x0f, 0x1d, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x84, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x86, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0x27, 0xc9, 0xad, 0x00, 0x3b, 0xd2, 0x95, 0xdb, 0x9b, 0x1b, 0x27, 0xdf, 0x47, 0xce, 0x0c, 0xf0, 0xca, 0x66, 0x29, 0x33, 0x71, 0xa2, 0x68, 0x8c, 0xce, 0x01, 0x86, 0x61, 0xd9, 0xf2, 0x2c, 0xc2, 0x86, 0x86, 0x86, 0x60, 0x40, 0x51, 0x61, 0x0f, 0x68, 0x93, 0x92, 0x91, 0x90, 0x61, 0x2f, 0x9d, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa3, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x0f, 0xb6, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x0f, 0xbe, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x0f, 0xd3, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x87, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x4e, 0x82, 0x08, 0x77, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x9d, 0x04, 0x10, 0xee, 0x90, 0x61, 0x10, 0x06, 0x90, 0x87, 0x90, 0x87, 0x90, 0x87, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2f, 0xc3, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x10, 0x1d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x10, 0x2f, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x84, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0x78, 0x14, 0x30, 0x11, 0x00, 0xcb, 0x38, 0xa3, 0x50, 0x27, 0xdd, 0x63, 0xa2, 0x9a, 0xa1, 0x4c, 0x3f, 0x73, 0x18, 0x8f, 0x15, 0xcf, 0x9f, 0x02, 0x76, 0x55, 0x25, 0x7c, 0x45, 0x01, 0x6e, 0x87, 0x85, 0x60, 0x40, 0x51, 0x61, 0x10, 0x6c, 0x91, 0x90, 0x61, 0x2e, 0xd0, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa2, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x7f, 0x68, 0x28, 0x86, 0xe4, 0xaa, 0x03, 0x6c, 0xe8, 0xb1, 0x76, 0x18, 0x50, 0xf7, 0x68, 0xc4, 0x60, 0x46, 0x76, 0xf1, 0x85, 0x6f, 0x59, 0x6f, 0x45, 0x3e, 0xcc, 0x49, 0xee, 0x4d, 0x73, 0x54, 0x54, 0x61, 0x10, 0xa5, 0x81, 0x61, 0x1c, 0xd3, 0x56, 0x5b, 0x61, 0x0b, 0x21, 0x83, 0x83, 0x61, 0x1e, 0x33, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x10, 0xed, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x10, 0xf5, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x11, 0x0a, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x8a, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x88, 0x81, 0x16, 0x5f, 0x90, 0x81, 0x52, 0x60, 0x09, 0x60, 0x20, 0x90, 0x81, 0x52, 0x60, 0x40, 0x80, 0x83, 0x20, 0x81, 0x51, 0x61, 0x01, 0x00, 0x81, 0x01, 0x83, 0x52, 0x81, 0x54, 0x95, 0x86, 0x16, 0x81, 0x52, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x90, 0x95, 0x04, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x85, 0x84, 0x01, 0x52, 0x60, 0x01, 0x81, 0x01, 0x80, 0x54, 0x83, 0x51, 0x81, 0x86, 0x02, 0x81, 0x01, 0x86, 0x01, 0x85, 0x52, 0x81, 0x81, 0x52, 0x97, 0x98, 0x50, 0x94, 0x96, 0x91, 0x94, 0x92, 0x86, 0x01, 0x93, 0x91, 0x92, 0x90, 0x91, 0x87, 0x90, 0x84, 0x01, 0x5b, 0x82, 0x82, 0x10, 0x15, 0x61, 0x12, 0x92, 0x57, 0x83, 0x82, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x60, 0x03, 0x02, 0x01, 0x60, 0x40, 0x51, 0x80, 0x60, 0x40, 0x01, 0x60, 0x40, 0x52, 0x90, 0x81, 0x5f, 0x82, 0x01, 0x80, 0x54, 0x61, 0x11, 0xa2, 0x90, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x80, 0x60, 0x1f, 0x01, 0x60, 0x20, 0x80, 0x91, 0x04, 0x02, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x90, 0x81, 0x01, 0x60, 0x40, 0x52, 0x80, 0x92, 0x91, 0x90, 0x81, 0x81, 0x52, 0x60, 0x20, 0x01, 0x82, 0x80, 0x54, 0x61, 0x11, 0xce, 0x90, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x80, 0x15, 0x61, 0x12, 0x19, 0x57, 0x80, 0x60, 0x1f, 0x10, 0x61, 0x11, 0xf0, 0x57, 0x61, 0x01, 0x00, 0x80, 0x83, 0x54, 0x04, 0x02, 0x83, 0x52, 0x91, 0x60, 0x20, 0x01, 0x91, 0x61, 0x12, 0x19, 0x56, 0x5b, 0x82, 0x01, 0x91, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x5b, 0x81, 0x54, 0x81, 0x52, 0x90, 0x60, 0x01, 0x01, 0x90, 0x60, 0x20, 0x01, 0x80, 0x83, 0x11, 0x61, 0x11, 0xfc, 0x57, 0x82, 0x90, 0x03, 0x60, 0x1f, 0x16, 0x82, 0x01, 0x91, 0x5b, 0x50, 0x50, 0x50, 0x91, 0x83, 0x52, 0x50, 0x50, 0x60, 0x40, 0x80, 0x51, 0x60, 0xa0, 0x81, 0x01, 0x82, 0x52, 0x60, 0x01, 0x84, 0x81, 0x01, 0x54, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x82, 0x16, 0x84, 0x52, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x82, 0x04, 0x81, 0x16, 0x60, 0x20, 0x85, 0x81, 0x01, 0x91, 0x90, 0x91, 0x52, 0x60, 0x01, 0x60, 0x80, 0x1b, 0x83, 0x04, 0x82, 0x16, 0x95, 0x85, 0x01, 0x95, 0x90, 0x95, 0x52, 0x60, 0x01, 0x60, 0xc0, 0x1b, 0x90, 0x91, 0x04, 0x81, 0x16, 0x60, 0x60, 0x84, 0x01, 0x52, 0x60, 0x02, 0x90, 0x95, 0x01, 0x54, 0x90, 0x94, 0x16, 0x60, 0x80, 0x82, 0x01, 0x52, 0x91, 0x81, 0x01, 0x91, 0x90, 0x91, 0x52, 0x91, 0x83, 0x52, 0x92, 0x90, 0x92, 0x01, 0x91, 0x01, 0x61, 0x11, 0x72, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x02, 0x82, 0x01, 0x80, 0x54, 0x61, 0x12, 0xaa, 0x90, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x80, 0x60, 0x1f, 0x01, 0x60, 0x20, 0x80, 0x91, 0x04, 0x02, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x90, 0x81, 0x01, 0x60, 0x40, 0x52, 0x80, 0x92, 0x91, 0x90, 0x81, 0x81, 0x52, 0x60, 0x20, 0x01, 0x82, 0x80, 0x54, 0x61, 0x12, 0xd6, 0x90, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x80, 0x15, 0x61, 0x13, 0x21, 0x57, 0x80, 0x60, 0x1f, 0x10, 0x61, 0x12, 0xf8, 0x57, 0x61, 0x01, 0x00, 0x80, 0x83, 0x54, 0x04, 0x02, 0x83, 0x52, 0x91, 0x60, 0x20, 0x01, 0x91, 0x61, 0x13, 0x21, 0x56, 0x5b, 0x82, 0x01, 0x91, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x5b, 0x81, 0x54, 0x81, 0x52, 0x90, 0x60, 0x01, 0x01, 0x90, 0x60, 0x20, 0x01, 0x80, 0x83, 0x11, 0x61, 0x13, 0x04, 0x57, 0x82, 0x90, 0x03, 0x60, 0x1f, 0x16, 0x82, 0x01, 0x91, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x03, 0x82, 0x01, 0x80, 0x54, 0x80, 0x60, 0x20, 0x02, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x90, 0x81, 0x01, 0x60, 0x40, 0x52, 0x80, 0x92, 0x91, 0x90, 0x81, 0x81, 0x52, 0x60, 0x20, 0x01, 0x82, 0x80, 0x54, 0x80, 0x15, 0x61, 0x13, 0x81, 0x57, 0x60, 0x20, 0x02, 0x82, 0x01, 0x91, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x5b, 0x81, 0x54, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x81, 0x52, 0x60, 0x01, 0x90, 0x91, 0x01, 0x90, 0x60, 0x20, 0x01, 0x80, 0x83, 0x11, 0x61, 0x13, 0x63, 0x57, 0x5b, 0x50, 0x50, 0x50, 0x91, 0x83, 0x52, 0x50, 0x50, 0x60, 0x04, 0x82, 0x01, 0x54, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x60, 0x20, 0x82, 0x01, 0x52, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x82, 0x52, 0x60, 0x05, 0x84, 0x01, 0x80, 0x54, 0x92, 0x90, 0x93, 0x01, 0x92, 0x90, 0x91, 0x82, 0x90, 0x60, 0xff, 0x16, 0x60, 0x01, 0x81, 0x11, 0x15, 0x61, 0x13, 0xc8, 0x57, 0x61, 0x13, 0xc8, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x60, 0x01, 0x81, 0x11, 0x15, 0x61, 0x13, 0xd9, 0x57, 0x61, 0x13, 0xd9, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x01, 0x82, 0x01, 0x54, 0x81, 0x52, 0x50, 0x50, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x07, 0x82, 0x01, 0x54, 0x81, 0x52, 0x50, 0x50, 0x90, 0x50, 0x61, 0x14, 0x02, 0x82, 0x88, 0x83, 0x61, 0x1e, 0xf6, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x6b, 0xef, 0x5a, 0x41, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x83, 0x16, 0x90, 0x63, 0xd7, 0xde, 0xb4, 0x82, 0x90, 0x61, 0x14, 0x38, 0x90, 0x8b, 0x90, 0x8b, 0x90, 0x8b, 0x90, 0x8b, 0x90, 0x8b, 0x90, 0x8b, 0x90, 0x60, 0x04, 0x01, 0x61, 0x30, 0x24, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x14, 0x4f, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x14, 0x61, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x60, 0x40, 0x80, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x8a, 0x16, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x87, 0x81, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x80, 0x8c, 0x16, 0x94, 0x50, 0x8c, 0x81, 0x16, 0x93, 0x50, 0x8d, 0x16, 0x91, 0x7f, 0x93, 0x92, 0x73, 0x90, 0xd1, 0x24, 0x73, 0x2c, 0x66, 0x28, 0x9c, 0x6e, 0x22, 0x37, 0x05, 0x14, 0xdd, 0xd6, 0x12, 0xa9, 0xcc, 0x6b, 0xff, 0x56, 0x71, 0xcb, 0xf2, 0xcb, 0xc1, 0x5d, 0xdf, 0xe3, 0x91, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa4, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x7f, 0x65, 0xd7, 0xa2, 0x8e, 0x32, 0x65, 0xb3, 0x7a, 0x64, 0x74, 0x92, 0x9f, 0x33, 0x65, 0x21, 0xb3, 0x32, 0xc1, 0x68, 0x1b, 0x93, 0x3f, 0x6c, 0xb9, 0xf3, 0x37, 0x66, 0x73, 0x44, 0x0d, 0x86, 0x2a, 0x61, 0x14, 0xf0, 0x81, 0x61, 0x1c, 0xd3, 0x56, 0x5b, 0x61, 0x14, 0xf8, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x61, 0x0b, 0x60, 0x61, 0x21, 0xd2, 0x56, 0x5b, 0x5f, 0x80, 0x61, 0x15, 0x16, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x86, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x05, 0x2d, 0x37, 0xd3, 0x60, 0xe2, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x60, 0x04, 0x82, 0x01, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x14, 0xb4, 0xdf, 0x4c, 0x90, 0x60, 0x24, 0x01, 0x61, 0x0a, 0x7c, 0x56, 0x5b, 0x5f, 0x91, 0x82, 0x52, 0x60, 0x01, 0x60, 0x20, 0x90, 0x81, 0x52, 0x60, 0x40, 0x80, 0x84, 0x20, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x93, 0x90, 0x93, 0x16, 0x84, 0x52, 0x91, 0x90, 0x52, 0x90, 0x20, 0x54, 0x60, 0xff, 0x16, 0x90, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x15, 0xb6, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x15, 0xbe, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x15, 0xd3, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x88, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x7e, 0x14, 0xb9, 0x19, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x7e, 0x14, 0xb9, 0x19, 0x90, 0x61, 0x16, 0x08, 0x90, 0x88, 0x90, 0x88, 0x90, 0x88, 0x90, 0x88, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2f, 0x67, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x16, 0x1f, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x16, 0x31, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x84, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x86, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0x98, 0xd6, 0xcc, 0x7c, 0xc8, 0xf1, 0x65, 0x9f, 0xe9, 0x4c, 0x0d, 0xaa, 0xa4, 0x30, 0x97, 0x4b, 0x7b, 0x94, 0x5c, 0x89, 0x76, 0xbd, 0x2d, 0x76, 0x78, 0xe1, 0x70, 0xdf, 0xe7, 0x06, 0x32, 0x78, 0x86, 0x86, 0x86, 0x60, 0x40, 0x51, 0x61, 0x0f, 0x68, 0x93, 0x92, 0x91, 0x90, 0x61, 0x2f, 0x9d, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x16, 0xba, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x16, 0xc2, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x16, 0xd7, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0xfe, 0x0d, 0xd3, 0x71, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0xfe, 0x0d, 0xd3, 0x71, 0x90, 0x61, 0x17, 0x06, 0x90, 0x85, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0xd0, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x17, 0x1d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x17, 0x2f, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x82, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0xeb, 0xc4, 0x42, 0x01, 0x8e, 0x78, 0x57, 0x06, 0x34, 0xa8, 0x8d, 0xba, 0xc8, 0x3d, 0x46, 0x77, 0xae, 0x1a, 0x5c, 0xf8, 0x49, 0x1f, 0xb0, 0xfc, 0x16, 0x6a, 0x73, 0x06, 0xba, 0x1f, 0xf0, 0x51, 0x83, 0x60, 0x40, 0x51, 0x61, 0x09, 0xf9, 0x91, 0x90, 0x61, 0x2e, 0xd0, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x17, 0xaa, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x17, 0xb2, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x17, 0xc7, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x8c, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x1b, 0xe1, 0x4b, 0x31, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x37, 0xc2, 0x96, 0x62, 0x90, 0x61, 0x18, 0x04, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x8c, 0x90, 0x60, 0x04, 0x01, 0x61, 0x30, 0xaa, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x18, 0x1b, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x18, 0x2d, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x88, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x8a, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0x08, 0xe1, 0x88, 0x61, 0x65, 0x98, 0x38, 0xca, 0xd8, 0xb0, 0x4f, 0x46, 0x87, 0xac, 0xa1, 0xdf, 0xb9, 0x33, 0x36, 0xe7, 0x50, 0xac, 0xf5, 0xc3, 0x69, 0x96, 0x37, 0xed, 0x8c, 0xa4, 0xc2, 0x7a, 0x8a, 0x8a, 0x8a, 0x60, 0x40, 0x51, 0x61, 0x18, 0x78, 0x93, 0x92, 0x91, 0x90, 0x61, 0x31, 0x15, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa3, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x18, 0xca, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x18, 0xd2, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x61, 0x18, 0xf8, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x84, 0x16, 0x61, 0x18, 0xef, 0x60, 0x40, 0x84, 0x01, 0x60, 0x20, 0x85, 0x01, 0x61, 0x31, 0x3f, 0x56, 0x5b, 0x60, 0x03, 0x91, 0x90, 0x61, 0x22, 0x0f, 0x56, 0x5b, 0x50, 0x61, 0x19, 0x0e, 0x60, 0x06, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x84, 0x61, 0x22, 0x0f, 0x56, 0x5b, 0x50, 0x82, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x82, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x7f, 0x27, 0x80, 0x18, 0x18, 0x2b, 0x7c, 0x51, 0xe2, 0xda, 0x72, 0xc1, 0xf4, 0x65, 0xc2, 0x6c, 0x12, 0xd9, 0x60, 0x60, 0x99, 0xaf, 0x0f, 0x08, 0xdb, 0x42, 0x03, 0x78, 0x34, 0x4b, 0x35, 0x22, 0x23, 0x83, 0x60, 0x40, 0x51, 0x61, 0x19, 0x52, 0x91, 0x90, 0x61, 0x31, 0x6d, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa3, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x19, 0x9d, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x19, 0xa5, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x19, 0xba, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x87, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0xbb, 0x43, 0xab, 0xd9, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0xbb, 0x43, 0xab, 0xd9, 0x90, 0x61, 0x19, 0xed, 0x90, 0x87, 0x90, 0x87, 0x90, 0x87, 0x90, 0x60, 0x04, 0x01, 0x61, 0x33, 0x0e, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x1a, 0x04, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x1a, 0x16, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x82, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x85, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x7f, 0x21, 0x9c, 0x2f, 0xdf, 0xbe, 0x4f, 0x11, 0x1d, 0xda, 0x58, 0x4e, 0xef, 0xbc, 0xb4, 0xeb, 0x23, 0x70, 0xce, 0xc8, 0x50, 0xe2, 0xa7, 0x9e, 0x4f, 0xed, 0x3a, 0x8f, 0x70, 0x80, 0x06, 0xe7, 0xa9, 0x86, 0x85, 0x60, 0x40, 0x51, 0x61, 0x1a, 0x5f, 0x92, 0x91, 0x90, 0x61, 0x33, 0x42, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa3, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x82, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x81, 0x90, 0x52, 0x60, 0x40, 0x90, 0x91, 0x20, 0x01, 0x54, 0x61, 0x1a, 0x89, 0x81, 0x61, 0x1c, 0xd3, 0x56, 0x5b, 0x61, 0x0a, 0xe8, 0x83, 0x83, 0x61, 0x1d, 0x53, 0x56, 0x5b, 0x5f, 0x61, 0x1a, 0xa8, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x86, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x46, 0xc5, 0x78, 0xa5, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x46, 0xc5, 0x78, 0xa5, 0x90, 0x61, 0x0d, 0x1d, 0x90, 0x86, 0x90, 0x86, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0x90, 0x56, 0x5b, 0x5f, 0x80, 0x61, 0x1a, 0xef, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x87, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x0e, 0xb5, 0xe5, 0xeb, 0x60, 0xe3, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x75, 0xaf, 0x2f, 0x58, 0x90, 0x61, 0x08, 0xc1, 0x90, 0x87, 0x90, 0x87, 0x90, 0x60, 0x04, 0x01, 0x61, 0x2e, 0x90, 0x56, 0x5b, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x14, 0x61, 0x1b, 0x5e, 0x57, 0x33, 0x5f, 0x80, 0x51, 0x60, 0x20, 0x61, 0x3d, 0xce, 0x83, 0x39, 0x81, 0x51, 0x91, 0x52, 0x60, 0x40, 0x51, 0x63, 0x59, 0xaf, 0xe8, 0xaf, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x92, 0x91, 0x90, 0x61, 0x2d, 0x69, 0x56, 0x5b, 0x61, 0x1b, 0x66, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x5f, 0x61, 0x1b, 0x7b, 0x60, 0x03, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x61, 0x1c, 0xc1, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x8b, 0x24, 0x80, 0x65, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x90, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x63, 0x8b, 0x24, 0x80, 0x65, 0x90, 0x61, 0x1b, 0xaa, 0x90, 0x85, 0x90, 0x60, 0x04, 0x01, 0x61, 0x34, 0x8b, 0x56, 0x5b, 0x5f, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x5f, 0x87, 0x80, 0x3b, 0x15, 0x80, 0x15, 0x61, 0x1b, 0xc1, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x5a, 0xf1, 0x15, 0x80, 0x15, 0x61, 0x1b, 0xd3, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x84, 0x92, 0x50, 0x60, 0x09, 0x91, 0x50, 0x5f, 0x90, 0x50, 0x61, 0x1b, 0xeb, 0x60, 0x20, 0x84, 0x01, 0x84, 0x61, 0x35, 0x84, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x16, 0x81, 0x52, 0x60, 0x20, 0x81, 0x01, 0x91, 0x90, 0x91, 0x52, 0x60, 0x40, 0x01, 0x5f, 0x20, 0x61, 0x1c, 0x0d, 0x82, 0x82, 0x61, 0x3b, 0x4f, 0x56, 0x5b, 0x50, 0x61, 0x1c, 0x20, 0x90, 0x50, 0x60, 0x40, 0x83, 0x01, 0x60, 0x20, 0x84, 0x01, 0x61, 0x31, 0x3f, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x61, 0x1c, 0x36, 0x60, 0x20, 0x84, 0x01, 0x84, 0x61, 0x35, 0x84, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x90, 0x81, 0x16, 0x90, 0x85, 0x16, 0x7f, 0x4d, 0xef, 0x53, 0x62, 0x75, 0x09, 0x54, 0x07, 0x7c, 0xbc, 0x9d, 0xad, 0x1a, 0xb8, 0x80, 0x58, 0xdd, 0x6d, 0x0e, 0xd8, 0x94, 0xba, 0x05, 0xf8, 0xf1, 0x47, 0xa7, 0xa2, 0xfe, 0x20, 0x4b, 0x22, 0x61, 0x1c, 0x75, 0x60, 0xc0, 0x87, 0x01, 0x60, 0xa0, 0x88, 0x01, 0x61, 0x35, 0x84, 0x56, 0x5b, 0x86, 0x60, 0xc0, 0x01, 0x87, 0x61, 0x01, 0x00, 0x01, 0x35, 0x60, 0x40, 0x51, 0x61, 0x1c, 0x8e, 0x93, 0x92, 0x91, 0x90, 0x61, 0x3c, 0x55, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa4, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x02, 0x54, 0x60, 0xff, 0x16, 0x15, 0x61, 0x1c, 0xbf, 0x57, 0x60, 0x40, 0x51, 0x63, 0xd9, 0x3c, 0x06, 0x65, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x56, 0x5b, 0x5f, 0x61, 0x1c, 0xcc, 0x83, 0x83, 0x61, 0x22, 0x24, 0x56, 0x5b, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x61, 0x0b, 0x60, 0x81, 0x33, 0x61, 0x22, 0x6a, 0x56, 0x5b, 0x5f, 0x61, 0x1c, 0xe8, 0x83, 0x83, 0x61, 0x15, 0x4e, 0x56, 0x5b, 0x61, 0x1d, 0x4c, 0x57, 0x5f, 0x83, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x81, 0x81, 0x52, 0x60, 0x40, 0x80, 0x84, 0x20, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x87, 0x16, 0x80, 0x86, 0x52, 0x92, 0x52, 0x80, 0x84, 0x20, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x90, 0x93, 0x17, 0x90, 0x92, 0x55, 0x90, 0x51, 0x33, 0x92, 0x86, 0x91, 0x7f, 0x2f, 0x87, 0x88, 0x11, 0x7e, 0x7e, 0xff, 0x1d, 0x82, 0xe9, 0x26, 0xec, 0x79, 0x49, 0x01, 0xd1, 0x7c, 0x78, 0x02, 0x4a, 0x50, 0x27, 0x09, 0x40, 0x30, 0x45, 0x40, 0xa7, 0x33, 0x65, 0x6f, 0x0d, 0x91, 0x90, 0xa4, 0x50, 0x60, 0x01, 0x61, 0x07, 0x55, 0x56, 0x5b, 0x50, 0x5f, 0x61, 0x07, 0x55, 0x56, 0x5b, 0x5f, 0x61, 0x1d, 0x5e, 0x83, 0x83, 0x61, 0x15, 0x4e, 0x56, 0x5b, 0x15, 0x61, 0x1d, 0x4c, 0x57, 0x5f, 0x83, 0x81, 0x52, 0x60, 0x01, 0x60, 0x20, 0x90, 0x81, 0x52, 0x60, 0x40, 0x80, 0x83, 0x20, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x86, 0x16, 0x80, 0x85, 0x52, 0x92, 0x52, 0x80, 0x83, 0x20, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x90, 0x55, 0x51, 0x33, 0x92, 0x86, 0x91, 0x7f, 0xf6, 0x39, 0x1f, 0x5c, 0x32, 0xd9, 0xc6, 0x9d, 0x2a, 0x47, 0xea, 0x67, 0x0b, 0x44, 0x29, 0x74, 0xb5, 0x39, 0x35, 0xd1, 0xed, 0xc7, 0xfd, 0x64, 0xeb, 0x21, 0xe0, 0x47, 0xa8, 0x39, 0x17, 0x1b, 0x91, 0x90, 0xa4, 0x50, 0x60, 0x01, 0x61, 0x07, 0x55, 0x56, 0x5b, 0x60, 0x02, 0x54, 0x60, 0xff, 0x16, 0x61, 0x1c, 0xbf, 0x57, 0x60, 0x40, 0x51, 0x63, 0x8d, 0xfc, 0x20, 0x2b, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x61, 0x1d, 0xe9, 0x61, 0x1d, 0xbe, 0x56, 0x5b, 0x60, 0x02, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x90, 0x55, 0x7f, 0x5d, 0xb9, 0xee, 0x0a, 0x49, 0x5b, 0xf2, 0xe6, 0xff, 0x9c, 0x91, 0xa7, 0x83, 0x4c, 0x1b, 0xa4, 0xfd, 0xd2, 0x44, 0xa5, 0xe8, 0xaa, 0x4e, 0x53, 0x7b, 0xd3, 0x8a, 0xea, 0xe4, 0xb0, 0x73, 0xaa, 0x33, 0x5b, 0x60, 0x40, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x90, 0x91, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xa1, 0x56, 0x5b, 0x61, 0x1e, 0x8d, 0x82, 0x82, 0x80, 0x80, 0x60, 0x20, 0x02, 0x60, 0x20, 0x01, 0x60, 0x40, 0x51, 0x90, 0x81, 0x01, 0x60, 0x40, 0x52, 0x80, 0x93, 0x92, 0x91, 0x90, 0x81, 0x81, 0x52, 0x60, 0x20, 0x01, 0x5f, 0x90, 0x5b, 0x82, 0x82, 0x10, 0x15, 0x61, 0x1e, 0x83, 0x57, 0x61, 0x1e, 0x74, 0x60, 0x40, 0x83, 0x02, 0x86, 0x01, 0x36, 0x81, 0x90, 0x03, 0x81, 0x01, 0x90, 0x61, 0x3c, 0x9b, 0x56, 0x5b, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x60, 0x01, 0x01, 0x90, 0x61, 0x1e, 0x57, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x61, 0x22, 0xa7, 0x56, 0x5b, 0x61, 0x1e, 0x98, 0x60, 0x0a, 0x5f, 0x61, 0x25, 0xa3, 0x56, 0x5b, 0x5f, 0x5b, 0x81, 0x81, 0x10, 0x15, 0x61, 0x0b, 0x21, 0x57, 0x60, 0x0a, 0x83, 0x83, 0x83, 0x81, 0x81, 0x10, 0x61, 0x1e, 0xb6, 0x57, 0x61, 0x1e, 0xb6, 0x61, 0x3c, 0xf7, 0x56, 0x5b, 0x83, 0x54, 0x60, 0x01, 0x81, 0x01, 0x85, 0x55, 0x5f, 0x94, 0x85, 0x52, 0x60, 0x20, 0x90, 0x94, 0x20, 0x60, 0x40, 0x90, 0x91, 0x02, 0x92, 0x90, 0x92, 0x01, 0x92, 0x91, 0x90, 0x91, 0x01, 0x90, 0x50, 0x61, 0x1e, 0xe1, 0x82, 0x82, 0x61, 0x3d, 0x0b, 0x56, 0x5b, 0x50, 0x50, 0x80, 0x80, 0x61, 0x1e, 0xee, 0x90, 0x61, 0x3d, 0x61, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x61, 0x1e, 0x9a, 0x56, 0x5b, 0x60, 0xe0, 0x81, 0x01, 0x51, 0x5f, 0x81, 0x90, 0x03, 0x61, 0x1f, 0x09, 0x57, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x5b, 0x60, 0x0a, 0x54, 0x81, 0x10, 0x15, 0x61, 0x20, 0x3c, 0x57, 0x5f, 0x60, 0x0a, 0x82, 0x81, 0x54, 0x81, 0x10, 0x61, 0x1f, 0x2d, 0x57, 0x61, 0x1f, 0x2d, 0x61, 0x3c, 0xf7, 0x56, 0x5b, 0x5f, 0x91, 0x82, 0x52, 0x60, 0x20, 0x90, 0x91, 0x20, 0x60, 0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91, 0x52, 0x91, 0x01, 0x80, 0x54, 0x82, 0x90, 0x60, 0xff, 0x16, 0x60, 0x03, 0x81, 0x11, 0x15, 0x61, 0x1f, 0x5a, 0x57, 0x61, 0x1f, 0x5a, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x60, 0x03, 0x81, 0x11, 0x15, 0x61, 0x1f, 0x6b, 0x57, 0x61, 0x1f, 0x6b, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x81, 0x52, 0x90, 0x54, 0x61, 0xff, 0xff, 0x61, 0x01, 0x00, 0x90, 0x91, 0x04, 0x81, 0x16, 0x60, 0x20, 0x92, 0x83, 0x01, 0x52, 0x90, 0x82, 0x01, 0x51, 0x91, 0x92, 0x50, 0x5f, 0x91, 0x61, 0x27, 0x10, 0x91, 0x61, 0x1f, 0x98, 0x91, 0x16, 0x8a, 0x61, 0x36, 0x36, 0x56, 0x5b, 0x61, 0x1f, 0xa2, 0x91, 0x90, 0x61, 0x3d, 0x79, 0x56, 0x5b, 0x90, 0x50, 0x5f, 0x82, 0x51, 0x60, 0x03, 0x81, 0x11, 0x15, 0x61, 0x1f, 0xb8, 0x57, 0x61, 0x1f, 0xb8, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x03, 0x61, 0x1f, 0xc5, 0x57, 0x80, 0x96, 0x50, 0x61, 0x20, 0x27, 0x56, 0x5b, 0x60, 0x01, 0x82, 0x51, 0x60, 0x03, 0x81, 0x11, 0x15, 0x61, 0x1f, 0xda, 0x57, 0x61, 0x1f, 0xda, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x03, 0x61, 0x1f, 0xe7, 0x57, 0x80, 0x95, 0x50, 0x61, 0x20, 0x27, 0x56, 0x5b, 0x60, 0x02, 0x82, 0x51, 0x60, 0x03, 0x81, 0x11, 0x15, 0x61, 0x1f, 0xfc, 0x57, 0x61, 0x1f, 0xfc, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x03, 0x61, 0x20, 0x09, 0x57, 0x80, 0x94, 0x50, 0x61, 0x20, 0x27, 0x56, 0x5b, 0x60, 0x03, 0x82, 0x51, 0x60, 0x03, 0x81, 0x11, 0x15, 0x61, 0x20, 0x1e, 0x57, 0x61, 0x20, 0x1e, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x03, 0x61, 0x20, 0x27, 0x57, 0x80, 0x93, 0x50, 0x5b, 0x50, 0x50, 0x80, 0x80, 0x61, 0x20, 0x34, 0x90, 0x61, 0x3d, 0x61, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x61, 0x1f, 0x0f, 0x56, 0x5b, 0x50, 0x5f, 0x61, 0x20, 0x48, 0x82, 0x84, 0x61, 0x3d, 0x98, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x08, 0x17, 0x9f, 0x35, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x8a, 0x16, 0x60, 0x04, 0x82, 0x01, 0x52, 0x90, 0x91, 0x50, 0x5f, 0x90, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x8b, 0x16, 0x90, 0x63, 0x08, 0x17, 0x9f, 0x35, 0x90, 0x60, 0x24, 0x01, 0x60, 0x20, 0x60, 0x40, 0x51, 0x80, 0x83, 0x03, 0x81, 0x86, 0x5a, 0xfa, 0x15, 0x80, 0x15, 0x61, 0x20, 0x98, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x60, 0x40, 0x51, 0x3d, 0x60, 0x1f, 0x19, 0x60, 0x1f, 0x82, 0x01, 0x16, 0x82, 0x01, 0x80, 0x60, 0x40, 0x52, 0x50, 0x81, 0x01, 0x90, 0x61, 0x20, 0xbc, 0x91, 0x90, 0x61, 0x2e, 0xe2, 0x56, 0x5b, 0x90, 0x50, 0x61, 0x20, 0xcb, 0x88, 0x60, 0xc0, 0x01, 0x51, 0x61, 0x23, 0x17, 0x56, 0x5b, 0x15, 0x61, 0x21, 0x6f, 0x57, 0x60, 0x40, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x90, 0x87, 0x15, 0x61, 0x08, 0xfc, 0x02, 0x90, 0x88, 0x90, 0x5f, 0x81, 0x81, 0x81, 0x85, 0x88, 0x88, 0xf1, 0x93, 0x50, 0x50, 0x50, 0x50, 0x15, 0x80, 0x15, 0x61, 0x21, 0x03, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x60, 0x0b, 0x54, 0x60, 0x40, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x90, 0x91, 0x16, 0x90, 0x86, 0x15, 0x61, 0x08, 0xfc, 0x02, 0x90, 0x87, 0x90, 0x5f, 0x81, 0x81, 0x81, 0x85, 0x88, 0x88, 0xf1, 0x93, 0x50, 0x50, 0x50, 0x50, 0x15, 0x80, 0x15, 0x61, 0x21, 0x3b, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x60, 0x40, 0x51, 0x62, 0x7e, 0x87, 0xd5, 0x90, 0x83, 0x15, 0x61, 0x08, 0xfc, 0x02, 0x90, 0x84, 0x90, 0x5f, 0x81, 0x81, 0x81, 0x85, 0x88, 0x88, 0xf1, 0x93, 0x50, 0x50, 0x50, 0x50, 0x15, 0x80, 0x15, 0x61, 0x21, 0x69, 0x57, 0x3d, 0x5f, 0x80, 0x3e, 0x3d, 0x5f, 0xfd, 0x5b, 0x50, 0x61, 0x21, 0xc6, 0x56, 0x5b, 0x5f, 0x61, 0x21, 0x7d, 0x89, 0x60, 0xc0, 0x01, 0x51, 0x61, 0x23, 0x5b, 0x56, 0x5b, 0x90, 0x50, 0x61, 0x21, 0x93, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x83, 0x89, 0x61, 0x23, 0xc2, 0x56, 0x5b, 0x60, 0x0b, 0x54, 0x61, 0x21, 0xad, 0x90, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x83, 0x81, 0x16, 0x91, 0x16, 0x88, 0x61, 0x23, 0xc2, 0x56, 0x5b, 0x61, 0x21, 0xc4, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x62, 0x7e, 0x87, 0xd5, 0x85, 0x61, 0x23, 0xc2, 0x56, 0x5b, 0x50, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x61, 0x21, 0xda, 0x61, 0x1c, 0x9b, 0x56, 0x5b, 0x60, 0x02, 0x80, 0x54, 0x60, 0xff, 0x19, 0x16, 0x60, 0x01, 0x17, 0x90, 0x55, 0x7f, 0x62, 0xe7, 0x8c, 0xea, 0x01, 0xbe, 0xe3, 0x20, 0xcd, 0x4e, 0x42, 0x02, 0x70, 0xb5, 0xea, 0x74, 0x00, 0x0d, 0x11, 0xb0, 0xc9, 0xf7, 0x47, 0x54, 0xeb, 0xdb, 0xfc, 0x54, 0x4b, 0x05, 0xa2, 0x58, 0x61, 0x1e, 0x16, 0x33, 0x90, 0x56, 0x5b, 0x5f, 0x61, 0x0a, 0xbb, 0x84, 0x84, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x85, 0x16, 0x61, 0x24, 0x14, 0x56, 0x5b, 0x5f, 0x81, 0x81, 0x52, 0x60, 0x02, 0x83, 0x01, 0x60, 0x20, 0x52, 0x60, 0x40, 0x81, 0x20, 0x54, 0x80, 0x15, 0x80, 0x15, 0x61, 0x22, 0x49, 0x57, 0x50, 0x61, 0x22, 0x47, 0x84, 0x84, 0x61, 0x24, 0x30, 0x56, 0x5b, 0x15, 0x5b, 0x15, 0x61, 0x1c, 0xcc, 0x57, 0x60, 0x40, 0x51, 0x63, 0x01, 0x5a, 0xb3, 0x43, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x81, 0x01, 0x84, 0x90, 0x52, 0x60, 0x24, 0x01, 0x61, 0x07, 0x99, 0x56, 0x5b, 0x61, 0x22, 0x74, 0x82, 0x82, 0x61, 0x15, 0x4e, 0x56, 0x5b, 0x61, 0x22, 0xa3, 0x57, 0x60, 0x40, 0x51, 0x63, 0xe2, 0x51, 0x7d, 0x3f, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x82, 0x16, 0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x24, 0x81, 0x01, 0x83, 0x90, 0x52, 0x60, 0x44, 0x01, 0x61, 0x07, 0x99, 0x56, 0x5b, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5b, 0x82, 0x51, 0x81, 0x10, 0x15, 0x61, 0x22, 0xf0, 0x57, 0x82, 0x81, 0x81, 0x51, 0x81, 0x10, 0x61, 0x22, 0xc5, 0x57, 0x61, 0x22, 0xc5, 0x61, 0x3c, 0xf7, 0x56, 0x5b, 0x60, 0x20, 0x02, 0x60, 0x20, 0x01, 0x01, 0x51, 0x60, 0x20, 0x01, 0x51, 0x82, 0x61, 0x22, 0xdc, 0x91, 0x90, 0x61, 0x3d, 0xab, 0x56, 0x5b, 0x91, 0x50, 0x80, 0x61, 0x22, 0xe8, 0x81, 0x61, 0x3d, 0x61, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x61, 0x22, 0xaa, 0x56, 0x5b, 0x50, 0x61, 0xff, 0xff, 0x81, 0x16, 0x61, 0x27, 0x10, 0x14, 0x61, 0x22, 0xa3, 0x57, 0x60, 0x40, 0x51, 0x63, 0x04, 0xbe, 0x90, 0xa9, 0x60, 0xe5, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x5f, 0x61, 0x23, 0x21, 0x82, 0x61, 0x24, 0x3b, 0x56, 0x5b, 0x15, 0x61, 0x23, 0x38, 0x57, 0x50, 0x60, 0x20, 0x01, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x15, 0x90, 0x56, 0x5b, 0x61, 0x23, 0x41, 0x82, 0x61, 0x24, 0x59, 0x56, 0x5b, 0x15, 0x61, 0x23, 0x4f, 0x57, 0x50, 0x60, 0x20, 0x01, 0x51, 0x15, 0x90, 0x56, 0x5b, 0x50, 0x5f, 0x91, 0x90, 0x50, 0x56, 0x5b, 0x91, 0x90, 0x50, 0x56, 0x5b, 0x5f, 0x61, 0x23, 0x65, 0x82, 0x61, 0x24, 0x3b, 0x56, 0x5b, 0x15, 0x61, 0x23, 0x72, 0x57, 0x50, 0x60, 0x20, 0x01, 0x51, 0x90, 0x56, 0x5b, 0x61, 0x23, 0x7b, 0x82, 0x61, 0x24, 0x59, 0x56, 0x5b, 0x15, 0x61, 0x23, 0x93, 0x57, 0x60, 0x20, 0x82, 0x01, 0x51, 0x63, 0xff, 0xff, 0xff, 0xff, 0x60, 0x80, 0x1b, 0x17, 0x61, 0x07, 0x55, 0x56, 0x5b, 0x81, 0x51, 0x60, 0x01, 0x81, 0x11, 0x15, 0x61, 0x23, 0xa6, 0x57, 0x61, 0x23, 0xa6, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x63, 0x75, 0x45, 0x8b, 0x5d, 0x60, 0xe1, 0x1b, 0x81, 0x52, 0x60, 0x04, 0x01, 0x61, 0x07, 0x99, 0x91, 0x81, 0x52, 0x60, 0x20, 0x01, 0x90, 0x56, 0x5b, 0x60, 0x40, 0x80, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x84, 0x16, 0x60, 0x24, 0x82, 0x01, 0x52, 0x60, 0x44, 0x80, 0x82, 0x01, 0x84, 0x90, 0x52, 0x82, 0x51, 0x80, 0x83, 0x03, 0x90, 0x91, 0x01, 0x81, 0x52, 0x60, 0x64, 0x90, 0x91, 0x01, 0x90, 0x91, 0x52, 0x60, 0x20, 0x81, 0x01, 0x80, 0x51, 0x60, 0x01, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x16, 0x63, 0xa9, 0x05, 0x9c, 0xbb, 0x60, 0xe0, 0x1b, 0x17, 0x90, 0x52, 0x61, 0x0b, 0x21, 0x90, 0x84, 0x90, 0x61, 0x24, 0x60, 0x56, 0x5b, 0x5f, 0x82, 0x81, 0x52, 0x60, 0x02, 0x84, 0x01, 0x60, 0x20, 0x52, 0x60, 0x40, 0x81, 0x20, 0x82, 0x90, 0x55, 0x61, 0x0a, 0xbb, 0x84, 0x84, 0x61, 0x24, 0xcc, 0x56, 0x5b, 0x5f, 0x61, 0x1c, 0xcc, 0x83, 0x83, 0x61, 0x24, 0xd7, 0x56, 0x5b, 0x5f, 0x60, 0x01, 0x5b, 0x82, 0x51, 0x60, 0x01, 0x81, 0x11, 0x15, 0x61, 0x24, 0x52, 0x57, 0x61, 0x24, 0x52, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x14, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x61, 0x24, 0x3f, 0x56, 0x5b, 0x5f, 0x80, 0x60, 0x20, 0x5f, 0x84, 0x51, 0x60, 0x20, 0x86, 0x01, 0x5f, 0x88, 0x5a, 0xf1, 0x80, 0x61, 0x24, 0x7f, 0x57, 0x60, 0x40, 0x51, 0x3d, 0x5f, 0x82, 0x3e, 0x3d, 0x81, 0xfd, 0x5b, 0x50, 0x50, 0x5f, 0x51, 0x3d, 0x91, 0x50, 0x81, 0x15, 0x61, 0x24, 0x96, 0x57, 0x80, 0x60, 0x01, 0x14, 0x15, 0x61, 0x24, 0xa3, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x84, 0x16, 0x3b, 0x15, 0x5b, 0x15, 0x61, 0x0a, 0xe8, 0x57, 0x60, 0x40, 0x51, 0x63, 0x52, 0x74, 0xaf, 0xe7, 0x60, 0xe0, 0x1b, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x85, 0x16, 0x60, 0x04, 0x82, 0x01, 0x52, 0x60, 0x24, 0x01, 0x61, 0x07, 0x99, 0x56, 0x5b, 0x5f, 0x61, 0x1c, 0xcc, 0x83, 0x83, 0x61, 0x24, 0xee, 0x56, 0x5b, 0x5f, 0x81, 0x81, 0x52, 0x60, 0x01, 0x83, 0x01, 0x60, 0x20, 0x52, 0x60, 0x40, 0x81, 0x20, 0x54, 0x15, 0x15, 0x61, 0x1c, 0xcc, 0x56, 0x5b, 0x5f, 0x81, 0x81, 0x52, 0x60, 0x01, 0x83, 0x01, 0x60, 0x20, 0x52, 0x60, 0x40, 0x81, 0x20, 0x54, 0x61, 0x1d, 0x4c, 0x57, 0x50, 0x81, 0x54, 0x60, 0x01, 0x81, 0x81, 0x01, 0x84, 0x55, 0x5f, 0x84, 0x81, 0x52, 0x60, 0x20, 0x80, 0x82, 0x20, 0x90, 0x93, 0x01, 0x84, 0x90, 0x55, 0x84, 0x54, 0x84, 0x82, 0x52, 0x82, 0x86, 0x01, 0x90, 0x93, 0x52, 0x60, 0x40, 0x90, 0x20, 0x91, 0x90, 0x91, 0x55, 0x61, 0x07, 0x55, 0x56, 0x5b, 0x50, 0x80, 0x54, 0x5f, 0x82, 0x55, 0x60, 0x03, 0x02, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x81, 0x01, 0x90, 0x61, 0x0b, 0x60, 0x91, 0x90, 0x61, 0x25, 0xbe, 0x56, 0x5b, 0x50, 0x80, 0x54, 0x61, 0x25, 0x5d, 0x90, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x5f, 0x82, 0x55, 0x80, 0x60, 0x1f, 0x10, 0x61, 0x25, 0x6c, 0x57, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x1f, 0x01, 0x60, 0x20, 0x90, 0x04, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x81, 0x01, 0x90, 0x61, 0x0b, 0x60, 0x91, 0x90, 0x61, 0x25, 0xf7, 0x56, 0x5b, 0x50, 0x80, 0x54, 0x5f, 0x82, 0x55, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x81, 0x01, 0x90, 0x61, 0x0b, 0x60, 0x91, 0x90, 0x61, 0x25, 0xf7, 0x56, 0x5b, 0x50, 0x80, 0x54, 0x5f, 0x82, 0x55, 0x90, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x90, 0x81, 0x01, 0x90, 0x61, 0x0b, 0x60, 0x91, 0x90, 0x61, 0x26, 0x0b, 0x56, 0x5b, 0x80, 0x82, 0x11, 0x15, 0x61, 0x25, 0xf3, 0x57, 0x5f, 0x61, 0x25, 0xd1, 0x82, 0x82, 0x61, 0x25, 0x51, 0x56, 0x5b, 0x50, 0x5f, 0x60, 0x01, 0x82, 0x01, 0x55, 0x60, 0x02, 0x81, 0x01, 0x80, 0x54, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x19, 0x16, 0x90, 0x55, 0x60, 0x03, 0x01, 0x61, 0x25, 0xbe, 0x56, 0x5b, 0x50, 0x90, 0x56, 0x5b, 0x5b, 0x80, 0x82, 0x11, 0x15, 0x61, 0x25, 0xf3, 0x57, 0x5f, 0x81, 0x55, 0x60, 0x01, 0x01, 0x61, 0x25, 0xf8, 0x56, 0x5b, 0x5b, 0x80, 0x82, 0x11, 0x15, 0x61, 0x25, 0xf3, 0x57, 0x80, 0x54, 0x62, 0xff, 0xff, 0xff, 0x19, 0x16, 0x81, 0x55, 0x60, 0x01, 0x01, 0x61, 0x26, 0x0c, 0x56, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x26, 0x36, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x19, 0x81, 0x16, 0x81, 0x14, 0x61, 0x1c, 0xcc, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x16, 0x81, 0x14, 0x61, 0x0b, 0x60, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x35, 0x61, 0x23, 0x56, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x81, 0x16, 0x81, 0x14, 0x61, 0x0b, 0x60, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x35, 0x61, 0x23, 0x56, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x60, 0x60, 0x84, 0x86, 0x03, 0x12, 0x15, 0x61, 0x26, 0x9d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x35, 0x61, 0x26, 0xa8, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x20, 0x84, 0x01, 0x35, 0x61, 0x26, 0xb8, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x60, 0x40, 0x84, 0x01, 0x35, 0x61, 0x26, 0xc8, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x80, 0x91, 0x50, 0x50, 0x92, 0x50, 0x92, 0x50, 0x92, 0x56, 0x5b, 0x5f, 0x60, 0xc0, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x26, 0xe3, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x91, 0x90, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x60, 0x60, 0x84, 0x86, 0x03, 0x12, 0x15, 0x61, 0x26, 0xfb, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x35, 0x61, 0x27, 0x06, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x20, 0x84, 0x01, 0x35, 0x61, 0x27, 0x16, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x60, 0x40, 0x84, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x27, 0x30, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x27, 0x3c, 0x86, 0x82, 0x87, 0x01, 0x61, 0x26, 0xd3, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x92, 0x50, 0x92, 0x50, 0x92, 0x56, 0x5b, 0x5f, 0x80, 0x60, 0x40, 0x83, 0x85, 0x03, 0x12, 0x15, 0x61, 0x27, 0x57, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x82, 0x35, 0x61, 0x27, 0x62, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x60, 0x20, 0x83, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x27, 0x7c, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x27, 0x88, 0x85, 0x82, 0x86, 0x01, 0x61, 0x26, 0xd3, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x92, 0x50, 0x92, 0x90, 0x50, 0x56, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x27, 0xa2, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x35, 0x91, 0x90, 0x50, 0x56, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x21, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x60, 0x40, 0x81, 0x01, 0x60, 0x04, 0x84, 0x10, 0x61, 0x27, 0xd1, 0x57, 0x61, 0x27, 0xd1, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x92, 0x81, 0x52, 0x61, 0xff, 0xff, 0x91, 0x90, 0x91, 0x16, 0x60, 0x20, 0x90, 0x91, 0x01, 0x52, 0x90, 0x56, 0x5b, 0x5f, 0x80, 0x60, 0x40, 0x83, 0x85, 0x03, 0x12, 0x15, 0x61, 0x27, 0xf5, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x82, 0x35, 0x61, 0x28, 0x00, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x60, 0x20, 0x83, 0x01, 0x35, 0x61, 0x28, 0x10, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x80, 0x91, 0x50, 0x50, 0x92, 0x50, 0x92, 0x90, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x60, 0x40, 0x83, 0x85, 0x03, 0x12, 0x15, 0x61, 0x28, 0x2c, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x82, 0x35, 0x91, 0x50, 0x60, 0x20, 0x83, 0x01, 0x35, 0x61, 0x28, 0x10, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x60, 0x60, 0x84, 0x86, 0x03, 0x12, 0x15, 0x61, 0x28, 0x50, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x35, 0x61, 0x28, 0x5b, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x20, 0x84, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x28, 0x75, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x28, 0x81, 0x86, 0x82, 0x87, 0x01, 0x61, 0x26, 0xd3, 0x56, 0x5b, 0x92, 0x50, 0x50, 0x60, 0x40, 0x84, 0x01, 0x35, 0x61, 0x26, 0xc8, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x80, 0x35, 0x60, 0xff, 0x81, 0x16, 0x81, 0x14, 0x61, 0x23, 0x56, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x5f, 0x80, 0x83, 0x60, 0x1f, 0x84, 0x01, 0x12, 0x61, 0x28, 0xb2, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x81, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x28, 0xc8, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x83, 0x01, 0x91, 0x50, 0x83, 0x60, 0x20, 0x82, 0x85, 0x01, 0x01, 0x11, 0x15, 0x61, 0x28, 0xdf, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x92, 0x50, 0x92, 0x90, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x80, 0x60, 0xa0, 0x87, 0x89, 0x03, 0x12, 0x15, 0x61, 0x28, 0xfb, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x86, 0x35, 0x61, 0x29, 0x06, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x95, 0x50, 0x60, 0x20, 0x87, 0x01, 0x35, 0x61, 0x29, 0x16, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x29, 0x24, 0x60, 0x40, 0x88, 0x01, 0x61, 0x28, 0x92, 0x56, 0x5b, 0x93, 0x50, 0x60, 0x60, 0x87, 0x01, 0x35, 0x61, 0x29, 0x34, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x80, 0x87, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x29, 0x4e, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x29, 0x5a, 0x89, 0x82, 0x8a, 0x01, 0x61, 0x28, 0xa2, 0x56, 0x5b, 0x97, 0x9a, 0x96, 0x99, 0x50, 0x94, 0x97, 0x50, 0x92, 0x95, 0x93, 0x94, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x60, 0x80, 0x86, 0x88, 0x03, 0x12, 0x15, 0x61, 0x29, 0x80, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x85, 0x35, 0x61, 0x29, 0x8b, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x94, 0x50, 0x60, 0x20, 0x86, 0x01, 0x35, 0x61, 0x29, 0x9b, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x93, 0x50, 0x60, 0x40, 0x86, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x29, 0xb5, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x29, 0xc1, 0x88, 0x82, 0x89, 0x01, 0x61, 0x28, 0xa2, 0x56, 0x5b, 0x90, 0x94, 0x50, 0x92, 0x50, 0x61, 0x29, 0xd4, 0x90, 0x50, 0x60, 0x60, 0x87, 0x01, 0x61, 0x28, 0x92, 0x56, 0x5b, 0x90, 0x50, 0x92, 0x95, 0x50, 0x92, 0x95, 0x90, 0x93, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x60, 0x60, 0x85, 0x87, 0x03, 0x12, 0x15, 0x61, 0x29, 0xf3, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x84, 0x35, 0x61, 0x29, 0xfe, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x93, 0x50, 0x60, 0x20, 0x85, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2a, 0x19, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x2a, 0x25, 0x88, 0x83, 0x89, 0x01, 0x61, 0x26, 0xd3, 0x56, 0x5b, 0x94, 0x50, 0x60, 0x40, 0x87, 0x01, 0x35, 0x91, 0x50, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2a, 0x3a, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x2a, 0x47, 0x87, 0x82, 0x88, 0x01, 0x61, 0x28, 0xa2, 0x56, 0x5b, 0x95, 0x98, 0x94, 0x97, 0x50, 0x95, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x60, 0x20, 0x83, 0x85, 0x03, 0x12, 0x15, 0x61, 0x2a, 0x64, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x82, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2a, 0x7a, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x85, 0x01, 0x91, 0x50, 0x85, 0x60, 0x1f, 0x83, 0x01, 0x12, 0x61, 0x2a, 0x8d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x35, 0x81, 0x81, 0x11, 0x15, 0x61, 0x2a, 0x9b, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x86, 0x60, 0x20, 0x82, 0x60, 0x06, 0x1b, 0x85, 0x01, 0x01, 0x11, 0x15, 0x61, 0x2a, 0xaf, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x92, 0x90, 0x92, 0x01, 0x96, 0x91, 0x95, 0x50, 0x90, 0x93, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x60, 0xc0, 0x88, 0x8a, 0x03, 0x12, 0x15, 0x61, 0x2a, 0xd7, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x87, 0x35, 0x61, 0x2a, 0xe2, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x96, 0x50, 0x60, 0x20, 0x88, 0x01, 0x35, 0x61, 0x2a, 0xf2, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x95, 0x50, 0x60, 0x40, 0x88, 0x01, 0x35, 0x61, 0x2b, 0x02, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x94, 0x50, 0x60, 0x60, 0x88, 0x01, 0x35, 0x61, 0x2b, 0x12, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x93, 0x50, 0x60, 0x80, 0x88, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2b, 0x2d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x8a, 0x01, 0x91, 0x50, 0x8a, 0x60, 0x1f, 0x83, 0x01, 0x12, 0x61, 0x2b, 0x40, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x35, 0x81, 0x81, 0x11, 0x15, 0x61, 0x2b, 0x4e, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x8b, 0x60, 0x20, 0x82, 0x60, 0x05, 0x1b, 0x85, 0x01, 0x01, 0x11, 0x15, 0x61, 0x2b, 0x62, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x83, 0x01, 0x95, 0x50, 0x80, 0x94, 0x50, 0x50, 0x50, 0x50, 0x61, 0x2b, 0x7a, 0x60, 0xa0, 0x89, 0x01, 0x61, 0x26, 0x61, 0x56, 0x5b, 0x90, 0x50, 0x92, 0x95, 0x98, 0x91, 0x94, 0x97, 0x50, 0x92, 0x95, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x80, 0x5f, 0x60, 0xe0, 0x8a, 0x8c, 0x03, 0x12, 0x15, 0x61, 0x2b, 0xa0, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x89, 0x35, 0x61, 0x2b, 0xab, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x98, 0x50, 0x60, 0x20, 0x8a, 0x01, 0x35, 0x61, 0x2b, 0xbb, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x97, 0x50, 0x61, 0x2b, 0xc9, 0x60, 0x40, 0x8b, 0x01, 0x61, 0x28, 0x92, 0x56, 0x5b, 0x96, 0x50, 0x61, 0x2b, 0xd7, 0x60, 0x60, 0x8b, 0x01, 0x61, 0x26, 0x61, 0x56, 0x5b, 0x95, 0x50, 0x60, 0x80, 0x8a, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2b, 0xf2, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x2b, 0xfe, 0x8d, 0x83, 0x8e, 0x01, 0x61, 0x26, 0xd3, 0x56, 0x5b, 0x96, 0x50, 0x60, 0xa0, 0x8c, 0x01, 0x35, 0x91, 0x50, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2c, 0x13, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x2c, 0x1f, 0x8d, 0x83, 0x8e, 0x01, 0x61, 0x28, 0xa2, 0x56, 0x5b, 0x90, 0x96, 0x50, 0x94, 0x50, 0x60, 0xc0, 0x8c, 0x01, 0x35, 0x91, 0x50, 0x80, 0x82, 0x11, 0x15, 0x61, 0x2c, 0x37, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x2c, 0x44, 0x8c, 0x82, 0x8d, 0x01, 0x61, 0x28, 0xa2, 0x56, 0x5b, 0x91, 0x50, 0x80, 0x93, 0x50, 0x50, 0x80, 0x91, 0x50, 0x50, 0x92, 0x95, 0x98, 0x50, 0x92, 0x95, 0x98, 0x50, 0x92, 0x95, 0x98, 0x56, 0x5b, 0x5f, 0x80, 0x5f, 0x60, 0x60, 0x84, 0x86, 0x03, 0x12, 0x15, 0x61, 0x2c, 0x6d, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x35, 0x61, 0x2c, 0x78, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x20, 0x84, 0x01, 0x35, 0x61, 0x2c, 0x88, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x91, 0x50, 0x60, 0x40, 0x84, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x2c, 0xa2, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x84, 0x01, 0x60, 0x60, 0x81, 0x87, 0x03, 0x12, 0x15, 0x61, 0x26, 0xc8, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x5f, 0x80, 0x5f, 0x80, 0x60, 0x80, 0x85, 0x87, 0x03, 0x12, 0x15, 0x61, 0x2c, 0xc6, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x84, 0x35, 0x61, 0x2c, 0xd1, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x93, 0x50, 0x60, 0x20, 0x85, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x2c, 0xeb, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0x2c, 0xf7, 0x87, 0x82, 0x88, 0x01, 0x61, 0x26, 0xd3, 0x56, 0x5b, 0x93, 0x50, 0x50, 0x60, 0x40, 0x85, 0x01, 0x35, 0x61, 0x2d, 0x08, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x61, 0x2d, 0x16, 0x60, 0x60, 0x86, 0x01, 0x61, 0x28, 0x92, 0x56, 0x5b, 0x90, 0x50, 0x92, 0x95, 0x91, 0x94, 0x50, 0x92, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x60, 0x40, 0x83, 0x85, 0x03, 0x12, 0x15, 0x61, 0x2d, 0x32, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x82, 0x35, 0x61, 0x2d, 0x3d, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x91, 0x50, 0x60, 0x20, 0x83, 0x01, 0x35, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x2d, 0x57, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x01, 0x61, 0x01, 0x20, 0x81, 0x86, 0x03, 0x12, 0x15, 0x61, 0x28, 0x10, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x92, 0x83, 0x16, 0x81, 0x52, 0x91, 0x16, 0x60, 0x20, 0x82, 0x01, 0x52, 0x60, 0x40, 0x01, 0x90, 0x56, 0x5b, 0x5f, 0x80, 0x83, 0x35, 0x60, 0x1e, 0x19, 0x84, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x2d, 0x98, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x01, 0x60, 0x20, 0x81, 0x01, 0x92, 0x50, 0x35, 0x90, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x2d, 0xb6, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x36, 0x03, 0x82, 0x13, 0x15, 0x61, 0x28, 0xdf, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x83, 0x52, 0x81, 0x81, 0x60, 0x20, 0x85, 0x01, 0x37, 0x50, 0x5f, 0x82, 0x82, 0x01, 0x60, 0x20, 0x90, 0x81, 0x01, 0x91, 0x90, 0x91, 0x52, 0x60, 0x1f, 0x90, 0x91, 0x01, 0x60, 0x1f, 0x19, 0x16, 0x90, 0x91, 0x01, 0x01, 0x90, 0x56, 0x5b, 0x5f, 0x61, 0x2d, 0xf7, 0x82, 0x83, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x60, 0xc0, 0x85, 0x52, 0x61, 0x2e, 0x09, 0x60, 0xc0, 0x86, 0x01, 0x82, 0x84, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x91, 0x50, 0x50, 0x60, 0x20, 0x83, 0x01, 0x35, 0x61, 0x2e, 0x1a, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x90, 0x81, 0x16, 0x60, 0x20, 0x86, 0x01, 0x52, 0x60, 0x40, 0x84, 0x01, 0x35, 0x90, 0x61, 0x2e, 0x39, 0x82, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x90, 0x81, 0x16, 0x60, 0x40, 0x86, 0x01, 0x52, 0x60, 0x60, 0x84, 0x01, 0x35, 0x90, 0x61, 0x2e, 0x50, 0x82, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x90, 0x81, 0x16, 0x60, 0x60, 0x86, 0x01, 0x52, 0x60, 0x80, 0x84, 0x01, 0x35, 0x90, 0x61, 0x2e, 0x67, 0x82, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x90, 0x81, 0x16, 0x60, 0x80, 0x86, 0x01, 0x52, 0x60, 0xa0, 0x84, 0x01, 0x35, 0x90, 0x61, 0x2e, 0x7e, 0x82, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x16, 0x60, 0xa0, 0x94, 0x90, 0x94, 0x01, 0x93, 0x90, 0x93, 0x52, 0x50, 0x90, 0x91, 0x90, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x16, 0x81, 0x52, 0x60, 0x40, 0x60, 0x20, 0x82, 0x01, 0x52, 0x5f, 0x61, 0x0a, 0xbb, 0x60, 0x40, 0x83, 0x01, 0x84, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x2e, 0xc1, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x51, 0x80, 0x15, 0x15, 0x81, 0x14, 0x61, 0x1c, 0xcc, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x81, 0x52, 0x5f, 0x61, 0x1c, 0xcc, 0x60, 0x20, 0x83, 0x01, 0x84, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x2e, 0xf2, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x51, 0x61, 0x1c, 0xcc, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x60, 0x40, 0x81, 0x52, 0x5f, 0x61, 0x2f, 0x0f, 0x60, 0x40, 0x83, 0x01, 0x85, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x90, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x88, 0x16, 0x83, 0x52, 0x60, 0xff, 0x87, 0x16, 0x60, 0x20, 0x84, 0x01, 0x52, 0x80, 0x86, 0x16, 0x60, 0x40, 0x84, 0x01, 0x52, 0x50, 0x60, 0x80, 0x60, 0x60, 0x83, 0x01, 0x52, 0x61, 0x2f, 0x5c, 0x60, 0x80, 0x83, 0x01, 0x84, 0x86, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x97, 0x96, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x81, 0x52, 0x60, 0x60, 0x60, 0x20, 0x82, 0x01, 0x52, 0x5f, 0x61, 0x2f, 0x89, 0x60, 0x60, 0x83, 0x01, 0x85, 0x87, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x90, 0x50, 0x60, 0xff, 0x83, 0x16, 0x60, 0x40, 0x83, 0x01, 0x52, 0x95, 0x94, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x40, 0x81, 0x52, 0x5f, 0x61, 0x2f, 0xb0, 0x60, 0x40, 0x83, 0x01, 0x85, 0x87, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x90, 0x50, 0x60, 0xff, 0x83, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x94, 0x93, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x40, 0x81, 0x52, 0x5f, 0x61, 0x2f, 0xd5, 0x60, 0x40, 0x83, 0x01, 0x86, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x82, 0x81, 0x03, 0x60, 0x20, 0x84, 0x01, 0x52, 0x61, 0x2f, 0xe8, 0x81, 0x85, 0x87, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x96, 0x95, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x81, 0x81, 0x1c, 0x90, 0x82, 0x16, 0x80, 0x61, 0x30, 0x06, 0x57, 0x60, 0x7f, 0x82, 0x16, 0x91, 0x50, 0x5b, 0x60, 0x20, 0x82, 0x10, 0x81, 0x03, 0x61, 0x26, 0xe3, 0x57, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x22, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x87, 0x81, 0x16, 0x82, 0x52, 0x86, 0x81, 0x16, 0x60, 0x20, 0x80, 0x84, 0x01, 0x91, 0x90, 0x91, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x87, 0x81, 0x16, 0x60, 0x40, 0x85, 0x01, 0x52, 0x60, 0xa0, 0x60, 0x60, 0x85, 0x01, 0x81, 0x90, 0x52, 0x84, 0x01, 0x86, 0x90, 0x52, 0x5f, 0x92, 0x87, 0x92, 0x90, 0x91, 0x60, 0xc0, 0x86, 0x01, 0x85, 0x5b, 0x89, 0x81, 0x10, 0x15, 0x61, 0x30, 0x8e, 0x57, 0x85, 0x35, 0x61, 0x30, 0x7a, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x83, 0x16, 0x82, 0x52, 0x94, 0x83, 0x01, 0x94, 0x90, 0x83, 0x01, 0x90, 0x60, 0x01, 0x01, 0x61, 0x30, 0x67, 0x56, 0x5b, 0x50, 0x80, 0x95, 0x50, 0x50, 0x50, 0x50, 0x80, 0x85, 0x16, 0x60, 0x80, 0x85, 0x01, 0x52, 0x50, 0x50, 0x97, 0x96, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x80, 0x8b, 0x16, 0x83, 0x52, 0x60, 0xff, 0x8a, 0x16, 0x60, 0x20, 0x84, 0x01, 0x52, 0x80, 0x89, 0x16, 0x60, 0x40, 0x84, 0x01, 0x52, 0x50, 0x60, 0xc0, 0x60, 0x60, 0x83, 0x01, 0x52, 0x61, 0x30, 0xde, 0x60, 0xc0, 0x83, 0x01, 0x88, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x82, 0x81, 0x03, 0x60, 0x80, 0x84, 0x01, 0x52, 0x61, 0x30, 0xf1, 0x81, 0x87, 0x89, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x90, 0x50, 0x82, 0x81, 0x03, 0x60, 0xa0, 0x84, 0x01, 0x52, 0x61, 0x31, 0x06, 0x81, 0x85, 0x87, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x9b, 0x9a, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0xff, 0x84, 0x16, 0x81, 0x52, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x16, 0x60, 0x20, 0x82, 0x01, 0x52, 0x60, 0x60, 0x60, 0x40, 0x82, 0x01, 0x52, 0x5f, 0x61, 0x09, 0x00, 0x60, 0x60, 0x83, 0x01, 0x84, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x31, 0x4f, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x35, 0x61, 0x1c, 0xcc, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x80, 0x35, 0x63, 0xff, 0xff, 0xff, 0xff, 0x81, 0x16, 0x81, 0x14, 0x61, 0x23, 0x56, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x81, 0x52, 0x5f, 0x82, 0x35, 0x60, 0xfe, 0x19, 0x84, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x31, 0x85, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x60, 0x60, 0x20, 0x84, 0x01, 0x52, 0x83, 0x01, 0x61, 0x31, 0x98, 0x81, 0x80, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x61, 0x01, 0x00, 0x80, 0x60, 0x80, 0x87, 0x01, 0x52, 0x61, 0x31, 0xb0, 0x61, 0x01, 0x80, 0x87, 0x01, 0x83, 0x85, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x92, 0x50, 0x61, 0x31, 0xbf, 0x60, 0x20, 0x85, 0x01, 0x85, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x7f, 0x19, 0x80, 0x88, 0x86, 0x03, 0x01, 0x60, 0xa0, 0x89, 0x01, 0x52, 0x61, 0x31, 0xd9, 0x85, 0x85, 0x84, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x31, 0xe8, 0x60, 0x40, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x94, 0x50, 0x91, 0x50, 0x80, 0x88, 0x86, 0x03, 0x01, 0x60, 0xc0, 0x89, 0x01, 0x52, 0x61, 0x32, 0x01, 0x85, 0x85, 0x84, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x32, 0x10, 0x60, 0x60, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x94, 0x50, 0x91, 0x50, 0x80, 0x88, 0x86, 0x03, 0x01, 0x60, 0xe0, 0x89, 0x01, 0x52, 0x61, 0x32, 0x29, 0x85, 0x85, 0x84, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x32, 0x38, 0x60, 0x80, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x94, 0x50, 0x91, 0x50, 0x80, 0x88, 0x86, 0x03, 0x01, 0x83, 0x89, 0x01, 0x52, 0x61, 0x32, 0x50, 0x85, 0x85, 0x84, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x32, 0x5f, 0x60, 0xa0, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x94, 0x50, 0x92, 0x50, 0x80, 0x88, 0x86, 0x03, 0x01, 0x61, 0x01, 0x20, 0x89, 0x01, 0x52, 0x61, 0x32, 0x79, 0x85, 0x85, 0x85, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x32, 0x88, 0x60, 0xc0, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x94, 0x50, 0x92, 0x50, 0x80, 0x88, 0x86, 0x03, 0x01, 0x61, 0x01, 0x40, 0x89, 0x01, 0x52, 0x61, 0x32, 0xa2, 0x85, 0x85, 0x85, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x32, 0xb1, 0x60, 0xe0, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x96, 0x50, 0x93, 0x50, 0x80, 0x88, 0x86, 0x03, 0x01, 0x61, 0x01, 0x60, 0x89, 0x01, 0x52, 0x50, 0x50, 0x50, 0x61, 0x32, 0xce, 0x82, 0x84, 0x83, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x92, 0x50, 0x50, 0x50, 0x61, 0x32, 0xde, 0x60, 0x20, 0x85, 0x01, 0x61, 0x26, 0x80, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x81, 0x16, 0x60, 0x40, 0x85, 0x01, 0x52, 0x50, 0x61, 0x32, 0xfa, 0x60, 0x40, 0x85, 0x01, 0x61, 0x31, 0x5a, 0x56, 0x5b, 0x63, 0xff, 0xff, 0xff, 0xff, 0x81, 0x16, 0x60, 0x60, 0x85, 0x01, 0x52, 0x50, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x60, 0x81, 0x52, 0x5f, 0x61, 0x33, 0x20, 0x60, 0x60, 0x83, 0x01, 0x86, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x90, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x84, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x60, 0xff, 0x83, 0x16, 0x60, 0x40, 0x83, 0x01, 0x52, 0x94, 0x93, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x40, 0x81, 0x52, 0x5f, 0x61, 0x33, 0x54, 0x60, 0x40, 0x83, 0x01, 0x85, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x90, 0x50, 0x60, 0xff, 0x83, 0x16, 0x60, 0x20, 0x83, 0x01, 0x52, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x80, 0x83, 0x35, 0x60, 0x1e, 0x19, 0x84, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x33, 0x7b, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x01, 0x60, 0x20, 0x81, 0x01, 0x92, 0x50, 0x35, 0x90, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x33, 0x99, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x60, 0x05, 0x1b, 0x36, 0x03, 0x82, 0x13, 0x15, 0x61, 0x28, 0xdf, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x83, 0x52, 0x5f, 0x60, 0x20, 0x80, 0x85, 0x01, 0x80, 0x81, 0x96, 0x50, 0x85, 0x60, 0x05, 0x1b, 0x81, 0x01, 0x91, 0x50, 0x84, 0x5f, 0x80, 0x5b, 0x88, 0x81, 0x10, 0x15, 0x61, 0x34, 0x02, 0x57, 0x83, 0x85, 0x03, 0x8a, 0x52, 0x82, 0x35, 0x60, 0xbe, 0x19, 0x89, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x33, 0xe3, 0x57, 0x82, 0x83, 0xfd, 0x5b, 0x61, 0x33, 0xef, 0x86, 0x8a, 0x83, 0x01, 0x61, 0x2d, 0xec, 0x56, 0x5b, 0x9a, 0x87, 0x01, 0x9a, 0x95, 0x50, 0x50, 0x91, 0x85, 0x01, 0x91, 0x60, 0x01, 0x01, 0x61, 0x33, 0xc3, 0x56, 0x5b, 0x50, 0x92, 0x98, 0x97, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x81, 0x83, 0x52, 0x5f, 0x60, 0x20, 0x80, 0x85, 0x01, 0x94, 0x50, 0x82, 0x5f, 0x5b, 0x85, 0x81, 0x10, 0x15, 0x61, 0x34, 0x4c, 0x57, 0x81, 0x35, 0x61, 0x34, 0x31, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x16, 0x87, 0x52, 0x95, 0x82, 0x01, 0x95, 0x90, 0x82, 0x01, 0x90, 0x60, 0x01, 0x01, 0x61, 0x34, 0x1e, 0x56, 0x5b, 0x50, 0x94, 0x95, 0x94, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x02, 0x81, 0x10, 0x61, 0x0b, 0x60, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x80, 0x35, 0x61, 0x34, 0x6e, 0x81, 0x61, 0x34, 0x57, 0x56, 0x5b, 0x60, 0x02, 0x81, 0x10, 0x61, 0x34, 0x7e, 0x57, 0x61, 0x34, 0x7e, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x82, 0x52, 0x60, 0x20, 0x90, 0x81, 0x01, 0x35, 0x91, 0x01, 0x52, 0x56, 0x5b, 0x60, 0x20, 0x81, 0x52, 0x5f, 0x82, 0x35, 0x61, 0x34, 0x9b, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x16, 0x60, 0x20, 0x84, 0x01, 0x52, 0x50, 0x61, 0x34, 0xb7, 0x60, 0x20, 0x84, 0x01, 0x61, 0x26, 0x80, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0xa0, 0x1b, 0x03, 0x81, 0x16, 0x60, 0x40, 0x84, 0x01, 0x52, 0x50, 0x61, 0x34, 0xd4, 0x60, 0x40, 0x84, 0x01, 0x84, 0x61, 0x33, 0x66, 0x56, 0x5b, 0x61, 0x01, 0x20, 0x80, 0x60, 0x60, 0x86, 0x01, 0x52, 0x61, 0x34, 0xec, 0x61, 0x01, 0x40, 0x86, 0x01, 0x83, 0x85, 0x61, 0x33, 0xaa, 0x56, 0x5b, 0x92, 0x50, 0x61, 0x34, 0xfb, 0x60, 0x60, 0x87, 0x01, 0x87, 0x61, 0x2d, 0x83, 0x56, 0x5b, 0x92, 0x50, 0x60, 0x1f, 0x19, 0x80, 0x87, 0x86, 0x03, 0x01, 0x60, 0x80, 0x88, 0x01, 0x52, 0x61, 0x35, 0x15, 0x85, 0x85, 0x84, 0x61, 0x2d, 0xc4, 0x56, 0x5b, 0x94, 0x50, 0x61, 0x35, 0x24, 0x60, 0x80, 0x89, 0x01, 0x89, 0x61, 0x33, 0x66, 0x56, 0x5b, 0x94, 0x50, 0x91, 0x50, 0x80, 0x87, 0x86, 0x03, 0x01, 0x60, 0xa0, 0x88, 0x01, 0x52, 0x50, 0x61, 0x35, 0x3e, 0x84, 0x84, 0x83, 0x61, 0x34, 0x10, 0x56, 0x5b, 0x93, 0x50, 0x50, 0x61, 0x35, 0x4d, 0x60, 0xa0, 0x87, 0x01, 0x61, 0x26, 0x61, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x16, 0x60, 0xc0, 0x87, 0x01, 0x52, 0x91, 0x50, 0x61, 0x35, 0x6e, 0x60, 0xe0, 0x86, 0x01, 0x60, 0xc0, 0x88, 0x01, 0x61, 0x34, 0x63, 0x56, 0x5b, 0x61, 0x01, 0x00, 0x86, 0x01, 0x35, 0x81, 0x86, 0x01, 0x52, 0x50, 0x50, 0x80, 0x91, 0x50, 0x50, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x60, 0x20, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x35, 0x94, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x81, 0x35, 0x61, 0x1c, 0xcc, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x5f, 0x81, 0x35, 0x61, 0x07, 0x55, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x5f, 0x80, 0x83, 0x35, 0x60, 0x1e, 0x19, 0x84, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x35, 0xc0, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x01, 0x80, 0x35, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x11, 0x15, 0x61, 0x35, 0xd9, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x01, 0x91, 0x50, 0x60, 0x05, 0x81, 0x90, 0x1b, 0x36, 0x03, 0x82, 0x13, 0x15, 0x61, 0x28, 0xdf, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x5f, 0x82, 0x35, 0x60, 0xbe, 0x19, 0x83, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x36, 0x04, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x91, 0x90, 0x91, 0x01, 0x92, 0x91, 0x50, 0x50, 0x56, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x41, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x11, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x80, 0x82, 0x02, 0x81, 0x15, 0x82, 0x82, 0x04, 0x84, 0x14, 0x17, 0x61, 0x07, 0x55, 0x57, 0x61, 0x07, 0x55, 0x61, 0x36, 0x22, 0x56, 0x5b, 0x5b, 0x81, 0x81, 0x10, 0x15, 0x61, 0x22, 0xa3, 0x57, 0x5f, 0x81, 0x55, 0x60, 0x01, 0x01, 0x61, 0x36, 0x4e, 0x56, 0x5b, 0x5f, 0x80, 0x83, 0x35, 0x60, 0x1e, 0x19, 0x84, 0x36, 0x03, 0x01, 0x81, 0x12, 0x61, 0x36, 0x76, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x83, 0x01, 0x80, 0x35, 0x91, 0x50, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x11, 0x15, 0x61, 0x36, 0x8f, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x20, 0x01, 0x91, 0x50, 0x36, 0x81, 0x90, 0x03, 0x82, 0x13, 0x15, 0x61, 0x28, 0xdf, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x1f, 0x82, 0x11, 0x15, 0x61, 0x0b, 0x21, 0x57, 0x80, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x60, 0x1f, 0x84, 0x01, 0x60, 0x05, 0x1c, 0x81, 0x01, 0x60, 0x20, 0x85, 0x10, 0x15, 0x61, 0x36, 0xc8, 0x57, 0x50, 0x80, 0x5b, 0x61, 0x36, 0xda, 0x60, 0x1f, 0x85, 0x01, 0x60, 0x05, 0x1c, 0x83, 0x01, 0x82, 0x61, 0x36, 0x4d, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x11, 0x15, 0x61, 0x36, 0xf8, 0x57, 0x61, 0x36, 0xf8, 0x61, 0x36, 0x0e, 0x56, 0x5b, 0x61, 0x37, 0x0c, 0x83, 0x61, 0x37, 0x06, 0x83, 0x54, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x83, 0x61, 0x36, 0xa3, 0x56, 0x5b, 0x5f, 0x60, 0x1f, 0x84, 0x11, 0x60, 0x01, 0x81, 0x14, 0x61, 0x37, 0x3d, 0x57, 0x5f, 0x85, 0x15, 0x61, 0x37, 0x26, 0x57, 0x50, 0x83, 0x82, 0x01, 0x35, 0x5b, 0x5f, 0x19, 0x60, 0x03, 0x87, 0x90, 0x1b, 0x1c, 0x19, 0x16, 0x60, 0x01, 0x86, 0x90, 0x1b, 0x17, 0x83, 0x55, 0x61, 0x36, 0xda, 0x56, 0x5b, 0x5f, 0x83, 0x81, 0x52, 0x60, 0x20, 0x90, 0x20, 0x60, 0x1f, 0x19, 0x86, 0x16, 0x90, 0x83, 0x5b, 0x82, 0x81, 0x10, 0x15, 0x61, 0x37, 0x6d, 0x57, 0x86, 0x85, 0x01, 0x35, 0x82, 0x55, 0x60, 0x20, 0x94, 0x85, 0x01, 0x94, 0x60, 0x01, 0x90, 0x92, 0x01, 0x91, 0x01, 0x61, 0x37, 0x4d, 0x56, 0x5b, 0x50, 0x86, 0x82, 0x10, 0x15, 0x61, 0x37, 0x89, 0x57, 0x5f, 0x19, 0x60, 0xf8, 0x88, 0x60, 0x03, 0x1b, 0x16, 0x1c, 0x19, 0x84, 0x87, 0x01, 0x35, 0x16, 0x81, 0x55, 0x5b, 0x50, 0x50, 0x60, 0x01, 0x85, 0x60, 0x01, 0x1b, 0x01, 0x83, 0x55, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x81, 0x35, 0x61, 0x37, 0xa6, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x81, 0x54, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x19, 0x16, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x16, 0x17, 0x82, 0x55, 0x50, 0x60, 0x20, 0x82, 0x01, 0x35, 0x61, 0x37, 0xcf, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x81, 0x54, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x92, 0x83, 0x1b, 0x16, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x82, 0x16, 0x81, 0x17, 0x84, 0x55, 0x91, 0x84, 0x01, 0x35, 0x61, 0x38, 0x0d, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x80, 0x1b, 0x60, 0x80, 0x91, 0x90, 0x91, 0x1b, 0x16, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x82, 0x16, 0x83, 0x17, 0x81, 0x17, 0x84, 0x55, 0x60, 0x60, 0x85, 0x01, 0x35, 0x61, 0x38, 0x50, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x60, 0xc0, 0x1b, 0x81, 0x60, 0xc0, 0x1b, 0x16, 0x84, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x85, 0x16, 0x17, 0x83, 0x17, 0x17, 0x85, 0x55, 0x50, 0x50, 0x50, 0x50, 0x61, 0x22, 0xa3, 0x61, 0x38, 0x84, 0x60, 0x80, 0x84, 0x01, 0x61, 0x35, 0x9f, 0x56, 0x5b, 0x60, 0x01, 0x83, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x16, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x19, 0x82, 0x54, 0x16, 0x17, 0x81, 0x55, 0x50, 0x50, 0x56, 0x5b, 0x61, 0x38, 0xaf, 0x82, 0x83, 0x61, 0x36, 0x61, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x81, 0x11, 0x15, 0x61, 0x38, 0xc6, 0x57, 0x61, 0x38, 0xc6, 0x61, 0x36, 0x0e, 0x56, 0x5b, 0x61, 0x38, 0xda, 0x81, 0x61, 0x38, 0xd4, 0x85, 0x54, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x85, 0x61, 0x36, 0xa3, 0x56, 0x5b, 0x5f, 0x60, 0x1f, 0x82, 0x11, 0x60, 0x01, 0x81, 0x14, 0x61, 0x39, 0x0b, 0x57, 0x5f, 0x83, 0x15, 0x61, 0x38, 0xf4, 0x57, 0x50, 0x83, 0x82, 0x01, 0x35, 0x5b, 0x5f, 0x19, 0x60, 0x03, 0x85, 0x90, 0x1b, 0x1c, 0x19, 0x16, 0x60, 0x01, 0x84, 0x90, 0x1b, 0x17, 0x85, 0x55, 0x61, 0x39, 0x63, 0x56, 0x5b, 0x5f, 0x85, 0x81, 0x52, 0x60, 0x20, 0x90, 0x20, 0x60, 0x1f, 0x19, 0x84, 0x16, 0x90, 0x83, 0x5b, 0x82, 0x81, 0x10, 0x15, 0x61, 0x39, 0x3b, 0x57, 0x86, 0x85, 0x01, 0x35, 0x82, 0x55, 0x60, 0x20, 0x94, 0x85, 0x01, 0x94, 0x60, 0x01, 0x90, 0x92, 0x01, 0x91, 0x01, 0x61, 0x39, 0x1b, 0x56, 0x5b, 0x50, 0x84, 0x82, 0x10, 0x15, 0x61, 0x39, 0x57, 0x57, 0x5f, 0x19, 0x60, 0xf8, 0x86, 0x60, 0x03, 0x1b, 0x16, 0x1c, 0x19, 0x84, 0x87, 0x01, 0x35, 0x16, 0x81, 0x55, 0x5b, 0x50, 0x50, 0x60, 0x01, 0x83, 0x60, 0x01, 0x1b, 0x01, 0x85, 0x55, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x61, 0x22, 0xa3, 0x60, 0x20, 0x83, 0x01, 0x60, 0x01, 0x83, 0x01, 0x61, 0x37, 0x9b, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x83, 0x11, 0x15, 0x61, 0x39, 0x8b, 0x57, 0x61, 0x39, 0x8b, 0x61, 0x36, 0x0e, 0x56, 0x5b, 0x80, 0x54, 0x83, 0x82, 0x55, 0x80, 0x84, 0x10, 0x15, 0x61, 0x3a, 0x4a, 0x57, 0x60, 0x03, 0x81, 0x81, 0x02, 0x81, 0x81, 0x04, 0x83, 0x14, 0x61, 0x39, 0xae, 0x57, 0x61, 0x39, 0xae, 0x61, 0x36, 0x22, 0x56, 0x5b, 0x85, 0x82, 0x02, 0x82, 0x81, 0x04, 0x87, 0x14, 0x61, 0x39, 0xc2, 0x57, 0x61, 0x39, 0xc2, 0x61, 0x36, 0x22, 0x56, 0x5b, 0x5f, 0x85, 0x81, 0x52, 0x60, 0x20, 0x81, 0x20, 0x92, 0x83, 0x01, 0x92, 0x91, 0x90, 0x91, 0x01, 0x90, 0x5b, 0x82, 0x82, 0x10, 0x15, 0x61, 0x3a, 0x45, 0x57, 0x61, 0x39, 0xe6, 0x82, 0x54, 0x61, 0x2f, 0xf2, 0x56, 0x5b, 0x80, 0x15, 0x61, 0x3a, 0x2e, 0x57, 0x60, 0x1f, 0x80, 0x82, 0x11, 0x60, 0x01, 0x81, 0x14, 0x61, 0x3a, 0x01, 0x57, 0x83, 0x85, 0x55, 0x61, 0x3a, 0x2b, 0x56, 0x5b, 0x5f, 0x85, 0x81, 0x52, 0x60, 0x20, 0x90, 0x20, 0x61, 0x3a, 0x1d, 0x83, 0x85, 0x01, 0x60, 0x05, 0x1c, 0x82, 0x01, 0x60, 0x01, 0x83, 0x01, 0x61, 0x36, 0x4d, 0x56, 0x5b, 0x50, 0x5f, 0x85, 0x81, 0x52, 0x60, 0x20, 0x81, 0x20, 0x81, 0x87, 0x55, 0x55, 0x5b, 0x50, 0x50, 0x5b, 0x50, 0x5f, 0x60, 0x01, 0x83, 0x01, 0x81, 0x90, 0x55, 0x60, 0x02, 0x83, 0x01, 0x55, 0x90, 0x83, 0x01, 0x90, 0x61, 0x39, 0xd4, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x5b, 0x50, 0x5f, 0x81, 0x81, 0x52, 0x60, 0x20, 0x81, 0x20, 0x83, 0x91, 0x5b, 0x85, 0x81, 0x10, 0x15, 0x61, 0x3a, 0x87, 0x57, 0x61, 0x3a, 0x71, 0x61, 0x3a, 0x6b, 0x84, 0x87, 0x61, 0x35, 0xf0, 0x56, 0x5b, 0x83, 0x61, 0x38, 0xa5, 0x56, 0x5b, 0x60, 0x20, 0x92, 0x90, 0x92, 0x01, 0x91, 0x60, 0x03, 0x91, 0x90, 0x91, 0x01, 0x90, 0x60, 0x01, 0x01, 0x61, 0x3a, 0x56, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x83, 0x11, 0x15, 0x61, 0x3a, 0xa6, 0x57, 0x61, 0x3a, 0xa6, 0x61, 0x36, 0x0e, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x83, 0x11, 0x15, 0x61, 0x3a, 0xba, 0x57, 0x61, 0x3a, 0xba, 0x61, 0x36, 0x0e, 0x56, 0x5b, 0x80, 0x54, 0x83, 0x82, 0x55, 0x80, 0x84, 0x10, 0x15, 0x61, 0x3a, 0xde, 0x57, 0x81, 0x5f, 0x52, 0x60, 0x20, 0x5f, 0x20, 0x61, 0x3a, 0xdc, 0x82, 0x82, 0x01, 0x86, 0x83, 0x01, 0x61, 0x36, 0x4d, 0x56, 0x5b, 0x50, 0x5b, 0x50, 0x81, 0x81, 0x5f, 0x52, 0x60, 0x20, 0x80, 0x5f, 0x20, 0x5f, 0x5b, 0x86, 0x81, 0x10, 0x15, 0x61, 0x3b, 0x0d, 0x57, 0x83, 0x35, 0x61, 0x3a, 0xfd, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x82, 0x82, 0x01, 0x55, 0x92, 0x82, 0x01, 0x92, 0x60, 0x01, 0x01, 0x61, 0x3a, 0xea, 0x56, 0x5b, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x81, 0x35, 0x61, 0x3b, 0x21, 0x81, 0x61, 0x34, 0x57, 0x56, 0x5b, 0x60, 0x02, 0x81, 0x10, 0x61, 0x3b, 0x31, 0x57, 0x61, 0x3b, 0x31, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x60, 0xff, 0x19, 0x82, 0x54, 0x16, 0x60, 0xff, 0x82, 0x16, 0x81, 0x17, 0x83, 0x55, 0x50, 0x50, 0x60, 0x20, 0x82, 0x01, 0x35, 0x60, 0x01, 0x82, 0x01, 0x55, 0x50, 0x50, 0x56, 0x5b, 0x81, 0x35, 0x61, 0x3b, 0x5a, 0x81, 0x61, 0x26, 0x4d, 0x56, 0x5b, 0x81, 0x54, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x19, 0x16, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x16, 0x17, 0x82, 0x55, 0x50, 0x60, 0x20, 0x82, 0x01, 0x35, 0x61, 0x3b, 0x83, 0x81, 0x61, 0x26, 0x6c, 0x56, 0x5b, 0x81, 0x54, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x19, 0x16, 0x60, 0x40, 0x91, 0x82, 0x1b, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x60, 0xe0, 0x1b, 0x03, 0x16, 0x17, 0x82, 0x55, 0x61, 0x3b, 0xbc, 0x90, 0x83, 0x01, 0x83, 0x61, 0x35, 0xab, 0x56, 0x5b, 0x61, 0x3b, 0xca, 0x81, 0x83, 0x60, 0x01, 0x86, 0x01, 0x61, 0x39, 0x77, 0x56, 0x5b, 0x50, 0x50, 0x61, 0x3b, 0xd9, 0x60, 0x60, 0x83, 0x01, 0x83, 0x61, 0x36, 0x61, 0x56, 0x5b, 0x61, 0x3b, 0xe7, 0x81, 0x83, 0x60, 0x02, 0x86, 0x01, 0x61, 0x36, 0xe1, 0x56, 0x5b, 0x50, 0x50, 0x61, 0x3b, 0xf6, 0x60, 0x80, 0x83, 0x01, 0x83, 0x61, 0x35, 0xab, 0x56, 0x5b, 0x61, 0x3c, 0x04, 0x81, 0x83, 0x60, 0x03, 0x86, 0x01, 0x61, 0x3a, 0x8f, 0x56, 0x5b, 0x50, 0x50, 0x61, 0x3c, 0x36, 0x61, 0x3c, 0x15, 0x60, 0xa0, 0x84, 0x01, 0x61, 0x35, 0x9f, 0x56, 0x5b, 0x60, 0x04, 0x83, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x16, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x19, 0x82, 0x54, 0x16, 0x17, 0x81, 0x55, 0x50, 0x50, 0x56, 0x5b, 0x61, 0x3c, 0x46, 0x60, 0xc0, 0x83, 0x01, 0x60, 0x05, 0x83, 0x01, 0x61, 0x3b, 0x16, 0x56, 0x5b, 0x61, 0x01, 0x00, 0x82, 0x01, 0x35, 0x60, 0x07, 0x82, 0x01, 0x55, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x84, 0x16, 0x81, 0x52, 0x60, 0x80, 0x81, 0x01, 0x61, 0x3c, 0x72, 0x60, 0x20, 0x83, 0x01, 0x85, 0x61, 0x34, 0x63, 0x56, 0x5b, 0x82, 0x60, 0x60, 0x83, 0x01, 0x52, 0x94, 0x93, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x60, 0x04, 0x81, 0x10, 0x61, 0x0b, 0x60, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x61, 0xff, 0xff, 0x81, 0x16, 0x81, 0x14, 0x61, 0x0b, 0x60, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x5f, 0x60, 0x40, 0x82, 0x84, 0x03, 0x12, 0x15, 0x61, 0x3c, 0xab, 0x57, 0x5f, 0x80, 0xfd, 0x5b, 0x60, 0x40, 0x51, 0x60, 0x40, 0x81, 0x01, 0x81, 0x81, 0x10, 0x60, 0x01, 0x60, 0x01, 0x60, 0x40, 0x1b, 0x03, 0x82, 0x11, 0x17, 0x15, 0x61, 0x3c, 0xcd, 0x57, 0x61, 0x3c, 0xcd, 0x61, 0x36, 0x0e, 0x56, 0x5b, 0x60, 0x40, 0x52, 0x82, 0x35, 0x61, 0x3c, 0xdb, 0x81, 0x61, 0x3c, 0x80, 0x56, 0x5b, 0x81, 0x52, 0x60, 0x20, 0x83, 0x01, 0x35, 0x61, 0x3c, 0xeb, 0x81, 0x61, 0x3c, 0x8c, 0x56, 0x5b, 0x60, 0x20, 0x82, 0x01, 0x52, 0x93, 0x92, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x32, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x81, 0x35, 0x61, 0x3d, 0x16, 0x81, 0x61, 0x3c, 0x80, 0x56, 0x5b, 0x60, 0x04, 0x81, 0x10, 0x61, 0x3d, 0x26, 0x57, 0x61, 0x3d, 0x26, 0x61, 0x27, 0xa9, 0x56, 0x5b, 0x81, 0x54, 0x60, 0xff, 0x82, 0x16, 0x91, 0x50, 0x81, 0x60, 0xff, 0x19, 0x82, 0x16, 0x17, 0x83, 0x55, 0x60, 0x20, 0x84, 0x01, 0x35, 0x61, 0x3d, 0x45, 0x81, 0x61, 0x3c, 0x8c, 0x56, 0x5b, 0x62, 0xff, 0xff, 0x00, 0x81, 0x60, 0x08, 0x1b, 0x16, 0x83, 0x62, 0xff, 0xff, 0xff, 0x19, 0x84, 0x16, 0x17, 0x17, 0x84, 0x55, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x5f, 0x60, 0x01, 0x82, 0x01, 0x61, 0x3d, 0x72, 0x57, 0x61, 0x3d, 0x72, 0x61, 0x36, 0x22, 0x56, 0x5b, 0x50, 0x60, 0x01, 0x01, 0x90, 0x56, 0x5b, 0x5f, 0x82, 0x61, 0x3d, 0x93, 0x57, 0x63, 0x4e, 0x48, 0x7b, 0x71, 0x60, 0xe0, 0x1b, 0x5f, 0x52, 0x60, 0x12, 0x60, 0x04, 0x52, 0x60, 0x24, 0x5f, 0xfd, 0x5b, 0x50, 0x04, 0x90, 0x56, 0x5b, 0x80, 0x82, 0x01, 0x80, 0x82, 0x11, 0x15, 0x61, 0x07, 0x55, 0x57, 0x61, 0x07, 0x55, 0x61, 0x36, 0x22, 0x56, 0x5b, 0x61, 0xff, 0xff, 0x81, 0x81, 0x16, 0x83, 0x82, 0x16, 0x01, 0x90, 0x80, 0x82, 0x11, 0x15, 0x61, 0x3d, 0xc6, 0x57, 0x61, 0x3d, 0xc6, 0x61, 0x36, 0x22, 0x56, 0x5b, 0x50, 0x92, 0x91, 0x50, 0x50, 0x56, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xdf, 0x6a, 0x94, 0x1e, 0xe0, 0x3b, 0x1e, 0x63, 0x29, 0x04, 0xe3, 0x82, 0xe1, 0x08, 0x62, 0xfa, 0x9c, 0xc0, 0xe3, 0xa1, 0x64, 0x73, 0x6f, 0x6c, 0x63, 0x43, 0x00, 0x08, 0x14, 0x00, 0x0a];\n\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/README.md": "# <img src=\"logo.svg\" alt=\"OpenZeppelin\" height=\"40px\">\n\n[![NPM Package](https://img.shields.io/npm/v/@openzeppelin/contracts.svg)](https://www.npmjs.org/package/@openzeppelin/contracts)\n[![Coverage Status](https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts/graph/badge.svg)](https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts)\n[![GitPOAPs](https://public-api.gitpoap.io/v1/repo/OpenZeppelin/openzeppelin-contracts/badge)](https://www.gitpoap.io/gh/OpenZeppelin/openzeppelin-contracts)\n[![Docs](https://img.shields.io/badge/docs-%F0%9F%93%84-yellow)](https://docs.openzeppelin.com/contracts)\n[![Forum](https://img.shields.io/badge/forum-%F0%9F%92%AC-yellow)](https://docs.openzeppelin.com/contracts)\n\n**A library for secure smart contract development.** Build on a solid foundation of community-vetted code.\n\n * Implementations of standards like [ERC20](https://docs.openzeppelin.com/contracts/erc20) and [ERC721](https://docs.openzeppelin.com/contracts/erc721).\n * Flexible [role-based permissioning](https://docs.openzeppelin.com/contracts/access-control) scheme.\n * Reusable [Solidity components](https://docs.openzeppelin.com/contracts/utilities) to build custom contracts and complex decentralized systems.\n\n:mage: **Not sure how to get started?** Check out [Contracts Wizard](https://wizard.openzeppelin.com/) — an interactive smart contract generator.\n\n:building_construction: **Want to scale your decentralized application?** Check out [OpenZeppelin Defender](https://openzeppelin.com/defender) — a mission-critical developer security platform to code, audit, deploy, monitor, and operate with confidence.\n\n> [!IMPORTANT]\n> OpenZeppelin Contracts uses semantic versioning to communicate backwards compatibility of its API and storage layout. For upgradeable contracts, the storage layout of different major versions should be assumed incompatible, for example, it is unsafe to upgrade from 4.9.3 to 5.0.0. Learn more at [Backwards Compatibility](https://docs.openzeppelin.com/contracts/backwards-compatibility).\n\n## Overview\n\n### Installation\n\n#### Hardhat (npm)\n\n```\n$ npm install @openzeppelin/contracts\n```\n\n#### Foundry (git)\n\n> [!WARNING]\n> When installing via git, it is a common error to use the `master` branch. This is a development branch that should be avoided in favor of tagged releases. The release process involves security measures that the `master` branch does not guarantee.\n\n> [!WARNING]\n> Foundry installs the latest version initially, but subsequent `forge update` commands will use the `master` branch.\n\n```\n$ forge install OpenZeppelin/openzeppelin-contracts\n```\n\nAdd `@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/` in `remappings.txt.`\n\n### Usage\n\nOnce installed, you can use the contracts in the library by importing them:\n\n```solidity\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MyCollectible is ERC721 {\n    constructor() ERC721(\"MyCollectible\", \"MCO\") {\n    }\n}\n```\n\n_If you're new to smart contract development, head to [Developing Smart Contracts](https://docs.openzeppelin.com/learn/developing-smart-contracts) to learn about creating a new project and compiling your contracts._\n\nTo keep your system secure, you should **always** use the installed code as-is, and neither copy-paste it from online sources nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don't need to worry about it needlessly increasing gas costs.\n\n## Learn More\n\nThe guides in the [documentation site](https://docs.openzeppelin.com/contracts) will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:\n\n* [Access Control](https://docs.openzeppelin.com/contracts/access-control): decide who can perform each of the actions on your system.\n* [Tokens](https://docs.openzeppelin.com/contracts/tokens): create tradeable assets or collectives, and distribute them via [Crowdsales](https://docs.openzeppelin.com/contracts/crowdsales).\n* [Utilities](https://docs.openzeppelin.com/contracts/utilities): generic useful tools including non-overflowing math, signature verification, and trustless paying systems.\n\nThe [full API](https://docs.openzeppelin.com/contracts/api/token/ERC20) is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts's development in the [community forum](https://forum.openzeppelin.com).\n\nFinally, you may want to take a look at the [guides on our blog](https://blog.openzeppelin.com/), which cover several common use cases and good practices. The following articles provide great background reading, though please note that some of the referenced tools have changed, as the tooling in the ecosystem continues to rapidly evolve.\n\n* [The Hitchhiker’s Guide to Smart Contracts in Ethereum](https://blog.openzeppelin.com/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05) will help you get an overview of the various tools available for smart contract development, and help you set up your environment.\n* [A Gentle Introduction to Ethereum Programming, Part 1](https://blog.openzeppelin.com/a-gentle-introduction-to-ethereum-programming-part-1-783cc7796094) provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.\n* For a more in-depth dive, you may read the guide [Designing the Architecture for Your Ethereum Application](https://blog.openzeppelin.com/designing-the-architecture-for-your-ethereum-application-9cec086f8317), which discusses how to better structure your application and its relationship to the real world.\n\n## Security\n\nThis project is maintained by [OpenZeppelin](https://openzeppelin.com) with the goal of providing a secure and reliable library of smart contract components for the ecosystem. We address security through risk management in various areas such as engineering and open source best practices, scoping and API design, multi-layered review processes, and incident response preparedness.\n\nThe [OpenZeppelin Contracts Security Center](https://contracts.openzeppelin.com/security) contains more details about the secure development process.\n\nThe security policy is detailed in [`SECURITY.md`](./SECURITY.md) as well, and specifies how you can report security vulnerabilities, which versions will receive security patches, and how to stay informed about them. We run a [bug bounty program on Immunefi](https://immunefi.com/bounty/openzeppelin) to reward the responsible disclosure of vulnerabilities.\n\nThe engineering guidelines we follow to promote project quality can be found in [`GUIDELINES.md`](./GUIDELINES.md).\n\nPast audits can be found in [`audits/`](./audits).\n\nSmart contracts are a nascent technology and carry a high level of technical risk and uncertainty. Although OpenZeppelin is well known for its security audits, using OpenZeppelin Contracts is not a substitute for a security audit.\n\nOpenZeppelin Contracts is made available under the MIT License, which disclaims all warranties in relation to the project and which limits the liability of those that contribute and maintain the project, including OpenZeppelin. As set out further in the Terms, you acknowledge that you are solely responsible for any use of OpenZeppelin Contracts and you assume all risks associated with any such use.\n\n## Contribute\n\nOpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the [contribution guide](CONTRIBUTING.md)!\n\n## License\n\nOpenZeppelin Contracts is released under the [MIT License](LICENSE).\n\n## Legal\n\nYour use of this Project is governed by the terms found at www.openzeppelin.com/tos (the \"Terms\").\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/AccessControl.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from onchain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/IAccessControl.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/Ownable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/Ownable2Step.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\n * old one. This can help prevent common mistakes, such as transfers of ownership to\n * incorrect accounts, or to contracts that are unable to interact with the\n * permission system.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     *\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/extensions/AccessControlDefaultAdminRules.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlDefaultAdminRules.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControlDefaultAdminRules} from \"./IAccessControlDefaultAdminRules.sol\";\nimport {AccessControl, IAccessControl} from \"../AccessControl.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\nimport {IERC5313} from \"../../interfaces/IERC5313.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows specifying special rules to manage\n * the `DEFAULT_ADMIN_ROLE` holder, which is a sensitive role with special permissions\n * over other roles that may potentially have privileged rights in the system.\n *\n * If a specific role doesn't have an admin role assigned, the holder of the\n * `DEFAULT_ADMIN_ROLE` will have the ability to grant it and revoke it.\n *\n * This contract implements the following risk mitigations on top of {AccessControl}:\n *\n * * Only one account holds the `DEFAULT_ADMIN_ROLE` since deployment until it's potentially renounced.\n * * Enforces a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\n * * Enforces a configurable delay between the two steps, with the ability to cancel before the transfer is accepted.\n * * The delay can be changed by scheduling, see {changeDefaultAdminDelay}.\n * * It is not possible to use another role to manage the `DEFAULT_ADMIN_ROLE`.\n *\n * Example usage:\n *\n * ```solidity\n * contract MyToken is AccessControlDefaultAdminRules {\n *   constructor() AccessControlDefaultAdminRules(\n *     3 days,\n *     msg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\n *    ) {}\n * }\n * ```\n */\nabstract contract AccessControlDefaultAdminRules is IAccessControlDefaultAdminRules, IERC5313, AccessControl {\n    // pending admin pair read/written together frequently\n    address private _pendingDefaultAdmin;\n    uint48 private _pendingDefaultAdminSchedule; // 0 == unset\n\n    uint48 private _currentDelay;\n    address private _currentDefaultAdmin;\n\n    // pending delay pair read/written together frequently\n    uint48 private _pendingDelay;\n    uint48 private _pendingDelaySchedule; // 0 == unset\n\n    /**\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\n     */\n    constructor(uint48 initialDelay, address initialDefaultAdmin) {\n        if (initialDefaultAdmin == address(0)) {\n            revert AccessControlInvalidDefaultAdmin(address(0));\n        }\n        _currentDelay = initialDelay;\n        _grantRole(DEFAULT_ADMIN_ROLE, initialDefaultAdmin);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC5313-owner}.\n     */\n    function owner() public view virtual returns (address) {\n        return defaultAdmin();\n    }\n\n    ///\n    /// Override AccessControl role management\n    ///\n\n    /**\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.grantRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-renounceRole}.\n     *\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\n     * has also passed when calling this function.\n     *\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\n     *\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\n     * non-administrated role.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\n            }\n            delete _pendingDefaultAdminSchedule;\n        }\n        super.renounceRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_grantRole}.\n     *\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\n     * role has been previously renounced.\n     *\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            if (defaultAdmin() != address(0)) {\n                revert AccessControlEnforcedDefaultAdminRules();\n            }\n            _currentDefaultAdmin = account;\n        }\n        return super._grantRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_revokeRole}.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            delete _currentDefaultAdmin;\n        }\n        return super._revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super._setRoleAdmin(role, adminRole);\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules accessors\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdmin() public view virtual returns (address) {\n        return _currentDefaultAdmin;\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdminDelay() public view virtual returns (uint48) {\n        uint48 schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\n        schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\n        return 5 days;\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _beginDefaultAdminTransfer(newAdmin);\n    }\n\n    /**\n     * @dev See {beginDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _cancelDefaultAdminTransfer();\n    }\n\n    /**\n     * @dev See {cancelDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _cancelDefaultAdminTransfer() internal virtual {\n        _setPendingDefaultAdmin(address(0), 0);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function acceptDefaultAdminTransfer() public virtual {\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\n        if (_msgSender() != newDefaultAdmin) {\n            // Enforce newDefaultAdmin explicit acceptance.\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\n        }\n        _acceptDefaultAdminTransfer();\n    }\n\n    /**\n     * @dev See {acceptDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n    function _acceptDefaultAdminTransfer() internal virtual {\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\n        }\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        delete _pendingDefaultAdmin;\n        delete _pendingDefaultAdminSchedule;\n    }\n\n    ///\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\n    ///\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _changeDefaultAdminDelay(newDelay);\n    }\n\n    /**\n     * @dev See {changeDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n    function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\n        _setPendingDelay(newDelay, newSchedule);\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\n    }\n\n    /**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n    function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _rollbackDefaultAdminDelay();\n    }\n\n    /**\n     * @dev See {rollbackDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n    function _rollbackDefaultAdminDelay() internal virtual {\n        _setPendingDelay(0, 0);\n    }\n\n    /**\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\n     * become the new {defaultAdminDelay}.\n     *\n     * The value returned guarantees that if the delay is reduced, it will go into effect\n     * after a wait that honors the previously set delay.\n     *\n     * See {defaultAdminDelayIncreaseWait}.\n     */\n    function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\n        uint48 currentDelay = defaultAdminDelay();\n\n        // When increasing the delay, we schedule the delay change to occur after a period of \"new delay\" has passed, up\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\n        // using milliseconds instead of seconds.\n        //\n        // When decreasing the delay, we wait the difference between \"current delay\" and \"new delay\". This guarantees\n        // that an admin transfer cannot be made faster than \"current delay\" at the time the delay change is scheduled.\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\n        return\n            newDelay > currentDelay\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\n                : currentDelay - newDelay;\n    }\n\n    ///\n    /// Private setters\n    ///\n\n    /**\n     * @dev Setter of the tuple for pending admin and its schedule.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n    function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\n\n        _pendingDefaultAdmin = newAdmin;\n        _pendingDefaultAdminSchedule = newSchedule;\n\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\n        if (_isScheduleSet(oldSchedule)) {\n            // Emit for implicit cancellations when another default admin was scheduled.\n            emit DefaultAdminTransferCanceled();\n        }\n    }\n\n    /**\n     * @dev Setter of the tuple for pending delay and its schedule.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\n        uint48 oldSchedule = _pendingDelaySchedule;\n\n        if (_isScheduleSet(oldSchedule)) {\n            if (_hasSchedulePassed(oldSchedule)) {\n                // Materialize a virtual delay\n                _currentDelay = _pendingDelay;\n            } else {\n                // Emit for implicit cancellations when another delay was scheduled.\n                emit DefaultAdminDelayChangeCanceled();\n            }\n        }\n\n        _pendingDelay = newDelay;\n        _pendingDelaySchedule = newSchedule;\n    }\n\n    ///\n    /// Private helpers\n    ///\n\n    /**\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\n     */\n    function _isScheduleSet(uint48 schedule) private pure returns (bool) {\n        return schedule != 0;\n    }\n\n    /**\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\n     */\n    function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\n        return schedule < block.timestamp;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/extensions/AccessControlEnumerable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControlEnumerable} from \"./IAccessControlEnumerable.sol\";\nimport {AccessControl} from \"../AccessControl.sol\";\nimport {EnumerableSet} from \"../../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Return all accounts that have `role`\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function getRoleMembers(bytes32 role) public view virtual returns (address[] memory) {\n        return _roleMembers[role].values();\n    }\n\n    /**\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool granted = super._grantRole(role, account);\n        if (granted) {\n            _roleMembers[role].add(account);\n        }\n        return granted;\n    }\n\n    /**\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool revoked = super._revokeRole(role, account);\n        if (revoked) {\n            _roleMembers[role].remove(account);\n        }\n        return revoked;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/extensions/IAccessControlDefaultAdminRules.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"../IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC-165 detection.\n */\ninterface IAccessControlDefaultAdminRules is IAccessControl {\n    /**\n     * @dev The new default admin is not a valid default admin.\n     */\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\n\n    /**\n     * @dev At least one of the following rules was violated:\n     *\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\n     */\n    error AccessControlEnforcedDefaultAdminRules();\n\n    /**\n     * @dev The delay for transferring the default admin delay is enforced and\n     * the operation must wait until `schedule`.\n     *\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\n     */\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\n\n    /**\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\n     * passes.\n     */\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\n\n    /**\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\n     */\n    event DefaultAdminTransferCanceled();\n\n    /**\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\n     */\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\n\n    /**\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\n     */\n    event DefaultAdminDelayChangeCanceled();\n\n    /**\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\n     */\n    function defaultAdmin() external view returns (address);\n\n    /**\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\n     *\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\n     *\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\n     *\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\n     */\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\n\n    /**\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\n     *\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\n     * the acceptance schedule.\n     *\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\n     * function returns the new delay. See {changeDefaultAdminDelay}.\n     */\n    function defaultAdminDelay() external view returns (uint48);\n\n    /**\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\n     *\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\n     *\n     * A zero value only in `effectSchedule` indicates no pending delay change.\n     *\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\n     * will be zero after the effect schedule.\n     */\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\n\n    /**\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\n     * after the current timestamp plus a {defaultAdminDelay}.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * Emits a DefaultAdminRoleChangeStarted event.\n     */\n    function beginDefaultAdminTransfer(address newAdmin) external;\n\n    /**\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\n     *\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n    function cancelDefaultAdminTransfer() external;\n\n    /**\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\n     *\n     * After calling the function:\n     *\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\n     * - {pendingDefaultAdmin} should be reset to zero values.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\n     */\n    function acceptDefaultAdminTransfer() external;\n\n    /**\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\n     *\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\n     * set before calling.\n     *\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\n     * complete transfer (including acceptance).\n     *\n     * The schedule is designed for two scenarios:\n     *\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\n     * {defaultAdminDelayIncreaseWait}.\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\n     *\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function changeDefaultAdminDelay(uint48 newDelay) external;\n\n    /**\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\n     *\n     * Requirements:\n     *\n     * - Only can be called by the current {defaultAdmin}.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n    function rollbackDefaultAdminDelay() external;\n\n    /**\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\n     * to take effect. Default to 5 days.\n     *\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\n     *\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\n     */\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/extensions/IAccessControlEnumerable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"../IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC-165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/manager/AccessManaged.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/manager/AccessManaged.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"./IAuthority.sol\";\nimport {AuthorityUtils} from \"./AuthorityUtils.sol\";\nimport {IAccessManager} from \"./IAccessManager.sol\";\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Context} from \"../../utils/Context.sol\";\n\n/**\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\n * permissioned according to an \"authority\": a contract like {AccessManager} that follows the {IAuthority} interface,\n * implementing a policy that allows certain callers to access certain functions.\n *\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\n * functions, and ideally only used in `external` functions. See {restricted}.\n */\nabstract contract AccessManaged is Context, IAccessManaged {\n    address private _authority;\n\n    bool private _consumingSchedule;\n\n    /**\n     * @dev Initializes the contract connected to an initial authority.\n     */\n    constructor(address initialAuthority) {\n        _setAuthority(initialAuthority);\n    }\n\n    /**\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\n     * caller and selector of the function that entered the contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n     * ====\n     *\n     * [WARNING]\n     * ====\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n     * functions are the only execution paths where a function selector cannot be unambiguously determined from the calldata\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n     * if no calldata is provided. (See {_checkCanCall}).\n     *\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n     * ====\n     */\n    modifier restricted() {\n        _checkCanCall(_msgSender(), _msgData());\n        _;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function authority() public view virtual returns (address) {\n        return _authority;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function setAuthority(address newAuthority) public virtual {\n        address caller = _msgSender();\n        if (caller != authority()) {\n            revert AccessManagedUnauthorized(caller);\n        }\n        if (newAuthority.code.length == 0) {\n            revert AccessManagedInvalidAuthority(newAuthority);\n        }\n        _setAuthority(newAuthority);\n    }\n\n    /// @inheritdoc IAccessManaged\n    function isConsumingScheduledOp() public view returns (bytes4) {\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\n    }\n\n    /**\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n     * permissions set by the current authority.\n     */\n    function _setAuthority(address newAuthority) internal virtual {\n        _authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }\n\n    /**\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n     * is less than 4 bytes long.\n     */\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                _consumingSchedule = true;\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\n                _consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/manager/AccessManager.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/manager/AccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessManager} from \"./IAccessManager.sol\";\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Multicall} from \"../../utils/Multicall.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev AccessManager is a central contract to store the permissions of a system.\n *\n * A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\n * {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\n * modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\n * effectively restricted.\n *\n * The restriction rules for such functions are defined in terms of \"roles\" identified by an `uint64` and scoped\n * by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\n * configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\n *\n * For each target contract, admins can configure the following without any delay:\n *\n * * The target's {AccessManaged-authority} via {updateAuthority}.\n * * Close or open a target via {setTargetClosed} keeping the permissions intact.\n * * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\n *\n * By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\n * Additionally, each role has the following configuration options restricted to this manager's admins:\n *\n * * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\n * * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\n * * A delay in which a role takes effect after being granted through {setGrantDelay}.\n * * A delay of any target's admin action via {setTargetAdminDelay}.\n * * A role label for discoverability purposes with {labelRole}.\n *\n * Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\n * restricted to each role's admin (see {getRoleAdmin}).\n *\n * Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\n * they will be highly secured (e.g., a multisig or a well-configured DAO).\n *\n * NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\n * doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\n * the return data are a boolean as expected by that interface.\n *\n * NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\n * {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\n * Users will be able to interact with these contracts through the {execute} function, following the access rules\n * registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\n * will be {AccessManager} itself.\n *\n * WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\n * mindful of the danger associated with functions such as {Ownable-renounceOwnership} or\n * {AccessControl-renounceRole}.\n */\ncontract AccessManager is Context, Multicall, IAccessManager {\n    using Time for *;\n\n    // Structure that stores the details for a target contract.\n    struct TargetConfig {\n        mapping(bytes4 selector => uint64 roleId) allowedRoles;\n        Time.Delay adminDelay;\n        bool closed;\n    }\n\n    // Structure that stores the details for a role/account pair. This structures fit into a single slot.\n    struct Access {\n        // Timepoint at which the user gets the permission.\n        // If this is either 0 or in the future, then the role permission is not available.\n        uint48 since;\n        // Delay for execution. Only applies to restricted() / execute() calls.\n        Time.Delay delay;\n    }\n\n    // Structure that stores the details of a role.\n    struct Role {\n        // Members of the role.\n        mapping(address user => Access access) members;\n        // Admin who can grant or revoke permissions.\n        uint64 admin;\n        // Guardian who can cancel operations targeting functions that need this role.\n        uint64 guardian;\n        // Delay in which the role takes effect after being granted.\n        Time.Delay grantDelay;\n    }\n\n    // Structure that stores the details for a scheduled operation. This structure fits into a single slot.\n    struct Schedule {\n        // Moment at which the operation can be executed.\n        uint48 timepoint;\n        // Operation nonce to allow third-party contracts to identify the operation.\n        uint32 nonce;\n    }\n\n    /**\n     * @dev The identifier of the admin role. Required to perform most configuration operations including\n     * other roles' management and target restrictions.\n     */\n    uint64 public constant ADMIN_ROLE = type(uint64).min; // 0\n\n    /**\n     * @dev The identifier of the public role. Automatically granted to all addresses with no delay.\n     */\n    uint64 public constant PUBLIC_ROLE = type(uint64).max; // 2**64-1\n\n    mapping(address target => TargetConfig mode) private _targets;\n    mapping(uint64 roleId => Role) private _roles;\n    mapping(bytes32 operationId => Schedule) private _schedules;\n\n    // Used to identify operations that are currently being executed via {execute}.\n    // This should be transient storage when supported by the EVM.\n    bytes32 private _executionId;\n\n    /**\n     * @dev Check that the caller is authorized to perform the operation.\n     * See {AccessManager} description for a detailed breakdown of the authorization logic.\n     */\n    modifier onlyAuthorized() {\n        _checkAuthorized();\n        _;\n    }\n\n    constructor(address initialAdmin) {\n        if (initialAdmin == address(0)) {\n            revert AccessManagerInvalidInitialAdmin(address(0));\n        }\n\n        // admin is active immediately and without any execution delay.\n        _grantRole(ADMIN_ROLE, initialAdmin, 0, 0);\n    }\n\n    // =================================================== GETTERS ====================================================\n    /// @inheritdoc IAccessManager\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) public view virtual returns (bool immediate, uint32 delay) {\n        if (isTargetClosed(target)) {\n            return (false, 0);\n        } else if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(target, selector), 0);\n        } else {\n            uint64 roleId = getTargetFunctionRole(target, selector);\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\n        }\n    }\n\n    /// @inheritdoc IAccessManager\n    function expiration() public view virtual returns (uint32) {\n        return 1 weeks;\n    }\n\n    /// @inheritdoc IAccessManager\n    function minSetback() public view virtual returns (uint32) {\n        return 5 days;\n    }\n\n    /// @inheritdoc IAccessManager\n    function isTargetClosed(address target) public view virtual returns (bool) {\n        return _targets[target].closed;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\n        return _targets[target].allowedRoles[selector];\n    }\n\n    /// @inheritdoc IAccessManager\n    function getTargetAdminDelay(address target) public view virtual returns (uint32) {\n        return _targets[target].adminDelay.get();\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].admin;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].guardian;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\n        return _roles[roleId].grantDelay.get();\n    }\n\n    /// @inheritdoc IAccessManager\n    function getAccess(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\n        Access storage access = _roles[roleId].members[account];\n\n        since = access.since;\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\n\n        return (since, currentDelay, pendingDelay, effect);\n    }\n\n    /// @inheritdoc IAccessManager\n    function hasRole(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\n        if (roleId == PUBLIC_ROLE) {\n            return (true, 0);\n        } else {\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\n        }\n    }\n\n    // =============================================== ROLE MANAGEMENT ===============================================\n    /// @inheritdoc IAccessManager\n    function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n        emit RoleLabel(roleId, label);\n    }\n\n    /// @inheritdoc IAccessManager\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\n    }\n\n    /// @inheritdoc IAccessManager\n    function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\n        _revokeRole(roleId, account);\n    }\n\n    /// @inheritdoc IAccessManager\n    function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessManagerBadConfirmation();\n        }\n        _revokeRole(roleId, callerConfirmation);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\n        _setRoleAdmin(roleId, admin);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\n        _setRoleGuardian(roleId, guardian);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\n        _setGrantDelay(roleId, newDelay);\n    }\n\n    /**\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function _grantRole(\n        uint64 roleId,\n        address account,\n        uint32 grantDelay,\n        uint32 executionDelay\n    ) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        bool newMember = _roles[roleId].members[account].since == 0;\n        uint48 since;\n\n        if (newMember) {\n            since = Time.timestamp() + grantDelay;\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\n        } else {\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\n            // any change to the execution delay within the duration of the role admin delay.\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\n                executionDelay,\n                0\n            );\n        }\n\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\n        return newMember;\n    }\n\n    /**\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\n     * Returns true if the role was previously granted.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        if (_roles[roleId].members[account].since == 0) {\n            return false;\n        }\n\n        delete _roles[roleId].members[account];\n\n        emit RoleRevoked(roleId, account);\n        return true;\n    }\n\n    /**\n     * @dev Internal version of {setRoleAdmin} without access control.\n     *\n     * Emits a {RoleAdminChanged} event.\n     *\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to set grant or revoke such role.\n     */\n    function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].admin = admin;\n\n        emit RoleAdminChanged(roleId, admin);\n    }\n\n    /**\n     * @dev Internal version of {setRoleGuardian} without access control.\n     *\n     * Emits a {RoleGuardianChanged} event.\n     *\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to cancel any scheduled operation for such role.\n     */\n    function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].guardian = guardian;\n\n        emit RoleGuardianChanged(roleId, guardian);\n    }\n\n    /**\n     * @dev Internal version of {setGrantDelay} without access control.\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        uint48 effect;\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\n\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\n    }\n\n    // ============================================= FUNCTION MANAGEMENT ==============================================\n    /// @inheritdoc IAccessManager\n    function setTargetFunctionRole(\n        address target,\n        bytes4[] calldata selectors,\n        uint64 roleId\n    ) public virtual onlyAuthorized {\n        for (uint256 i = 0; i < selectors.length; ++i) {\n            _setTargetFunctionRole(target, selectors[i], roleId);\n        }\n    }\n\n    /**\n     * @dev Internal version of {setTargetFunctionRole} without access control.\n     *\n     * Emits a {TargetFunctionRoleUpdated} event.\n     */\n    function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\n        _targets[target].allowedRoles[selector] = roleId;\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\n        _setTargetAdminDelay(target, newDelay);\n    }\n\n    /**\n     * @dev Internal version of {setTargetAdminDelay} without access control.\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\n        uint48 effect;\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\n\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\n    }\n\n    // =============================================== MODE MANAGEMENT ================================================\n    /// @inheritdoc IAccessManager\n    function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\n        _setTargetClosed(target, closed);\n    }\n\n    /**\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function _setTargetClosed(address target, bool closed) internal virtual {\n        _targets[target].closed = closed;\n        emit TargetClosed(target, closed);\n    }\n\n    // ============================================== DELAYED OPERATIONS ==============================================\n    /// @inheritdoc IAccessManager\n    function getSchedule(bytes32 id) public view virtual returns (uint48) {\n        uint48 timepoint = _schedules[id].timepoint;\n        return _isExpired(timepoint) ? 0 : timepoint;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getNonce(bytes32 id) public view virtual returns (uint32) {\n        return _schedules[id].nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (, uint32 setback) = _canCallExtended(caller, target, data);\n\n        uint48 minWhen = Time.timestamp() + setback;\n\n        // If call with delay is not authorized, or if requested timing is too soon, revert\n        if (setback == 0 || (when > 0 && when < minWhen)) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        // Reuse variable due to stack too deep\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\n\n        // If caller is authorised, schedule operation\n        operationId = hashOperation(caller, target, data);\n\n        _checkNotScheduled(operationId);\n\n        unchecked {\n            // It's not feasible to overflow the nonce in less than 1000 years\n            nonce = _schedules[operationId].nonce + 1;\n        }\n        _schedules[operationId].timepoint = when;\n        _schedules[operationId].nonce = nonce;\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\n\n        // Using named return values because otherwise we get stack too deep\n    }\n\n    /**\n     * @dev Reverts if the operation is currently scheduled and has not expired.\n     *\n     * NOTE: This function was introduced due to stack too deep errors in schedule.\n     */\n    function _checkNotScheduled(bytes32 operationId) private view {\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\n            revert AccessManagerAlreadyScheduled(operationId);\n        }\n    }\n\n    /// @inheritdoc IAccessManager\n    // Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\n    // _consumeScheduledOp guarantees a scheduled operation is only executed once.\n    // slither-disable-next-line reentrancy-no-eth\n    function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\n\n        // If call is not authorized, revert\n        if (!immediate && setback == 0) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        uint32 nonce;\n\n        // If caller is authorised, check operation was scheduled early enough\n        // Consume an available schedule even if there is no currently enforced delay\n        if (setback != 0 || getSchedule(operationId) != 0) {\n            nonce = _consumeScheduledOp(operationId);\n        }\n\n        // Mark the target and selector as authorised\n        bytes32 executionIdBefore = _executionId;\n        _executionId = _hashExecutionId(target, _checkSelector(data));\n\n        // Perform call\n        Address.functionCallWithValue(target, data, msg.value);\n\n        // Reset execute identifier\n        _executionId = executionIdBefore;\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\n        address msgsender = _msgSender();\n        bytes4 selector = _checkSelector(data);\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        if (_schedules[operationId].timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (caller != msgsender) {\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\n            if (!isAdmin && !isGuardian) {\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\n            }\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        uint32 nonce = _schedules[operationId].nonce;\n        emit OperationCanceled(operationId, nonce);\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function consumeScheduledOp(address caller, bytes calldata data) public virtual {\n        address target = _msgSender();\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\n            revert AccessManagerUnauthorizedConsume(target);\n        }\n        _consumeScheduledOp(hashOperation(caller, target, data));\n    }\n\n    /**\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\n     *\n     * Returns the nonce of the scheduled operation that is consumed.\n     */\n    function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\n        uint48 timepoint = _schedules[operationId].timepoint;\n        uint32 nonce = _schedules[operationId].nonce;\n\n        if (timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (timepoint > Time.timestamp()) {\n            revert AccessManagerNotReady(operationId);\n        } else if (_isExpired(timepoint)) {\n            revert AccessManagerExpired(operationId);\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        emit OperationExecuted(operationId, nonce);\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\n        return keccak256(abi.encode(caller, target, data));\n    }\n\n    // ==================================================== OTHERS ====================================================\n    /// @inheritdoc IAccessManager\n    function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\n        IAccessManaged(target).setAuthority(newAuthority);\n    }\n\n    // ================================================= ADMIN LOGIC ==================================================\n    /**\n     * @dev Check if the current call is authorized according to admin and roles logic.\n     *\n     * WARNING: Carefully review the considerations of {AccessManaged-restricted} since they apply to this modifier.\n     */\n    function _checkAuthorized() private {\n        address caller = _msgSender();\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\n        if (!immediate) {\n            if (delay == 0) {\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\n            } else {\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\n            }\n        }\n    }\n\n    /**\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\n     *\n     * Returns:\n     * - bool restricted: does this data match a restricted operation\n     * - uint64: which role is this operation restricted to\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\n     */\n    function _getAdminRestrictions(\n        bytes calldata data\n    ) private view returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay) {\n        if (data.length < 4) {\n            return (false, 0, 0);\n        }\n\n        bytes4 selector = _checkSelector(data);\n\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\n        if (\n            selector == this.labelRole.selector ||\n            selector == this.setRoleAdmin.selector ||\n            selector == this.setRoleGuardian.selector ||\n            selector == this.setGrantDelay.selector ||\n            selector == this.setTargetAdminDelay.selector\n        ) {\n            return (true, ADMIN_ROLE, 0);\n        }\n\n        // Restricted to ADMIN with the admin delay corresponding to the target\n        if (\n            selector == this.updateAuthority.selector ||\n            selector == this.setTargetClosed.selector ||\n            selector == this.setTargetFunctionRole.selector\n        ) {\n            // First argument is a target.\n            address target = abi.decode(data[0x04:0x24], (address));\n            uint32 delay = getTargetAdminDelay(target);\n            return (true, ADMIN_ROLE, delay);\n        }\n\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\n            // First argument is a roleId.\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\n            return (true, getRoleAdmin(roleId), 0);\n        }\n\n        return (false, getTargetFunctionRole(address(this), selector), 0);\n    }\n\n    // =================================================== HELPERS ====================================================\n    /**\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\n     * when the target is this contract.\n     *\n     * Returns:\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\n     * - uint32 delay: the execution delay\n     */\n    function _canCallExtended(\n        address caller,\n        address target,\n        bytes calldata data\n    ) private view returns (bool immediate, uint32 delay) {\n        if (target == address(this)) {\n            return _canCallSelf(caller, data);\n        } else {\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\n        }\n    }\n\n    /**\n     * @dev A version of {canCall} that checks for restrictions in this contract.\n     */\n    function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\n        if (data.length < 4) {\n            return (false, 0);\n        }\n\n        if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\n        }\n\n        (bool adminRestricted, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\n\n        // isTargetClosed apply to non-admin-restricted function\n        if (!adminRestricted && isTargetClosed(address(this))) {\n            return (false, 0);\n        }\n\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\n        if (!inRole) {\n            return (false, 0);\n        }\n\n        // downcast is safe because both options are uint32\n        delay = uint32(Math.max(operationDelay, executionDelay));\n        return (delay == 0, delay);\n    }\n\n    /**\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\n     */\n    function _isExecuting(address target, bytes4 selector) private view returns (bool) {\n        return _executionId == _hashExecutionId(target, selector);\n    }\n\n    /**\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\n     */\n    function _isExpired(uint48 timepoint) private view returns (bool) {\n        return timepoint + expiration() <= Time.timestamp();\n    }\n\n    /**\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\n     */\n    function _checkSelector(bytes calldata data) private pure returns (bytes4) {\n        return bytes4(data[0:4]);\n    }\n\n    /**\n     * @dev Hashing function for execute protection\n     */\n    function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\n        return keccak256(abi.encode(target, selector));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/manager/AuthorityUtils.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"./IAuthority.sol\";\n\nlibrary AuthorityUtils {\n    /**\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\n     */\n    function canCallWithDelay(\n        address authority,\n        address caller,\n        address target,\n        bytes4 selector\n    ) internal view returns (bool immediate, uint32 delay) {\n        (bool success, bytes memory data) = authority.staticcall(\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\n        );\n        if (success) {\n            if (data.length >= 0x40) {\n                (immediate, delay) = abi.decode(data, (bool, uint32));\n            } else if (data.length >= 0x20) {\n                immediate = abi.decode(data, (bool));\n            }\n        }\n        return (immediate, delay);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/manager/IAccessManaged.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\n\npragma solidity ^0.8.20;\n\ninterface IAccessManaged {\n    /**\n     * @dev Authority that manages this contract was updated.\n     */\n    event AuthorityUpdated(address authority);\n\n    error AccessManagedUnauthorized(address caller);\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\n    error AccessManagedInvalidAuthority(address authority);\n\n    /**\n     * @dev Returns the current authority.\n     */\n    function authority() external view returns (address);\n\n    /**\n     * @dev Transfers control to a new authority. The caller must be the current authority.\n     */\n    function setAuthority(address) external;\n\n    /**\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n     * attacker controlled calls.\n     */\n    function isConsumingScheduledOp() external view returns (bytes4);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/manager/IAccessManager.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/manager/IAccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {Time} from \"../../utils/types/Time.sol\";\n\ninterface IAccessManager {\n    /**\n     * @dev A delayed operation was scheduled.\n     */\n    event OperationScheduled(\n        bytes32 indexed operationId,\n        uint32 indexed nonce,\n        uint48 schedule,\n        address caller,\n        address target,\n        bytes data\n    );\n\n    /**\n     * @dev A scheduled operation was executed.\n     */\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev A scheduled operation was canceled.\n     */\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev Informational labelling for a roleId.\n     */\n    event RoleLabel(uint64 indexed roleId, string label);\n\n    /**\n     * @dev Emitted when `account` is granted `roleId`.\n     *\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n     * otherwise it indicates the execution delay for this account and roleId is updated.\n     */\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\n\n    /**\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\n     */\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\n\n    /**\n     * @dev Role acting as admin over a given `roleId` is updated.\n     */\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\n\n    /**\n     * @dev Role acting as guardian over a given `roleId` is updated.\n     */\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\n\n    /**\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\n     */\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\n\n    /**\n     * @dev Target mode is updated (true = closed, false = open).\n     */\n    event TargetClosed(address indexed target, bool closed);\n\n    /**\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\n     */\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\n\n    /**\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\n     */\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\n\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\n    error AccessManagerNotScheduled(bytes32 operationId);\n    error AccessManagerNotReady(bytes32 operationId);\n    error AccessManagerExpired(bytes32 operationId);\n    error AccessManagerLockedRole(uint64 roleId);\n    error AccessManagerBadConfirmation();\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\n    error AccessManagerUnauthorizedConsume(address target);\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\n\n    /**\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n     * & {execute} workflow.\n     *\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\n     * for future execution.\n     *\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n     * the operation can be executed if and only if delay is greater than 0.\n     *\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n     *\n     * NOTE: This function does not report the permissions of the admin functions in the manager itself. These are defined by the\n     * {AccessManager} documentation.\n     */\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) external view returns (bool allowed, uint32 delay);\n\n    /**\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n     *\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n     * disabling any scheduling usage.\n     */\n    function expiration() external view returns (uint32);\n\n    /**\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\n     * accidental increase). Defaults to 5 days.\n     */\n    function minSetback() external view returns (uint32);\n\n    /**\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\n     *\n     * NOTE: When the manager itself is closed, admin functions are still accessible to avoid locking the contract.\n     */\n    function isTargetClosed(address target) external view returns (bool);\n\n    /**\n     * @dev Get the role required to call a function.\n     */\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\n\n    /**\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\n     */\n    function getTargetAdminDelay(address target) external view returns (uint32);\n\n    /**\n     * @dev Get the id of the role that acts as an admin for the given role.\n     *\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n     * an operation that is restricted to this role.\n     */\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role that acts as a guardian for a given role.\n     *\n     * The guardian permission allows canceling operations that have been scheduled under the role.\n     */\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role current grant delay.\n     *\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\n     */\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\n\n    /**\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\n     * level.\n     *\n     * Returns:\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n     * [1] Current execution delay for the account.\n     * [2] Pending execution delay for the account.\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\n     */\n    function getAccess(\n        uint64 roleId,\n        address account\n    ) external view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect);\n\n    /**\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\n     */\n    function hasRole(uint64 roleId, address account) external view returns (bool isMember, uint32 executionDelay);\n\n    /**\n     * @dev Give a label to a role, for improved role discoverability by UIs.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleLabel} event.\n     */\n    function labelRole(uint64 roleId, string calldata label) external;\n\n    /**\n     * @dev Add `account` to `roleId`, or change its execution delay.\n     *\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n     *\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - granted role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\n\n    /**\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n     * no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - revoked role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function revokeRole(uint64 roleId, address account) external;\n\n    /**\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n     * the role this call has no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\n\n    /**\n     * @dev Change admin role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleAdminChanged} event\n     */\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\n\n    /**\n     * @dev Change guardian role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGuardianChanged} event\n     */\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\n\n    /**\n     * @dev Update the delay for granting a `roleId`.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\n\n    /**\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\n     */\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\n\n    /**\n     * @dev Set the delay for changing the configuration of a given target contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\n\n    /**\n     * @dev Set the closed flag for a contract.\n     *\n     * Closing the manager itself won't disable access to admin methods to avoid locking the contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function setTargetClosed(address target, bool closed) external;\n\n    /**\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\n     */\n    function getSchedule(bytes32 id) external view returns (uint48);\n\n    /**\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n     * been scheduled.\n     */\n    function getNonce(bytes32 id) external view returns (uint32);\n\n    /**\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n     * required for the caller. The special value zero will automatically set the earliest possible time.\n     *\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n     *\n     * Emits a {OperationScheduled} event.\n     *\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n     * contract if it is using standard Solidity ABI encoding.\n     */\n    function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) external returns (bytes32 operationId, uint32 nonce);\n\n    /**\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n     * execution delay is 0.\n     *\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n     *\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\n     */\n    function execute(address target, bytes calldata data) external payable returns (uint32);\n\n    /**\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n     * operation that is cancelled.\n     *\n     * Requirements:\n     *\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\n     *\n     * Emits a {OperationCanceled} event.\n     */\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\n\n    /**\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n     *\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n     * with all the verifications that it implies.\n     *\n     * Emit a {OperationExecuted} event.\n     */\n    function consumeScheduledOp(address caller, bytes calldata data) external;\n\n    /**\n     * @dev Hashing function for delayed operations.\n     */\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\n\n    /**\n     * @dev Changes the authority of a target managed by this manager instance.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     */\n    function updateAuthority(address target, address newAuthority) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/access/manager/IAuthority.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard interface for permissioning originally defined in Dappsys.\n */\ninterface IAuthority {\n    /**\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\n     */\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/AccessControl.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"AccessControl\",\n  \"sourceName\": \"contracts/access/AccessControl.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DEFAULT_ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/AccessControlDefaultAdminRules.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"AccessControlDefaultAdminRules\",\n  \"sourceName\": \"contracts/access/extensions/AccessControlDefaultAdminRules.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"schedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"AccessControlEnforcedDefaultAdminDelay\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlEnforcedDefaultAdminRules\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"defaultAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessControlInvalidDefaultAdmin\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"DefaultAdminDelayChangeCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"effectSchedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"DefaultAdminDelayChangeScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"DefaultAdminTransferCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"acceptSchedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"DefaultAdminTransferScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DEFAULT_ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"acceptDefaultAdminTransfer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"beginDefaultAdminTransfer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"cancelDefaultAdminTransfer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"changeDefaultAdminDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultAdminDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultAdminDelayIncreaseWait\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pendingDefaultAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"schedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pendingDefaultAdminDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"schedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"rollbackDefaultAdminDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/AccessControlEnumerable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"AccessControlEnumerable\",\n  \"sourceName\": \"contracts/access/extensions/AccessControlEnumerable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DEFAULT_ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getRoleMember\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleMemberCount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleMembers\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"\",\n          \"type\": \"address[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/AccessManaged.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"AccessManaged\",\n  \"sourceName\": \"contracts/access/manager/AccessManaged.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"authority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagedInvalidAuthority\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"AccessManagedRequiredDelay\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagedUnauthorized\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"authority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AuthorityUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"authority\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"isConsumingScheduledOp\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAuthority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setAuthority\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/AccessManager.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"AccessManager\",\n  \"sourceName\": \"contracts/access/manager/AccessManager.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initialAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerAlreadyScheduled\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"AccessManagerBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerExpired\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initialAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagerInvalidInitialAdmin\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"AccessManagerLockedRole\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerNotReady\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerNotScheduled\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"msgsender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"msgsender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedCancel\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedConsume\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"OperationCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"OperationExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"schedule\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"OperationScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"admin\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"RoleGrantDelayChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"newMember\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"guardian\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"RoleGuardianChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"label\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"RoleLabel\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"TargetAdminDelayUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"closed\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"TargetClosed\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"TargetFunctionRoleUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"PUBLIC_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"canCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"immediate\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"consumeScheduledOp\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"expiration\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getAccess\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"currentDelay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"pendingDelay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"effect\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getNonce\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"getRoleGrantDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"getRoleGuardian\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getSchedule\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getTargetAdminDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"getTargetFunctionRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"executionDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isMember\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"executionDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"hashOperation\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isTargetClosed\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"label\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"labelRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"minSetback\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"when\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"schedule\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"setGrantDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"admin\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"setRoleAdmin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"guardian\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"setRoleGuardian\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"setTargetAdminDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"closed\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setTargetClosed\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4[]\",\n          \"name\": \"selectors\",\n          \"type\": \"bytes4[]\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"setTargetFunctionRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAuthority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"updateAuthority\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x608060405234801562000010575f80fd5b5060405162002d2138038062002d21833981016040819052620000339162000470565b6001600160a01b0381166200006257604051630409d6d160e11b81525f60048201526024015b60405180910390fd5b620000705f82818062000078565b5050620004f5565b5f6002600160401b03196001600160401b03861601620000b75760405163061c6a4360e21b81526001600160401b038616600482015260240162000059565b6001600160401b0385165f9081526001602090815260408083206001600160a01b038816845290915281205465ffffffffffff1615908115620001b45763ffffffff851662000105620002ca565b620001119190620004ac565b905060405180604001604052808265ffffffffffff168152602001620001438663ffffffff16620002db60201b60201c565b6001600160701b039081169091526001600160401b0389165f9081526001602090815260408083206001600160a01b038c16845282529091208351815494909201519092166601000000000000026001600160a01b031990931665ffffffffffff909116179190911790556200025c565b6001600160401b0387165f9081526001602090815260408083206001600160a01b038a168452909152812054620002029166010000000000009091046001600160701b0316908690620002e4565b6001600160401b0389165f9081526001602090815260408083206001600160a01b038c168452909152902080546001600160701b03909316660100000000000002600160301b600160a01b03199093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b5f620002d64262000396565b905090565b63ffffffff1690565b5f8080620002fb6001600160701b038716620003ce565b90505f6200033c8563ffffffff168763ffffffff168463ffffffff161162000324575f62000330565b620003308885620004d5565b63ffffffff16620003ee565b905063ffffffff81166200034f620002ca565b6200035b9190620004ac565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b5f65ffffffffffff821115620003ca576040516306dfcc6560e41b8152603060048201526024810183905260440162000059565b5090565b5f80620003e46001600160701b03841662000400565b5090949350505050565b5f8282188284110282185b9392505050565b5f8080620004188462000412620002ca565b62000425565b9250925092509193909250565b6001600160501b03602083901c166001600160701b03831665ffffffffffff604085901c81169084168111156200045f5782828262000463565b815f805b9250925092509250925092565b5f6020828403121562000481575f80fd5b81516001600160a01b0381168114620003f9575f80fd5b634e487b7160e01b5f52601160045260245ffd5b65ffffffffffff818116838216019080821115620004ce57620004ce62000498565b5092915050565b63ffffffff828116828216039080821115620004ce57620004ce62000498565b61281e80620005035f395ff3fe6080604052600436106101db575f3560e01c80636d5115bd116100fd578063b700961311610092578063d22b598911610062578063d22b598914610636578063d6bb62c614610655578063f801a69814610674578063fe0776f5146106ad575f80fd5b8063b7009613146105a8578063b7d2b162146105e3578063cc1b6c8114610602578063d1f856ee14610617575f80fd5b8063a166aa89116100cd578063a166aa8914610501578063a64d95ce14610530578063abd9bd2a1461054f578063ac9650d81461057c575f80fd5b80636d5115bd1461049157806375b238fc146104b0578063853551b8146104c357806394c7d7ee146104e2575f80fd5b806330cae187116101735780634665096d116101435780634665096d146104035780634c1da1e2146104185780635296295214610437578063530dd45614610456575f80fd5b806330cae1871461035c5780633adc277a1461037b5780633ca7c02a146103b15780634136a33c146103cb575f80fd5b806318ff183c116101ae57806318ff183c146102b25780631cff79cd146102d157806325c471a0146102e45780633078f11414610303575f80fd5b806308d6122d146101df5780630b0a93ba1461020057806312be87271461025f578063167bd39514610293575b5f80fd5b3480156101ea575f80fd5b506101fe6101f93660046120da565b6106cc565b005b34801561020b575f80fd5b5061024261021a36600461213c565b6001600160401b039081165f9081526001602081905260409091200154600160401b90041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561026a575f80fd5b5061027e61027936600461213c565b61071e565b60405163ffffffff9091168152602001610256565b34801561029e575f80fd5b506101fe6102ad366004612155565b610758565b3480156102bd575f80fd5b506101fe6102cc366004612190565b61076e565b61027e6102df3660046121f9565b6107d0565b3480156102ef575f80fd5b506101fe6102fe36600461225c565b6108fc565b34801561030e575f80fd5b5061032261031d36600461229e565b61091e565b604051610256949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b348015610367575f80fd5b506101fe6103763660046122b8565b610982565b348015610386575f80fd5b5061039a6103953660046122e9565b610994565b60405165ffffffffffff9091168152602001610256565b3480156103bc575f80fd5b506102426001600160401b0381565b3480156103d6575f80fd5b5061027e6103e53660046122e9565b5f90815260026020526040902054600160301b900463ffffffff1690565b34801561040e575f80fd5b5062093a8061027e565b348015610423575f80fd5b5061027e610432366004612300565b6109c5565b348015610442575f80fd5b506101fe6104513660046122b8565b6109f2565b348015610461575f80fd5b5061024261047036600461213c565b6001600160401b039081165f90815260016020819052604090912001541690565b34801561049c575f80fd5b506102426104ab366004612330565b610a04565b3480156104bb575f80fd5b506102425f81565b3480156104ce575f80fd5b506101fe6104dd36600461235c565b610a3e565b3480156104ed575f80fd5b506101fe6104fc3660046121f9565b610ad5565b34801561050c575f80fd5b5061052061051b366004612300565b610b7f565b6040519015158152602001610256565b34801561053b575f80fd5b506101fe61054a366004612377565b610ba6565b34801561055a575f80fd5b5061056e61056936600461239f565b610bb8565b604051908152602001610256565b348015610587575f80fd5b5061059b6105963660046123ff565b610bf0565b604051610256919061245f565b3480156105b3575f80fd5b506105c76105c23660046124d7565b610cd5565b60408051921515835263ffffffff909116602083015201610256565b3480156105ee575f80fd5b506101fe6105fd36600461229e565b610d56565b34801561060d575f80fd5b506206978061027e565b348015610622575f80fd5b506105c761063136600461229e565b610d6d565b348015610641575f80fd5b506101fe61065036600461251f565b610de6565b348015610660575f80fd5b5061027e61066f36600461239f565b610df8565b34801561067f575f80fd5b5061069361068e36600461253b565b610f4b565b6040805192835263ffffffff909116602083015201610256565b3480156106b8575f80fd5b506101fe6106c736600461229e565b61108c565b6106d46110b5565b5f5b828110156107175761070f858585848181106106f4576106f46125a8565b905060200201602081019061070991906125bc565b8461112c565b6001016106d6565b5050505050565b6001600160401b0381165f9081526001602081905260408220015461075290600160801b90046001600160701b03166111ad565b92915050565b6107606110b5565b61076a82826111cb565b5050565b6107766110b5565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b906024015f604051808303815f87803b1580156107b6575f80fd5b505af11580156107c8573d5f803e3d5ffd5b505050505050565b5f3381806107e08388888861123c565b91509150811580156107f6575063ffffffff8116155b15610849578287610807888861128d565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b5f61085684898989610bb8565b90505f63ffffffff831615158061087c575061087182610994565b65ffffffffffff1615155b1561088d5761088a826112a4565b90505b6003546108a38a61089e8b8b61128d565b6113a2565b6003819055506108ea8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152503492506113e4915050565b506003559450505050505b9392505050565b6109046110b5565b61091883836109128661071e565b84611484565b50505050565b6001600160401b0382165f9081526001602090815260408083206001600160a01b03851684529091528120805465ffffffffffff81169291829182919061097490600160301b90046001600160701b03166116ca565b969991985096509350505050565b61098a6110b5565b61076a82826116eb565b5f8181526002602052604081205465ffffffffffff166109b38161178e565b6109bd57806108f5565b5f9392505050565b6001600160a01b0381165f90815260208190526040812060010154610752906001600160701b03166111ad565b6109fa6110b5565b61076a82826117bc565b6001600160a01b0382165f908152602081815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b610a466110b5565b6001600160401b0383161580610a6457506001600160401b03838116145b15610a8d5760405163061c6a4360e21b81526001600160401b0384166004820152602401610840565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051610ac89291906125ff565b60405180910390a2505050565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa158015610b14573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b38919061261a565b6001600160e01b03191614610b6b57604051630641fee960e31b81526001600160a01b0382166004820152602401610840565b610717610b7a85838686610bb8565b6112a4565b6001600160a01b03165f90815260208190526040902060010154600160701b900460ff1690565b610bae6110b5565b61076a828261186d565b5f84848484604051602001610bd09493929190612635565b604051602081830303815290604052805190602001209050949350505050565b604080515f815260208101909152606090826001600160401b03811115610c1957610c1961269c565b604051908082528060200260200182016040528015610c4c57816020015b6060815260200190600190039081610c375790505b5091505f5b83811015610ccd57610ca830868684818110610c6f57610c6f6125a8565b9050602002810190610c8191906126b0565b85604051602001610c94939291906126f2565b60405160208183030381529060405261197c565b838281518110610cba57610cba6125a8565b6020908102919091010152600101610c51565b505092915050565b5f80610ce084610b7f565b15610cef57505f905080610d4e565b306001600160a01b03861603610d1357610d0984846119ee565b5f91509150610d4e565b5f610d1e8585610a04565b90505f80610d2c8389610d6d565b9150915081610d3c575f80610d46565b63ffffffff811615815b945094505050505b935093915050565b610d5e6110b5565b610d688282611a04565b505050565b5f8067fffffffffffffffe196001600160401b03851601610d935750600190505f610ddf565b5f80610d9f868661091e565b5050915091508165ffffffffffff165f14158015610dd45750610dc0611aed565b65ffffffffffff168265ffffffffffff1611155b93509150610ddf9050565b9250929050565b610dee6110b5565b61076a8282611afc565b5f3381610e05858561128d565b90505f610e1488888888610bb8565b5f8181526002602052604081205491925065ffffffffffff9091169003610e515760405163060a299b60e41b815260048101829052602401610840565b826001600160a01b0316886001600160a01b031614610eea575f610e755f85610d6d565b5090505f610e8f610e8961021a8b87610a04565b86610d6d565b50905081158015610e9e575080155b15610ee757604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b031985166064820152608401610840565b50505b5f81815260026020526040808220805465ffffffffffff1916908190559051600160301b90910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b5f803381610f5b8289898961123c565b9150505f8163ffffffff16610f6e611aed565b610f789190612717565b905063ffffffff82161580610fae57505f8665ffffffffffff16118015610fae57508065ffffffffffff168665ffffffffffff16105b15610fbf5782896108078a8a61128d565b610fd98665ffffffffffff168265ffffffffffff16611bb7565b9550610fe7838a8a8a610bb8565b9450610ff285611bc6565b5f8581526002602052604090819020805465ffffffffffff891669ffffffffffffffffffff19821617600160301b9182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b490611078908a9088908f908f908f9061273d565b60405180910390a350505094509492505050565b6001600160a01b0381163314610d5e57604051635f159e6360e01b815260040160405180910390fd5b335f806110c3838236611c12565b9150915081610d68578063ffffffff165f0361111d575f6110e48136611cd5565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b03821660248201529092506044019050610840565b610918610b7a84305f36610bb8565b6001600160a01b0383165f818152602081815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b5f806111c1836001600160701b03166116ca565b5090949350505050565b6001600160a01b0382165f81815260208190526040908190206001018054841515600160701b0260ff60701b19909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb1389061123090841515815260200190565b60405180910390a25050565b5f80306001600160a01b0386160361126257611259868585611c12565b91509150611284565b6004831061127e5761127986866105c2878761128d565b611259565b505f9050805b94509492505050565b5f61129b6004828486612675565b6108f591612782565b5f8181526002602052604081205465ffffffffffff811690600160301b900463ffffffff168183036112ec5760405163060a299b60e41b815260048101859052602401610840565b6112f4611aed565b65ffffffffffff168265ffffffffffff16111561132757604051630c65b5bd60e11b815260048101859052602401610840565b6113308261178e565b1561135157604051631e2975b960e21b815260048101859052602401610840565b5f84815260026020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b6060814710156114105760405163cf47918160e01b815247600482015260248101839052604401610840565b5f80856001600160a01b0316848660405161142b91906127b0565b5f6040518083038185875af1925050503d805f8114611465576040519150601f19603f3d011682016040523d82523d5f602084013e61146a565b606091505b509150915061147a868383611ebb565b9695505050505050565b5f67fffffffffffffffe196001600160401b038616016114c25760405163061c6a4360e21b81526001600160401b0386166004820152602401610840565b6001600160401b0385165f9081526001602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156115b2578463ffffffff1661150d611aed565b6115179190612717565b905060405180604001604052808265ffffffffffff1681526020016115458663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b0389165f9081526001602090815260408083206001600160a01b038c1684528252909120835181549490920151909216600160301b026001600160a01b031990931665ffffffffffff9091161791909117905561165c565b6001600160401b0387165f9081526001602090815260408083206001600160a01b038a1684529091528120546115fb91600160301b9091046001600160701b0316908690611f17565b6001600160401b0389165f9081526001602090815260408083206001600160a01b038c168452909152902080546001600160701b03909316600160301b0273ffffffffffffffffffffffffffff000000000000199093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b5f805f6116de846116d9611aed565b611fbd565b9250925092509193909250565b6001600160401b038216158061170957506001600160401b03828116145b156117325760405163061c6a4360e21b81526001600160401b0383166004820152602401610840565b6001600160401b038281165f818152600160208190526040808320909101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b5f611797611aed565b65ffffffffffff166117ac62093a8084612717565b65ffffffffffff16111592915050565b6001600160401b03821615806117da57506001600160401b03828116145b156118035760405163061c6a4360e21b81526001600160401b0383166004820152602401610840565b6001600160401b038281165f81815260016020819052604080832090910180546fffffffffffffffff00000000000000001916600160401b958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b67fffffffffffffffe196001600160401b038316016118aa5760405163061c6a4360e21b81526001600160401b0383166004820152602401610840565b6001600160401b0382165f908152600160208190526040822001546118e390600160801b90046001600160701b03168362069780611f17565b6001600160401b0385165f818152600160208190526040918290200180546001600160701b03909516600160801b026dffffffffffffffffffffffffffff60801b199095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890610ac8908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b60605f80846001600160a01b03168460405161199891906127b0565b5f60405180830381855af49150503d805f81146119d0576040519150601f19603f3d011682016040523d82523d5f602084013e6119d5565b606091505b50915091506119e5858383611ebb565b95945050505050565b5f6119f983836113a2565b600354149392505050565b5f67fffffffffffffffe196001600160401b03841601611a425760405163061c6a4360e21b81526001600160401b0384166004820152602401610840565b6001600160401b0383165f9081526001602090815260408083206001600160a01b038616845290915281205465ffffffffffff169003611a8357505f610752565b6001600160401b0383165f8181526001602090815260408083206001600160a01b038716808552925280832080546001600160a01b0319169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b5f611af742612009565b905090565b6001600160a01b0382165f90815260208190526040812060010154611b2e906001600160701b03168362069780611f17565b6001600160a01b0385165f818152602081815260409182902060010180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101610ac8565b5f8282188284110282186108f5565b5f8181526002602052604090205465ffffffffffff168015801590611bf15750611bef8161178e565b155b1561076a5760405163813e945960e01b815260048101839052602401610840565b5f806004831015611c2757505f905080610d4e565b306001600160a01b03861603611c4a57610d0930611c45868661128d565b6119ee565b5f805f611c578787611cd5565b92509250925082158015611c6f5750611c6f30610b7f565b15611c82575f8094509450505050610d4e565b5f80611c8e848b610d6d565b9150915081611ca7575f80965096505050505050610d4e565b611cbd8363ffffffff168263ffffffff16611bb7565b63ffffffff8116159b909a5098505050505050505050565b5f80806004841015611cee57505f915081905080611eb4565b5f611cf9868661128d565b90506001600160e01b031981166310a6aa3760e31b1480611d2a57506001600160e01b031981166330cae18760e01b145b80611d4557506001600160e01b0319811663294b14a960e11b145b80611d6057506001600160e01b03198116635326cae760e11b145b80611d7b57506001600160e01b0319811663d22b598960e01b145b15611d905760015f8093509350935050611eb4565b6001600160e01b0319811663063fc60f60e21b1480611dbf57506001600160e01b0319811663167bd39560e01b145b80611dda57506001600160e01b031981166308d6122d60e01b145b15611e19575f611dee60246004888a612675565b810190611dfb9190612300565b90505f611e07826109c5565b600196505f95509350611eb492505050565b6001600160e01b0319811663012e238d60e51b1480611e4857506001600160e01b03198116635be958b160e11b145b15611ea0575f611e5c60246004888a612675565b810190611e69919061213c565b90506001611e92826001600160401b039081165f90815260016020819052604090912001541690565b5f9450945094505050611eb4565b5f611eab3083610a04565b5f935093509350505b9250925092565b606082611ed057611ecb8261203f565b6108f5565b8151158015611ee757506001600160a01b0384163b155b15611f1057604051639996b31560e01b81526001600160a01b0385166004820152602401610840565b50806108f5565b5f805f611f2c866001600160701b03166111ad565b90505f611f678563ffffffff168763ffffffff168463ffffffff1611611f52575f611f5c565b611f5c88856127cb565b63ffffffff16611bb7565b90508063ffffffff16611f78611aed565b611f829190612717565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b69ffffffffffffffffffff602083901c166001600160701b03831665ffffffffffff604085901c8116908416811115611ff857828282611ffc565b815f805b9250925092509250925092565b5f65ffffffffffff82111561203b576040516306dfcc6560e41b81526030600482015260248101839052604401610840565b5090565b80511561204f5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b50565b6001600160a01b0381168114612068575f80fd5b5f8083601f84011261208f575f80fd5b5081356001600160401b038111156120a5575f80fd5b6020830191508360208260051b8501011115610ddf575f80fd5b80356001600160401b03811681146120d5575f80fd5b919050565b5f805f80606085870312156120ed575f80fd5b84356120f88161206b565b935060208501356001600160401b03811115612112575f80fd5b61211e8782880161207f565b90945092506121319050604086016120bf565b905092959194509250565b5f6020828403121561214c575f80fd5b6108f5826120bf565b5f8060408385031215612166575f80fd5b82356121718161206b565b915060208301358015158114612185575f80fd5b809150509250929050565b5f80604083850312156121a1575f80fd5b82356121ac8161206b565b915060208301356121858161206b565b5f8083601f8401126121cc575f80fd5b5081356001600160401b038111156121e2575f80fd5b602083019150836020828501011115610ddf575f80fd5b5f805f6040848603121561220b575f80fd5b83356122168161206b565b925060208401356001600160401b03811115612230575f80fd5b61223c868287016121bc565b9497909650939450505050565b803563ffffffff811681146120d5575f80fd5b5f805f6060848603121561226e575f80fd5b612277846120bf565b925060208401356122878161206b565b915061229560408501612249565b90509250925092565b5f80604083850312156122af575f80fd5b6121ac836120bf565b5f80604083850312156122c9575f80fd5b6122d2836120bf565b91506122e0602084016120bf565b90509250929050565b5f602082840312156122f9575f80fd5b5035919050565b5f60208284031215612310575f80fd5b81356108f58161206b565b6001600160e01b031981168114612068575f80fd5b5f8060408385031215612341575f80fd5b823561234c8161206b565b915060208301356121858161231b565b5f805f6040848603121561236e575f80fd5b612216846120bf565b5f8060408385031215612388575f80fd5b612391836120bf565b91506122e060208401612249565b5f805f80606085870312156123b2575f80fd5b84356123bd8161206b565b935060208501356123cd8161206b565b925060408501356001600160401b038111156123e7575f80fd5b6123f3878288016121bc565b95989497509550505050565b5f8060208385031215612410575f80fd5b82356001600160401b03811115612425575f80fd5b6124318582860161207f565b90969095509350505050565b5f5b8381101561245757818101518382015260200161243f565b50505f910152565b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b828110156124ca57878503603f19018452815180518087526124ab818989018a850161243d565b601f01601f191695909501860194509285019290850190600101612484565b5092979650505050505050565b5f805f606084860312156124e9575f80fd5b83356124f48161206b565b925060208401356125048161206b565b915060408401356125148161231b565b809150509250925092565b5f8060408385031215612530575f80fd5b82356123918161206b565b5f805f806060858703121561254e575f80fd5b84356125598161206b565b935060208501356001600160401b03811115612573575f80fd5b61257f878288016121bc565b909450925050604085013565ffffffffffff8116811461259d575f80fd5b939692955090935050565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156125cc575f80fd5b81356108f58161231b565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f6126126020830184866125d7565b949350505050565b5f6020828403121561262a575f80fd5b81516108f58161231b565b6001600160a01b038581168252841660208201526060604082018190525f9061147a90830184866125d7565b634e487b7160e01b5f52601160045260245ffd5b5f8085851115612683575f80fd5b8386111561268f575f80fd5b5050820193919092039150565b634e487b7160e01b5f52604160045260245ffd5b5f808335601e198436030181126126c5575f80fd5b8301803591506001600160401b038211156126de575f80fd5b602001915036819003821315610ddf575f80fd5b828482375f8382015f8152835161270d81836020880161243d565b0195945050505050565b65ffffffffffff81811683821601908082111561273657612736612661565b5092915050565b65ffffffffffff861681526001600160a01b038581166020830152841660408201526080606082018190525f9061277790830184866125d7565b979650505050505050565b6001600160e01b03198135818116916004851015610ccd5760049490940360031b84901b1690921692915050565b5f82516127c181846020870161243d565b9190910192915050565b63ffffffff8281168282160390808211156127365761273661266156fea264697066735822122056f8f948b87ac2322606bbc3ce503d34598d2eef53593cb2ed015f3412bda58d64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x6080604052600436106101db575f3560e01c80636d5115bd116100fd578063b700961311610092578063d22b598911610062578063d22b598914610636578063d6bb62c614610655578063f801a69814610674578063fe0776f5146106ad575f80fd5b8063b7009613146105a8578063b7d2b162146105e3578063cc1b6c8114610602578063d1f856ee14610617575f80fd5b8063a166aa89116100cd578063a166aa8914610501578063a64d95ce14610530578063abd9bd2a1461054f578063ac9650d81461057c575f80fd5b80636d5115bd1461049157806375b238fc146104b0578063853551b8146104c357806394c7d7ee146104e2575f80fd5b806330cae187116101735780634665096d116101435780634665096d146104035780634c1da1e2146104185780635296295214610437578063530dd45614610456575f80fd5b806330cae1871461035c5780633adc277a1461037b5780633ca7c02a146103b15780634136a33c146103cb575f80fd5b806318ff183c116101ae57806318ff183c146102b25780631cff79cd146102d157806325c471a0146102e45780633078f11414610303575f80fd5b806308d6122d146101df5780630b0a93ba1461020057806312be87271461025f578063167bd39514610293575b5f80fd5b3480156101ea575f80fd5b506101fe6101f93660046120da565b6106cc565b005b34801561020b575f80fd5b5061024261021a36600461213c565b6001600160401b039081165f9081526001602081905260409091200154600160401b90041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561026a575f80fd5b5061027e61027936600461213c565b61071e565b60405163ffffffff9091168152602001610256565b34801561029e575f80fd5b506101fe6102ad366004612155565b610758565b3480156102bd575f80fd5b506101fe6102cc366004612190565b61076e565b61027e6102df3660046121f9565b6107d0565b3480156102ef575f80fd5b506101fe6102fe36600461225c565b6108fc565b34801561030e575f80fd5b5061032261031d36600461229e565b61091e565b604051610256949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b348015610367575f80fd5b506101fe6103763660046122b8565b610982565b348015610386575f80fd5b5061039a6103953660046122e9565b610994565b60405165ffffffffffff9091168152602001610256565b3480156103bc575f80fd5b506102426001600160401b0381565b3480156103d6575f80fd5b5061027e6103e53660046122e9565b5f90815260026020526040902054600160301b900463ffffffff1690565b34801561040e575f80fd5b5062093a8061027e565b348015610423575f80fd5b5061027e610432366004612300565b6109c5565b348015610442575f80fd5b506101fe6104513660046122b8565b6109f2565b348015610461575f80fd5b5061024261047036600461213c565b6001600160401b039081165f90815260016020819052604090912001541690565b34801561049c575f80fd5b506102426104ab366004612330565b610a04565b3480156104bb575f80fd5b506102425f81565b3480156104ce575f80fd5b506101fe6104dd36600461235c565b610a3e565b3480156104ed575f80fd5b506101fe6104fc3660046121f9565b610ad5565b34801561050c575f80fd5b5061052061051b366004612300565b610b7f565b6040519015158152602001610256565b34801561053b575f80fd5b506101fe61054a366004612377565b610ba6565b34801561055a575f80fd5b5061056e61056936600461239f565b610bb8565b604051908152602001610256565b348015610587575f80fd5b5061059b6105963660046123ff565b610bf0565b604051610256919061245f565b3480156105b3575f80fd5b506105c76105c23660046124d7565b610cd5565b60408051921515835263ffffffff909116602083015201610256565b3480156105ee575f80fd5b506101fe6105fd36600461229e565b610d56565b34801561060d575f80fd5b506206978061027e565b348015610622575f80fd5b506105c761063136600461229e565b610d6d565b348015610641575f80fd5b506101fe61065036600461251f565b610de6565b348015610660575f80fd5b5061027e61066f36600461239f565b610df8565b34801561067f575f80fd5b5061069361068e36600461253b565b610f4b565b6040805192835263ffffffff909116602083015201610256565b3480156106b8575f80fd5b506101fe6106c736600461229e565b61108c565b6106d46110b5565b5f5b828110156107175761070f858585848181106106f4576106f46125a8565b905060200201602081019061070991906125bc565b8461112c565b6001016106d6565b5050505050565b6001600160401b0381165f9081526001602081905260408220015461075290600160801b90046001600160701b03166111ad565b92915050565b6107606110b5565b61076a82826111cb565b5050565b6107766110b5565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b906024015f604051808303815f87803b1580156107b6575f80fd5b505af11580156107c8573d5f803e3d5ffd5b505050505050565b5f3381806107e08388888861123c565b91509150811580156107f6575063ffffffff8116155b15610849578287610807888861128d565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b5f61085684898989610bb8565b90505f63ffffffff831615158061087c575061087182610994565b65ffffffffffff1615155b1561088d5761088a826112a4565b90505b6003546108a38a61089e8b8b61128d565b6113a2565b6003819055506108ea8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152503492506113e4915050565b506003559450505050505b9392505050565b6109046110b5565b61091883836109128661071e565b84611484565b50505050565b6001600160401b0382165f9081526001602090815260408083206001600160a01b03851684529091528120805465ffffffffffff81169291829182919061097490600160301b90046001600160701b03166116ca565b969991985096509350505050565b61098a6110b5565b61076a82826116eb565b5f8181526002602052604081205465ffffffffffff166109b38161178e565b6109bd57806108f5565b5f9392505050565b6001600160a01b0381165f90815260208190526040812060010154610752906001600160701b03166111ad565b6109fa6110b5565b61076a82826117bc565b6001600160a01b0382165f908152602081815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b610a466110b5565b6001600160401b0383161580610a6457506001600160401b03838116145b15610a8d5760405163061c6a4360e21b81526001600160401b0384166004820152602401610840565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051610ac89291906125ff565b60405180910390a2505050565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa158015610b14573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b38919061261a565b6001600160e01b03191614610b6b57604051630641fee960e31b81526001600160a01b0382166004820152602401610840565b610717610b7a85838686610bb8565b6112a4565b6001600160a01b03165f90815260208190526040902060010154600160701b900460ff1690565b610bae6110b5565b61076a828261186d565b5f84848484604051602001610bd09493929190612635565b604051602081830303815290604052805190602001209050949350505050565b604080515f815260208101909152606090826001600160401b03811115610c1957610c1961269c565b604051908082528060200260200182016040528015610c4c57816020015b6060815260200190600190039081610c375790505b5091505f5b83811015610ccd57610ca830868684818110610c6f57610c6f6125a8565b9050602002810190610c8191906126b0565b85604051602001610c94939291906126f2565b60405160208183030381529060405261197c565b838281518110610cba57610cba6125a8565b6020908102919091010152600101610c51565b505092915050565b5f80610ce084610b7f565b15610cef57505f905080610d4e565b306001600160a01b03861603610d1357610d0984846119ee565b5f91509150610d4e565b5f610d1e8585610a04565b90505f80610d2c8389610d6d565b9150915081610d3c575f80610d46565b63ffffffff811615815b945094505050505b935093915050565b610d5e6110b5565b610d688282611a04565b505050565b5f8067fffffffffffffffe196001600160401b03851601610d935750600190505f610ddf565b5f80610d9f868661091e565b5050915091508165ffffffffffff165f14158015610dd45750610dc0611aed565b65ffffffffffff168265ffffffffffff1611155b93509150610ddf9050565b9250929050565b610dee6110b5565b61076a8282611afc565b5f3381610e05858561128d565b90505f610e1488888888610bb8565b5f8181526002602052604081205491925065ffffffffffff9091169003610e515760405163060a299b60e41b815260048101829052602401610840565b826001600160a01b0316886001600160a01b031614610eea575f610e755f85610d6d565b5090505f610e8f610e8961021a8b87610a04565b86610d6d565b50905081158015610e9e575080155b15610ee757604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b031985166064820152608401610840565b50505b5f81815260026020526040808220805465ffffffffffff1916908190559051600160301b90910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b5f803381610f5b8289898961123c565b9150505f8163ffffffff16610f6e611aed565b610f789190612717565b905063ffffffff82161580610fae57505f8665ffffffffffff16118015610fae57508065ffffffffffff168665ffffffffffff16105b15610fbf5782896108078a8a61128d565b610fd98665ffffffffffff168265ffffffffffff16611bb7565b9550610fe7838a8a8a610bb8565b9450610ff285611bc6565b5f8581526002602052604090819020805465ffffffffffff891669ffffffffffffffffffff19821617600160301b9182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b490611078908a9088908f908f908f9061273d565b60405180910390a350505094509492505050565b6001600160a01b0381163314610d5e57604051635f159e6360e01b815260040160405180910390fd5b335f806110c3838236611c12565b9150915081610d68578063ffffffff165f0361111d575f6110e48136611cd5565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b03821660248201529092506044019050610840565b610918610b7a84305f36610bb8565b6001600160a01b0383165f818152602081815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b5f806111c1836001600160701b03166116ca565b5090949350505050565b6001600160a01b0382165f81815260208190526040908190206001018054841515600160701b0260ff60701b19909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb1389061123090841515815260200190565b60405180910390a25050565b5f80306001600160a01b0386160361126257611259868585611c12565b91509150611284565b6004831061127e5761127986866105c2878761128d565b611259565b505f9050805b94509492505050565b5f61129b6004828486612675565b6108f591612782565b5f8181526002602052604081205465ffffffffffff811690600160301b900463ffffffff168183036112ec5760405163060a299b60e41b815260048101859052602401610840565b6112f4611aed565b65ffffffffffff168265ffffffffffff16111561132757604051630c65b5bd60e11b815260048101859052602401610840565b6113308261178e565b1561135157604051631e2975b960e21b815260048101859052602401610840565b5f84815260026020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b6060814710156114105760405163cf47918160e01b815247600482015260248101839052604401610840565b5f80856001600160a01b0316848660405161142b91906127b0565b5f6040518083038185875af1925050503d805f8114611465576040519150601f19603f3d011682016040523d82523d5f602084013e61146a565b606091505b509150915061147a868383611ebb565b9695505050505050565b5f67fffffffffffffffe196001600160401b038616016114c25760405163061c6a4360e21b81526001600160401b0386166004820152602401610840565b6001600160401b0385165f9081526001602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156115b2578463ffffffff1661150d611aed565b6115179190612717565b905060405180604001604052808265ffffffffffff1681526020016115458663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b0389165f9081526001602090815260408083206001600160a01b038c1684528252909120835181549490920151909216600160301b026001600160a01b031990931665ffffffffffff9091161791909117905561165c565b6001600160401b0387165f9081526001602090815260408083206001600160a01b038a1684529091528120546115fb91600160301b9091046001600160701b0316908690611f17565b6001600160401b0389165f9081526001602090815260408083206001600160a01b038c168452909152902080546001600160701b03909316600160301b0273ffffffffffffffffffffffffffff000000000000199093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b5f805f6116de846116d9611aed565b611fbd565b9250925092509193909250565b6001600160401b038216158061170957506001600160401b03828116145b156117325760405163061c6a4360e21b81526001600160401b0383166004820152602401610840565b6001600160401b038281165f818152600160208190526040808320909101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b5f611797611aed565b65ffffffffffff166117ac62093a8084612717565b65ffffffffffff16111592915050565b6001600160401b03821615806117da57506001600160401b03828116145b156118035760405163061c6a4360e21b81526001600160401b0383166004820152602401610840565b6001600160401b038281165f81815260016020819052604080832090910180546fffffffffffffffff00000000000000001916600160401b958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b67fffffffffffffffe196001600160401b038316016118aa5760405163061c6a4360e21b81526001600160401b0383166004820152602401610840565b6001600160401b0382165f908152600160208190526040822001546118e390600160801b90046001600160701b03168362069780611f17565b6001600160401b0385165f818152600160208190526040918290200180546001600160701b03909516600160801b026dffffffffffffffffffffffffffff60801b199095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890610ac8908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b60605f80846001600160a01b03168460405161199891906127b0565b5f60405180830381855af49150503d805f81146119d0576040519150601f19603f3d011682016040523d82523d5f602084013e6119d5565b606091505b50915091506119e5858383611ebb565b95945050505050565b5f6119f983836113a2565b600354149392505050565b5f67fffffffffffffffe196001600160401b03841601611a425760405163061c6a4360e21b81526001600160401b0384166004820152602401610840565b6001600160401b0383165f9081526001602090815260408083206001600160a01b038616845290915281205465ffffffffffff169003611a8357505f610752565b6001600160401b0383165f8181526001602090815260408083206001600160a01b038716808552925280832080546001600160a01b0319169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b5f611af742612009565b905090565b6001600160a01b0382165f90815260208190526040812060010154611b2e906001600160701b03168362069780611f17565b6001600160a01b0385165f818152602081815260409182902060010180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101610ac8565b5f8282188284110282186108f5565b5f8181526002602052604090205465ffffffffffff168015801590611bf15750611bef8161178e565b155b1561076a5760405163813e945960e01b815260048101839052602401610840565b5f806004831015611c2757505f905080610d4e565b306001600160a01b03861603611c4a57610d0930611c45868661128d565b6119ee565b5f805f611c578787611cd5565b92509250925082158015611c6f5750611c6f30610b7f565b15611c82575f8094509450505050610d4e565b5f80611c8e848b610d6d565b9150915081611ca7575f80965096505050505050610d4e565b611cbd8363ffffffff168263ffffffff16611bb7565b63ffffffff8116159b909a5098505050505050505050565b5f80806004841015611cee57505f915081905080611eb4565b5f611cf9868661128d565b90506001600160e01b031981166310a6aa3760e31b1480611d2a57506001600160e01b031981166330cae18760e01b145b80611d4557506001600160e01b0319811663294b14a960e11b145b80611d6057506001600160e01b03198116635326cae760e11b145b80611d7b57506001600160e01b0319811663d22b598960e01b145b15611d905760015f8093509350935050611eb4565b6001600160e01b0319811663063fc60f60e21b1480611dbf57506001600160e01b0319811663167bd39560e01b145b80611dda57506001600160e01b031981166308d6122d60e01b145b15611e19575f611dee60246004888a612675565b810190611dfb9190612300565b90505f611e07826109c5565b600196505f95509350611eb492505050565b6001600160e01b0319811663012e238d60e51b1480611e4857506001600160e01b03198116635be958b160e11b145b15611ea0575f611e5c60246004888a612675565b810190611e69919061213c565b90506001611e92826001600160401b039081165f90815260016020819052604090912001541690565b5f9450945094505050611eb4565b5f611eab3083610a04565b5f935093509350505b9250925092565b606082611ed057611ecb8261203f565b6108f5565b8151158015611ee757506001600160a01b0384163b155b15611f1057604051639996b31560e01b81526001600160a01b0385166004820152602401610840565b50806108f5565b5f805f611f2c866001600160701b03166111ad565b90505f611f678563ffffffff168763ffffffff168463ffffffff1611611f52575f611f5c565b611f5c88856127cb565b63ffffffff16611bb7565b90508063ffffffff16611f78611aed565b611f829190612717565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b69ffffffffffffffffffff602083901c166001600160701b03831665ffffffffffff604085901c8116908416811115611ff857828282611ffc565b815f805b9250925092509250925092565b5f65ffffffffffff82111561203b576040516306dfcc6560e41b81526030600482015260248101839052604401610840565b5090565b80511561204f5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b50565b6001600160a01b0381168114612068575f80fd5b5f8083601f84011261208f575f80fd5b5081356001600160401b038111156120a5575f80fd5b6020830191508360208260051b8501011115610ddf575f80fd5b80356001600160401b03811681146120d5575f80fd5b919050565b5f805f80606085870312156120ed575f80fd5b84356120f88161206b565b935060208501356001600160401b03811115612112575f80fd5b61211e8782880161207f565b90945092506121319050604086016120bf565b905092959194509250565b5f6020828403121561214c575f80fd5b6108f5826120bf565b5f8060408385031215612166575f80fd5b82356121718161206b565b915060208301358015158114612185575f80fd5b809150509250929050565b5f80604083850312156121a1575f80fd5b82356121ac8161206b565b915060208301356121858161206b565b5f8083601f8401126121cc575f80fd5b5081356001600160401b038111156121e2575f80fd5b602083019150836020828501011115610ddf575f80fd5b5f805f6040848603121561220b575f80fd5b83356122168161206b565b925060208401356001600160401b03811115612230575f80fd5b61223c868287016121bc565b9497909650939450505050565b803563ffffffff811681146120d5575f80fd5b5f805f6060848603121561226e575f80fd5b612277846120bf565b925060208401356122878161206b565b915061229560408501612249565b90509250925092565b5f80604083850312156122af575f80fd5b6121ac836120bf565b5f80604083850312156122c9575f80fd5b6122d2836120bf565b91506122e0602084016120bf565b90509250929050565b5f602082840312156122f9575f80fd5b5035919050565b5f60208284031215612310575f80fd5b81356108f58161206b565b6001600160e01b031981168114612068575f80fd5b5f8060408385031215612341575f80fd5b823561234c8161206b565b915060208301356121858161231b565b5f805f6040848603121561236e575f80fd5b612216846120bf565b5f8060408385031215612388575f80fd5b612391836120bf565b91506122e060208401612249565b5f805f80606085870312156123b2575f80fd5b84356123bd8161206b565b935060208501356123cd8161206b565b925060408501356001600160401b038111156123e7575f80fd5b6123f3878288016121bc565b95989497509550505050565b5f8060208385031215612410575f80fd5b82356001600160401b03811115612425575f80fd5b6124318582860161207f565b90969095509350505050565b5f5b8381101561245757818101518382015260200161243f565b50505f910152565b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b828110156124ca57878503603f19018452815180518087526124ab818989018a850161243d565b601f01601f191695909501860194509285019290850190600101612484565b5092979650505050505050565b5f805f606084860312156124e9575f80fd5b83356124f48161206b565b925060208401356125048161206b565b915060408401356125148161231b565b809150509250925092565b5f8060408385031215612530575f80fd5b82356123918161206b565b5f805f806060858703121561254e575f80fd5b84356125598161206b565b935060208501356001600160401b03811115612573575f80fd5b61257f878288016121bc565b909450925050604085013565ffffffffffff8116811461259d575f80fd5b939692955090935050565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156125cc575f80fd5b81356108f58161231b565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f6126126020830184866125d7565b949350505050565b5f6020828403121561262a575f80fd5b81516108f58161231b565b6001600160a01b038581168252841660208201526060604082018190525f9061147a90830184866125d7565b634e487b7160e01b5f52601160045260245ffd5b5f8085851115612683575f80fd5b8386111561268f575f80fd5b5050820193919092039150565b634e487b7160e01b5f52604160045260245ffd5b5f808335601e198436030181126126c5575f80fd5b8301803591506001600160401b038211156126de575f80fd5b602001915036819003821315610ddf575f80fd5b828482375f8382015f8152835161270d81836020880161243d565b0195945050505050565b65ffffffffffff81811683821601908082111561273657612736612661565b5092915050565b65ffffffffffff861681526001600160a01b038581166020830152841660408201526080606082018190525f9061277790830184866125d7565b979650505050505050565b6001600160e01b03198135818116916004851015610ccd5760049490940360031b84901b1690921692915050565b5f82516127c181846020870161243d565b9190910192915050565b63ffffffff8281168282160390808211156127365761273661266156fea264697066735822122056f8f948b87ac2322606bbc3ce503d34598d2eef53593cb2ed015f3412bda58d64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Address.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Address\",\n  \"sourceName\": \"contracts/utils/Address.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209fe118398556d510ac40f44e7ca734581da095544d9875b4249bdcba9cd96c4c64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209fe118398556d510ac40f44e7ca734581da095544d9875b4249bdcba9cd96c4c64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Arrays.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Arrays\",\n  \"sourceName\": \"contracts/utils/Arrays.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e2a43b305370637c0e72a712b97be4e82ddabe0a05b5a79db89595c8f384825b64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e2a43b305370637c0e72a712b97be4e82ddabe0a05b5a79db89595c8f384825b64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/AuthorityUtils.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"AuthorityUtils\",\n  \"sourceName\": \"contracts/access/manager/AuthorityUtils.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220afa71a02bee64c1b40db7b593038b137c8028fee4e73cc4cb6c6c3502850168364736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220afa71a02bee64c1b40db7b593038b137c8028fee4e73cc4cb6c6c3502850168364736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Base64.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Base64\",\n  \"sourceName\": \"contracts/utils/Base64.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122059ee73e8b5e0210337b4c01c3d1c3ad448e5d23a44aa6ffc8d87dae6ae184e9064736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122059ee73e8b5e0210337b4c01c3d1c3ad448e5d23a44aa6ffc8d87dae6ae184e9064736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/BeaconProxy.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"BeaconProxy\",\n  \"sourceName\": \"contracts/proxy/beacon/BeaconProxy.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"beacon\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"beacon\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidBeacon\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidImplementation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC1967NonPayable\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"beacon\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"BeaconUpgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"fallback\"\n    }\n  ],\n  \"bytecode\": \"0x60a060405260405161059738038061059783398101604081905261002291610376565b61002c828261003e565b506001600160a01b0316608052610465565b610047826100fb565b6040516001600160a01b038316907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e905f90a28051156100ef576100ea826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100e49190610431565b82610209565b505050565b6100f761027c565b5050565b806001600160a01b03163b5f0361013557604051631933b43b60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b807fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392831617905560408051635c60da1b60e01b815290515f92841691635c60da1b9160048083019260209291908290030181865afa1580156101ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101d29190610431565b9050806001600160a01b03163b5f036100f757604051634c9c8ce360e01b81526001600160a01b038216600482015260240161012c565b60605f80846001600160a01b031684604051610225919061044a565b5f60405180830381855af49150503d805f811461025d576040519150601f19603f3d011682016040523d82523d5f602084013e610262565b606091505b50909250905061027385838361029d565b95945050505050565b341561029b5760405163b398979f60e01b815260040160405180910390fd5b565b6060826102b2576102ad826102fc565b6102f5565b81511580156102c957506001600160a01b0384163b155b156102f257604051639996b31560e01b81526001600160a01b038516600482015260240161012c565b50805b9392505050565b80511561030c5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b80516001600160a01b038116811461033b575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f5b8381101561036e578181015183820152602001610356565b50505f910152565b5f8060408385031215610387575f80fd5b61039083610325565b60208401519092506001600160401b03808211156103ac575f80fd5b818501915085601f8301126103bf575f80fd5b8151818111156103d1576103d1610340565b604051601f8201601f19908116603f011681019083821181831017156103f9576103f9610340565b81604052828152886020848701011115610411575f80fd5b610422836020830160208801610354565b80955050505050509250929050565b5f60208284031215610441575f80fd5b6102f582610325565b5f825161045b818460208701610354565b9190910192915050565b60805161011b61047c5f395f601d015261011b5ff3fe6080604052600a600c565b005b60186014601a565b609d565b565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156076573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906098919060ba565b905090565b365f80375f80365f845af43d5f803e80801560b6573d5ff35b3d5ffd5b5f6020828403121560c9575f80fd5b81516001600160a01b038116811460de575f80fd5b939250505056fea2646970667358221220f913552e701febc2c478824f6cadf9f2f1eeaacbb72a3e1d2b969b5c302af15f64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x6080604052600a600c565b005b60186014601a565b609d565b565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156076573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906098919060ba565b905090565b365f80375f80365f845af43d5f803e80801560b6573d5ff35b3d5ffd5b5f6020828403121560c9575f80fd5b81516001600160a01b038116811460de575f80fd5b939250505056fea2646970667358221220f913552e701febc2c478824f6cadf9f2f1eeaacbb72a3e1d2b969b5c302af15f64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/BitMaps.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"BitMaps\",\n  \"sourceName\": \"contracts/utils/structs/BitMaps.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220da3993ad2160ca1a592a7d641890dfb983a7b0cb2a7a6508daf03a4ec48e18b664736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220da3993ad2160ca1a592a7d641890dfb983a7b0cb2a7a6508daf03a4ec48e18b664736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Checkpoints.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Checkpoints\",\n  \"sourceName\": \"contracts/utils/structs/Checkpoints.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"CheckpointUnorderedInsertion\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202e2e3bfb8b8a0549a6f30098459c9752b38969bc026a73cb7029d4b1dca7f62264736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202e2e3bfb8b8a0549a6f30098459c9752b38969bc026a73cb7029d4b1dca7f62264736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/CircularBuffer.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"CircularBuffer\",\n  \"sourceName\": \"contracts/utils/structs/CircularBuffer.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidBufferSize\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200bff15853473c498ae173fe23a0e2355f5e3241dee005d1b5ebdd54c2c5be7c864736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200bff15853473c498ae173fe23a0e2355f5e3241dee005d1b5ebdd54c2c5be7c864736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Clones.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Clones\",\n  \"sourceName\": \"contracts/proxy/Clones.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220651bda1390a94679b7cd917d09e89c649824ced0f0b30dad786cecf5ccb33af564736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220651bda1390a94679b7cd917d09e89c649824ced0f0b30dad786cecf5ccb33af564736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Comparators.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Comparators\",\n  \"sourceName\": \"contracts/utils/Comparators.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201460424865a204a0081e856e80107052584b78f95066e73c995bdd6e54c7237164736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201460424865a204a0081e856e80107052584b78f95066e73c995bdd6e54c7237164736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Context.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Context\",\n  \"sourceName\": \"contracts/utils/Context.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Create2.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Create2\",\n  \"sourceName\": \"contracts/utils/Create2.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"Create2EmptyBytecode\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122075fd4ae0362763b90f9fd508910184655855a7cc7f610274115c0e03eb70b02d64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122075fd4ae0362763b90f9fd508910184655855a7cc7f610274115c0e03eb70b02d64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/DoubleEndedQueue.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"DoubleEndedQueue\",\n  \"sourceName\": \"contracts/utils/structs/DoubleEndedQueue.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220c40900afaa34ea372a4e6a388f4f274cf97299d3443950eb1d47939b6c50bd6464736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220c40900afaa34ea372a4e6a388f4f274cf97299d3443950eb1d47939b6c50bd6464736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ECDSA.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ECDSA\",\n  \"sourceName\": \"contracts/utils/cryptography/ECDSA.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"ECDSAInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"length\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureS\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e89cd2162008caf70e5f75f1508efb42247af19c9e631fce751e038839e005ea64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e89cd2162008caf70e5f75f1508efb42247af19c9e631fce751e038839e005ea64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/EIP712.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"EIP712\",\n  \"sourceName\": \"contracts/utils/cryptography/EIP712.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155\",\n  \"sourceName\": \"contracts/token/ERC1155/ERC1155.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"idsLength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"valuesLength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidArrayLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155MissingApprovalForAll\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"uri\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155Burnable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155Burnable\",\n  \"sourceName\": \"contracts/token/ERC1155/extensions/ERC1155Burnable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"idsLength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"valuesLength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidArrayLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155MissingApprovalForAll\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"burnBatch\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"uri\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155Holder.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155Holder\",\n  \"sourceName\": \"contracts/token/ERC1155/utils/ERC1155Holder.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155Pausable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155Pausable\",\n  \"sourceName\": \"contracts/token/ERC1155/extensions/ERC1155Pausable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"idsLength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"valuesLength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidArrayLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155MissingApprovalForAll\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EnforcedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ExpectedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Paused\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Unpaused\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"paused\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"uri\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155Supply.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155Supply\",\n  \"sourceName\": \"contracts/token/ERC1155/extensions/ERC1155Supply.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"idsLength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"valuesLength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidArrayLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155MissingApprovalForAll\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"exists\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"uri\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155URIStorage.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155URIStorage\",\n  \"sourceName\": \"contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"idsLength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"valuesLength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidArrayLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155MissingApprovalForAll\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"uri\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1155Utils.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1155Utils\",\n  \"sourceName\": \"contracts/token/ERC1155/utils/ERC1155Utils.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205982cb5fcd8921378f2a70b48f3782a114729f42080308828de367cacb7e045564736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205982cb5fcd8921378f2a70b48f3782a114729f42080308828de367cacb7e045564736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1363.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1363\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC1363.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1363ApproveFailed\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1363InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1363InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1363TransferFailed\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1363TransferFromFailed\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approveAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"approveAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"transferAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"transferFromAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFromAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1363Utils.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1363Utils\",\n  \"sourceName\": \"contracts/token/ERC20/utils/ERC1363Utils.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1363InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1363InvalidSpender\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208b0a0513d45a44ff54f50da2e338f9f98da0d28fd8b3a9060175b9e8625c6c3164736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208b0a0513d45a44ff54f50da2e338f9f98da0d28fd8b3a9060175b9e8625c6c3164736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC165.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC165\",\n  \"sourceName\": \"contracts/utils/introspection/ERC165.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC165Checker.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC165Checker\",\n  \"sourceName\": \"contracts/utils/introspection/ERC165Checker.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a79100f81433811ae317ec9da94c09560486f3f0a0e710ab0b0529b58616717c64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a79100f81433811ae317ec9da94c09560486f3f0a0e710ab0b0529b58616717c64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1967Proxy.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1967Proxy\",\n  \"sourceName\": \"contracts/proxy/ERC1967/ERC1967Proxy.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidImplementation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC1967NonPayable\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Upgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"fallback\"\n    }\n  ],\n  \"bytecode\": \"0x60806040526040516103f03803806103f08339810160408190526100229161025e565b61002c8282610033565b5050610341565b61003c82610091565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561008557610080828261010c565b505050565b61008d61017f565b5050565b806001600160a01b03163b5f036100cb57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b0316846040516101289190610326565b5f60405180830381855af49150503d805f8114610160576040519150601f19603f3d011682016040523d82523d5f602084013e610165565b606091505b5090925090506101768583836101a0565b95945050505050565b341561019e5760405163b398979f60e01b815260040160405180910390fd5b565b6060826101b5576101b0826101ff565b6101f8565b81511580156101cc57506001600160a01b0384163b155b156101f557604051639996b31560e01b81526001600160a01b03851660048201526024016100c2565b50805b9392505050565b80511561020f5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b5f5b8381101561025657818101518382015260200161023e565b50505f910152565b5f806040838503121561026f575f80fd5b82516001600160a01b0381168114610285575f80fd5b60208401519092506001600160401b03808211156102a1575f80fd5b818501915085601f8301126102b4575f80fd5b8151818111156102c6576102c6610228565b604051601f8201601f19908116603f011681019083821181831017156102ee576102ee610228565b81604052828152886020848701011115610306575f80fd5b61031783602083016020880161023c565b80955050505050509250929050565b5f825161033781846020870161023c565b9190910192915050565b60a38061034d5f395ff3fe6080604052600a600c565b005b60186014601a565b6050565b565b5f604b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e8080156069573d5ff35b3d5ffdfea2646970667358221220e857dce8350eccf268520120b1b1f7f60c3d6703dbb17de4ecf80408371368ed64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x6080604052600a600c565b005b60186014601a565b6050565b565b5f604b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e8080156069573d5ff35b3d5ffdfea2646970667358221220e857dce8350eccf268520120b1b1f7f60c3d6703dbb17de4ecf80408371368ed64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC1967Utils.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC1967Utils\",\n  \"sourceName\": \"contracts/proxy/ERC1967/ERC1967Utils.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"admin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidAdmin\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"beacon\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidBeacon\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidImplementation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC1967NonPayable\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e69fd346017ba68af8ea41f04d6280534275d1f01a2c572f5f8c814fb2c5253464736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e69fd346017ba68af8ea41f04d6280534275d1f01a2c572f5f8c814fb2c5253464736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20\",\n  \"sourceName\": \"contracts/token/ERC20/ERC20.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20Burnable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20Burnable\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20Burnable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burnFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20Capped.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20Capped\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20Capped.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"increasedSupply\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"cap\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20ExceededCap\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"cap\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InvalidCap\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"cap\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20FlashMint.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20FlashMint\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20FlashMint.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"maxLoan\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC3156ExceededMaxLoan\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC3156InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC3156UnsupportedToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"flashFee\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC3156FlashBorrower\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"flashLoan\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxFlashLoan\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20Pausable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20Pausable\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20Pausable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EnforcedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ExpectedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Paused\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Unpaused\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"paused\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20Permit.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20Permit\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20Permit.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"ECDSAInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"length\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureS\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC2612ExpiredSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"signer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2612InvalidSigner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DOMAIN_SEPARATOR\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"permit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20TemporaryApproval.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20TemporaryApproval\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/draft-ERC20TemporaryApproval.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"temporaryApprove\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20Votes.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20Votes\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20Votes.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"CheckpointUnorderedInsertion\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ECDSAInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"length\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureS\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"increasedSupply\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"cap\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20ExceededSafeSupply\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"clock\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"ERC5805FutureLookup\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC6372InconsistentClock\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotesExpiredSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromDelegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toDelegate\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DelegateChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"previousVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DelegateVotesChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"pos\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"checkpoints\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint48\",\n              \"name\": \"_key\",\n              \"type\": \"uint48\"\n            },\n            {\n              \"internalType\": \"uint208\",\n              \"name\": \"_value\",\n              \"type\": \"uint208\"\n            }\n          ],\n          \"internalType\": \"struct Checkpoints.Checkpoint208\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"delegateBySig\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegates\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastTotalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"numCheckpoints\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC20Wrapper.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC20Wrapper\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC20Wrapper.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidUnderlying\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"SafeERC20FailedOperation\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"depositFor\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"underlying\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"withdrawTo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC2771Context.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC2771Context\",\n  \"sourceName\": \"contracts/metatx/ERC2771Context.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"forwarder\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isTrustedForwarder\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"trustedForwarder\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC2771Forwarder.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC2771Forwarder\",\n  \"sourceName\": \"contracts/metatx/ERC2771Forwarder.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"deadline\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"ERC2771ForwarderExpiredRequest\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"signer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2771ForwarderInvalidSigner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"requestedValue\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"msgValue\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC2771ForwarderMismatchedValue\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"forwarder\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2771UntrustfulTarget\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"signer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"success\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ExecutedForwardRequest\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"from\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"to\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"value\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"gas\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint48\",\n              \"name\": \"deadline\",\n              \"type\": \"uint48\"\n            },\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"data\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"signature\",\n              \"type\": \"bytes\"\n            }\n          ],\n          \"internalType\": \"struct ERC2771Forwarder.ForwardRequestData\",\n          \"name\": \"request\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"from\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"to\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"value\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"gas\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint48\",\n              \"name\": \"deadline\",\n              \"type\": \"uint48\"\n            },\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"data\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"signature\",\n              \"type\": \"bytes\"\n            }\n          ],\n          \"internalType\": \"struct ERC2771Forwarder.ForwardRequestData[]\",\n          \"name\": \"requests\",\n          \"type\": \"tuple[]\"\n        },\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"refundReceiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"executeBatch\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"from\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"to\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"value\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"gas\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint48\",\n              \"name\": \"deadline\",\n              \"type\": \"uint48\"\n            },\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"data\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"signature\",\n              \"type\": \"bytes\"\n            }\n          ],\n          \"internalType\": \"struct ERC2771Forwarder.ForwardRequestData\",\n          \"name\": \"request\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"verify\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"\",\n  \"deployedBytecode\": \"0x608060405260043610610049575f3560e01c806319d8d38c1461004d5780637ecebe001461008157806384b0196e146100c3578063ccf96b4a146100ea578063df905caf146100ff575b5f80fd5b348015610058575f80fd5b5061006c610067366004610bba565b610112565b60405190151581526020015b60405180910390f35b34801561008c575f80fd5b506100b561009b366004610c0c565b6001600160a01b03165f9081526002602052604090205490565b604051908152602001610078565b3480156100ce575f80fd5b506100d7610142565b6040516100789796959493929190610c6a565b6100fd6100f8366004610d01565b610184565b005b6100fd61010d366004610bba565b610289565b5f805f8061011f856102e4565b509250925092508280156101305750815b80156101395750805b95945050505050565b5f6060805f805f6060610153610366565b61015b610397565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6001600160a01b038116155f80805b85811015610242578686828181106101ad576101ad610d80565b90506020028101906101bf9190610d94565b6101cd906040013584610db2565b92505f6101fd8888848181106101e5576101e5610d80565b90506020028101906101f79190610d94565b866103c4565b9050806102395787878381811061021657610216610d80565b90506020028101906102289190610d94565b610236906040013584610db2565b92505b50600101610193565b50348214610271576040516370647f7960e01b8152600481018390523460248201526044015b60405180910390fd5b801561028157610281848261059f565b505050505050565b806040013534146102b957604080516370647f7960e01b8152908201356004820152346024820152604401610268565b6102c48160016103c4565b6102e15760405163d6bda27560e01b815260040160405180910390fd5b50565b5f805f805f806102f38761063e565b909250905061031061030b6040890160208a01610c0c565b6107b0565b4261032160a08a0160808b01610dd1565b65ffffffffffff161015838015610355575061034060208a018a610c0c565b6001600160a01b0316836001600160a01b0316145b919750955093509150509193509193565b60606103927f00000000000000000000000000000000000000000000000000000000000000005f610829565b905090565b60606103927f00000000000000000000000000000000000000000000000000000000000000006001610829565b5f805f805f6103d2876102e4565b935093509350935085156104985783610420576103f56040880160208901610c0c565b60405163d2650cd160e01b81526001600160a01b039091166004820152306024820152604401610268565b826104595761043560a0880160808901610dd1565b604051634a777ac560e11b815265ffffffffffff9091166004820152602401610268565b81610498578061046c6020890189610c0c565b604051636422d02b60e11b81526001600160a01b03928316600482015291166024820152604401610268565b8380156104a25750815b80156104ab5750825b15610595576001600160a01b0381165f908152600260205260408120805460018101909155905060608801355f6104e860408b0160208c01610c0c565b905060408a01355f6104fd60a08d018d610df6565b61050a60208f018f610c0c565b60405160200161051c93929190610e40565b60405160208183030381529060405290505f805f83516020850186888af19a505a9050610549818e6108d4565b604080518781528c151560208201526001600160a01b038916917f842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c910160405180910390a25050505050505b5050505092915050565b804710156105c95760405163cf47918160e01b815247600482015260248101829052604401610268565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610612576040519150601f19603f3d011682016040523d82523d5f602084013e610617565b606091505b50509050806106395760405163d6bda27560e01b815260040160405180910390fd5b505050565b5f80808061078b61065260c0870187610df6565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061078592507f7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac91506106b9905060208a018a610c0c565b6106c960408b0160208c01610c0c565b60408b013560608c01356106e361009b60208f018f610c0c565b8d60800160208101906106f69190610dd1565b8e8060a001906107069190610df6565b604051610714929190610e66565b6040805191829003822060208301999099526001600160a01b0397881690820152959094166060860152608085019290925260a084015260c083015265ffffffffffff1660e082015261010081019190915261012001604051602081830303815290604052805190602001206108f0565b9061091c565b5090925090505f8160038111156107a4576107a4610e75565b14959194509092505050565b6040513060248201525f90819060440160408051601f19818403018152919052602080820180516001600160e01b031663572b6c0560e01b17815282519293505f928392839290918391895afa92503d91505f519050828015610814575060208210155b801561081f57505f81115b9695505050505050565b606060ff83146108435761083c83610965565b90506108ce565b81805461084f90610e89565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90610e89565b80156108c65780601f1061089d576101008083540402835291602001916108c6565b820191905f5260205f20905b8154815290600101906020018083116108a957829003601f168201915b505050505090505b92915050565b6108e3603f6060830135610ec1565b8210156108ec57fe5b5050565b5f6108ce6108fc6109a2565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8351604103610953576020840151604085015160608601515f1a61094588828585610acb565b95509550955050505061095e565b505081515f91506002905b9250925092565b60605f61097183610b93565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156109fa57507f000000000000000000000000000000000000000000000000000000000000000046145b15610a2457507f000000000000000000000000000000000000000000000000000000000000000090565b610392604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610b0457505f91506003905082610b89565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610b55573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610b8057505f925060019150829050610b89565b92505f91508190505b9450945094915050565b5f60ff8216601f8111156108ce57604051632cd44ac360e21b815260040160405180910390fd5b5f60208284031215610bca575f80fd5b813567ffffffffffffffff811115610be0575f80fd5b820160e08185031215610bf1575f80fd5b9392505050565b6001600160a01b03811681146102e1575f80fd5b5f60208284031215610c1c575f80fd5b8135610bf181610bf8565b5f81518084525f5b81811015610c4b57602081850181015186830182015201610c2f565b505f602082860101526020601f19601f83011685010191505092915050565b60ff60f81b881681525f602060e06020840152610c8a60e084018a610c27565b8381036040850152610c9c818a610c27565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b81811015610cef57835183529284019291840191600101610cd3565b50909c9b505050505050505050505050565b5f805f60408486031215610d13575f80fd5b833567ffffffffffffffff80821115610d2a575f80fd5b818601915086601f830112610d3d575f80fd5b813581811115610d4b575f80fd5b8760208260051b8501011115610d5f575f80fd5b60209283019550935050840135610d7581610bf8565b809150509250925092565b634e487b7160e01b5f52603260045260245ffd5b5f823560de19833603018112610da8575f80fd5b9190910192915050565b808201808211156108ce57634e487b7160e01b5f52601160045260245ffd5b5f60208284031215610de1575f80fd5b813565ffffffffffff81168114610bf1575f80fd5b5f808335601e19843603018112610e0b575f80fd5b83018035915067ffffffffffffffff821115610e25575f80fd5b602001915036819003821315610e39575f80fd5b9250929050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b818382375f9101908152919050565b634e487b7160e01b5f52602160045260245ffd5b600181811c90821680610e9d57607f821691505b602082108103610ebb57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f82610edb57634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212208abde69510c2110d8c0766af6f9f2c17d8257292a94fd35d6c7a21f7dd3826c864736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC2981.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC2981\",\n  \"sourceName\": \"contracts/token/common/ERC2981.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numerator\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"denominator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidDefaultRoyalty\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidDefaultRoyaltyReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numerator\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"denominator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidTokenRoyalty\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidTokenRoyaltyReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"salePrice\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"royaltyInfo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC4626.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC4626\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/ERC4626.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"max\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC4626ExceededMaxDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"max\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC4626ExceededMaxMint\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"max\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC4626ExceededMaxRedeem\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"max\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC4626ExceededMaxWithdraw\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"SafeERC20FailedOperation\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Deposit\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Withdraw\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"asset\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"convertToAssets\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"convertToShares\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"deposit\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxDeposit\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxMint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxRedeem\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxWithdraw\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewDeposit\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewMint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewRedeem\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewWithdraw\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"redeem\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalAssets\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"withdraw\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721\",\n  \"sourceName\": \"contracts/token/ERC721/ERC721.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Burnable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Burnable\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Burnable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Consecutive.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Consecutive\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Consecutive.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"batchSize\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"maxBatch\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721ExceededMaxBatchMint\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC721ForbiddenBatchBurn\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC721ForbiddenBatchMint\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC721ForbiddenMint\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"fromTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"toTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ConsecutiveTransfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Enumerable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Enumerable\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Enumerable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"ERC721EnumerableForbiddenBatchMint\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721OutOfBoundsIndex\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenOfOwnerByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Holder.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Holder\",\n  \"sourceName\": \"contracts/token/ERC721/utils/ERC721Holder.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Pausable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Pausable\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Pausable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EnforcedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ExpectedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Paused\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Unpaused\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"paused\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Royalty.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Royalty\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Royalty.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numerator\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"denominator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidDefaultRoyalty\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidDefaultRoyaltyReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numerator\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"denominator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidTokenRoyalty\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC2981InvalidTokenRoyaltyReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"salePrice\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"royaltyInfo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721URIStorage.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721URIStorage\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721URIStorage.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"_fromTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"_toTokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"BatchMetadataUpdate\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"_tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"MetadataUpdate\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Utils.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Utils\",\n  \"sourceName\": \"contracts/token/ERC721/utils/ERC721Utils.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122028b05ff2bdd4bdabd5fa29d3bf2de4a62007fb06b6147242aec4cbb4d66a8aa964736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122028b05ff2bdd4bdabd5fa29d3bf2de4a62007fb06b6147242aec4cbb4d66a8aa964736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Votes.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Votes\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Votes.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"CheckpointUnorderedInsertion\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ECDSAInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"length\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureS\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"clock\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"ERC5805FutureLookup\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC6372InconsistentClock\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotesExpiredSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromDelegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toDelegate\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DelegateChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"previousVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DelegateVotesChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"delegateBySig\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegates\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastTotalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ERC721Wrapper.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ERC721Wrapper\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/ERC721Wrapper.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721UnsupportedToken\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"tokenIds\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"depositFor\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"underlying\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IERC721\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"tokenIds\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"withdrawTo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/EnumerableMap.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"EnumerableMap\",\n  \"sourceName\": \"contracts/utils/structs/EnumerableMap.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"key\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"EnumerableMapNonexistentKey\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d94719610d117cb21a552f9e058662286280b1eb20d7fa9aa7263c88029ea54a64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d94719610d117cb21a552f9e058662286280b1eb20d7fa9aa7263c88029ea54a64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/EnumerableSet.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"EnumerableSet\",\n  \"sourceName\": \"contracts/utils/structs/EnumerableSet.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220465cbbc3ad6dfa00cc43e759da8ac226700e699948a37b4defb346b670ebafbb64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220465cbbc3ad6dfa00cc43e759da8ac226700e699948a37b4defb346b670ebafbb64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Errors.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Errors\",\n  \"sourceName\": \"contracts/utils/Errors.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedDeployment\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"MissingPrecompile\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203ef5b8c947a392a82f859bf3783be651f3832c0a538fd9e4f9b01f3791b0866964736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203ef5b8c947a392a82f859bf3783be651f3832c0a538fd9e4f9b01f3791b0866964736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Governor.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Governor\",\n  \"sourceName\": \"contracts/governance/Governor.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorCountingFractional.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorCountingFractional\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorCountingFractional.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"usedVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"remainingWeight\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorExceedRemainingWeight\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"againstVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"forVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"abstainVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"usedVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorCountingSimple.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorCountingSimple\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorCountingSimple.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"againstVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"forVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"abstainVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorPreventLateQuorum.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorPreventLateQuorum\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorPreventLateQuorum.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint64\",\n          \"name\": \"oldVoteExtension\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint64\",\n          \"name\": \"newVoteExtension\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"LateQuorumVoteExtensionSet\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint64\",\n          \"name\": \"extendedDeadline\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"ProposalExtended\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"lateQuorumVoteExtension\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"newVoteExtension\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"setLateQuorumVoteExtension\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorSettings.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorSettings\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorSettings.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"oldProposalThreshold\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newProposalThreshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalThresholdSet\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"oldVotingDelay\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotingDelay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotingDelaySet\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"oldVotingPeriod\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotingPeriodSet\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"newProposalThreshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setProposalThreshold\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"newVotingDelay\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"setVotingDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"newVotingPeriod\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"setVotingPeriod\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorStorage.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorStorage\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorStorage.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalCount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDetails\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDetailsAt\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorTimelockAccess.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorTimelockAccess\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorTimelockAccess.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorLockedIgnore\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expectedNonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"actualNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorMismatchedNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"neededTimestamp\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorUnmetDelay\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"ignored\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"AccessManagerIgnoredSet\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"oldBaseDelaySeconds\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"newBaseDelaySeconds\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"BaseDelaySet\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"accessManager\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IAccessManager\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"baseDelaySeconds\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"isAccessManagerIgnored\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalExecutionPlan\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"bool[]\",\n          \"name\": \"indirect\",\n          \"type\": \"bool[]\"\n        },\n        {\n          \"internalType\": \"bool[]\",\n          \"name\": \"withDelay\",\n          \"type\": \"bool[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4[]\",\n          \"name\": \"selectors\",\n          \"type\": \"bytes4[]\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"ignored\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setAccessManagerIgnored\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"newBaseDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"setBaseDelaySeconds\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorTimelockCompound.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorTimelockCompound\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorTimelockCompound.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"oldTimelock\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"newTimelock\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"TimelockChange\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"__acceptAdmin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"timelock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract ICompoundTimelock\",\n          \"name\": \"newTimelock\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"updateTimelock\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorTimelockControl.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorTimelockControl\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorTimelockControl.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"oldTimelock\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"newTimelock\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"TimelockChange\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"timelock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract TimelockController\",\n          \"name\": \"newTimelock\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"updateTimelock\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorVotes.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorVotes\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorVotes.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"token\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IERC5805\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/GovernorVotesQuorumFraction.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"GovernorVotesQuorumFraction\",\n  \"sourceName\": \"contracts/governance/extensions/GovernorVotesQuorumFraction.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"CheckpointUnorderedInsertion\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"quorumNumerator\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"quorumDenominator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidQuorumFraction\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"oldQuorumNumerator\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newQuorumNumerator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"QuorumNumeratorUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXTENDED_BALLOT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"quorumDenominator\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorumNumerator\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"quorumNumerator\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"relay\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"token\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IERC5805\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"newQuorumNumerator\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"updateQuorumNumerator\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Hashes.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Hashes\",\n  \"sourceName\": \"contracts/utils/cryptography/Hashes.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b7a9039e2da0100ed88948306845427801d2e6687bc4f3352c7534c97b0a6b2064736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b7a9039e2da0100ed88948306845427801d2e6687bc4f3352c7534c97b0a6b2064736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Heap.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Heap\",\n  \"sourceName\": \"contracts/utils/structs/Heap.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d53a5022117a5512a350e83c6a4046779687749a2ee1e389044062b3da4d8fc864736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d53a5022117a5512a350e83c6a4046779687749a2ee1e389044062b3da4d8fc864736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IAccessControl.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IAccessControl\",\n  \"sourceName\": \"contracts/access/IAccessControl.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IAccessControlDefaultAdminRules.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IAccessControlDefaultAdminRules\",\n  \"sourceName\": \"contracts/access/extensions/IAccessControlDefaultAdminRules.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"schedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"AccessControlEnforcedDefaultAdminDelay\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlEnforcedDefaultAdminRules\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"defaultAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessControlInvalidDefaultAdmin\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"DefaultAdminDelayChangeCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"effectSchedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"DefaultAdminDelayChangeScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"DefaultAdminTransferCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"acceptSchedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"DefaultAdminTransferScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"acceptDefaultAdminTransfer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"beginDefaultAdminTransfer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"cancelDefaultAdminTransfer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"changeDefaultAdminDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultAdminDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultAdminDelayIncreaseWait\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pendingDefaultAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"acceptSchedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pendingDefaultAdminDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"effectSchedule\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"rollbackDefaultAdminDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IAccessControlEnumerable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IAccessControlEnumerable\",\n  \"sourceName\": \"contracts/access/extensions/IAccessControlEnumerable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getRoleMember\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleMemberCount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IAccessManaged.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IAccessManaged\",\n  \"sourceName\": \"contracts/access/manager/IAccessManaged.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"authority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagedInvalidAuthority\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"AccessManagedRequiredDelay\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagedUnauthorized\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"authority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AuthorityUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"authority\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"isConsumingScheduledOp\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setAuthority\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IAccessManager.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IAccessManager\",\n  \"sourceName\": \"contracts/access/manager/IAccessManager.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerAlreadyScheduled\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"AccessManagerBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerExpired\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initialAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagerInvalidInitialAdmin\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"AccessManagerLockedRole\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerNotReady\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessManagerNotScheduled\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"msgsender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"msgsender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedCancel\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AccessManagerUnauthorizedConsume\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"OperationCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"OperationExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"schedule\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"OperationScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"admin\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"RoleGrantDelayChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"newMember\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"guardian\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"RoleGuardianChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"label\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"RoleLabel\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"TargetAdminDelayUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"closed\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"TargetClosed\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"TargetFunctionRoleUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"canCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"allowed\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"delay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"consumeScheduledOp\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"expiration\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getAccess\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"since\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"currentDelay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"pendingDelay\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"effect\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getNonce\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"getRoleGrantDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"getRoleGuardian\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getSchedule\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getTargetAdminDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"getTargetFunctionRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"executionDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isMember\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"executionDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"hashOperation\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isTargetClosed\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"label\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"labelRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"minSetback\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"when\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"schedule\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"nonce\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"setGrantDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"admin\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"setRoleAdmin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"guardian\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"setRoleGuardian\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"name\": \"setTargetAdminDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"closed\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setTargetClosed\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4[]\",\n          \"name\": \"selectors\",\n          \"type\": \"bytes4[]\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"roleId\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"setTargetFunctionRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newAuthority\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"updateAuthority\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IAuthority.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IAuthority\",\n  \"sourceName\": \"contracts/access/manager/IAuthority.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"selector\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"canCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"allowed\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IBeacon.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IBeacon\",\n  \"sourceName\": \"contracts/proxy/beacon/IBeacon.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"implementation\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ICompoundTimelock.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ICompoundTimelock\",\n  \"sourceName\": \"contracts/vendor/compound/ICompoundTimelock.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"txHash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"signature\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"eta\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"CancelTransaction\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"txHash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"signature\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"eta\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ExecuteTransaction\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"NewAdmin\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"NewDelay\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newPendingAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"NewPendingAdmin\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"txHash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"signature\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"eta\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"QueueTransaction\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GRACE_PERIOD\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"MAXIMUM_DELAY\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"MINIMUM_DELAY\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"acceptAdmin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"admin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"signature\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"eta\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"cancelTransaction\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"delay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"signature\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"eta\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"executeTransaction\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pendingAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"signature\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"eta\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"queueTransaction\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queuedTransactions\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setPendingAdmin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1155.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1155\",\n  \"sourceName\": \"contracts/token/ERC1155/IERC1155.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1155Errors.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1155Errors\",\n  \"sourceName\": \"contracts/interfaces/draft-IERC6093.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"idsLength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"valuesLength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidArrayLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1155MissingApprovalForAll\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1155MetadataURI.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1155MetadataURI\",\n  \"sourceName\": \"contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"TransferBatch\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TransferSingle\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"value\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"URI\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"accounts\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"name\": \"balanceOfBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeBatchTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"uri\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1155Receiver.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1155Receiver\",\n  \"sourceName\": \"contracts/token/ERC1155/IERC1155Receiver.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"ids\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"id\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1271.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1271\",\n  \"sourceName\": \"contracts/interfaces/IERC1271.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"hash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"isValidSignature\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"magicValue\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1363.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1363\",\n  \"sourceName\": \"contracts/interfaces/IERC1363.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approveAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"approveAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"transferAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"transferFromAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFromAndCall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1363Receiver.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1363Receiver\",\n  \"sourceName\": \"contracts/interfaces/IERC1363Receiver.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onTransferReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1363Spender.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1363Spender\",\n  \"sourceName\": \"contracts/interfaces/IERC1363Spender.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onApprovalReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC165.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC165\",\n  \"sourceName\": \"contracts/utils/introspection/IERC165.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1820Implementer.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1820Implementer\",\n  \"sourceName\": \"contracts/interfaces/IERC1820Implementer.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"interfaceHash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"canImplementInterfaceForAddress\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1820Registry.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1820Registry\",\n  \"sourceName\": \"contracts/interfaces/IERC1820Registry.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"interfaceHash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"InterfaceImplementerSet\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newManager\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ManagerChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"_interfaceHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getInterfaceImplementer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getManager\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"implementsERC165Interface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"implementsERC165InterfaceNoCache\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"interfaceName\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"interfaceHash\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"_interfaceHash\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setInterfaceImplementer\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newManager\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setManager\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"updateERC165Cache\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1822Proxiable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1822Proxiable\",\n  \"sourceName\": \"contracts/interfaces/draft-IERC1822.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"proxiableUUID\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC1967.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC1967\",\n  \"sourceName\": \"contracts/interfaces/IERC1967.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"previousAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"beacon\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"BeaconUpgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Upgraded\",\n      \"type\": \"event\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC20.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC20\",\n  \"sourceName\": \"contracts/token/ERC20/IERC20.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC20Errors.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC20Errors\",\n  \"sourceName\": \"contracts/interfaces/draft-IERC6093.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"allowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC20InvalidSpender\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC20Metadata.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC20Metadata\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/IERC20Metadata.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC20Permit.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC20Permit\",\n  \"sourceName\": \"contracts/token/ERC20/extensions/IERC20Permit.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"DOMAIN_SEPARATOR\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"permit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC2309.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC2309\",\n  \"sourceName\": \"contracts/interfaces/IERC2309.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"fromTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"toTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ConsecutiveTransfer\",\n      \"type\": \"event\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC2612.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC2612\",\n  \"sourceName\": \"contracts/interfaces/IERC2612.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"DOMAIN_SEPARATOR\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"permit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC2981.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC2981\",\n  \"sourceName\": \"contracts/interfaces/IERC2981.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"salePrice\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"royaltyInfo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"royaltyAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC3156FlashBorrower.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC3156FlashBorrower\",\n  \"sourceName\": \"contracts/interfaces/IERC3156FlashBorrower.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initiator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onFlashLoan\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC3156FlashLender.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC3156FlashLender\",\n  \"sourceName\": \"contracts/interfaces/IERC3156FlashLender.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"flashFee\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC3156FlashBorrower\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"flashLoan\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxFlashLoan\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC4626.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC4626\",\n  \"sourceName\": \"contracts/interfaces/IERC4626.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Deposit\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Withdraw\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"asset\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"assetTokenAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"convertToAssets\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"convertToShares\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"deposit\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxDeposit\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"maxAssets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxMint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"maxShares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxRedeem\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"maxShares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"maxWithdraw\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"maxAssets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewDeposit\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewMint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewRedeem\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"previewWithdraw\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"redeem\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalAssets\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"totalManagedAssets\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"assets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"withdraw\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC4906.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC4906\",\n  \"sourceName\": \"contracts/interfaces/IERC4906.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"_fromTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"_toTokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"BatchMetadataUpdate\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"_tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"MetadataUpdate\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC5267.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC5267\",\n  \"sourceName\": \"contracts/interfaces/IERC5267.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC5313.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC5313\",\n  \"sourceName\": \"contracts/interfaces/IERC5313.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC5805.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC5805\",\n  \"sourceName\": \"contracts/interfaces/IERC5805.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotesExpiredSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromDelegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toDelegate\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DelegateChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"previousVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DelegateVotesChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"delegateBySig\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegates\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastTotalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC6372.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC6372\",\n  \"sourceName\": \"contracts/interfaces/IERC6372.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC721.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC721\",\n  \"sourceName\": \"contracts/token/ERC721/IERC721.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC721Enumerable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC721Enumerable\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/IERC721Enumerable.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenOfOwnerByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC721Errors.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC721Errors\",\n  \"sourceName\": \"contracts/interfaces/draft-IERC6093.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721IncorrectOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721InsufficientApproval\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"approver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidApprover\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOperator\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"receiver\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidReceiver\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC721InvalidSender\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC721NonexistentToken\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC721Metadata.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC721Metadata\",\n  \"sourceName\": \"contracts/token/ERC721/extensions/IERC721Metadata.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC721Receiver.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC721Receiver\",\n  \"sourceName\": \"contracts/token/ERC721/IERC721Receiver.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC7674.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC7674\",\n  \"sourceName\": \"contracts/interfaces/draft-IERC7674.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"temporaryApprove\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"success\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC777.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC777\",\n  \"sourceName\": \"contracts/interfaces/IERC777.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"tokenHolder\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AuthorizedOperator\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"Burned\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"Minted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"tokenHolder\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RevokedOperator\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"Sent\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"authorizeOperator\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"defaultOperators\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"\",\n          \"type\": \"address[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"granularity\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenHolder\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isOperatorFor\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"operatorBurn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"operatorSend\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeOperator\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"send\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC777Recipient.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC777Recipient\",\n  \"sourceName\": \"contracts/interfaces/IERC777Recipient.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"userData\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"tokensReceived\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IERC777Sender.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IERC777Sender\",\n  \"sourceName\": \"contracts/interfaces/IERC777Sender.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"userData\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"operatorData\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"tokensToSend\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IGovernor.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IGovernor\",\n  \"sourceName\": \"contracts/governance/IGovernor.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyCastVote\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorAlreadyQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorDisabledDeposit\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"threshold\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInsufficientProposerVotes\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"calldatas\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidProposalLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteParams\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorInvalidVoteType\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"votingPeriod\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorInvalidVotingPeriod\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNonexistentProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"GovernorNotQueuedProposal\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyExecutor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorOnlyProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GovernorQueueNotImplemented\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"GovernorRestrictedProposer\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"current\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"GovernorUnexpectedProposalState\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalCanceled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"proposer\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string[]\",\n          \"name\": \"signatures\",\n          \"type\": \"string[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteStart\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"voteEnd\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"ProposalCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"etaSeconds\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProposalQueued\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"VoteCast\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"weight\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"VoteCastWithParams\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"COUNTING_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"castVote\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"castVoteWithReason\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"support\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"voter\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"reason\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"signature\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"castVoteWithReasonAndParamsBySig\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"params\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"getVotesWithParams\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasVoted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashProposal\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalDeadline\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalEta\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalNeedsQueuing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalProposer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"proposalSnapshot\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proposalThreshold\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"description\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"propose\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"calldatas\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"descriptionHash\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"queue\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quorum\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"proposalId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"state\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum IGovernor.ProposalState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"version\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"votingPeriod\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ITransparentUpgradeableProxy.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ITransparentUpgradeableProxy\",\n  \"sourceName\": \"contracts/proxy/transparent/TransparentUpgradeableProxy.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"previousAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"beacon\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"BeaconUpgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Upgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newImplementation\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"upgradeToAndCall\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/IVotes.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IVotes\",\n  \"sourceName\": \"contracts/governance/utils/IVotes.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotesExpiredSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromDelegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toDelegate\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DelegateChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"previousVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DelegateVotesChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"delegateBySig\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegates\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastTotalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Initializable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Initializable\",\n  \"sourceName\": \"contracts/proxy/utils/Initializable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidInitialization\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"NotInitializing\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint64\",\n          \"name\": \"version\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"Initialized\",\n      \"type\": \"event\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Math.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Math\",\n  \"sourceName\": \"contracts/utils/math/Math.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bb340385fc65bee4ab175a10b44feff67f2c919e55a3d5c7ad6490a3263923ec64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bb340385fc65bee4ab175a10b44feff67f2c919e55a3d5c7ad6490a3263923ec64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/MerkleProof.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"MerkleProof\",\n  \"sourceName\": \"contracts/utils/cryptography/MerkleProof.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"MerkleProofInvalidMultiproof\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202a578e0ee33df5da5254baedcc290f35f789cc06faa798a3b7b1c1c76cd4c27c64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202a578e0ee33df5da5254baedcc290f35f789cc06faa798a3b7b1c1c76cd4c27c64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/MerkleTree.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"MerkleTree\",\n  \"sourceName\": \"contracts/utils/structs/MerkleTree.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220dfbd5bd11675d488b6f85bbdbe22a06f20c4fbdaf8015e496a77a93ec226ff4464736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220dfbd5bd11675d488b6f85bbdbe22a06f20c4fbdaf8015e496a77a93ec226ff4464736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/MessageHashUtils.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"MessageHashUtils\",\n  \"sourceName\": \"contracts/utils/cryptography/MessageHashUtils.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204239df8f1c98194c5392bbf1bafad01682edbe4c917880fe4a5ed656964fb90164736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204239df8f1c98194c5392bbf1bafad01682edbe4c917880fe4a5ed656964fb90164736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Multicall.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Multicall\",\n  \"sourceName\": \"contracts/utils/Multicall.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Nonces.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Nonces\",\n  \"sourceName\": \"contracts/utils/Nonces.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Ownable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Ownable\",\n  \"sourceName\": \"contracts/access/Ownable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableInvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"renounceOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Ownable2Step.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Ownable2Step\",\n  \"sourceName\": \"contracts/access/Ownable2Step.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableInvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferStarted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"acceptOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pendingOwner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"renounceOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/P256.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"P256\",\n  \"sourceName\": \"contracts/utils/cryptography/P256.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203bc86b67823aae81d5f0eb3719880a1b5cfb6f9f1ebd4e23f81e411b2771ab5664736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203bc86b67823aae81d5f0eb3719880a1b5cfb6f9f1ebd4e23f81e411b2771ab5664736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Packing.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Packing\",\n  \"sourceName\": \"contracts/utils/Packing.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"OutOfRangeAccess\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f60edea7ae0620e70796f680acb01dcdecbe6cf844add0bb23f75a66114e7fe364736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f60edea7ae0620e70796f680acb01dcdecbe6cf844add0bb23f75a66114e7fe364736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Panic.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Panic\",\n  \"sourceName\": \"contracts/utils/Panic.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206a78456eefd7fb4c37aaea7305d7835fd2ac43f1cd41349b1575d241d6215c7764736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206a78456eefd7fb4c37aaea7305d7835fd2ac43f1cd41349b1575d241d6215c7764736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Pausable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Pausable\",\n  \"sourceName\": \"contracts/utils/Pausable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"EnforcedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ExpectedPause\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Paused\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Unpaused\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"paused\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Proxy.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Proxy\",\n  \"sourceName\": \"contracts/proxy/Proxy.sol\",\n  \"abi\": [\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"fallback\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ProxyAdmin.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ProxyAdmin\",\n  \"sourceName\": \"contracts/proxy/transparent/ProxyAdmin.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initialOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableInvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"UPGRADE_INTERFACE_VERSION\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"renounceOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract ITransparentUpgradeableProxy\",\n          \"name\": \"proxy\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"upgradeAndCall\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x608060405234801561000f575f80fd5b506040516104fc3803806104fc83398101604081905261002e916100bb565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100658161006c565b50506100e8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100cb575f80fd5b81516001600160a01b03811681146100e1575f80fd5b9392505050565b610407806100f55f395ff3fe608060405260043610610049575f3560e01c8063715018a61461004d5780638da5cb5b146100635780639623609d1461008e578063ad3cb1cc146100a1578063f2fde38b146100de575b5f80fd5b348015610058575f80fd5b506100616100fd565b005b34801561006e575f80fd5b505f546040516001600160a01b0390911681526020015b60405180910390f35b61006161009c366004610260565b610110565b3480156100ac575f80fd5b506100d1604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516100859190610372565b3480156100e9575f80fd5b506100616100f836600461038b565b61017b565b6101056101bd565b61010e5f6101e9565b565b6101186101bd565b60405163278f794360e11b81526001600160a01b03841690634f1ef28690349061014890869086906004016103a6565b5f604051808303818588803b15801561015f575f80fd5b505af1158015610171573d5f803e3d5ffd5b5050505050505050565b6101836101bd565b6001600160a01b0381166101b157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101ba816101e9565b50565b5f546001600160a01b0316331461010e5760405163118cdaa760e01b81523360048201526024016101a8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146101ba575f80fd5b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610272575f80fd5b833561027d81610238565b9250602084013561028d81610238565b9150604084013567ffffffffffffffff808211156102a9575f80fd5b818601915086601f8301126102bc575f80fd5b8135818111156102ce576102ce61024c565b604051601f8201601f19908116603f011681019083821181831017156102f6576102f661024c565b8160405282815289602084870101111561030e575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f81518084525f5b8181101561035357602081850181015186830182015201610337565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610384602083018461032f565b9392505050565b5f6020828403121561039b575f80fd5b813561038481610238565b6001600160a01b03831681526040602082018190525f906103c99083018461032f565b94935050505056fea2646970667358221220a5b3b5422a1c36f128dc73472e47070629e5a0b2f010e683df830b88b3d82d8064736f6c63430008180033\",\n  \"deployedBytecode\": \"0x608060405260043610610049575f3560e01c8063715018a61461004d5780638da5cb5b146100635780639623609d1461008e578063ad3cb1cc146100a1578063f2fde38b146100de575b5f80fd5b348015610058575f80fd5b506100616100fd565b005b34801561006e575f80fd5b505f546040516001600160a01b0390911681526020015b60405180910390f35b61006161009c366004610260565b610110565b3480156100ac575f80fd5b506100d1604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516100859190610372565b3480156100e9575f80fd5b506100616100f836600461038b565b61017b565b6101056101bd565b61010e5f6101e9565b565b6101186101bd565b60405163278f794360e11b81526001600160a01b03841690634f1ef28690349061014890869086906004016103a6565b5f604051808303818588803b15801561015f575f80fd5b505af1158015610171573d5f803e3d5ffd5b5050505050505050565b6101836101bd565b6001600160a01b0381166101b157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101ba816101e9565b50565b5f546001600160a01b0316331461010e5760405163118cdaa760e01b81523360048201526024016101a8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146101ba575f80fd5b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610272575f80fd5b833561027d81610238565b9250602084013561028d81610238565b9150604084013567ffffffffffffffff808211156102a9575f80fd5b818601915086601f8301126102bc575f80fd5b8135818111156102ce576102ce61024c565b604051601f8201601f19908116603f011681019083821181831017156102f6576102f661024c565b8160405282815289602084870101111561030e575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f81518084525f5b8181101561035357602081850181015186830182015201610337565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610384602083018461032f565b9392505050565b5f6020828403121561039b575f80fd5b813561038481610238565b6001600160a01b03831681526040602082018190525f906103c99083018461032f565b94935050505056fea2646970667358221220a5b3b5422a1c36f128dc73472e47070629e5a0b2f010e683df830b88b3d82d8064736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/RSA.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"RSA\",\n  \"sourceName\": \"contracts/utils/cryptography/RSA.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220978755ab25f579f71ce2295f5fe583320f807e52aac70f960ce40117a27d8c8e64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220978755ab25f579f71ce2295f5fe583320f807e52aac70f960ce40117a27d8c8e64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ReentrancyGuard.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ReentrancyGuard\",\n  \"sourceName\": \"contracts/utils/ReentrancyGuard.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"ReentrancyGuardReentrantCall\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ReentrancyGuardTransient.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ReentrancyGuardTransient\",\n  \"sourceName\": \"contracts/utils/ReentrancyGuardTransient.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"ReentrancyGuardReentrantCall\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/SafeCast.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SafeCast\",\n  \"sourceName\": \"contracts/utils/math/SafeCast.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"value\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedIntDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"value\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedIntToUint\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintToInt\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220badeeae4eba56ac4f76f97c7f40be9b269c0f596e7bf697d20fd59b391cb3e8064736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220badeeae4eba56ac4f76f97c7f40be9b269c0f596e7bf697d20fd59b391cb3e8064736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/SafeERC20.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SafeERC20\",\n  \"sourceName\": \"contracts/token/ERC20/utils/SafeERC20.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentAllowance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"requestedDecrease\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeERC20FailedDecreaseAllowance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"SafeERC20FailedOperation\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209007b7739eb74bd61449aa54882d121d505ef89557c67fee5498648541b2f8f564736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209007b7739eb74bd61449aa54882d121d505ef89557c67fee5498648541b2f8f564736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/ShortStrings.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ShortStrings\",\n  \"sourceName\": \"contracts/utils/ShortStrings.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b6b527c873e86e4d70b0a27493ad7b42afe222f991207a6ceaf2aeafa71285dc64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b6b527c873e86e4d70b0a27493ad7b42afe222f991207a6ceaf2aeafa71285dc64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/SignatureChecker.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SignatureChecker\",\n  \"sourceName\": \"contracts/utils/cryptography/SignatureChecker.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209d1f82534a00f043167a9e180fa0f15feb39fa3b68000ce938a647dbfa254f2464736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209d1f82534a00f043167a9e180fa0f15feb39fa3b68000ce938a647dbfa254f2464736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/SignedMath.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SignedMath\",\n  \"sourceName\": \"contracts/utils/math/SignedMath.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cbe3415c69300b6722c740e5094619ccda5fd3ea4ae872968fea3cfcb1665e1c64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cbe3415c69300b6722c740e5094619ccda5fd3ea4ae872968fea3cfcb1665e1c64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/SlotDerivation.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SlotDerivation\",\n  \"sourceName\": \"contracts/utils/SlotDerivation.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220c412ee086e9d4b6f68fa5027702ad99e54ca17171f0708427844384cc53cab8664736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220c412ee086e9d4b6f68fa5027702ad99e54ca17171f0708427844384cc53cab8664736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/StorageSlot.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"StorageSlot\",\n  \"sourceName\": \"contracts/utils/StorageSlot.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201aa70b262fdef53d4d5d15f75ab35d72f66beea19586afb867d1e4db1df6383564736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201aa70b262fdef53d4d5d15f75ab35d72f66beea19586afb867d1e4db1df6383564736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Strings.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Strings\",\n  \"sourceName\": \"contracts/utils/Strings.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"length\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"StringsInsufficientHexLength\",\n      \"type\": \"error\"\n    }\n  ],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b031a63db8c1a3e7653588df34dc1f85d910738d00f89ae4207cf35b395cad0664736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b031a63db8c1a3e7653588df34dc1f85d910738d00f89ae4207cf35b395cad0664736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Time.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Time\",\n  \"sourceName\": \"contracts/utils/types/Time.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a2f1f5967228e8edc2cc6f7be3e94934b8bae7ac5593131a485ff56647a7b51464736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a2f1f5967228e8edc2cc6f7be3e94934b8bae7ac5593131a485ff56647a7b51464736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/TimelockController.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"TimelockController\",\n  \"sourceName\": \"contracts/governance/TimelockController.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDelay\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"proposers\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"executors\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"admin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"AccessControlBadConfirmation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"neededRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"AccessControlUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"delay\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDelay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TimelockInsufficientDelay\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"targets\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"payloads\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"values\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TimelockInvalidOperationLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"caller\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"TimelockUnauthorizedCaller\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessorId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TimelockUnexecutedPredecessor\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"operationId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"expectedStates\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TimelockUnexpectedOperationState\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"CallExecuted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"CallSalt\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"delay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"CallScheduled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"Cancelled\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"oldDuration\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newDuration\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"MinDelayChange\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CANCELLER_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DEFAULT_ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"EXECUTOR_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"PROPOSER_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"cancel\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"payload\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"execute\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"payloads\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"executeBatch\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"getMinDelay\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getOperationState\",\n      \"outputs\": [\n        {\n          \"internalType\": \"enum TimelockController.OperationState\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getTimestamp\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashOperation\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"payloads\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"hashOperationBatch\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"isOperation\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"isOperationDone\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"isOperationPending\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"id\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"isOperationReady\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155BatchReceived\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC1155Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"callerConfirmation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"delay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"schedule\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address[]\",\n          \"name\": \"targets\",\n          \"type\": \"address[]\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"values\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"payloads\",\n          \"type\": \"bytes[]\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"predecessor\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"delay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"scheduleBatch\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"newDelay\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"updateDelay\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x608060405234801562000010575f80fd5b5060405162001d4c38038062001d4c833981016040819052620000339162000320565b6200003f5f3062000197565b506001600160a01b038116156200005e576200005c5f8262000197565b505b5f5b8351811015620000fd57620000b87fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1858381518110620000a457620000a4620003a2565b60200260200101516200019760201b60201c565b50620000f37ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783858381518110620000a457620000a4620003a2565b5060010162000060565b505f5b82518110156200014e57620001447fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63848381518110620000a457620000a4620003a2565b5060010162000100565b506002849055604080515f8152602081018690527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a150505050620003b6565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166200023a575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001f13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200023d565b505f5b92915050565b634e487b7160e01b5f52604160045260245ffd5b80516001600160a01b03811681146200026e575f80fd5b919050565b5f82601f83011262000283575f80fd5b815160206001600160401b0380831115620002a257620002a262000243565b8260051b604051601f19603f83011681018181108482111715620002ca57620002ca62000243565b6040529384526020818701810194908101925087851115620002ea575f80fd5b6020870191505b848210156200031557620003058262000257565b83529183019190830190620002f1565b979650505050505050565b5f805f806080858703121562000334575f80fd5b845160208601519094506001600160401b038082111562000353575f80fd5b620003618883890162000273565b9450604087015191508082111562000377575f80fd5b50620003868782880162000273565b925050620003976060860162000257565b905092959194509250565b634e487b7160e01b5f52603260045260245ffd5b61198880620003c45f395ff3fe6080604052600436106101b2575f3560e01c80638065657f116100e7578063bc197c8111610087578063d547741f11610062578063d547741f14610546578063e38335e514610565578063f23a6e6114610578578063f27a0c92146105a3575f80fd5b8063bc197c81146104d1578063c4d252f5146104fc578063d45c44351461051b575f80fd5b806391d14854116100c257806391d148541461044d578063a217fddf1461046c578063b08e51c01461047f578063b1c5f427146104b2575f80fd5b80638065657f146103dc5780638f2a0bb0146103fb5780638f61f4f51461041a575f80fd5b80632ab0f5291161015257806336568abe1161012d57806336568abe14610353578063584b153e1461037257806364d62353146103915780637958004c146103b0575f80fd5b80632ab0f529146102f65780632f2ff15d1461031557806331d5075014610334575f80fd5b8063134008d31161018d578063134008d31461025357806313bc9f2014610266578063150b7a0214610285578063248a9ca3146102c8575f80fd5b806301d5062a146101bd57806301ffc9a7146101de57806307bd026514610212575f80fd5b366101b957005b5f80fd5b3480156101c8575f80fd5b506101dc6101d7366004611163565b6105b7565b005b3480156101e9575f80fd5b506101fd6101f83660046111d1565b61068b565b60405190151581526020015b60405180910390f35b34801561021d575f80fd5b506102457fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b604051908152602001610209565b6101dc6102613660046111f8565b61069b565b348015610271575f80fd5b506101fd61028036600461125e565b61074d565b348015610290575f80fd5b506102af61029f366004611324565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610209565b3480156102d3575f80fd5b506102456102e236600461125e565b5f9081526020819052604090206001015490565b348015610301575f80fd5b506101fd61031036600461125e565b610772565b348015610320575f80fd5b506101dc61032f366004611387565b61077a565b34801561033f575f80fd5b506101fd61034e36600461125e565b6107a4565b34801561035e575f80fd5b506101dc61036d366004611387565b6107c8565b34801561037d575f80fd5b506101fd61038c36600461125e565b610800565b34801561039c575f80fd5b506101dc6103ab36600461125e565b610845565b3480156103bb575f80fd5b506103cf6103ca36600461125e565b6108b8565b60405161020991906113c5565b3480156103e7575f80fd5b506102456103f63660046111f8565b610900565b348015610406575f80fd5b506101dc61041536600461142b565b61093e565b348015610425575f80fd5b506102457fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc181565b348015610458575f80fd5b506101fd610467366004611387565b610aca565b348015610477575f80fd5b506102455f81565b34801561048a575f80fd5b506102457ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78381565b3480156104bd575f80fd5b506102456104cc3660046114d3565b610af2565b3480156104dc575f80fd5b506102af6104eb3660046115ef565b63bc197c8160e01b95945050505050565b348015610507575f80fd5b506101dc61051636600461125e565b610b36565b348015610526575f80fd5b5061024561053536600461125e565b5f9081526001602052604090205490565b348015610551575f80fd5b506101dc610560366004611387565b610be0565b6101dc6105733660046114d3565b610c04565b348015610583575f80fd5b506102af610592366004611691565b63f23a6e6160e01b95945050505050565b3480156105ae575f80fd5b50600254610245565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc16105e181610d85565b5f6105f0898989898989610900565b90506105fc8184610d92565b5f817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a60405161063796959493929190611718565b60405180910390a3831561068057807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03878560405161067791815260200190565b60405180910390a25b505050505050505050565b5f61069582610e23565b92915050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636106c6815f610aca565b6106d4576106d48133610e47565b5f6106e3888888888888610900565b90506106ef8185610e84565b6106fb88888888610ed2565b5f817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588a8a8a8a6040516107329493929190611754565b60405180910390a361074381610f46565b5050505050505050565b5f60025b61075a836108b8565b600381111561076b5761076b6113b1565b1492915050565b5f6003610751565b5f8281526020819052604090206001015461079481610d85565b61079e8383610f71565b50505050565b5f806107af836108b8565b60038111156107c0576107c06113b1565b141592915050565b6001600160a01b03811633146107f15760405163334bd91960e11b815260040160405180910390fd5b6107fb8282611000565b505050565b5f8061080b836108b8565b90506001816003811115610821576108216113b1565b148061083e5750600281600381111561083c5761083c6113b1565b145b9392505050565b333081146108765760405163e2850c5960e01b81526001600160a01b03821660048201526024015b60405180910390fd5b60025460408051918252602082018490527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a150600255565b5f81815260016020526040812054805f036108d557505f92915050565b600181036108e65750600392915050565b428111156108f75750600192915050565b50600292915050565b5f86868686868660405160200161091c96959493929190611718565b6040516020818303038152906040528051906020012090509695505050505050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc161096881610d85565b88871415806109775750888514155b156109a9576040516001624fcdef60e01b03198152600481018a9052602481018690526044810188905260640161086d565b5f6109ba8b8b8b8b8b8b8b8b610af2565b90506109c68184610d92565b5f5b8a811015610a7b5780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e85818110610a0557610a05611785565b9050602002016020810190610a1a9190611799565b8d8d86818110610a2c57610a2c611785565b905060200201358c8c87818110610a4557610a45611785565b9050602002810190610a5791906117b2565b8c8b604051610a6b96959493929190611718565b60405180910390a36001016109c8565b508315610abd57807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d038785604051610ab491815260200190565b60405180910390a25b5050505050505050505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f8888888888888888604051602001610b12989796959493929190611885565b60405160208183030381529060405280519060200120905098975050505050505050565b7ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783610b6081610d85565b610b6982610800565b610ba55781610b786002611069565b610b826001611069565b604051635ead8eb560e01b8152600481019390935217602482015260440161086d565b5f828152600160205260408082208290555183917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a25050565b5f82815260208190526040902060010154610bfa81610d85565b61079e8383611000565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610c2f815f610aca565b610c3d57610c3d8133610e47565b8786141580610c4c5750878414155b15610c7e576040516001624fcdef60e01b0319815260048101899052602481018590526044810187905260640161086d565b5f610c8f8a8a8a8a8a8a8a8a610af2565b9050610c9b8185610e84565b5f5b89811015610d6f575f8b8b83818110610cb857610cb8611785565b9050602002016020810190610ccd9190611799565b90505f8a8a84818110610ce257610ce2611785565b905060200201359050365f8a8a86818110610cff57610cff611785565b9050602002810190610d1191906117b2565b91509150610d2184848484610ed2565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5886868686604051610d589493929190611754565b60405180910390a350505050806001019050610c9d565b50610d7981610f46565b50505050505050505050565b610d8f8133610e47565b50565b610d9b826107a4565b15610dcc5781610daa5f611069565b604051635ead8eb560e01b81526004810192909252602482015260440161086d565b5f610dd660025490565b905080821015610e0357604051635433660960e01b8152600481018390526024810182905260440161086d565b610e0d8242611924565b5f93845260016020526040909320929092555050565b5f6001600160e01b03198216630271189760e51b148061069557506106958261108b565b610e518282610aca565b610e805760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161086d565b5050565b610e8d8261074d565b610e9c5781610daa6002611069565b8015801590610eb15750610eaf81610772565b155b15610e805760405163121534c360e31b81526004810182905260240161086d565b5f80856001600160a01b0316858585604051610eef929190611943565b5f6040518083038185875af1925050503d805f8114610f29576040519150601f19603f3d011682016040523d82523d5f602084013e610f2e565b606091505b5091509150610f3d82826110bf565b50505050505050565b610f4f8161074d565b610f5e5780610daa6002611069565b5f90815260016020819052604090912055565b5f610f7c8383610aca565b610ff9575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610fb13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610695565b505f610695565b5f61100b8383610aca565b15610ff9575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610695565b5f81600381111561107c5761107c6113b1565b600160ff919091161b92915050565b5f6001600160e01b03198216637965db0b60e01b148061069557506301ffc9a760e01b6001600160e01b0319831614610695565b6060826110d4576110cf826110db565b610695565b5080610695565b8051156110eb5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b80356001600160a01b038116811461111a575f80fd5b919050565b5f8083601f84011261112f575f80fd5b5081356001600160401b03811115611145575f80fd5b60208301915083602082850101111561115c575f80fd5b9250929050565b5f805f805f805f60c0888a031215611179575f80fd5b61118288611104565b96506020880135955060408801356001600160401b038111156111a3575f80fd5b6111af8a828b0161111f565b989b979a50986060810135976080820135975060a09091013595509350505050565b5f602082840312156111e1575f80fd5b81356001600160e01b03198116811461083e575f80fd5b5f805f805f8060a0878903121561120d575f80fd5b61121687611104565b95506020870135945060408701356001600160401b03811115611237575f80fd5b61124389828a0161111f565b979a9699509760608101359660809091013595509350505050565b5f6020828403121561126e575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156112b1576112b1611275565b604052919050565b5f82601f8301126112c8575f80fd5b81356001600160401b038111156112e1576112e1611275565b6112f4601f8201601f1916602001611289565b818152846020838601011115611308575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f8060808587031215611337575f80fd5b61134085611104565b935061134e60208601611104565b92506040850135915060608501356001600160401b0381111561136f575f80fd5b61137b878288016112b9565b91505092959194509250565b5f8060408385031215611398575f80fd5b823591506113a860208401611104565b90509250929050565b634e487b7160e01b5f52602160045260245ffd5b60208101600483106113e557634e487b7160e01b5f52602160045260245ffd5b91905290565b5f8083601f8401126113fb575f80fd5b5081356001600160401b03811115611411575f80fd5b6020830191508360208260051b850101111561115c575f80fd5b5f805f805f805f805f60c08a8c031215611443575f80fd5b89356001600160401b0380821115611459575f80fd5b6114658d838e016113eb565b909b50995060208c013591508082111561147d575f80fd5b6114898d838e016113eb565b909950975060408c01359150808211156114a1575f80fd5b506114ae8c828d016113eb565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b5f805f805f805f8060a0898b0312156114ea575f80fd5b88356001600160401b0380821115611500575f80fd5b61150c8c838d016113eb565b909a50985060208b0135915080821115611524575f80fd5b6115308c838d016113eb565b909850965060408b0135915080821115611548575f80fd5b506115558b828c016113eb565b999c989b509699959896976060870135966080013595509350505050565b5f82601f830112611582575f80fd5b813560206001600160401b0382111561159d5761159d611275565b8160051b6115ac828201611289565b92835284810182019282810190878511156115c5575f80fd5b83870192505b848310156115e4578235825291830191908301906115cb565b979650505050505050565b5f805f805f60a08688031215611603575f80fd5b61160c86611104565b945061161a60208701611104565b935060408601356001600160401b0380821115611635575f80fd5b61164189838a01611573565b94506060880135915080821115611656575f80fd5b61166289838a01611573565b93506080880135915080821115611677575f80fd5b50611684888289016112b9565b9150509295509295909350565b5f805f805f60a086880312156116a5575f80fd5b6116ae86611104565b94506116bc60208701611104565b9350604086013592506060860135915060808601356001600160401b038111156116e4575f80fd5b611684888289016112b9565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260a060408201525f61173f60a0830186886116f0565b60608301949094525060800152949350505050565b60018060a01b0385168152836020820152606060408201525f61177b6060830184866116f0565b9695505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156117a9575f80fd5b61083e82611104565b5f808335601e198436030181126117c7575f80fd5b8301803591506001600160401b038211156117e0575f80fd5b60200191503681900382131561115c575f80fd5b5f838385526020808601955060208560051b830101845f5b8781101561187857848303601f19018952813536889003601e19018112611831575f80fd5b870184810190356001600160401b0381111561184b575f80fd5b803603821315611859575f80fd5b6118648582846116f0565b9a86019a945050509083019060010161180c565b5090979650505050505050565b60a080825281018890525f8960c08301825b8b8110156118c5576001600160a01b036118b084611104565b16825260209283019290910190600101611897565b5083810360208501528881526001600160fb1b038911156118e4575f80fd5b8860051b9150818a6020830137018281036020908101604085015261190c90820187896117f4565b60608401959095525050608001529695505050505050565b8082018082111561069557634e487b7160e01b5f52601160045260245ffd5b818382375f910190815291905056fea2646970667358221220de11af273fb921194275ae1dc745bdf5d347e9ceef6f16207c3a751754ffb5ac64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x6080604052600436106101b2575f3560e01c80638065657f116100e7578063bc197c8111610087578063d547741f11610062578063d547741f14610546578063e38335e514610565578063f23a6e6114610578578063f27a0c92146105a3575f80fd5b8063bc197c81146104d1578063c4d252f5146104fc578063d45c44351461051b575f80fd5b806391d14854116100c257806391d148541461044d578063a217fddf1461046c578063b08e51c01461047f578063b1c5f427146104b2575f80fd5b80638065657f146103dc5780638f2a0bb0146103fb5780638f61f4f51461041a575f80fd5b80632ab0f5291161015257806336568abe1161012d57806336568abe14610353578063584b153e1461037257806364d62353146103915780637958004c146103b0575f80fd5b80632ab0f529146102f65780632f2ff15d1461031557806331d5075014610334575f80fd5b8063134008d31161018d578063134008d31461025357806313bc9f2014610266578063150b7a0214610285578063248a9ca3146102c8575f80fd5b806301d5062a146101bd57806301ffc9a7146101de57806307bd026514610212575f80fd5b366101b957005b5f80fd5b3480156101c8575f80fd5b506101dc6101d7366004611163565b6105b7565b005b3480156101e9575f80fd5b506101fd6101f83660046111d1565b61068b565b60405190151581526020015b60405180910390f35b34801561021d575f80fd5b506102457fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b604051908152602001610209565b6101dc6102613660046111f8565b61069b565b348015610271575f80fd5b506101fd61028036600461125e565b61074d565b348015610290575f80fd5b506102af61029f366004611324565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610209565b3480156102d3575f80fd5b506102456102e236600461125e565b5f9081526020819052604090206001015490565b348015610301575f80fd5b506101fd61031036600461125e565b610772565b348015610320575f80fd5b506101dc61032f366004611387565b61077a565b34801561033f575f80fd5b506101fd61034e36600461125e565b6107a4565b34801561035e575f80fd5b506101dc61036d366004611387565b6107c8565b34801561037d575f80fd5b506101fd61038c36600461125e565b610800565b34801561039c575f80fd5b506101dc6103ab36600461125e565b610845565b3480156103bb575f80fd5b506103cf6103ca36600461125e565b6108b8565b60405161020991906113c5565b3480156103e7575f80fd5b506102456103f63660046111f8565b610900565b348015610406575f80fd5b506101dc61041536600461142b565b61093e565b348015610425575f80fd5b506102457fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc181565b348015610458575f80fd5b506101fd610467366004611387565b610aca565b348015610477575f80fd5b506102455f81565b34801561048a575f80fd5b506102457ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78381565b3480156104bd575f80fd5b506102456104cc3660046114d3565b610af2565b3480156104dc575f80fd5b506102af6104eb3660046115ef565b63bc197c8160e01b95945050505050565b348015610507575f80fd5b506101dc61051636600461125e565b610b36565b348015610526575f80fd5b5061024561053536600461125e565b5f9081526001602052604090205490565b348015610551575f80fd5b506101dc610560366004611387565b610be0565b6101dc6105733660046114d3565b610c04565b348015610583575f80fd5b506102af610592366004611691565b63f23a6e6160e01b95945050505050565b3480156105ae575f80fd5b50600254610245565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc16105e181610d85565b5f6105f0898989898989610900565b90506105fc8184610d92565b5f817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a60405161063796959493929190611718565b60405180910390a3831561068057807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03878560405161067791815260200190565b60405180910390a25b505050505050505050565b5f61069582610e23565b92915050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636106c6815f610aca565b6106d4576106d48133610e47565b5f6106e3888888888888610900565b90506106ef8185610e84565b6106fb88888888610ed2565b5f817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588a8a8a8a6040516107329493929190611754565b60405180910390a361074381610f46565b5050505050505050565b5f60025b61075a836108b8565b600381111561076b5761076b6113b1565b1492915050565b5f6003610751565b5f8281526020819052604090206001015461079481610d85565b61079e8383610f71565b50505050565b5f806107af836108b8565b60038111156107c0576107c06113b1565b141592915050565b6001600160a01b03811633146107f15760405163334bd91960e11b815260040160405180910390fd5b6107fb8282611000565b505050565b5f8061080b836108b8565b90506001816003811115610821576108216113b1565b148061083e5750600281600381111561083c5761083c6113b1565b145b9392505050565b333081146108765760405163e2850c5960e01b81526001600160a01b03821660048201526024015b60405180910390fd5b60025460408051918252602082018490527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a150600255565b5f81815260016020526040812054805f036108d557505f92915050565b600181036108e65750600392915050565b428111156108f75750600192915050565b50600292915050565b5f86868686868660405160200161091c96959493929190611718565b6040516020818303038152906040528051906020012090509695505050505050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc161096881610d85565b88871415806109775750888514155b156109a9576040516001624fcdef60e01b03198152600481018a9052602481018690526044810188905260640161086d565b5f6109ba8b8b8b8b8b8b8b8b610af2565b90506109c68184610d92565b5f5b8a811015610a7b5780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e85818110610a0557610a05611785565b9050602002016020810190610a1a9190611799565b8d8d86818110610a2c57610a2c611785565b905060200201358c8c87818110610a4557610a45611785565b9050602002810190610a5791906117b2565b8c8b604051610a6b96959493929190611718565b60405180910390a36001016109c8565b508315610abd57807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d038785604051610ab491815260200190565b60405180910390a25b5050505050505050505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f8888888888888888604051602001610b12989796959493929190611885565b60405160208183030381529060405280519060200120905098975050505050505050565b7ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783610b6081610d85565b610b6982610800565b610ba55781610b786002611069565b610b826001611069565b604051635ead8eb560e01b8152600481019390935217602482015260440161086d565b5f828152600160205260408082208290555183917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a25050565b5f82815260208190526040902060010154610bfa81610d85565b61079e8383611000565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610c2f815f610aca565b610c3d57610c3d8133610e47565b8786141580610c4c5750878414155b15610c7e576040516001624fcdef60e01b0319815260048101899052602481018590526044810187905260640161086d565b5f610c8f8a8a8a8a8a8a8a8a610af2565b9050610c9b8185610e84565b5f5b89811015610d6f575f8b8b83818110610cb857610cb8611785565b9050602002016020810190610ccd9190611799565b90505f8a8a84818110610ce257610ce2611785565b905060200201359050365f8a8a86818110610cff57610cff611785565b9050602002810190610d1191906117b2565b91509150610d2184848484610ed2565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5886868686604051610d589493929190611754565b60405180910390a350505050806001019050610c9d565b50610d7981610f46565b50505050505050505050565b610d8f8133610e47565b50565b610d9b826107a4565b15610dcc5781610daa5f611069565b604051635ead8eb560e01b81526004810192909252602482015260440161086d565b5f610dd660025490565b905080821015610e0357604051635433660960e01b8152600481018390526024810182905260440161086d565b610e0d8242611924565b5f93845260016020526040909320929092555050565b5f6001600160e01b03198216630271189760e51b148061069557506106958261108b565b610e518282610aca565b610e805760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161086d565b5050565b610e8d8261074d565b610e9c5781610daa6002611069565b8015801590610eb15750610eaf81610772565b155b15610e805760405163121534c360e31b81526004810182905260240161086d565b5f80856001600160a01b0316858585604051610eef929190611943565b5f6040518083038185875af1925050503d805f8114610f29576040519150601f19603f3d011682016040523d82523d5f602084013e610f2e565b606091505b5091509150610f3d82826110bf565b50505050505050565b610f4f8161074d565b610f5e5780610daa6002611069565b5f90815260016020819052604090912055565b5f610f7c8383610aca565b610ff9575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610fb13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610695565b505f610695565b5f61100b8383610aca565b15610ff9575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610695565b5f81600381111561107c5761107c6113b1565b600160ff919091161b92915050565b5f6001600160e01b03198216637965db0b60e01b148061069557506301ffc9a760e01b6001600160e01b0319831614610695565b6060826110d4576110cf826110db565b610695565b5080610695565b8051156110eb5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b80356001600160a01b038116811461111a575f80fd5b919050565b5f8083601f84011261112f575f80fd5b5081356001600160401b03811115611145575f80fd5b60208301915083602082850101111561115c575f80fd5b9250929050565b5f805f805f805f60c0888a031215611179575f80fd5b61118288611104565b96506020880135955060408801356001600160401b038111156111a3575f80fd5b6111af8a828b0161111f565b989b979a50986060810135976080820135975060a09091013595509350505050565b5f602082840312156111e1575f80fd5b81356001600160e01b03198116811461083e575f80fd5b5f805f805f8060a0878903121561120d575f80fd5b61121687611104565b95506020870135945060408701356001600160401b03811115611237575f80fd5b61124389828a0161111f565b979a9699509760608101359660809091013595509350505050565b5f6020828403121561126e575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156112b1576112b1611275565b604052919050565b5f82601f8301126112c8575f80fd5b81356001600160401b038111156112e1576112e1611275565b6112f4601f8201601f1916602001611289565b818152846020838601011115611308575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f8060808587031215611337575f80fd5b61134085611104565b935061134e60208601611104565b92506040850135915060608501356001600160401b0381111561136f575f80fd5b61137b878288016112b9565b91505092959194509250565b5f8060408385031215611398575f80fd5b823591506113a860208401611104565b90509250929050565b634e487b7160e01b5f52602160045260245ffd5b60208101600483106113e557634e487b7160e01b5f52602160045260245ffd5b91905290565b5f8083601f8401126113fb575f80fd5b5081356001600160401b03811115611411575f80fd5b6020830191508360208260051b850101111561115c575f80fd5b5f805f805f805f805f60c08a8c031215611443575f80fd5b89356001600160401b0380821115611459575f80fd5b6114658d838e016113eb565b909b50995060208c013591508082111561147d575f80fd5b6114898d838e016113eb565b909950975060408c01359150808211156114a1575f80fd5b506114ae8c828d016113eb565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b5f805f805f805f8060a0898b0312156114ea575f80fd5b88356001600160401b0380821115611500575f80fd5b61150c8c838d016113eb565b909a50985060208b0135915080821115611524575f80fd5b6115308c838d016113eb565b909850965060408b0135915080821115611548575f80fd5b506115558b828c016113eb565b999c989b509699959896976060870135966080013595509350505050565b5f82601f830112611582575f80fd5b813560206001600160401b0382111561159d5761159d611275565b8160051b6115ac828201611289565b92835284810182019282810190878511156115c5575f80fd5b83870192505b848310156115e4578235825291830191908301906115cb565b979650505050505050565b5f805f805f60a08688031215611603575f80fd5b61160c86611104565b945061161a60208701611104565b935060408601356001600160401b0380821115611635575f80fd5b61164189838a01611573565b94506060880135915080821115611656575f80fd5b61166289838a01611573565b93506080880135915080821115611677575f80fd5b50611684888289016112b9565b9150509295509295909350565b5f805f805f60a086880312156116a5575f80fd5b6116ae86611104565b94506116bc60208701611104565b9350604086013592506060860135915060808601356001600160401b038111156116e4575f80fd5b611684888289016112b9565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260a060408201525f61173f60a0830186886116f0565b60608301949094525060800152949350505050565b60018060a01b0385168152836020820152606060408201525f61177b6060830184866116f0565b9695505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156117a9575f80fd5b61083e82611104565b5f808335601e198436030181126117c7575f80fd5b8301803591506001600160401b038211156117e0575f80fd5b60200191503681900382131561115c575f80fd5b5f838385526020808601955060208560051b830101845f5b8781101561187857848303601f19018952813536889003601e19018112611831575f80fd5b870184810190356001600160401b0381111561184b575f80fd5b803603821315611859575f80fd5b6118648582846116f0565b9a86019a945050509083019060010161180c565b5090979650505050505050565b60a080825281018890525f8960c08301825b8b8110156118c5576001600160a01b036118b084611104565b16825260209283019290910190600101611897565b5083810360208501528881526001600160fb1b038911156118e4575f80fd5b8860051b9150818a6020830137018281036020908101604085015261190c90820187896117f4565b60608401959095525050608001529695505050505050565b8082018082111561069557634e487b7160e01b5f52601160045260245ffd5b818382375f910190815291905056fea2646970667358221220de11af273fb921194275ae1dc745bdf5d347e9ceef6f16207c3a751754ffb5ac64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/TransientSlot.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"TransientSlot\",\n  \"sourceName\": \"contracts/utils/TransientSlot.sol\",\n  \"abi\": [],\n  \"bytecode\": \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122067559b02518773e24a5fa6866418a8edf51bb1a3c7d8f25a62a45f81f7a4d57e64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122067559b02518773e24a5fa6866418a8edf51bb1a3c7d8f25a62a45f81f7a4d57e64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/TransparentUpgradeableProxy.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"TransparentUpgradeableProxy\",\n  \"sourceName\": \"contracts/proxy/transparent/TransparentUpgradeableProxy.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_logic\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initialOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"admin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidAdmin\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidImplementation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC1967NonPayable\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ProxyDeniedAdminAccess\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"previousAdmin\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"newAdmin\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Upgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"fallback\"\n    }\n  ],\n  \"bytecode\": \"0x60a060405260405162000e5038038062000e508339810160408190526200002691620003bc565b828162000034828262000099565b50508160405162000045906200035a565b6001600160a01b039091168152602001604051809103905ff0801580156200006f573d5f803e3d5ffd5b506001600160a01b0316608052620000906200008a60805190565b620000fe565b505050620004b3565b620000a4826200016f565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115620000f057620000eb8282620001ee565b505050565b620000fa62000267565b5050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200013f5f8051602062000e30833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16200016c8162000289565b50565b806001600160a01b03163b5f03620001aa57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b60605f80846001600160a01b0316846040516200020c919062000496565b5f60405180830381855af49150503d805f811462000246576040519150601f19603f3d011682016040523d82523d5f602084013e6200024b565b606091505b5090925090506200025e858383620002ca565b95945050505050565b3415620002875760405163b398979f60e01b815260040160405180910390fd5b565b6001600160a01b038116620002b457604051633173bdd160e11b81525f6004820152602401620001a1565b805f8051602062000e30833981519152620001cd565b606082620002e357620002dd8262000330565b62000329565b8151158015620002fb57506001600160a01b0384163b155b156200032657604051639996b31560e01b81526001600160a01b0385166004820152602401620001a1565b50805b9392505050565b805115620003415780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b6104fc806200093483390190565b80516001600160a01b03811681146200037f575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f5b83811015620003b45781810151838201526020016200039a565b50505f910152565b5f805f60608486031215620003cf575f80fd5b620003da8462000368565b9250620003ea6020850162000368565b60408501519092506001600160401b038082111562000407575f80fd5b818601915086601f8301126200041b575f80fd5b81518181111562000430576200043062000384565b604051601f8201601f19908116603f011681019083821181831017156200045b576200045b62000384565b8160405282815289602084870101111562000474575f80fd5b6200048783602083016020880162000398565b80955050505050509250925092565b5f8251620004a981846020870162000398565b9190910192915050565b608051610469620004cb5f395f601001526104695ff3fe608060405261000c61000e565b005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361007a575f356001600160e01b03191663278f794360e11b14610070576040516334ad5dbb60e21b815260040160405180910390fd5b610078610082565b565b6100786100b0565b5f806100913660048184610303565b81019061009e919061033e565b915091506100ac82826100c0565b5050565b6100786100bb61011a565b610151565b6100c98261016f565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156101125761010d82826101ea565b505050565b6100ac61025c565b5f61014c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e80801561016b573d5ff35b3d5ffd5b806001600160a01b03163b5f036101a957604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b0316846040516102069190610407565b5f60405180830381855af49150503d805f811461023e576040519150601f19603f3d011682016040523d82523d5f602084013e610243565b606091505b509150915061025385838361027b565b95945050505050565b34156100785760405163b398979f60e01b815260040160405180910390fd5b6060826102905761028b826102da565b6102d3565b81511580156102a757506001600160a01b0384163b155b156102d057604051639996b31560e01b81526001600160a01b03851660048201526024016101a0565b50805b9392505050565b8051156102ea5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b5f8085851115610311575f80fd5b8386111561031d575f80fd5b5050820193919092039150565b634e487b7160e01b5f52604160045260245ffd5b5f806040838503121561034f575f80fd5b82356001600160a01b0381168114610365575f80fd5b9150602083013567ffffffffffffffff80821115610381575f80fd5b818501915085601f830112610394575f80fd5b8135818111156103a6576103a661032a565b604051601f8201601f19908116603f011681019083821181831017156103ce576103ce61032a565b816040528281528860208487010111156103e6575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f82515f5b81811015610426576020818601810151858301520161040c565b505f92019182525091905056fea2646970667358221220144540a3da1eeb284557bbef51db25d17a3922d841b2b7ae61dd8e0bd574e02164736f6c63430008180033608060405234801561000f575f80fd5b506040516104fc3803806104fc83398101604081905261002e916100bb565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100658161006c565b50506100e8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100cb575f80fd5b81516001600160a01b03811681146100e1575f80fd5b9392505050565b610407806100f55f395ff3fe608060405260043610610049575f3560e01c8063715018a61461004d5780638da5cb5b146100635780639623609d1461008e578063ad3cb1cc146100a1578063f2fde38b146100de575b5f80fd5b348015610058575f80fd5b506100616100fd565b005b34801561006e575f80fd5b505f546040516001600160a01b0390911681526020015b60405180910390f35b61006161009c366004610260565b610110565b3480156100ac575f80fd5b506100d1604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516100859190610372565b3480156100e9575f80fd5b506100616100f836600461038b565b61017b565b6101056101bd565b61010e5f6101e9565b565b6101186101bd565b60405163278f794360e11b81526001600160a01b03841690634f1ef28690349061014890869086906004016103a6565b5f604051808303818588803b15801561015f575f80fd5b505af1158015610171573d5f803e3d5ffd5b5050505050505050565b6101836101bd565b6001600160a01b0381166101b157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101ba816101e9565b50565b5f546001600160a01b0316331461010e5760405163118cdaa760e01b81523360048201526024016101a8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146101ba575f80fd5b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610272575f80fd5b833561027d81610238565b9250602084013561028d81610238565b9150604084013567ffffffffffffffff808211156102a9575f80fd5b818601915086601f8301126102bc575f80fd5b8135818111156102ce576102ce61024c565b604051601f8201601f19908116603f011681019083821181831017156102f6576102f661024c565b8160405282815289602084870101111561030e575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f81518084525f5b8181101561035357602081850181015186830182015201610337565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610384602083018461032f565b9392505050565b5f6020828403121561039b575f80fd5b813561038481610238565b6001600160a01b03831681526040602082018190525f906103c99083018461032f565b94935050505056fea2646970667358221220a5b3b5422a1c36f128dc73472e47070629e5a0b2f010e683df830b88b3d82d8064736f6c63430008180033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\",\n  \"deployedBytecode\": \"0x608060405261000c61000e565b005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361007a575f356001600160e01b03191663278f794360e11b14610070576040516334ad5dbb60e21b815260040160405180910390fd5b610078610082565b565b6100786100b0565b5f806100913660048184610303565b81019061009e919061033e565b915091506100ac82826100c0565b5050565b6100786100bb61011a565b610151565b6100c98261016f565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156101125761010d82826101ea565b505050565b6100ac61025c565b5f61014c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e80801561016b573d5ff35b3d5ffd5b806001600160a01b03163b5f036101a957604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b0316846040516102069190610407565b5f60405180830381855af49150503d805f811461023e576040519150601f19603f3d011682016040523d82523d5f602084013e610243565b606091505b509150915061025385838361027b565b95945050505050565b34156100785760405163b398979f60e01b815260040160405180910390fd5b6060826102905761028b826102da565b6102d3565b81511580156102a757506001600160a01b0384163b155b156102d057604051639996b31560e01b81526001600160a01b03851660048201526024016101a0565b50805b9392505050565b8051156102ea5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b5f8085851115610311575f80fd5b8386111561031d575f80fd5b5050820193919092039150565b634e487b7160e01b5f52604160045260245ffd5b5f806040838503121561034f575f80fd5b82356001600160a01b0381168114610365575f80fd5b9150602083013567ffffffffffffffff80821115610381575f80fd5b818501915085601f830112610394575f80fd5b8135818111156103a6576103a661032a565b604051601f8201601f19908116603f011681019083821181831017156103ce576103ce61032a565b816040528281528860208487010111156103e6575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f82515f5b81811015610426576020818601810151858301520161040c565b505f92019182525091905056fea2646970667358221220144540a3da1eeb284557bbef51db25d17a3922d841b2b7ae61dd8e0bd574e02164736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/UUPSUpgradeable.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"UUPSUpgradeable\",\n  \"sourceName\": \"contracts/proxy/utils/UUPSUpgradeable.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"AddressEmptyCode\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ERC1967InvalidImplementation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC1967NonPayable\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"UUPSUnauthorizedCallContext\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"slot\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"UUPSUnsupportedProxiableUUID\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Upgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"UPGRADE_INTERFACE_VERSION\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proxiableUUID\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newImplementation\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"upgradeToAndCall\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/UpgradeableBeacon.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"UpgradeableBeacon\",\n  \"sourceName\": \"contracts/proxy/beacon/UpgradeableBeacon.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation_\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"initialOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"BeaconInvalidImplementation\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableInvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"implementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Upgraded\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"implementation\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"renounceOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newImplementation\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"upgradeTo\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x608060405234801561000f575f80fd5b5060405161042138038061042183398101604081905261002e9161015f565b806001600160a01b03811661005d57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61006681610077565b50610070826100c6565b5050610190565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b806001600160a01b03163b5f036100fb5760405163211eb15960e21b81526001600160a01b0382166004820152602401610054565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b80516001600160a01b038116811461015a575f80fd5b919050565b5f8060408385031215610170575f80fd5b61017983610144565b915061018760208401610144565b90509250929050565b6102848061019d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80633659cfe6146100595780635c60da1b1461006e578063715018a6146100975780638da5cb5b1461009f578063f2fde38b146100af575b5f80fd5b61006c610067366004610221565b6100c2565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006c6100d6565b5f546001600160a01b031661007b565b61006c6100bd366004610221565b6100e9565b6100ca610128565b6100d381610154565b50565b6100de610128565b6100e75f6101d2565b565b6100f1610128565b6001600160a01b03811661011f57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6100d3816101d2565b5f546001600160a01b031633146100e75760405163118cdaa760e01b8152336004820152602401610116565b806001600160a01b03163b5f036101895760405163211eb15960e21b81526001600160a01b0382166004820152602401610116565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610231575f80fd5b81356001600160a01b0381168114610247575f80fd5b939250505056fea26469706673582212200739f5ef27a9ce6e32e35ed5637382d152c2c63c3b23a1f5474cbf4703709ecb64736f6c63430008180033\",\n  \"deployedBytecode\": \"0x608060405234801561000f575f80fd5b5060043610610055575f3560e01c80633659cfe6146100595780635c60da1b1461006e578063715018a6146100975780638da5cb5b1461009f578063f2fde38b146100af575b5f80fd5b61006c610067366004610221565b6100c2565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006c6100d6565b5f546001600160a01b031661007b565b61006c6100bd366004610221565b6100e9565b6100ca610128565b6100d381610154565b50565b6100de610128565b6100e75f6101d2565b565b6100f1610128565b6001600160a01b03811661011f57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6100d3816101d2565b5f546001600160a01b031633146100e75760405163118cdaa760e01b8152336004820152602401610116565b806001600160a01b03163b5f036101895760405163211eb15960e21b81526001600160a01b0382166004820152602401610116565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610231575f80fd5b81356001600160a01b0381168114610247575f80fd5b939250505056fea26469706673582212200739f5ef27a9ce6e32e35ed5637382d152c2c63c3b23a1f5474cbf4703709ecb64736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/VestingWallet.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"VestingWallet\",\n  \"sourceName\": \"contracts/finance/VestingWallet.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"beneficiary\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"startTimestamp\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"durationSeconds\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableInvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"SafeERC20FailedOperation\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20Released\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"EtherReleased\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"duration\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"end\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"releasable\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"releasable\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"release\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"release\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"released\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"released\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"renounceOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"start\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"timestamp\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"vestedAmount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"timestamp\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"vestedAmount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x60c0604052604051610a9a380380610a9a833981016040819052610022916100dc565b826001600160a01b03811661005057604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61005981610072565b506001600160401b039182166080521660a05250610129565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160401b03811681146100d7575f80fd5b919050565b5f805f606084860312156100ee575f80fd5b83516001600160a01b0381168114610104575f80fd5b9250610112602085016100c1565b9150610120604085016100c1565b90509250925092565b60805160a0516109426101585f395f8181610127015281816104d401526105b201525f6104ae01526109425ff3fe6080604052600436106100dc575f3560e01c8063961325211161007c578063be9a655511610057578063be9a65551461024a578063efbe1c1c1461025e578063f2fde38b14610272578063fbccedae14610291575f80fd5b806396132521146101e35780639852595c146101f7578063a3f8eace1461022b575f80fd5b8063715018a6116100b7578063715018a614610176578063810ec23b1461018a57806386d1a69f146101a95780638da5cb5b146101bd575f80fd5b80630a17b06b146100e75780630fb5a6b4146101195780631916558714610155575f80fd5b366100e357005b5f80fd5b3480156100f2575f80fd5b5061010661010136600461080c565b6102a5565b6040519081526020015b60405180910390f35b348015610124575f80fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16610106565b348015610160575f80fd5b5061017461016f36600461083b565b6102c8565b005b348015610181575f80fd5b50610174610360565b348015610195575f80fd5b506101066101a4366004610854565b610373565b3480156101b4575f80fd5b50610174610406565b3480156101c8575f80fd5b505f546040516001600160a01b039091168152602001610110565b3480156101ee575f80fd5b50600154610106565b348015610202575f80fd5b5061010661021136600461083b565b6001600160a01b03165f9081526002602052604090205490565b348015610236575f80fd5b5061010661024536600461083b565b610477565b348015610255575f80fd5b506101066104a3565b348015610269575f80fd5b506101066104d1565b34801561027d575f80fd5b5061017461028c36600461083b565b610514565b34801561029c575f80fd5b50610106610553565b5f6102c26102b260015490565b6102bc9047610899565b83610570565b92915050565b5f6102d282610477565b6001600160a01b0383165f908152600260205260408120805492935083929091906102fe908490610899565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a261035c826103565f546001600160a01b031690565b83610612565b5050565b610368610669565b6103715f610695565b565b6001600160a01b0382165f908152600260205260408120546103ff906040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156103d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f591906108ac565b6102bc9190610899565b9392505050565b5f61040f610553565b90508060015f8282546104229190610899565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a161047461046e5f546001600160a01b031690565b826106e4565b50565b6001600160a01b0381165f908152600260205260408120546104998342610373565b6102c291906108c3565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b5f7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166105056104a3565b61050f9190610899565b905090565b61051c610669565b6001600160a01b03811661054a57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61047481610695565b5f61055d60015490565b610566426102a5565b61050f91906108c3565b5f6105796104a3565b8267ffffffffffffffff16101561059157505f6102c2565b6105996104d1565b8267ffffffffffffffff16106105b05750816102c2565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166105e36104a3565b6105f79067ffffffffffffffff85166108c3565b61060190856108d6565b61060b91906108ed565b90506102c2565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261066490849061077e565b505050565b5f546001600160a01b031633146103715760405163118cdaa760e01b8152336004820152602401610541565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8047101561070e5760405163cf47918160e01b815247600482015260248101829052604401610541565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610757576040519150601f19603f3d011682016040523d82523d5f602084013e61075c565b606091505b50509050806106645760405163d6bda27560e01b815260040160405180910390fd5b5f8060205f8451602086015f885af18061079d576040513d5f823e3d81fd5b50505f513d915081156107b45780600114156107c1565b6001600160a01b0384163b155b156107ea57604051635274afe760e01b81526001600160a01b0385166004820152602401610541565b50505050565b803567ffffffffffffffff81168114610807575f80fd5b919050565b5f6020828403121561081c575f80fd5b6103ff826107f0565b80356001600160a01b0381168114610807575f80fd5b5f6020828403121561084b575f80fd5b6103ff82610825565b5f8060408385031215610865575f80fd5b61086e83610825565b915061087c602084016107f0565b90509250929050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156102c2576102c2610885565b5f602082840312156108bc575f80fd5b5051919050565b818103818111156102c2576102c2610885565b80820281158282048414176102c2576102c2610885565b5f8261090757634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212206768de171335f816073578708d1a5c244463d71f1dd5dc91370c74f46a85da7164736f6c63430008180033\",\n  \"deployedBytecode\": \"0x6080604052600436106100dc575f3560e01c8063961325211161007c578063be9a655511610057578063be9a65551461024a578063efbe1c1c1461025e578063f2fde38b14610272578063fbccedae14610291575f80fd5b806396132521146101e35780639852595c146101f7578063a3f8eace1461022b575f80fd5b8063715018a6116100b7578063715018a614610176578063810ec23b1461018a57806386d1a69f146101a95780638da5cb5b146101bd575f80fd5b80630a17b06b146100e75780630fb5a6b4146101195780631916558714610155575f80fd5b366100e357005b5f80fd5b3480156100f2575f80fd5b5061010661010136600461080c565b6102a5565b6040519081526020015b60405180910390f35b348015610124575f80fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16610106565b348015610160575f80fd5b5061017461016f36600461083b565b6102c8565b005b348015610181575f80fd5b50610174610360565b348015610195575f80fd5b506101066101a4366004610854565b610373565b3480156101b4575f80fd5b50610174610406565b3480156101c8575f80fd5b505f546040516001600160a01b039091168152602001610110565b3480156101ee575f80fd5b50600154610106565b348015610202575f80fd5b5061010661021136600461083b565b6001600160a01b03165f9081526002602052604090205490565b348015610236575f80fd5b5061010661024536600461083b565b610477565b348015610255575f80fd5b506101066104a3565b348015610269575f80fd5b506101066104d1565b34801561027d575f80fd5b5061017461028c36600461083b565b610514565b34801561029c575f80fd5b50610106610553565b5f6102c26102b260015490565b6102bc9047610899565b83610570565b92915050565b5f6102d282610477565b6001600160a01b0383165f908152600260205260408120805492935083929091906102fe908490610899565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a261035c826103565f546001600160a01b031690565b83610612565b5050565b610368610669565b6103715f610695565b565b6001600160a01b0382165f908152600260205260408120546103ff906040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156103d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f591906108ac565b6102bc9190610899565b9392505050565b5f61040f610553565b90508060015f8282546104229190610899565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a161047461046e5f546001600160a01b031690565b826106e4565b50565b6001600160a01b0381165f908152600260205260408120546104998342610373565b6102c291906108c3565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b5f7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166105056104a3565b61050f9190610899565b905090565b61051c610669565b6001600160a01b03811661054a57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61047481610695565b5f61055d60015490565b610566426102a5565b61050f91906108c3565b5f6105796104a3565b8267ffffffffffffffff16101561059157505f6102c2565b6105996104d1565b8267ffffffffffffffff16106105b05750816102c2565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166105e36104a3565b6105f79067ffffffffffffffff85166108c3565b61060190856108d6565b61060b91906108ed565b90506102c2565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261066490849061077e565b505050565b5f546001600160a01b031633146103715760405163118cdaa760e01b8152336004820152602401610541565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8047101561070e5760405163cf47918160e01b815247600482015260248101829052604401610541565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610757576040519150601f19603f3d011682016040523d82523d5f602084013e61075c565b606091505b50509050806106645760405163d6bda27560e01b815260040160405180910390fd5b5f8060205f8451602086015f885af18061079d576040513d5f823e3d81fd5b50505f513d915081156107b45780600114156107c1565b6001600160a01b0384163b155b156107ea57604051635274afe760e01b81526001600160a01b0385166004820152602401610541565b50505050565b803567ffffffffffffffff81168114610807575f80fd5b919050565b5f6020828403121561081c575f80fd5b6103ff826107f0565b80356001600160a01b0381168114610807575f80fd5b5f6020828403121561084b575f80fd5b6103ff82610825565b5f8060408385031215610865575f80fd5b61086e83610825565b915061087c602084016107f0565b90509250929050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156102c2576102c2610885565b5f602082840312156108bc575f80fd5b5051919050565b818103818111156102c2576102c2610885565b80820281158282048414176102c2576102c2610885565b5f8261090757634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212206768de171335f816073578708d1a5c244463d71f1dd5dc91370c74f46a85da7164736f6c63430008180033\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/VestingWalletCliff.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"VestingWalletCliff\",\n  \"sourceName\": \"contracts/finance/VestingWalletCliff.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"FailedCall\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"balance\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"needed\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InsufficientBalance\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"cliffSeconds\",\n          \"type\": \"uint64\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"durationSeconds\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"InvalidCliffDuration\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableInvalidOwner\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnableUnauthorizedAccount\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"SafeERC20FailedOperation\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ERC20Released\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"EtherReleased\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"previousOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"OwnershipTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"cliff\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"duration\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"end\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"owner\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"releasable\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"releasable\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"release\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"release\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"released\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"released\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"renounceOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"start\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferOwnership\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"timestamp\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"vestedAmount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint64\",\n          \"name\": \"timestamp\",\n          \"type\": \"uint64\"\n        }\n      ],\n      \"name\": \"vestedAmount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/build/contracts/Votes.json": "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Votes\",\n  \"sourceName\": \"contracts/governance/utils/Votes.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"CheckpointUnorderedInsertion\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ECDSAInvalidSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"length\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureLength\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"ECDSAInvalidSignatureS\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"clock\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"name\": \"ERC5805FutureLookup\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"ERC6372InconsistentClock\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"currentNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"InvalidAccountNonce\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"InvalidShortString\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"bits\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"SafeCastOverflowedUintDowncast\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"str\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"StringTooLong\",\n      \"type\": \"error\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"VotesExpiredSignature\",\n      \"type\": \"error\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"fromDelegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"toDelegate\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DelegateChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"delegate\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"previousVotes\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"newVotes\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DelegateVotesChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [],\n      \"name\": \"EIP712DomainChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"CLOCK_MODE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"clock\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"\",\n          \"type\": \"uint48\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"delegatee\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"delegateBySig\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"delegates\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"eip712Domain\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes1\",\n          \"name\": \"fields\",\n          \"type\": \"bytes1\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"verifyingContract\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"salt\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"extensions\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastTotalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"timepoint\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPastVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getVotes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/finance/VestingWallet.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (finance/VestingWallet.sol)\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"../token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"../utils/Address.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {Ownable} from \"../access/Ownable.sol\";\n\n/**\n * @dev A vesting wallet is an ownable contract that can receive native currency and ERC-20 tokens, and release these\n * assets to the wallet owner, also referred to as \"beneficiary\", according to a vesting schedule.\n *\n * Any assets transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\n * be immediately releasable.\n *\n * By setting the duration to 0, one can configure this contract to behave like an asset timelock that hold tokens for\n * a beneficiary until a specified time.\n *\n * NOTE: Since the wallet is {Ownable}, and ownership can be transferred, it is possible to sell unvested tokens.\n * Preventing this in a smart contract is difficult, considering that: 1) a beneficiary address could be a\n * counterfactually deployed contract, 2) there is likely to be a migration path for EOAs to become contracts in the\n * near future.\n *\n * NOTE: When using this contract with any token whose balance is adjusted automatically (i.e. a rebase token), make\n * sure to account the supply/balance adjustment in the vesting schedule to ensure the vested amount is as intended.\n */\ncontract VestingWallet is Context, Ownable {\n    event EtherReleased(uint256 amount);\n    event ERC20Released(address indexed token, uint256 amount);\n\n    uint256 private _released;\n    mapping(address token => uint256) private _erc20Released;\n    uint64 private immutable _start;\n    uint64 private immutable _duration;\n\n    /**\n     * @dev Sets the beneficiary (owner), the start timestamp and the vesting duration (in seconds) of the vesting\n     * wallet.\n     */\n    constructor(address beneficiary, uint64 startTimestamp, uint64 durationSeconds) payable Ownable(beneficiary) {\n        _start = startTimestamp;\n        _duration = durationSeconds;\n    }\n\n    /**\n     * @dev The contract should be able to receive Eth.\n     */\n    receive() external payable virtual {}\n\n    /**\n     * @dev Getter for the start timestamp.\n     */\n    function start() public view virtual returns (uint256) {\n        return _start;\n    }\n\n    /**\n     * @dev Getter for the vesting duration.\n     */\n    function duration() public view virtual returns (uint256) {\n        return _duration;\n    }\n\n    /**\n     * @dev Getter for the end timestamp.\n     */\n    function end() public view virtual returns (uint256) {\n        return start() + duration();\n    }\n\n    /**\n     * @dev Amount of eth already released\n     */\n    function released() public view virtual returns (uint256) {\n        return _released;\n    }\n\n    /**\n     * @dev Amount of token already released\n     */\n    function released(address token) public view virtual returns (uint256) {\n        return _erc20Released[token];\n    }\n\n    /**\n     * @dev Getter for the amount of releasable eth.\n     */\n    function releasable() public view virtual returns (uint256) {\n        return vestedAmount(uint64(block.timestamp)) - released();\n    }\n\n    /**\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\n     * {IERC20} contract.\n     */\n    function releasable(address token) public view virtual returns (uint256) {\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\n    }\n\n    /**\n     * @dev Release the native token (ether) that have already vested.\n     *\n     * Emits a {EtherReleased} event.\n     */\n    function release() public virtual {\n        uint256 amount = releasable();\n        _released += amount;\n        emit EtherReleased(amount);\n        Address.sendValue(payable(owner()), amount);\n    }\n\n    /**\n     * @dev Release the tokens that have already vested.\n     *\n     * Emits a {ERC20Released} event.\n     */\n    function release(address token) public virtual {\n        uint256 amount = releasable(token);\n        _erc20Released[token] += amount;\n        emit ERC20Released(token, amount);\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\n    }\n\n    /**\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\n     */\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(address(this).balance + released(), timestamp);\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\n     */\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\n    }\n\n    /**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation.\n     */\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\n        if (timestamp < start()) {\n            return 0;\n        } else if (timestamp >= end()) {\n            return totalAllocation;\n        } else {\n            return (totalAllocation * (timestamp - start())) / duration();\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/finance/VestingWalletCliff.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (finance/VestingWalletCliff.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"../utils/math/SafeCast.sol\";\nimport {VestingWallet} from \"./VestingWallet.sol\";\n\n/**\n * @dev Extension of {VestingWallet} that adds a cliff to the vesting schedule.\n *\n * _Available since v5.1._\n */\nabstract contract VestingWalletCliff is VestingWallet {\n    using SafeCast for *;\n\n    uint64 private immutable _cliff;\n\n    /// @dev The specified cliff duration is larger than the vesting duration.\n    error InvalidCliffDuration(uint64 cliffSeconds, uint64 durationSeconds);\n\n    /**\n     * @dev Set the duration of the cliff, in seconds. The cliff starts vesting schedule (see {VestingWallet}'s\n     * constructor) and ends `cliffSeconds` later.\n     */\n    constructor(uint64 cliffSeconds) {\n        if (cliffSeconds > duration()) {\n            revert InvalidCliffDuration(cliffSeconds, duration().toUint64());\n        }\n        _cliff = start().toUint64() + cliffSeconds;\n    }\n\n    /**\n     * @dev Getter for the cliff timestamp.\n     */\n    function cliff() public view virtual returns (uint256) {\n        return _cliff;\n    }\n\n    /**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation. Returns 0 if the {cliff} timestamp is not met.\n     *\n     * IMPORTANT: The cliff not only makes the schedule return 0, but it also ignores every possible side\n     * effect from calling the inherited implementation (i.e. `super._vestingSchedule`). Carefully consider\n     * this caveat if the overridden implementation of this function has any (e.g. writing to memory or reverting).\n     */\n    function _vestingSchedule(\n        uint256 totalAllocation,\n        uint64 timestamp\n    ) internal view virtual override returns (uint256) {\n        return timestamp < cliff() ? 0 : super._vestingSchedule(totalAllocation, timestamp);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/Governor.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/Governor.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../token/ERC721/IERC721Receiver.sol\";\nimport {IERC1155Receiver} from \"../token/ERC1155/IERC1155Receiver.sol\";\nimport {EIP712} from \"../utils/cryptography/EIP712.sol\";\nimport {SignatureChecker} from \"../utils/cryptography/SignatureChecker.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\nimport {SafeCast} from \"../utils/math/SafeCast.sol\";\nimport {DoubleEndedQueue} from \"../utils/structs/DoubleEndedQueue.sol\";\nimport {Address} from \"../utils/Address.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {Nonces} from \"../utils/Nonces.sol\";\nimport {IGovernor, IERC6372} from \"./IGovernor.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended through various modules.\n *\n * This contract is abstract and requires several functions to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {_getVotes}\n * - Additionally, {votingPeriod} must also be implemented\n */\nabstract contract Governor is Context, ERC165, EIP712, Nonces, IGovernor, IERC721Receiver, IERC1155Receiver {\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\n\n    bytes32 public constant BALLOT_TYPEHASH =\n        keccak256(\"Ballot(uint256 proposalId,uint8 support,address voter,uint256 nonce)\");\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\n        keccak256(\n            \"ExtendedBallot(uint256 proposalId,uint8 support,address voter,uint256 nonce,string reason,bytes params)\"\n        );\n\n    struct ProposalCore {\n        address proposer;\n        uint48 voteStart;\n        uint32 voteDuration;\n        bool executed;\n        bool canceled;\n        uint48 etaSeconds;\n    }\n\n    bytes32 private constant ALL_PROPOSAL_STATES_BITMAP = bytes32((2 ** (uint8(type(ProposalState).max) + 1)) - 1);\n    string private _name;\n\n    mapping(uint256 proposalId => ProposalCore) private _proposals;\n\n    // This queue keeps track of the governor operating on itself. Calls to functions protected by the {onlyGovernance}\n    // modifier needs to be whitelisted in this queue. Whitelisting is set in {execute}, consumed by the\n    // {onlyGovernance} modifier and eventually reset after {_executeOperations} completes. This ensures that the\n    // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\n\n    /**\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\n     * parameter setters in {GovernorSettings} are protected using this modifier.\n     *\n     * The governance executing address may be different from the Governor's own address, for example it could be a\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\n     * governance protocol (since v4.6).\n     */\n    modifier onlyGovernance() {\n        _checkGovernance();\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\n     */\n    receive() external payable virtual {\n        if (_executor() != address(this)) {\n            revert GovernorDisabledDeposit();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return\n            interfaceId == type(IGovernor).interfaceId ||\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState) {\n        // We read the struct fields into the stack at once so Solidity emits a single SLOAD\n        ProposalCore storage proposal = _proposals[proposalId];\n        bool proposalExecuted = proposal.executed;\n        bool proposalCanceled = proposal.canceled;\n\n        if (proposalExecuted) {\n            return ProposalState.Executed;\n        }\n\n        if (proposalCanceled) {\n            return ProposalState.Canceled;\n        }\n\n        uint256 snapshot = proposalSnapshot(proposalId);\n\n        if (snapshot == 0) {\n            revert GovernorNonexistentProposal(proposalId);\n        }\n\n        uint256 currentTimepoint = clock();\n\n        if (snapshot >= currentTimepoint) {\n            return ProposalState.Pending;\n        }\n\n        uint256 deadline = proposalDeadline(proposalId);\n\n        if (deadline >= currentTimepoint) {\n            return ProposalState.Active;\n        } else if (!_quorumReached(proposalId) || !_voteSucceeded(proposalId)) {\n            return ProposalState.Defeated;\n        } else if (proposalEta(proposalId) == 0) {\n            return ProposalState.Succeeded;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalThreshold}.\n     */\n    function proposalThreshold() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256) {\n        return _proposals[proposalId].voteStart;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256) {\n        return _proposals[proposalId].voteStart + _proposals[proposalId].voteDuration;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalProposer}.\n     */\n    function proposalProposer(uint256 proposalId) public view virtual returns (address) {\n        return _proposals[proposalId].proposer;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalEta}.\n     */\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256) {\n        return _proposals[proposalId].etaSeconds;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalNeedsQueuing}.\n     */\n    function proposalNeedsQueuing(uint256) public view virtual returns (bool) {\n        return false;\n    }\n\n    /**\n     * @dev Reverts if the `msg.sender` is not the executor. In case the executor is not this contract\n     * itself, the function reverts if `msg.data` is not whitelisted as a result of an {execute}\n     * operation. See {onlyGovernance}.\n     */\n    function _checkGovernance() internal virtual {\n        if (_executor() != _msgSender()) {\n            revert GovernorOnlyExecutor(_msgSender());\n        }\n        if (_executor() != address(this)) {\n            bytes32 msgDataHash = keccak256(_msgData());\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\n            while (_governanceCall.popFront() != msgDataHash) {}\n        }\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Get the voting weight of `account` at a specific `timepoint`, for a vote as described by `params`.\n     */\n    function _getVotes(address account, uint256 timepoint, bytes memory params) internal view virtual returns (uint256);\n\n    /**\n     * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 totalWeight,\n        bytes memory params\n    ) internal virtual returns (uint256);\n\n    /**\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\n     *\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\n     * meaning of the additional params, in the context of that implementation\n     */\n    function _defaultParams() internal view virtual returns (bytes memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256) {\n        address proposer = _msgSender();\n\n        // check description restriction\n        if (!_isValidDescriptionForProposer(proposer, description)) {\n            revert GovernorRestrictedProposer(proposer);\n        }\n\n        // check proposal threshold\n        uint256 votesThreshold = proposalThreshold();\n        if (votesThreshold > 0) {\n            uint256 proposerVotes = getVotes(proposer, clock() - 1);\n            if (proposerVotes < votesThreshold) {\n                revert GovernorInsufficientProposerVotes(proposer, proposerVotes, votesThreshold);\n            }\n        }\n\n        return _propose(targets, values, calldatas, description, proposer);\n    }\n\n    /**\n     * @dev Internal propose mechanism. Can be overridden to add more logic on proposal creation.\n     *\n     * Emits a {IGovernor-ProposalCreated} event.\n     */\n    function _propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description,\n        address proposer\n    ) internal virtual returns (uint256 proposalId) {\n        proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        if (targets.length != values.length || targets.length != calldatas.length || targets.length == 0) {\n            revert GovernorInvalidProposalLength(targets.length, calldatas.length, values.length);\n        }\n        if (_proposals[proposalId].voteStart != 0) {\n            revert GovernorUnexpectedProposalState(proposalId, state(proposalId), bytes32(0));\n        }\n\n        uint256 snapshot = clock() + votingDelay();\n        uint256 duration = votingPeriod();\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        proposal.proposer = proposer;\n        proposal.voteStart = SafeCast.toUint48(snapshot);\n        proposal.voteDuration = SafeCast.toUint32(duration);\n\n        emit ProposalCreated(\n            proposalId,\n            proposer,\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            snapshot + duration,\n            description\n        );\n\n        // Using a named return variable to avoid stack too deep errors\n    }\n\n    /**\n     * @dev See {IGovernor-queue}.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Succeeded));\n\n        uint48 etaSeconds = _queueOperations(proposalId, targets, values, calldatas, descriptionHash);\n\n        if (etaSeconds != 0) {\n            _proposals[proposalId].etaSeconds = etaSeconds;\n            emit ProposalQueued(proposalId, etaSeconds);\n        } else {\n            revert GovernorQueueNotImplemented();\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal queuing mechanism. Can be overridden (without a super call) to modify the way queuing is\n     * performed (for example adding a vault/timelock).\n     *\n     * This is empty by default, and must be overridden to implement queuing.\n     *\n     * This function returns a timestamp that describes the expected ETA for execution. If the returned value is 0\n     * (which is the default value), the core will consider queueing did not succeed, and the public {queue} function\n     * will revert.\n     *\n     * NOTE: Calling this function directly will NOT check the current state of the proposal, or emit the\n     * `ProposalQueued` event. Queuing a proposal should be done using {queue}.\n     */\n    function _queueOperations(\n        uint256 /*proposalId*/,\n        address[] memory /*targets*/,\n        uint256[] memory /*values*/,\n        bytes[] memory /*calldatas*/,\n        bytes32 /*descriptionHash*/\n    ) internal virtual returns (uint48) {\n        return 0;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        _validateStateBitmap(\n            proposalId,\n            _encodeStateBitmap(ProposalState.Succeeded) | _encodeStateBitmap(ProposalState.Queued)\n        );\n\n        // mark as executed before calls to avoid reentrancy\n        _proposals[proposalId].executed = true;\n\n        // before execute: register governance call in queue.\n        if (_executor() != address(this)) {\n            for (uint256 i = 0; i < targets.length; ++i) {\n                if (targets[i] == address(this)) {\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\n                }\n            }\n        }\n\n        _executeOperations(proposalId, targets, values, calldatas, descriptionHash);\n\n        // after execute: cleanup governance call queue.\n        if (_executor() != address(this) && !_governanceCall.empty()) {\n            _governanceCall.clear();\n        }\n\n        emit ProposalExecuted(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overridden (without a super call) to modify the way execution is\n     * performed (for example adding a vault/timelock).\n     *\n     * NOTE: Calling this function directly will NOT check the current state of the proposal, set the executed flag to\n     * true or emit the `ProposalExecuted` event. Executing a proposal should be done using {execute} or {_execute}.\n     */\n    function _executeOperations(\n        uint256 /* proposalId */,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata);\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-cancel}.\n     */\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256) {\n        // The proposalId will be recomputed in the `_cancel` call further down. However we need the value before we\n        // do the internal call, because we need to check the proposal state BEFORE the internal `_cancel` call\n        // changes it. The `hashProposal` duplication has a cost that is limited, and that we accept.\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        // public cancel restrictions (on top of existing _cancel restrictions).\n        _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Pending));\n        if (_msgSender() != proposalProposer(proposalId)) {\n            revert GovernorOnlyProposer(_msgSender());\n        }\n\n        return _cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @dev Internal cancel mechanism with minimal restrictions. A proposal can be cancelled in any state other than\n     * Canceled, Expired, or Executed. Once cancelled a proposal can't be re-submitted.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        _validateStateBitmap(\n            proposalId,\n            ALL_PROPOSAL_STATES_BITMAP ^\n                _encodeStateBitmap(ProposalState.Canceled) ^\n                _encodeStateBitmap(ProposalState.Expired) ^\n                _encodeStateBitmap(ProposalState.Executed)\n        );\n\n        _proposals[proposalId].canceled = true;\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-getVotes}.\n     */\n    function getVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\n        return _getVotes(account, timepoint, _defaultParams());\n    }\n\n    /**\n     * @dev See {IGovernor-getVotesWithParams}.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 timepoint,\n        bytes memory params\n    ) public view virtual returns (uint256) {\n        return _getVotes(account, timepoint, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        address voter,\n        bytes memory signature\n    ) public virtual returns (uint256) {\n        bool valid = SignatureChecker.isValidSignatureNow(\n            voter,\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support, voter, _useNonce(voter)))),\n            signature\n        );\n\n        if (!valid) {\n            revert GovernorInvalidSignature(voter);\n        }\n\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        address voter,\n        string calldata reason,\n        bytes memory params,\n        bytes memory signature\n    ) public virtual returns (uint256) {\n        bool valid = SignatureChecker.isValidSignatureNow(\n            voter,\n            _hashTypedDataV4(\n                keccak256(\n                    abi.encode(\n                        EXTENDED_BALLOT_TYPEHASH,\n                        proposalId,\n                        support,\n                        voter,\n                        _useNonce(voter),\n                        keccak256(bytes(reason)),\n                        keccak256(params)\n                    )\n                )\n            ),\n            signature\n        );\n\n        if (!valid) {\n            revert GovernorInvalidSignature(voter);\n        }\n\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        return _castVote(proposalId, account, support, reason, _defaultParams());\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason,\n        bytes memory params\n    ) internal virtual returns (uint256) {\n        _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Active));\n\n        uint256 totalWeight = _getVotes(account, proposalSnapshot(proposalId), params);\n        uint256 votedWeight = _countVote(proposalId, account, support, totalWeight, params);\n\n        if (params.length == 0) {\n            emit VoteCast(account, proposalId, support, votedWeight, reason);\n        } else {\n            emit VoteCastWithParams(account, proposalId, support, votedWeight, reason, params);\n        }\n\n        return votedWeight;\n    }\n\n    /**\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\n     */\n    function relay(address target, uint256 value, bytes calldata data) external payable virtual onlyGovernance {\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        Address.verifyCallResult(success, returndata);\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        if (_executor() != address(this)) {\n            revert GovernorDisabledDeposit();\n        }\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\n     */\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\n        if (_executor() != address(this)) {\n            revert GovernorDisabledDeposit();\n        }\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        if (_executor() != address(this)) {\n            revert GovernorDisabledDeposit();\n        }\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev Encodes a `ProposalState` into a `bytes32` representation where each bit enabled corresponds to\n     * the underlying position in the `ProposalState` enum. For example:\n     *\n     * 0x000...10000\n     *   ^^^^^^------ ...\n     *         ^----- Succeeded\n     *          ^---- Defeated\n     *           ^--- Canceled\n     *            ^-- Active\n     *             ^- Pending\n     */\n    function _encodeStateBitmap(ProposalState proposalState) internal pure returns (bytes32) {\n        return bytes32(1 << uint8(proposalState));\n    }\n\n    /**\n     * @dev Check that the current state of a proposal matches the requirements described by the `allowedStates` bitmap.\n     * This bitmap should be built using `_encodeStateBitmap`.\n     *\n     * If requirements are not met, reverts with a {GovernorUnexpectedProposalState} error.\n     */\n    function _validateStateBitmap(uint256 proposalId, bytes32 allowedStates) private view returns (ProposalState) {\n        ProposalState currentState = state(proposalId);\n        if (_encodeStateBitmap(currentState) & allowedStates == bytes32(0)) {\n            revert GovernorUnexpectedProposalState(proposalId, currentState, allowedStates);\n        }\n        return currentState;\n    }\n\n    /*\n     * @dev Check if the proposer is authorized to submit a proposal with the given description.\n     *\n     * If the proposal description ends with `#proposer=0x???`, where `0x???` is an address written as a hex string\n     * (case insensitive), then the submission of this proposal will only be authorized to said address.\n     *\n     * This is used for frontrunning protection. By adding this pattern at the end of their proposal, one can ensure\n     * that no other address can submit the same proposal. An attacker would have to either remove or change that part,\n     * which would result in a different proposal id.\n     *\n     * If the description does not match this pattern, it is unrestricted and anyone can submit it. This includes:\n     * - If the `0x???` part is not a valid hex string.\n     * - If the `0x???` part is a valid hex string, but does not contain exactly 40 hex digits.\n     * - If it ends with the expected suffix followed by newlines or other whitespace.\n     * - If it ends with some other similar suffix, e.g. `#other=abc`.\n     * - If it does not end with any such suffix.\n     */\n    function _isValidDescriptionForProposer(\n        address proposer,\n        string memory description\n    ) internal view virtual returns (bool) {\n        uint256 len = bytes(description).length;\n\n        // Length is too short to contain a valid proposer suffix\n        if (len < 52) {\n            return true;\n        }\n\n        // Extract what would be the `#proposer=0x` marker beginning the suffix\n        bytes12 marker;\n        assembly (\"memory-safe\") {\n            // - Start of the string contents in memory = description + 32\n            // - First character of the marker = len - 52\n            //   - Length of \"#proposer=0x0000000000000000000000000000000000000000\" = 52\n            // - We read the memory word starting at the first character of the marker:\n            //   - (description + 32) + (len - 52) = description + (len - 20)\n            // - Note: Solidity will ignore anything past the first 12 bytes\n            marker := mload(add(description, sub(len, 20)))\n        }\n\n        // If the marker is not found, there is no proposer suffix to check\n        if (marker != bytes12(\"#proposer=0x\")) {\n            return true;\n        }\n\n        // Parse the 40 characters following the marker as uint160\n        uint160 recovered = 0;\n        for (uint256 i = len - 40; i < len; ++i) {\n            (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);\n            // If any of the characters is not a hex digit, ignore the suffix entirely\n            if (!isHex) {\n                return true;\n            }\n            recovered = (recovered << 4) | value;\n        }\n\n        return recovered == uint160(proposer);\n    }\n\n    /**\n     * @dev Try to parse a character from a string as a hex value. Returns `(true, value)` if the char is in\n     * `[0-9a-fA-F]` and `(false, 0)` otherwise. Value is guaranteed to be in the range `0 <= value < 16`\n     */\n    function _tryHexToUint(bytes1 char) private pure returns (bool isHex, uint8 value) {\n        uint8 c = uint8(char);\n        unchecked {\n            // Case 0-9\n            if (47 < c && c < 58) {\n                return (true, c - 48);\n            }\n            // Case A-F\n            else if (64 < c && c < 71) {\n                return (true, c - 55);\n            }\n            // Case a-f\n            else if (96 < c && c < 103) {\n                return (true, c - 87);\n            }\n            // Else: not a hex char\n            else {\n                return (false, 0);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IERC6372\n     */\n    function clock() public view virtual returns (uint48);\n\n    /**\n     * @inheritdoc IERC6372\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual returns (string memory);\n\n    /**\n     * @inheritdoc IGovernor\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @inheritdoc IGovernor\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @inheritdoc IGovernor\n     */\n    function quorum(uint256 timepoint) public view virtual returns (uint256);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/IGovernor.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/IGovernor.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../interfaces/IERC165.sol\";\nimport {IERC6372} from \"../interfaces/IERC6372.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * NOTE: Event parameters lack the `indexed` keyword for compatibility with GovernorBravo events.\n * Making event parameters `indexed` affects how events are decoded, potentially breaking existing indexers.\n */\ninterface IGovernor is IERC165, IERC6372 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Empty proposal or a mismatch between the parameters length for a proposal call.\n     */\n    error GovernorInvalidProposalLength(uint256 targets, uint256 calldatas, uint256 values);\n\n    /**\n     * @dev The vote was already cast.\n     */\n    error GovernorAlreadyCastVote(address voter);\n\n    /**\n     * @dev Token deposits are disabled in this contract.\n     */\n    error GovernorDisabledDeposit();\n\n    /**\n     * @dev The `account` is not a proposer.\n     */\n    error GovernorOnlyProposer(address account);\n\n    /**\n     * @dev The `account` is not the governance executor.\n     */\n    error GovernorOnlyExecutor(address account);\n\n    /**\n     * @dev The `proposalId` doesn't exist.\n     */\n    error GovernorNonexistentProposal(uint256 proposalId);\n\n    /**\n     * @dev The current state of a proposal is not the required for performing an operation.\n     * The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position\n     * counting from right to left.\n     *\n     * NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist).\n     * This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated).\n     *\n     * See {Governor-_encodeStateBitmap}.\n     */\n    error GovernorUnexpectedProposalState(uint256 proposalId, ProposalState current, bytes32 expectedStates);\n\n    /**\n     * @dev The voting period set is not a valid period.\n     */\n    error GovernorInvalidVotingPeriod(uint256 votingPeriod);\n\n    /**\n     * @dev The `proposer` does not have the required votes to create a proposal.\n     */\n    error GovernorInsufficientProposerVotes(address proposer, uint256 votes, uint256 threshold);\n\n    /**\n     * @dev The `proposer` is not allowed to create a proposal.\n     */\n    error GovernorRestrictedProposer(address proposer);\n\n    /**\n     * @dev The vote type used is not valid for the corresponding counting module.\n     */\n    error GovernorInvalidVoteType();\n\n    /**\n     * @dev The provided params buffer is not supported by the counting module.\n     */\n    error GovernorInvalidVoteParams();\n\n    /**\n     * @dev Queue operation is not implemented for this governor. Execute should be called directly.\n     */\n    error GovernorQueueNotImplemented();\n\n    /**\n     * @dev The proposal hasn't been queued yet.\n     */\n    error GovernorNotQueuedProposal(uint256 proposalId);\n\n    /**\n     * @dev The proposal has already been queued.\n     */\n    error GovernorAlreadyQueuedProposal(uint256 proposalId);\n\n    /**\n     * @dev The provided signature is not valid for the expected `voter`.\n     * If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}.\n     */\n    error GovernorInvalidSignature(address voter);\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 voteStart,\n        uint256 voteEnd,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is queued.\n     */\n    event ProposalQueued(uint256 proposalId, uint256 etaSeconds);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast without params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @dev Emitted when a vote is cast with params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     * `params` are additional encoded parameters. Their interpretation  also depends on the voting module used.\n     */\n    event VoteCastWithParams(\n        address indexed voter,\n        uint256 proposalId,\n        uint8 support,\n        uint256 weight,\n        string reason,\n        bytes params\n    );\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the EIP-712 domain separator).\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the EIP-712 domain separator). Default: \"1\"\n     */\n    function version() external view returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\n     * name that describes the behavior. For example:\n     *\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() external view returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) external pure returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) external view returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev The number of votes required in order for a voter to become a proposer.\n     */\n    function proposalThreshold() external view returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\n     * following block.\n     */\n    function proposalSnapshot(uint256 proposalId) external view returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\n     * possible to cast a vote during this block.\n     */\n    function proposalDeadline(uint256 proposalId) external view returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev The account that created a proposal.\n     */\n    function proposalProposer(uint256 proposalId) external view returns (address);\n\n    /**\n     * @notice module:core\n     * @dev The time when a queued proposal becomes executable (\"ETA\"). Unlike {proposalSnapshot} and\n     * {proposalDeadline}, this doesn't use the governor clock, and instead relies on the executor's clock which may be\n     * different. In most cases this will be a timestamp.\n     */\n    function proposalEta(uint256 proposalId) external view returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Whether a proposal needs to be queued before execution.\n     */\n    function proposalNeedsQueuing(uint256 proposalId) external view returns (bool);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\n     * on the clock (see ERC-6372) this contract uses.\n     *\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\n     * proposal starts.\n     *\n     * NOTE: While this interface returns a uint256, timepoints are stored as uint48 following the ERC-6372 clock type.\n     * Consequently this value must fit in a uint48 (when added to the current clock). See {IERC6372-clock}.\n     */\n    function votingDelay() external view returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock\n     * (see ERC-6372) this contract uses.\n     *\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     *\n     * NOTE: This value is stored when the proposal is submitted so that possible changes to the value do not affect\n     * proposals that have already been submitted. The type used to save it is a uint32. Consequently, while this\n     * interface returns a uint256, the value it returns should fit in a uint32.\n     */\n    function votingPeriod() external view returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\n     */\n    function quorum(uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `timepoint`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 timepoint,\n        bytes memory params\n    ) external view returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) external view returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\n     * duration specified by {IGovernor-votingPeriod}.\n     *\n     * Emits a {ProposalCreated} event.\n     *\n     * NOTE: The state of the Governor and `targets` may change between the proposal creation and its execution.\n     * This may be the result of third party actions on the targeted contracts, or other governor proposals.\n     * For example, the balance of this contract could be updated or its access control permissions may be modified,\n     * possibly compromising the proposal's ability to execute successfully (e.g. the governor doesn't have enough\n     * value to cover a proposal with multiple transfers).\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) external returns (uint256 proposalId);\n\n    /**\n     * @dev Queue a proposal. Some governors require this step to be performed before execution can happen. If queuing\n     * is not necessary, this function may revert.\n     * Queuing a proposal requires the quorum to be reached, the vote to be successful, and the deadline to be reached.\n     *\n     * Emits a {ProposalQueued} event.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) external returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached. Depending on the governor it might also be required that the proposal was queued and\n     * that some delay passed.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * NOTE: Some modules can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) external payable returns (uint256 proposalId);\n\n    /**\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\n     * before the vote starts.\n     *\n     * Emits a {ProposalCanceled} event.\n     */\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) external returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) external returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) external returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters\n     *\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) external returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the voter's signature, including ERC-1271 signature support.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        address voter,\n        bytes memory signature\n    ) external returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters using the voter's signature,\n     * including ERC-1271 signature support.\n     *\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        address voter,\n        string calldata reason,\n        bytes memory params,\n        bytes memory signature\n    ) external returns (uint256 balance);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/TimelockController.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/TimelockController.sol)\n\npragma solidity ^0.8.20;\n\nimport {AccessControl} from \"../access/AccessControl.sol\";\nimport {ERC721Holder} from \"../token/ERC721/utils/ERC721Holder.sol\";\nimport {ERC1155Holder} from \"../token/ERC1155/utils/ERC1155Holder.sol\";\nimport {Address} from \"../utils/Address.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n */\ncontract TimelockController is AccessControl, ERC721Holder, ERC1155Holder {\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    bytes32 public constant CANCELLER_ROLE = keccak256(\"CANCELLER_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 id => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    enum OperationState {\n        Unset,\n        Waiting,\n        Ready,\n        Done\n    }\n\n    /**\n     * @dev Mismatch between the parameters length for an operation call.\n     */\n    error TimelockInvalidOperationLength(uint256 targets, uint256 payloads, uint256 values);\n\n    /**\n     * @dev The schedule operation doesn't meet the minimum delay.\n     */\n    error TimelockInsufficientDelay(uint256 delay, uint256 minDelay);\n\n    /**\n     * @dev The current state of an operation is not as required.\n     * The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position\n     * counting from right to left.\n     *\n     * See {_encodeStateBitmap}.\n     */\n    error TimelockUnexpectedOperationState(bytes32 operationId, bytes32 expectedStates);\n\n    /**\n     * @dev The predecessor to an operation not yet done.\n     */\n    error TimelockUnexecutedPredecessor(bytes32 predecessorId);\n\n    /**\n     * @dev The caller account is not authorized.\n     */\n    error TimelockUnauthorizedCaller(address caller);\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\n     */\n    event CallSalt(bytes32 indexed id, bytes32 salt);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay in seconds for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {\n        // self administration\n        _grantRole(DEFAULT_ADMIN_ROLE, address(this));\n\n        // optional admin\n        if (admin != address(0)) {\n            _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        }\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _grantRole(PROPOSER_ROLE, proposers[i]);\n            _grantRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _grantRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControl, ERC1155Holder) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id corresponds to a registered operation. This\n     * includes both Waiting, Ready, and Done operations.\n     */\n    function isOperation(bytes32 id) public view returns (bool) {\n        return getOperationState(id) != OperationState.Unset;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\".\n     */\n    function isOperationPending(bytes32 id) public view returns (bool) {\n        OperationState state = getOperationState(id);\n        return state == OperationState.Waiting || state == OperationState.Ready;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\".\n     */\n    function isOperationReady(bytes32 id) public view returns (bool) {\n        return getOperationState(id) == OperationState.Ready;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view returns (bool) {\n        return getOperationState(id) == OperationState.Done;\n    }\n\n    /**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns operation state.\n     */\n    function getOperationState(bytes32 id) public view virtual returns (OperationState) {\n        uint256 timestamp = getTimestamp(id);\n        if (timestamp == 0) {\n            return OperationState.Unset;\n        } else if (timestamp == _DONE_TIMESTAMP) {\n            return OperationState.Done;\n        } else if (timestamp > block.timestamp) {\n            return OperationState.Waiting;\n        } else {\n            return OperationState.Ready;\n        }\n    }\n\n    /**\n     * @dev Returns the minimum delay in seconds for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        if (targets.length != values.length || targets.length != payloads.length) {\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\n        }\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        if (isOperation(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Unset));\n        }\n        uint256 minDelay = getMinDelay();\n        if (delay < minDelay) {\n            revert TimelockInsufficientDelay(delay, minDelay);\n        }\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        if (!isOperationPending(id)) {\n            revert TimelockUnexpectedOperationState(\n                id,\n                _encodeStateBitmap(OperationState.Waiting) | _encodeStateBitmap(OperationState.Ready)\n            );\n        }\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        if (targets.length != values.length || targets.length != payloads.length) {\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\n        }\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     */\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        Address.verifyCallResult(success, returndata);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        if (!isOperationReady(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\n        }\n        if (predecessor != bytes32(0) && !isOperationDone(predecessor)) {\n            revert TimelockUnexecutedPredecessor(predecessor);\n        }\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        if (!isOperationReady(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\n        }\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        address sender = _msgSender();\n        if (sender != address(this)) {\n            revert TimelockUnauthorizedCaller(sender);\n        }\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev Encodes a `OperationState` into a `bytes32` representation where each bit enabled corresponds to\n     * the underlying position in the `OperationState` enum. For example:\n     *\n     * 0x000...1000\n     *   ^^^^^^----- ...\n     *         ^---- Done\n     *          ^--- Ready\n     *           ^-- Waiting\n     *            ^- Unset\n     */\n    function _encodeStateBitmap(OperationState operationState) internal pure returns (bytes32) {\n        return bytes32(1 << uint8(operationState));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorCountingFractional.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorCountingFractional.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\nimport {GovernorCountingSimple} from \"./GovernorCountingSimple.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\n\n/**\n * @dev Extension of {Governor} for fractional voting.\n *\n * Similar to {GovernorCountingSimple}, this contract is a votes counting module for {Governor} that supports 3 options:\n * Against, For, Abstain. Additionally, it includes a fourth option: Fractional, which allows voters to split their voting\n * power amongst the other 3 options.\n *\n * Votes cast with the Fractional support must be accompanied by a `params` argument that is three packed `uint128` values\n * representing the weight the delegate assigns to Against, For, and Abstain respectively. For those votes cast for the other\n * 3 options, the `params` argument must be empty.\n *\n * This is mostly useful when the delegate is a contract that implements its own rules for voting. These delegate-contracts\n * can cast fractional votes according to the preferences of multiple entities delegating their voting power.\n *\n * Some example use cases include:\n *\n * * Voting from tokens that are held by a DeFi pool\n * * Voting from an L2 with tokens held by a bridge\n * * Voting privately from a shielded pool using zero knowledge proofs.\n *\n * Based on ScopeLift's GovernorCountingFractional[https://github.com/ScopeLift/flexible-voting/blob/e5de2efd1368387b840931f19f3c184c85842761/src/GovernorCountingFractional.sol]\n *\n * _Available since v5.1._\n */\nabstract contract GovernorCountingFractional is Governor {\n    using Math for *;\n\n    uint8 internal constant VOTE_TYPE_FRACTIONAL = 255;\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address voter => uint256) usedVotes;\n    }\n\n    /**\n     * @dev Mapping from proposal ID to vote tallies for that proposal.\n     */\n    mapping(uint256 proposalId => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev A fractional vote params uses more votes than are available for that user.\n     */\n    error GovernorExceedRemainingWeight(address voter, uint256 usedVotes, uint256 remainingWeight);\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo,fractional&quorum=for,abstain&params=fractional\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return usedVotes(proposalId, account) > 0;\n    }\n\n    /**\n     * @dev Get the number of votes already cast by `account` for a proposal with `proposalId`. Useful for\n     * integrations that allow delegates to cast rolling, partial votes.\n     */\n    function usedVotes(uint256 proposalId, address account) public view virtual returns (uint256) {\n        return _proposalVotes[proposalId].usedVotes[account];\n    }\n\n    /**\n     * @dev Get current distribution of votes for a given proposal.\n     */\n    function proposalVotes(\n        uint256 proposalId\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, forVotes must be > againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return proposalVote.forVotes > proposalVote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. Function that records the delegate's votes.\n     *\n     * Executing this function consumes (part of) the delegate's weight on the proposal. This weight can be\n     * distributed amongst the 3 options (Against, For, Abstain) by specifying a fractional `support`.\n     *\n     * This counting module supports two vote casting modes: nominal and fractional.\n     *\n     * - Nominal: A nominal vote is cast by setting `support` to one of the 3 bravo options (Against, For, Abstain).\n     * - Fractional: A fractional vote is cast by setting `support` to `type(uint8).max` (255).\n     *\n     * Casting a nominal vote requires `params` to be empty and consumes the delegate's full remaining weight on the\n     * proposal for the specified `support` option. This is similar to the {GovernorCountingSimple} module and follows\n     * the `VoteType` enum from Governor Bravo. As a consequence, no vote weight remains unspent so no further voting\n     * is possible (for this `proposalId` and this `account`).\n     *\n     * Casting a fractional vote consumes a fraction of the delegate's remaining weight on the proposal according to the\n     * weights the delegate assigns to each support option (Against, For, Abstain respectively). The sum total of the\n     * three decoded vote weights _must_ be less than or equal to the delegate's remaining weight on the proposal (i.e.\n     * their checkpointed total weight minus votes already cast on the proposal). This format can be produced using:\n     *\n     * `abi.encodePacked(uint128(againstVotes), uint128(forVotes), uint128(abstainVotes))`\n     *\n     * NOTE: Consider that fractional voting restricts the number of casted vote (in each category) to 128 bits.\n     * Depending on how many decimals the underlying token has, a single voter may require to split their vote into\n     * multiple vote operations. For precision higher than ~30 decimals, large token holders may require an\n     * potentially large number of calls to cast all their votes. The voter has the possibility to cast all the\n     * remaining votes in a single operation using the traditional \"bravo\" vote.\n     */\n    // slither-disable-next-line cyclomatic-complexity\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 totalWeight,\n        bytes memory params\n    ) internal virtual override returns (uint256) {\n        // Compute number of remaining votes. Returns 0 on overflow.\n        (, uint256 remainingWeight) = totalWeight.trySub(usedVotes(proposalId, account));\n        if (remainingWeight == 0) {\n            revert GovernorAlreadyCastVote(account);\n        }\n\n        uint256 againstVotes = 0;\n        uint256 forVotes = 0;\n        uint256 abstainVotes = 0;\n        uint256 usedWeight = 0;\n\n        // For clarity of event indexing, fractional voting must be clearly advertised in the \"support\" field.\n        //\n        // Supported `support` value must be:\n        // - \"Full\" voting: `support = 0` (Against), `1` (For) or `2` (Abstain), with empty params.\n        // - \"Fractional\" voting: `support = 255`, with 48 bytes params.\n        if (support == uint8(GovernorCountingSimple.VoteType.Against)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = againstVotes = remainingWeight;\n        } else if (support == uint8(GovernorCountingSimple.VoteType.For)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = forVotes = remainingWeight;\n        } else if (support == uint8(GovernorCountingSimple.VoteType.Abstain)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = abstainVotes = remainingWeight;\n        } else if (support == VOTE_TYPE_FRACTIONAL) {\n            // The `params` argument is expected to be three packed `uint128`:\n            // `abi.encodePacked(uint128(againstVotes), uint128(forVotes), uint128(abstainVotes))`\n            if (params.length != 0x30) revert GovernorInvalidVoteParams();\n\n            assembly (\"memory-safe\") {\n                againstVotes := shr(128, mload(add(params, 0x20)))\n                forVotes := shr(128, mload(add(params, 0x30)))\n                abstainVotes := shr(128, mload(add(params, 0x40)))\n                usedWeight := add(add(againstVotes, forVotes), abstainVotes) // inputs are uint128: cannot overflow\n            }\n\n            // check parsed arguments are valid\n            if (usedWeight > remainingWeight) {\n                revert GovernorExceedRemainingWeight(account, usedWeight, remainingWeight);\n            }\n        } else {\n            revert GovernorInvalidVoteType();\n        }\n\n        // update votes tracking\n        ProposalVote storage details = _proposalVotes[proposalId];\n        if (againstVotes > 0) details.againstVotes += againstVotes;\n        if (forVotes > 0) details.forVotes += forVotes;\n        if (abstainVotes > 0) details.abstainVotes += abstainVotes;\n        details.usedVotes[account] += usedWeight;\n\n        return usedWeight;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorCountingSimple.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorCountingSimple.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\n */\nabstract contract GovernorCountingSimple is Governor {\n    /**\n     * @dev Supported vote types. Matches Governor Bravo ordering.\n     */\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address voter => bool) hasVoted;\n    }\n\n    mapping(uint256 proposalId => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=for,abstain\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalVotes[proposalId].hasVoted[account];\n    }\n\n    /**\n     * @dev Accessor to the internal vote counts.\n     */\n    function proposalVotes(\n        uint256 proposalId\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n\n        return proposalVote.forVotes > proposalVote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 totalWeight,\n        bytes memory // params\n    ) internal virtual override returns (uint256) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n\n        if (proposalVote.hasVoted[account]) {\n            revert GovernorAlreadyCastVote(account);\n        }\n        proposalVote.hasVoted[account] = true;\n\n        if (support == uint8(VoteType.Against)) {\n            proposalVote.againstVotes += totalWeight;\n        } else if (support == uint8(VoteType.For)) {\n            proposalVote.forVotes += totalWeight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            proposalVote.abstainVotes += totalWeight;\n        } else {\n            revert GovernorInvalidVoteType();\n        }\n\n        return totalWeight;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorPreventLateQuorum.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorPreventLateQuorum.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\n\n/**\n * @dev A module that ensures there is a minimum voting period after quorum is reached. This prevents a large voter from\n * swaying a vote and triggering quorum at the last minute, by ensuring there is always time for other voters to react\n * and try to oppose the decision.\n *\n * If a vote causes quorum to be reached, the proposal's voting period may be extended so that it does not end before at\n * least a specified time has passed (the \"vote extension\" parameter). This parameter can be set through a governance\n * proposal.\n */\nabstract contract GovernorPreventLateQuorum is Governor {\n    uint48 private _voteExtension;\n\n    mapping(uint256 proposalId => uint48) private _extendedDeadlines;\n\n    /// @dev Emitted when a proposal deadline is pushed back due to reaching quorum late in its voting period.\n    event ProposalExtended(uint256 indexed proposalId, uint64 extendedDeadline);\n\n    /// @dev Emitted when the {lateQuorumVoteExtension} parameter is changed.\n    event LateQuorumVoteExtensionSet(uint64 oldVoteExtension, uint64 newVoteExtension);\n\n    /**\n     * @dev Initializes the vote extension parameter: the time in either number of blocks or seconds (depending on the\n     * governor clock mode) that is required to pass since the moment a proposal reaches quorum until its voting period\n     * ends. If necessary the voting period will be extended beyond the one set during proposal creation.\n     */\n    constructor(uint48 initialVoteExtension) {\n        _setLateQuorumVoteExtension(initialVoteExtension);\n    }\n\n    /**\n     * @dev Returns the proposal deadline, which may have been extended beyond that set at proposal creation, if the\n     * proposal reached quorum late in the voting period. See {Governor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return Math.max(super.proposalDeadline(proposalId), _extendedDeadlines[proposalId]);\n    }\n\n    /**\n     * @dev Casts a vote and detects if it caused quorum to be reached, potentially extending the voting period. See\n     * {Governor-_castVote}.\n     *\n     * May emit a {ProposalExtended} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason,\n        bytes memory params\n    ) internal virtual override returns (uint256) {\n        uint256 result = super._castVote(proposalId, account, support, reason, params);\n\n        if (_extendedDeadlines[proposalId] == 0 && _quorumReached(proposalId)) {\n            uint48 extendedDeadline = clock() + lateQuorumVoteExtension();\n\n            if (extendedDeadline > proposalDeadline(proposalId)) {\n                emit ProposalExtended(proposalId, extendedDeadline);\n            }\n\n            _extendedDeadlines[proposalId] = extendedDeadline;\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns the current value of the vote extension parameter: the number of blocks that are required to pass\n     * from the time a proposal reaches quorum until its voting period ends.\n     */\n    function lateQuorumVoteExtension() public view virtual returns (uint48) {\n        return _voteExtension;\n    }\n\n    /**\n     * @dev Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor,\n     * generally through a governance proposal.\n     *\n     * Emits a {LateQuorumVoteExtensionSet} event.\n     */\n    function setLateQuorumVoteExtension(uint48 newVoteExtension) public virtual onlyGovernance {\n        _setLateQuorumVoteExtension(newVoteExtension);\n    }\n\n    /**\n     * @dev Changes the {lateQuorumVoteExtension}. This is an internal function that can be exposed in a public function\n     * like {setLateQuorumVoteExtension} if another access control mechanism is needed.\n     *\n     * Emits a {LateQuorumVoteExtensionSet} event.\n     */\n    function _setLateQuorumVoteExtension(uint48 newVoteExtension) internal virtual {\n        emit LateQuorumVoteExtensionSet(_voteExtension, newVoteExtension);\n        _voteExtension = newVoteExtension;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorSettings.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorSettings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for settings updatable through governance.\n */\nabstract contract GovernorSettings is Governor {\n    // amount of token\n    uint256 private _proposalThreshold;\n    // timepoint: limited to uint48 in core (same as clock() type)\n    uint48 private _votingDelay;\n    // duration: limited to uint32 in core\n    uint32 private _votingPeriod;\n\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\n\n    /**\n     * @dev Initialize the governance parameters.\n     */\n    constructor(uint48 initialVotingDelay, uint32 initialVotingPeriod, uint256 initialProposalThreshold) {\n        _setVotingDelay(initialVotingDelay);\n        _setVotingPeriod(initialVotingPeriod);\n        _setProposalThreshold(initialProposalThreshold);\n    }\n\n    /**\n     * @dev See {IGovernor-votingDelay}.\n     */\n    function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }\n\n    /**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n    function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }\n\n    /**\n     * @dev See {Governor-proposalThreshold}.\n     */\n    function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }\n\n    /**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function setVotingDelay(uint48 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }\n\n    /**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function setVotingPeriod(uint32 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }\n\n    /**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }\n\n    /**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function _setVotingDelay(uint48 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }\n\n    /**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function _setVotingPeriod(uint32 newVotingPeriod) internal virtual {\n        if (newVotingPeriod == 0) {\n            revert GovernorInvalidVotingPeriod(0);\n        }\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }\n\n    /**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorStorage.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} that implements storage of proposal details. This modules also provides primitives for\n * the enumerability of proposals.\n *\n * Use cases for this module include:\n * - UIs that explore the proposal state without relying on event indexing.\n * - Using only the proposalId as an argument in the {Governor-queue} and {Governor-execute} functions for L2 chains\n *   where storage is cheap compared to calldata.\n */\nabstract contract GovernorStorage is Governor {\n    struct ProposalDetails {\n        address[] targets;\n        uint256[] values;\n        bytes[] calldatas;\n        bytes32 descriptionHash;\n    }\n\n    uint256[] private _proposalIds;\n    mapping(uint256 proposalId => ProposalDetails) private _proposalDetails;\n\n    /**\n     * @dev Hook into the proposing mechanism\n     */\n    function _propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description,\n        address proposer\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._propose(targets, values, calldatas, description, proposer);\n\n        // store\n        _proposalIds.push(proposalId);\n        _proposalDetails[proposalId] = ProposalDetails({\n            targets: targets,\n            values: values,\n            calldatas: calldatas,\n            descriptionHash: keccak256(bytes(description))\n        });\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Version of {IGovernorTimelock-queue} with only `proposalId` as an argument.\n     */\n    function queue(uint256 proposalId) public virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        queue(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }\n\n    /**\n     * @dev Version of {IGovernor-execute} with only `proposalId` as an argument.\n     */\n    function execute(uint256 proposalId) public payable virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        execute(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }\n\n    /**\n     * @dev ProposalId version of {IGovernor-cancel}.\n     */\n    function cancel(uint256 proposalId) public virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        cancel(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }\n\n    /**\n     * @dev Returns the number of stored proposals.\n     */\n    function proposalCount() public view virtual returns (uint256) {\n        return _proposalIds.length;\n    }\n\n    /**\n     * @dev Returns the details of a proposalId. Reverts if `proposalId` is not a known proposal.\n     */\n    function proposalDetails(\n        uint256 proposalId\n    )\n        public\n        view\n        virtual\n        returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\n    {\n        // here, using memory is more efficient than storage\n        ProposalDetails memory details = _proposalDetails[proposalId];\n        if (details.descriptionHash == 0) {\n            revert GovernorNonexistentProposal(proposalId);\n        }\n        return (details.targets, details.values, details.calldatas, details.descriptionHash);\n    }\n\n    /**\n     * @dev Returns the details (including the proposalId) of a proposal given its sequential index.\n     */\n    function proposalDetailsAt(\n        uint256 index\n    )\n        public\n        view\n        virtual\n        returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )\n    {\n        proposalId = _proposalIds[index];\n        (targets, values, calldatas, descriptionHash) = proposalDetails(proposalId);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorTimelockAccess.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorTimelockAccess.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\nimport {AuthorityUtils} from \"../../access/manager/AuthorityUtils.sol\";\nimport {IAccessManager} from \"../../access/manager/IAccessManager.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev This module connects a {Governor} instance to an {AccessManager} instance, allowing the governor to make calls\n * that are delay-restricted by the manager using the normal {queue} workflow. An optional base delay is applied to\n * operations that are not delayed externally by the manager. Execution of a proposal will be delayed as much as\n * necessary to meet the required delays of all of its operations.\n *\n * This extension allows the governor to hold and use its own assets and permissions, unlike {GovernorTimelockControl}\n * and {GovernorTimelockCompound}, where the timelock is a separate contract that must be the one to hold assets and\n * permissions. Operations that are delay-restricted by the manager, however, will be executed through the\n * {AccessManager-execute} function.\n *\n * ==== Security Considerations\n *\n * Some operations may be cancelable in the `AccessManager` by the admin or a set of guardians, depending on the\n * restricted function being invoked. Since proposals are atomic, the cancellation by a guardian of a single operation\n * in a proposal will cause all of the proposal to become unable to execute. Consider proposing cancellable operations\n * separately.\n *\n * By default, function calls will be routed through the associated `AccessManager` whenever it claims the target\n * function to be restricted by it. However, admins may configure the manager to make that claim for functions that a\n * governor would want to call directly (e.g., token transfers) in an attempt to deny it access to those functions. To\n * mitigate this attack vector, the governor is able to ignore the restrictions claimed by the `AccessManager` using\n * {setAccessManagerIgnored}. While permanent denial of service is mitigated, temporary DoS may still be technically\n * possible. All of the governor's own functions (e.g., {setBaseDelaySeconds}) ignore the `AccessManager` by default.\n *\n * NOTE: `AccessManager` does not support scheduling more than one operation with the same target and calldata at\n * the same time. See {AccessManager-schedule} for a workaround.\n */\nabstract contract GovernorTimelockAccess is Governor {\n    // An execution plan is produced at the moment a proposal is created, in order to fix at that point the exact\n    // execution semantics of the proposal, namely whether a call will go through {AccessManager-execute}.\n    struct ExecutionPlan {\n        uint16 length;\n        uint32 delay;\n        // We use mappings instead of arrays because it allows us to pack values in storage more tightly without\n        // storing the length redundantly.\n        // We pack 8 operations' data in each bucket. Each uint32 value is set to 1 upon proposal creation if it has\n        // to be scheduled and executed through the manager. Upon queuing, the value is set to nonce + 2, where the\n        // nonce is received from the manager when scheduling the operation.\n        mapping(uint256 operationBucket => uint32[8]) managerData;\n    }\n\n    // The meaning of the \"toggle\" set to true depends on the target contract.\n    // If target == address(this), the manager is ignored by default, and a true toggle means it won't be ignored.\n    // For all other target contracts, the manager is used by default, and a true toggle means it will be ignored.\n    mapping(address target => mapping(bytes4 selector => bool)) private _ignoreToggle;\n\n    mapping(uint256 proposalId => ExecutionPlan) private _executionPlan;\n\n    uint32 private _baseDelay;\n\n    IAccessManager private immutable _manager;\n\n    error GovernorUnmetDelay(uint256 proposalId, uint256 neededTimestamp);\n    error GovernorMismatchedNonce(uint256 proposalId, uint256 expectedNonce, uint256 actualNonce);\n    error GovernorLockedIgnore();\n\n    event BaseDelaySet(uint32 oldBaseDelaySeconds, uint32 newBaseDelaySeconds);\n    event AccessManagerIgnoredSet(address target, bytes4 selector, bool ignored);\n\n    /**\n     * @dev Initialize the governor with an {AccessManager} and initial base delay.\n     */\n    constructor(address manager, uint32 initialBaseDelay) {\n        _manager = IAccessManager(manager);\n        _setBaseDelaySeconds(initialBaseDelay);\n    }\n\n    /**\n     * @dev Returns the {AccessManager} instance associated to this governor.\n     */\n    function accessManager() public view virtual returns (IAccessManager) {\n        return _manager;\n    }\n\n    /**\n     * @dev Base delay that will be applied to all function calls. Some may be further delayed by their associated\n     * `AccessManager` authority; in this case the final delay will be the maximum of the base delay and the one\n     * demanded by the authority.\n     *\n     * NOTE: Execution delays are processed by the `AccessManager` contracts, and according to that contract are\n     * expressed in seconds. Therefore, the base delay is also in seconds, regardless of the governor's clock mode.\n     */\n    function baseDelaySeconds() public view virtual returns (uint32) {\n        return _baseDelay;\n    }\n\n    /**\n     * @dev Change the value of {baseDelaySeconds}. This operation can only be invoked through a governance proposal.\n     */\n    function setBaseDelaySeconds(uint32 newBaseDelay) public virtual onlyGovernance {\n        _setBaseDelaySeconds(newBaseDelay);\n    }\n\n    /**\n     * @dev Change the value of {baseDelaySeconds}. Internal function without access control.\n     */\n    function _setBaseDelaySeconds(uint32 newBaseDelay) internal virtual {\n        emit BaseDelaySet(_baseDelay, newBaseDelay);\n        _baseDelay = newBaseDelay;\n    }\n\n    /**\n     * @dev Check if restrictions from the associated {AccessManager} are ignored for a target function. Returns true\n     * when the target function will be invoked directly regardless of `AccessManager` settings for the function.\n     * See {setAccessManagerIgnored} and Security Considerations above.\n     */\n    function isAccessManagerIgnored(address target, bytes4 selector) public view virtual returns (bool) {\n        bool isGovernor = target == address(this);\n        return _ignoreToggle[target][selector] != isGovernor; // equivalent to: isGovernor ? !toggle : toggle\n    }\n\n    /**\n     * @dev Configure whether restrictions from the associated {AccessManager} are ignored for a target function.\n     * See Security Considerations above.\n     */\n    function setAccessManagerIgnored(\n        address target,\n        bytes4[] calldata selectors,\n        bool ignored\n    ) public virtual onlyGovernance {\n        for (uint256 i = 0; i < selectors.length; ++i) {\n            _setAccessManagerIgnored(target, selectors[i], ignored);\n        }\n    }\n\n    /**\n     * @dev Internal version of {setAccessManagerIgnored} without access restriction.\n     */\n    function _setAccessManagerIgnored(address target, bytes4 selector, bool ignored) internal virtual {\n        bool isGovernor = target == address(this);\n        if (isGovernor && selector == this.setAccessManagerIgnored.selector) {\n            revert GovernorLockedIgnore();\n        }\n        _ignoreToggle[target][selector] = ignored != isGovernor; // equivalent to: isGovernor ? !ignored : ignored\n        emit AccessManagerIgnoredSet(target, selector, ignored);\n    }\n\n    /**\n     * @dev Public accessor to check the execution plan, including the number of seconds that the proposal will be\n     * delayed since queuing, an array indicating which of the proposal actions will be executed indirectly through\n     * the associated {AccessManager}, and another indicating which will be scheduled in {queue}. Note that\n     * those that must be scheduled are cancellable by `AccessManager` guardians.\n     */\n    function proposalExecutionPlan(\n        uint256 proposalId\n    ) public view returns (uint32 delay, bool[] memory indirect, bool[] memory withDelay) {\n        ExecutionPlan storage plan = _executionPlan[proposalId];\n\n        uint32 length = plan.length;\n        delay = plan.delay;\n        indirect = new bool[](length);\n        withDelay = new bool[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            (indirect[i], withDelay[i], ) = _getManagerData(plan, i);\n        }\n\n        return (delay, indirect, withDelay);\n    }\n\n    /**\n     * @dev See {IGovernor-proposalNeedsQueuing}.\n     */\n    function proposalNeedsQueuing(uint256 proposalId) public view virtual override returns (bool) {\n        return _executionPlan[proposalId].delay > 0;\n    }\n\n    /**\n     * @dev See {IGovernor-propose}\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = super.propose(targets, values, calldatas, description);\n\n        uint32 neededDelay = baseDelaySeconds();\n\n        ExecutionPlan storage plan = _executionPlan[proposalId];\n        plan.length = SafeCast.toUint16(targets.length);\n\n        for (uint256 i = 0; i < targets.length; ++i) {\n            if (calldatas[i].length < 4) {\n                continue;\n            }\n            address target = targets[i];\n            bytes4 selector = bytes4(calldatas[i]);\n            (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n                address(_manager),\n                address(this),\n                target,\n                selector\n            );\n            if ((immediate || delay > 0) && !isAccessManagerIgnored(target, selector)) {\n                _setManagerData(plan, i, !immediate, 0);\n                // downcast is safe because both arguments are uint32\n                neededDelay = uint32(Math.max(delay, neededDelay));\n            }\n        }\n\n        plan.delay = neededDelay;\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Mechanism to queue a proposal, potentially scheduling some of its operations in the AccessManager.\n     *\n     * NOTE: The execution delay is chosen based on the delay information retrieved in {propose}. This value may be\n     * off if the delay was updated since proposal creation. In this case, the proposal needs to be recreated.\n     */\n    function _queueOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory /* values */,\n        bytes[] memory calldatas,\n        bytes32 /* descriptionHash */\n    ) internal virtual override returns (uint48) {\n        ExecutionPlan storage plan = _executionPlan[proposalId];\n        uint48 etaSeconds = Time.timestamp() + plan.delay;\n\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (, bool withDelay, ) = _getManagerData(plan, i);\n            if (withDelay) {\n                (, uint32 nonce) = _manager.schedule(targets[i], calldatas[i], etaSeconds);\n                _setManagerData(plan, i, true, nonce);\n            }\n        }\n\n        return etaSeconds;\n    }\n\n    /**\n     * @dev Mechanism to execute a proposal, potentially going through {AccessManager-execute} for delayed operations.\n     */\n    function _executeOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /* descriptionHash */\n    ) internal virtual override {\n        uint48 etaSeconds = SafeCast.toUint48(proposalEta(proposalId));\n        if (block.timestamp < etaSeconds) {\n            revert GovernorUnmetDelay(proposalId, etaSeconds);\n        }\n\n        ExecutionPlan storage plan = _executionPlan[proposalId];\n\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool controlled, bool withDelay, uint32 nonce) = _getManagerData(plan, i);\n            if (controlled) {\n                uint32 executedNonce = _manager.execute{value: values[i]}(targets[i], calldatas[i]);\n                if (withDelay && executedNonce != nonce) {\n                    revert GovernorMismatchedNonce(proposalId, nonce, executedNonce);\n                }\n            } else {\n                (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n                Address.verifyCallResult(success, returndata);\n            }\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-_cancel}\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        uint48 etaSeconds = SafeCast.toUint48(proposalEta(proposalId));\n\n        ExecutionPlan storage plan = _executionPlan[proposalId];\n\n        // If the proposal has been scheduled it will have an ETA and we may have to externally cancel\n        if (etaSeconds != 0) {\n            for (uint256 i = 0; i < targets.length; ++i) {\n                (, bool withDelay, uint32 nonce) = _getManagerData(plan, i);\n                // Only attempt to cancel if the execution plan included a delay\n                if (withDelay) {\n                    bytes32 operationId = _manager.hashOperation(address(this), targets[i], calldatas[i]);\n                    // Check first if the current operation nonce is the one that we observed previously. It could\n                    // already have been cancelled and rescheduled. We don't want to cancel unless it is exactly the\n                    // instance that we previously scheduled.\n                    if (nonce == _manager.getNonce(operationId)) {\n                        // It is important that all calls have an opportunity to be cancelled. We chose to ignore\n                        // potential failures of some of the cancel operations to give the other operations a chance to\n                        // be properly cancelled. In particular cancel might fail if the operation was already cancelled\n                        // by guardians previously. We don't match on the revert reason to avoid encoding assumptions\n                        // about specific errors.\n                        try _manager.cancel(address(this), targets[i], calldatas[i]) {} catch {}\n                    }\n                }\n            }\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Returns whether the operation at an index is delayed by the manager, and its scheduling nonce once queued.\n     */\n    function _getManagerData(\n        ExecutionPlan storage plan,\n        uint256 index\n    ) private view returns (bool controlled, bool withDelay, uint32 nonce) {\n        (uint256 bucket, uint256 subindex) = _getManagerDataIndices(index);\n        uint32 value = plan.managerData[bucket][subindex];\n        unchecked {\n            return (value > 0, value > 1, value > 1 ? value - 2 : 0);\n        }\n    }\n\n    /**\n     * @dev Marks an operation at an index as permissioned by the manager, potentially delayed, and\n     * when delayed sets its scheduling nonce.\n     */\n    function _setManagerData(ExecutionPlan storage plan, uint256 index, bool withDelay, uint32 nonce) private {\n        (uint256 bucket, uint256 subindex) = _getManagerDataIndices(index);\n        plan.managerData[bucket][subindex] = withDelay ? nonce + 2 : 1;\n    }\n\n    /**\n     * @dev Returns bucket and subindex for reading manager data from the packed array mapping.\n     */\n    function _getManagerDataIndices(uint256 index) private pure returns (uint256 bucket, uint256 subindex) {\n        bucket = index >> 3; // index / 8\n        subindex = index & 7; // index % 8\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorTimelockCompound.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorTimelockCompound.sol)\n\npragma solidity ^0.8.20;\n\nimport {IGovernor, Governor} from \"../Governor.sol\";\nimport {ICompoundTimelock} from \"../../vendor/compound/ICompoundTimelock.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to a Compound Timelock. This adds a delay, enforced by\n * the external timelock to all successful proposal (in addition to the voting duration). The {Governor} needs to be\n * the admin of the timelock for any operation to be performed. A public, unrestricted,\n * {GovernorTimelockCompound-__acceptAdmin} is available to accept ownership of the timelock.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible from a proposal, unless executed via {Governor-relay}.\n */\nabstract contract GovernorTimelockCompound is Governor {\n    ICompoundTimelock private _timelock;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(ICompoundTimelock timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-state} function with added support for the `Expired` state.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalState currentState = super.state(proposalId);\n\n        return\n            (currentState == ProposalState.Queued &&\n                block.timestamp >= proposalEta(proposalId) + _timelock.GRACE_PERIOD())\n                ? ProposalState.Expired\n                : currentState;\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev See {IGovernor-proposalNeedsQueuing}.\n     */\n    function proposalNeedsQueuing(uint256) public view virtual override returns (bool) {\n        return true;\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function _queueOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual override returns (uint48) {\n        uint48 etaSeconds = SafeCast.toUint48(block.timestamp + _timelock.delay());\n\n        for (uint256 i = 0; i < targets.length; ++i) {\n            if (\n                _timelock.queuedTransactions(keccak256(abi.encode(targets[i], values[i], \"\", calldatas[i], etaSeconds)))\n            ) {\n                revert GovernorAlreadyQueuedProposal(proposalId);\n            }\n            _timelock.queueTransaction(targets[i], values[i], \"\", calldatas[i], etaSeconds);\n        }\n\n        return etaSeconds;\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-_executeOperations} function that run the already queued proposal\n     * through the timelock.\n     */\n    function _executeOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual override {\n        uint256 etaSeconds = proposalEta(proposalId);\n        if (etaSeconds == 0) {\n            revert GovernorNotQueuedProposal(proposalId);\n        }\n        Address.sendValue(payable(_timelock), msg.value);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _timelock.executeTransaction(targets[i], values[i], \"\", calldatas[i], etaSeconds);\n        }\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it has already\n     * been queued.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        uint256 etaSeconds = proposalEta(proposalId);\n        if (etaSeconds > 0) {\n            // do external call later\n            for (uint256 i = 0; i < targets.length; ++i) {\n                _timelock.cancelTransaction(targets[i], values[i], \"\", calldatas[i], etaSeconds);\n            }\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Accept admin right over the timelock.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    function __acceptAdmin() public {\n        _timelock.acceptAdmin();\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled, and executed through governance proposals.\n     *\n     * For security reasons, the timelock must be handed over to another admin before setting up a new one. The two\n     * operations (hand over the timelock) and do the update can be batched in a single proposal.\n     *\n     * Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the\n     * timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of\n     * governance.\n\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\n     */\n    function updateTimelock(ICompoundTimelock newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(ICompoundTimelock newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorTimelockControl.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorTimelockControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IGovernor, Governor} from \"../Governor.sol\";\nimport {TimelockController} from \"../TimelockController.sol\";\nimport {IERC165} from \"../../interfaces/IERC165.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (and ideally the executor and canceller) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible from a proposal, unless executed via {Governor-relay}.\n *\n * WARNING: Setting up the TimelockController to have additional proposers or cancellers besides the governor is very\n * risky, as it grants them the ability to: 1) execute operations as the timelock, and thus possibly performing\n * operations or accessing funds that are expected to only be accessible through a vote, and 2) block governance\n * proposals that have been approved by the voters, effectively executing a Denial of Service attack.\n */\nabstract contract GovernorTimelockControl is Governor {\n    TimelockController private _timelock;\n    mapping(uint256 proposalId => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(TimelockController timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-state} function that considers the status reported by the timelock.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalState currentState = super.state(proposalId);\n\n        if (currentState != ProposalState.Queued) {\n            return currentState;\n        }\n\n        bytes32 queueid = _timelockIds[proposalId];\n        if (_timelock.isOperationPending(queueid)) {\n            return ProposalState.Queued;\n        } else if (_timelock.isOperationDone(queueid)) {\n            // This can happen if the proposal is executed directly on the timelock.\n            return ProposalState.Executed;\n        } else {\n            // This can happen if the proposal is canceled directly on the timelock.\n            return ProposalState.Canceled;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev See {IGovernor-proposalNeedsQueuing}.\n     */\n    function proposalNeedsQueuing(uint256) public view virtual override returns (bool) {\n        return true;\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function _queueOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint48) {\n        uint256 delay = _timelock.getMinDelay();\n\n        bytes32 salt = _timelockSalt(descriptionHash);\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, salt);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, salt, delay);\n\n        return SafeCast.toUint48(block.timestamp + delay);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-_executeOperations} function that runs the already queued proposal\n     * through the timelock.\n     */\n    function _executeOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        // execute\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, _timelockSalt(descriptionHash));\n        // cleanup for refund\n        delete _timelockIds[proposalId];\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it has already\n     * been queued.\n     */\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\n    // well behaved (according to TimelockController) and this will not happen.\n    // slither-disable-next-line reentrancy-no-eth\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        bytes32 timelockId = _timelockIds[proposalId];\n        if (timelockId != 0) {\n            // cancel\n            _timelock.cancel(timelockId);\n            // cleanup\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled, and executed through governance proposals.\n     *\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\n     */\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockController newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n\n    /**\n     * @dev Computes the {TimelockController} operation salt.\n     *\n     * It is computed with the governor address itself to avoid collisions across governor instances using the\n     * same timelock.\n     */\n    function _timelockSalt(bytes32 descriptionHash) private view returns (bytes32) {\n        return bytes20(address(this)) ^ descriptionHash;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorVotes.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.20;\n\nimport {Governor} from \"../Governor.sol\";\nimport {IVotes} from \"../utils/IVotes.sol\";\nimport {IERC5805} from \"../../interfaces/IERC5805.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes}\n * token.\n */\nabstract contract GovernorVotes is Governor {\n    IERC5805 private immutable _token;\n\n    constructor(IVotes tokenAddress) {\n        _token = IERC5805(address(tokenAddress));\n    }\n\n    /**\n     * @dev The token that voting power is sourced from.\n     */\n    function token() public view virtual returns (IERC5805) {\n        return _token;\n    }\n\n    /**\n     * @dev Clock (as specified in ERC-6372) is set to match the token's clock. Fallback to block numbers if the token\n     * does not implement ERC-6372.\n     */\n    function clock() public view virtual override returns (uint48) {\n        try token().clock() returns (uint48 timepoint) {\n            return timepoint;\n        } catch {\n            return Time.blockNumber();\n        }\n    }\n\n    /**\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual override returns (string memory) {\n        try token().CLOCK_MODE() returns (string memory clockmode) {\n            return clockmode;\n        } catch {\n            return \"mode=blocknumber&from=default\";\n        }\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\n     */\n    function _getVotes(\n        address account,\n        uint256 timepoint,\n        bytes memory /*params*/\n    ) internal view virtual override returns (uint256) {\n        return token().getPastVotes(account, timepoint);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/extensions/GovernorVotesQuorumFraction.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\n\npragma solidity ^0.8.20;\n\nimport {GovernorVotes} from \"./GovernorVotes.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {Checkpoints} from \"../../utils/structs/Checkpoints.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n */\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\n    using Checkpoints for Checkpoints.Trace208;\n\n    Checkpoints.Trace208 private _quorumNumeratorHistory;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    /**\n     * @dev The quorum set is not a valid fraction.\n     */\n    error GovernorInvalidQuorumFraction(uint256 quorumNumerator, uint256 quorumDenominator);\n\n    /**\n     * @dev Initialize quorum as a fraction of the token's total supply.\n     *\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\n     * customized by overriding {quorumDenominator}.\n     */\n    constructor(uint256 quorumNumeratorValue) {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    /**\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\n     */\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumeratorHistory.latest();\n    }\n\n    /**\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\n     */\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\n\n        // Optimistic search, check the latest checkpoint\n        Checkpoints.Checkpoint208 storage latest = _quorumNumeratorHistory._checkpoints[length - 1];\n        uint48 latestKey = latest._key;\n        uint208 latestValue = latest._value;\n        if (latestKey <= timepoint) {\n            return latestValue;\n        }\n\n        // Otherwise, do the binary search\n        return _quorumNumeratorHistory.upperLookupRecent(SafeCast.toUint48(timepoint));\n    }\n\n    /**\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\n     */\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    /**\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\n     */\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\n        return (token().getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - Must be called through a governance proposal.\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        uint256 denominator = quorumDenominator();\n        if (newQuorumNumerator > denominator) {\n            revert GovernorInvalidQuorumFraction(newQuorumNumerator, denominator);\n        }\n\n        uint256 oldQuorumNumerator = quorumNumerator();\n        _quorumNumeratorHistory.push(clock(), SafeCast.toUint208(newQuorumNumerator));\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/utils/IVotes.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n */\ninterface IVotes {\n    /**\n     * @dev The signature used has expired.\n     */\n    error VotesExpiredSignature(uint256 expiry);\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     */\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/governance/utils/Votes.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/utils/Votes.sol)\npragma solidity ^0.8.20;\n\nimport {IERC5805} from \"../../interfaces/IERC5805.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Nonces} from \"../../utils/Nonces.sol\";\nimport {EIP712} from \"../../utils/cryptography/EIP712.sol\";\nimport {Checkpoints} from \"../../utils/structs/Checkpoints.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {ECDSA} from \"../../utils/cryptography/ECDSA.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\n * \"representative\" that will pool delegated voting units from different accounts and can then use it to vote in\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\n *\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\n * example, see {ERC721Votes}.\n *\n * The full history of delegate votes is tracked onchain so that governance protocols can consider votes as distributed\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\n * cost of this history tracking optional.\n *\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\n * previous example, it would be included in {ERC721-_update}).\n */\nabstract contract Votes is Context, EIP712, Nonces, IERC5805 {\n    using Checkpoints for Checkpoints.Trace208;\n\n    bytes32 private constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address account => address) private _delegatee;\n\n    mapping(address delegatee => Checkpoints.Trace208) private _delegateCheckpoints;\n\n    Checkpoints.Trace208 private _totalCheckpoints;\n\n    /**\n     * @dev The clock was incorrectly modified.\n     */\n    error ERC6372InconsistentClock();\n\n    /**\n     * @dev Lookup to future votes is not available.\n     */\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\n\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\n     */\n    function clock() public view virtual returns (uint48) {\n        return Time.blockNumber();\n    }\n\n    /**\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual returns (string memory) {\n        // Check that the clock was not modified\n        if (clock() != Time.blockNumber()) {\n            revert ERC6372InconsistentClock();\n        }\n        return \"mode=blocknumber&from=default\";\n    }\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].latest();\n    }\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) {\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        }\n        return _delegateCheckpoints[account].upperLookupRecent(SafeCast.toUint48(timepoint));\n    }\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) {\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        }\n        return _totalCheckpoints.upperLookupRecent(SafeCast.toUint48(timepoint));\n    }\n\n    /**\n     * @dev Returns the current total supply of votes.\n     */\n    function _getTotalSupply() internal view virtual returns (uint256) {\n        return _totalCheckpoints.latest();\n    }\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        address account = _msgSender();\n        _delegate(account, delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > expiry) {\n            revert VotesExpiredSignature(expiry);\n        }\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        _useCheckedNonce(signer, nonce);\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n    function _delegate(address account, address delegatee) internal virtual {\n        address oldDelegate = delegates(account);\n        _delegatee[account] = delegatee;\n\n        emit DelegateChanged(account, oldDelegate, delegatee);\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\n    }\n\n    /**\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\n     */\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\n        if (from == address(0)) {\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\n        }\n        if (to == address(0)) {\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\n        }\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Moves delegated votes from one delegate to another.\n     */\n    function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\n        if (from != to && amount > 0) {\n            if (from != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[from],\n                    _subtract,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(from, oldValue, newValue);\n            }\n            if (to != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[to],\n                    _add,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(to, oldValue, newValue);\n            }\n        }\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function _checkpoints(\n        address account,\n        uint32 pos\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _delegateCheckpoints[account].at(pos);\n    }\n\n    function _push(\n        Checkpoints.Trace208 storage store,\n        function(uint208, uint208) view returns (uint208) op,\n        uint208 delta\n    ) private returns (uint208 oldValue, uint208 newValue) {\n        return store.push(clock(), op(store.latest(), delta));\n    }\n\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\n        return a + b;\n    }\n\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\n        return a - b;\n    }\n\n    /**\n     * @dev Must return the voting units held by an account.\n     */\n    function _getVotingUnits(address) internal view virtual returns (uint256);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1155.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../token/ERC1155/IERC1155.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1155MetadataURI.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155MetadataURI} from \"../token/ERC1155/extensions/IERC1155MetadataURI.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1155Receiver.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155Receiver} from \"../token/ERC1155/IERC1155Receiver.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1271.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1363.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1363Receiver.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title IERC1363Receiver\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\n * from ERC-1363 token contracts.\n */\ninterface IERC1363Receiver {\n    /**\n     * @dev Whenever ERC-1363 tokens are transferred to this contract via `transferAndCall` or `transferFromAndCall`\n     * by `operator` from `from`, this function is called.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n     * (i.e. 0x88a7ca5c, or its own function selector).\n     *\n     * @param operator The address which called `transferAndCall` or `transferFromAndCall` function.\n     * @param from The address which the tokens are transferred from.\n     * @param value The amount of tokens transferred.\n     * @param data Additional data with no specified format.\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` if transfer is allowed unless throwing.\n     */\n    function onTransferReceived(\n        address operator,\n        address from,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1363Spender.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363Spender.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title IERC1363Spender\n * @dev Interface for any contract that wants to support `approveAndCall`\n * from ERC-1363 token contracts.\n */\ninterface IERC1363Spender {\n    /**\n     * @dev Whenever an ERC-1363 token `owner` approves this contract via `approveAndCall`\n     * to spend their tokens, this function is called.\n     *\n     * NOTE: To accept the approval, this must return\n     * `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n     * (i.e. 0x7b04a2d0, or its own function selector).\n     *\n     * @param owner The address which called `approveAndCall` function and previously owned the tokens.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format.\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` if approval is allowed unless throwing.\n     */\n    function onApprovalReceived(address owner, uint256 value, bytes calldata data) external returns (bytes4);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC165.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1820Implementer.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1820Implementer.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface for an ERC-1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[ERC].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1820Registry.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1820Registry.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the global ERC-1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the ERC text.\n */\ninterface IERC1820Registry {\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the ERC].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC-165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC-165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC-165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC-165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC-165 interface or not without using or updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC-165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC1967.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC20.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC20Metadata.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC2309.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2309.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-2309: ERC-721 Consecutive Transfer Extension.\n */\ninterface IERC2309 {\n    /**\n     * @dev Emitted when the tokens from `fromTokenId` to `toTokenId` are transferred from `fromAddress` to `toAddress`.\n     */\n    event ConsecutiveTransfer(\n        uint256 indexed fromTokenId,\n        uint256 toTokenId,\n        address indexed fromAddress,\n        address indexed toAddress\n    );\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC2612.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2612.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"../token/ERC20/extensions/IERC20Permit.sol\";\n\ninterface IERC2612 is IERC20Permit {}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC2981.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     *\n     * NOTE: ERC-2981 allows setting the royalty to 100% of the price. In that case all the price would be sent to the\n     * royalty receiver and 0 tokens to the seller. Contracts dealing with royalty should consider empty transfers.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC3156.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"./IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"./IERC3156FlashLender.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC3156FlashBorrower.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC3156FlashBorrower.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashBorrower {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC3156FlashLender.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC3156FlashLender.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"./IERC3156FlashBorrower.sol\";\n\n/**\n * @dev Interface of the ERC-3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashLender {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC4626.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC-4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other onchain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other onchain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an onchain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current onchain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an onchain or off-chain user to simulate the effects of their mint at the current block, given\n     * current onchain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an onchain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current onchain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an onchain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current onchain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC4906.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title ERC-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC5267.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC5313.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5313.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface for the Light Contract Ownership Standard.\n *\n * A standardized minimal interface required to identify an account that controls a contract\n */\ninterface IERC5313 {\n    /**\n     * @dev Gets the address of the owner.\n     */\n    function owner() external view returns (address);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC5805.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\n\npragma solidity ^0.8.20;\n\nimport {IVotes} from \"../governance/utils/IVotes.sol\";\nimport {IERC6372} from \"./IERC6372.sol\";\n\ninterface IERC5805 is IERC6372, IVotes {}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC6372.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC6372 {\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() external view returns (uint48);\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() external view returns (string memory);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC721.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC721Enumerable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Enumerable} from \"../token/ERC721/extensions/IERC721Enumerable.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC721Metadata.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Metadata} from \"../token/ERC721/extensions/IERC721Metadata.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC721Receiver.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../token/ERC721/IERC721Receiver.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC777.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC777.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-777 Token standard as defined in the ERC.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC-1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {IERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC777Recipient.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC777Recipient.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-777 Tokens Recipient standard as defined in the ERC.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC-1820 global registry].\n *\n * See {IERC1820Registry} and {IERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/IERC777Sender.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC777Sender.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-777 Tokens Sender standard as defined in the ERC.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n * their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC-1820 global registry].\n *\n * See {IERC1820Registry} and {IERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/draft-IERC1822.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/draft-IERC6093.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/interfaces/draft-IERC7674.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC7674.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\n\n/**\n * @dev Temporary Approval Extension for ERC-20 (https://github.com/ethereum/ERCs/pull/358[ERC-7674])\n */\ninterface IERC7674 is IERC20 {\n    /**\n     * @dev Set the temporary allowance, allowing `spender` to withdraw (within the same transaction) assets\n     * held by the caller.\n     */\n    function temporaryApprove(address spender, uint256 value) external returns (bool success);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/metatx/ERC2771Context.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC-2771 support.\n *\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC-2771\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n * function only accessible if `msg.data.length == 0`.\n *\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\n * recovery.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder_) {\n        _trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }\n\n    /**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }\n\n    /**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    /**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return msg.data[:calldataLength - contextSuffixLength];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/metatx/ERC2771Forwarder.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (metatx/ERC2771Forwarder.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC2771Context} from \"./ERC2771Context.sol\";\nimport {ECDSA} from \"../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../utils/Nonces.sol\";\nimport {Address} from \"../utils/Address.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev A forwarder compatible with ERC-2771 contracts. See {ERC2771Context}.\n *\n * This forwarder operates on forward requests that include:\n *\n * * `from`: An address to operate on behalf of. It is required to be equal to the request signer.\n * * `to`: The address that should be called.\n * * `value`: The amount of native token to attach with the requested call.\n * * `gas`: The amount of gas limit that will be forwarded with the requested call.\n * * `nonce`: A unique transaction ordering identifier to avoid replayability and request invalidation.\n * * `deadline`: A timestamp after which the request is not executable anymore.\n * * `data`: Encoded `msg.data` to send with the requested call.\n *\n * Relayers are able to submit batches if they are processing a high volume of requests. With high\n * throughput, relayers may run into limitations of the chain such as limits on the number of\n * transactions in the mempool. In these cases the recommendation is to distribute the load among\n * multiple accounts.\n *\n * NOTE: Batching requests includes an optional refund for unused `msg.value` that is achieved by\n * performing a call with empty calldata. While this is within the bounds of ERC-2771 compliance,\n * if the refund receiver happens to consider the forwarder a trusted forwarder, it MUST properly\n * handle `msg.data.length == 0`. `ERC2771Context` in OpenZeppelin Contracts versions prior to 4.9.3\n * do not handle this properly.\n *\n * ==== Security Considerations\n *\n * If a relayer submits a forward request, it should be willing to pay up to 100% of the gas amount\n * specified in the request. This contract does not implement any kind of retribution for this gas,\n * and it is assumed that there is an out of band incentive for relayers to pay for execution on\n * behalf of signers. Often, the relayer is operated by a project that will consider it a user\n * acquisition cost.\n *\n * By offering to pay for gas, relayers are at risk of having that gas used by an attacker toward\n * some other purpose that is not aligned with the expected out of band incentives. If you operate a\n * relayer, consider whitelisting target contracts and function selectors. When relaying ERC-721 or\n * ERC-1155 transfers specifically, consider rejecting the use of the `data` field, since it can be\n * used to execute arbitrary code.\n */\ncontract ERC2771Forwarder is EIP712, Nonces {\n    using ECDSA for bytes32;\n\n    struct ForwardRequestData {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint48 deadline;\n        bytes data;\n        bytes signature;\n    }\n\n    bytes32 internal constant _FORWARD_REQUEST_TYPEHASH =\n        keccak256(\n            \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\"\n        );\n\n    /**\n     * @dev Emitted when a `ForwardRequest` is executed.\n     *\n     * NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline,\n     * or simply a revert in the requested call. The contract guarantees that the relayer is not able to force\n     * the requested call to run out of gas.\n     */\n    event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success);\n\n    /**\n     * @dev The request `from` doesn't match with the recovered `signer`.\n     */\n    error ERC2771ForwarderInvalidSigner(address signer, address from);\n\n    /**\n     * @dev The `requestedValue` doesn't match with the available `msgValue`.\n     */\n    error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue);\n\n    /**\n     * @dev The request `deadline` has expired.\n     */\n    error ERC2771ForwarderExpiredRequest(uint48 deadline);\n\n    /**\n     * @dev The request target doesn't trust the `forwarder`.\n     */\n    error ERC2771UntrustfulTarget(address target, address forwarder);\n\n    /**\n     * @dev See {EIP712-constructor}.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev Returns `true` if a request is valid for a provided `signature` at the current block timestamp.\n     *\n     * A transaction is considered valid when the target trusts this forwarder, the request hasn't expired\n     * (deadline is not met), and the signer matches the `from` parameter of the signed request.\n     *\n     * NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund\n     * receiver is provided.\n     */\n    function verify(ForwardRequestData calldata request) public view virtual returns (bool) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, ) = _validate(request);\n        return isTrustedForwarder && active && signerMatch;\n    }\n\n    /**\n     * @dev Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas\n     * provided to the requested call may not be exactly the amount requested, but the call will not run\n     * out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed.\n     *\n     * Requirements:\n     *\n     * - The request value should be equal to the provided `msg.value`.\n     * - The request should be valid according to {verify}.\n     */\n    function execute(ForwardRequestData calldata request) public payable virtual {\n        // We make sure that msg.value and request.value match exactly.\n        // If the request is invalid or the call reverts, this whole function\n        // will revert, ensuring value isn't stuck.\n        if (msg.value != request.value) {\n            revert ERC2771ForwarderMismatchedValue(request.value, msg.value);\n        }\n\n        if (!_execute(request, true)) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Batch version of {execute} with optional refunding and atomic execution.\n     *\n     * In case a batch contains at least one invalid request (see {verify}), the\n     * request will be skipped and the `refundReceiver` parameter will receive back the\n     * unused requested value at the end of the execution. This is done to prevent reverting\n     * the entire batch when a request is invalid or has already been submitted.\n     *\n     * If the `refundReceiver` is the `address(0)`, this function will revert when at least\n     * one of the requests was not valid instead of skipping it. This could be useful if\n     * a batch is required to get executed atomically (at least at the top-level). For example,\n     * refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids\n     * including reverted transactions.\n     *\n     * Requirements:\n     *\n     * - The sum of the requests' values should be equal to the provided `msg.value`.\n     * - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address.\n     *\n     * NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for\n     * the first-level forwarded calls. In case a forwarded request calls to a contract with another\n     * subcall, the second-level call may revert without the top-level call reverting.\n     */\n    function executeBatch(\n        ForwardRequestData[] calldata requests,\n        address payable refundReceiver\n    ) public payable virtual {\n        bool atomic = refundReceiver == address(0);\n\n        uint256 requestsValue;\n        uint256 refundValue;\n\n        for (uint256 i; i < requests.length; ++i) {\n            requestsValue += requests[i].value;\n            bool success = _execute(requests[i], atomic);\n            if (!success) {\n                refundValue += requests[i].value;\n            }\n        }\n\n        // The batch should revert if there's a mismatched msg.value provided\n        // to avoid request value tampering\n        if (requestsValue != msg.value) {\n            revert ERC2771ForwarderMismatchedValue(requestsValue, msg.value);\n        }\n\n        // Some requests with value were invalid (possibly due to frontrunning).\n        // To avoid leaving ETH in the contract this value is refunded.\n        if (refundValue != 0) {\n            // We know refundReceiver != address(0) && requestsValue == msg.value\n            // meaning we can ensure refundValue is not taken from the original contract's balance\n            // and refundReceiver is a known account.\n            Address.sendValue(refundReceiver, refundValue);\n        }\n    }\n\n    /**\n     * @dev Validates if the provided request can be executed at current block timestamp with\n     * the given `request.signature` on behalf of `request.signer`.\n     */\n    function _validate(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer) {\n        (bool isValid, address recovered) = _recoverForwardRequestSigner(request);\n\n        return (\n            _isTrustedByTarget(request.to),\n            request.deadline >= block.timestamp,\n            isValid && recovered == request.from,\n            recovered\n        );\n    }\n\n    /**\n     * @dev Returns a tuple with the recovered the signer of an EIP712 forward request message hash\n     * and a boolean indicating if the signature is valid.\n     *\n     * NOTE: The signature is considered valid if {ECDSA-tryRecover} indicates no recover error for it.\n     */\n    function _recoverForwardRequestSigner(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isValid, address signer) {\n        (address recovered, ECDSA.RecoverError err, ) = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _FORWARD_REQUEST_TYPEHASH,\n                    request.from,\n                    request.to,\n                    request.value,\n                    request.gas,\n                    nonces(request.from),\n                    request.deadline,\n                    keccak256(request.data)\n                )\n            )\n        ).tryRecover(request.signature);\n\n        return (err == ECDSA.RecoverError.NoError, recovered);\n    }\n\n    /**\n     * @dev Validates and executes a signed request returning the request call `success` value.\n     *\n     * Internal function without msg.value validation.\n     *\n     * Requirements:\n     *\n     * - The caller must have provided enough gas to forward with the call.\n     * - The request must be valid (see {verify}) if the `requireValidRequest` is true.\n     *\n     * Emits an {ExecutedForwardRequest} event.\n     *\n     * IMPORTANT: Using this function doesn't check that all the `msg.value` was sent, potentially\n     * leaving value stuck in the contract.\n     */\n    function _execute(\n        ForwardRequestData calldata request,\n        bool requireValidRequest\n    ) internal virtual returns (bool success) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, address signer) = _validate(request);\n\n        // Need to explicitly specify if a revert is required since non-reverting is default for\n        // batches and reversion is opt-in since it could be useful in some scenarios\n        if (requireValidRequest) {\n            if (!isTrustedForwarder) {\n                revert ERC2771UntrustfulTarget(request.to, address(this));\n            }\n\n            if (!active) {\n                revert ERC2771ForwarderExpiredRequest(request.deadline);\n            }\n\n            if (!signerMatch) {\n                revert ERC2771ForwarderInvalidSigner(signer, request.from);\n            }\n        }\n\n        // Ignore an invalid request because requireValidRequest = false\n        if (isTrustedForwarder && signerMatch && active) {\n            // Nonce should be used before the call to prevent reusing by reentrancy\n            uint256 currentNonce = _useNonce(signer);\n\n            uint256 reqGas = request.gas;\n            address to = request.to;\n            uint256 value = request.value;\n            bytes memory data = abi.encodePacked(request.data, request.from);\n\n            uint256 gasLeft;\n\n            assembly (\"memory-safe\") {\n                success := call(reqGas, to, value, add(data, 0x20), mload(data), 0, 0)\n                gasLeft := gas()\n            }\n\n            _checkForwardedGas(gasLeft, request);\n\n            emit ExecutedForwardRequest(signer, currentNonce, success);\n        }\n    }\n\n    /**\n     * @dev Returns whether the target trusts this forwarder.\n     *\n     * This function performs a static call to the target contract calling the\n     * {ERC2771Context-isTrustedForwarder} function.\n     */\n    function _isTrustedByTarget(address target) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this)));\n\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            // Perform the staticcall and save the result in the scratch space.\n            // | Location  | Content  | Content (Hex)                                                      |\n            // |-----------|----------|--------------------------------------------------------------------|\n            // |           |          |                                                           result ↓ |\n            // | 0x00:0x1F | selector | 0x0000000000000000000000000000000000000000000000000000000000000001 |\n            success := staticcall(gas(), target, add(encodedParams, 0x20), mload(encodedParams), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n\n    /**\n     * @dev Checks if the requested gas was correctly forwarded to the callee.\n     *\n     * As a consequence of https://eips.ethereum.org/EIPS/eip-150[EIP-150]:\n     * - At most `gasleft() - floor(gasleft() / 64)` is forwarded to the callee.\n     * - At least `floor(gasleft() / 64)` is kept in the caller.\n     *\n     * It reverts consuming all the available gas if the forwarded gas is not the requested gas.\n     *\n     * IMPORTANT: The `gasLeft` parameter should be measured exactly at the end of the forwarded call.\n     * Any gas consumed in between will make room for bypassing this check.\n     */\n    function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {\n        // To avoid insufficient gas griefing attacks, as referenced in https://ronan.eth.limo/blog/ethereum-gas-dangers/\n        //\n        // A malicious relayer can attempt to shrink the gas forwarded so that the underlying call reverts out-of-gas\n        // but the forwarding itself still succeeds. In order to make sure that the subcall received sufficient gas,\n        // we will inspect gasleft() after the forwarding.\n        //\n        // Let X be the gas available before the subcall, such that the subcall gets at most X * 63 / 64.\n        // We can't know X after CALL dynamic costs, but we want it to be such that X * 63 / 64 >= req.gas.\n        // Let Y be the gas used in the subcall. gasleft() measured immediately after the subcall will be gasleft() = X - Y.\n        // If the subcall ran out of gas, then Y = X * 63 / 64 and gasleft() = X - Y = X / 64.\n        // Under this assumption req.gas / 63 > gasleft() is true if and only if\n        // req.gas / 63 > X / 64, or equivalently req.gas > X * 63 / 64.\n        // This means that if the subcall runs out of gas we are able to detect that insufficient gas was passed.\n        //\n        // We will now also see that req.gas / 63 > gasleft() implies that req.gas >= X * 63 / 64.\n        // The contract guarantees Y <= req.gas, thus gasleft() = X - Y >= X - req.gas.\n        // -    req.gas / 63 > gasleft()\n        // -    req.gas / 63 >= X - req.gas\n        // -    req.gas >= X * 63 / 64\n        // In other words if req.gas < X * 63 / 64 then req.gas / 63 <= gasleft(), thus if the relayer behaves honestly\n        // the forwarding does not revert.\n        if (gasLeft < request.gas / 63) {\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\n            // neither revert or assert consume all gas since Solidity 0.8.20\n            // https://docs.soliditylang.org/en/v0.8.20/control-structures.html#panic-via-assert-and-error-via-require\n            assembly (\"memory-safe\") {\n                invalid()\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/package.json": "{\n  \"name\": \"@openzeppelin/contracts\",\n  \"description\": \"Secure Smart Contract library for Solidity\",\n  \"version\": \"5.1.0\",\n  \"files\": [\n    \"**/*.sol\",\n    \"/build/contracts/*.json\",\n    \"!/mocks/**/*\"\n  ],\n  \"scripts\": {\n    \"prepack\": \"bash ../scripts/prepack.sh\",\n    \"prepare-docs\": \"cd ..; npm run prepare-docs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/OpenZeppelin/openzeppelin-contracts.git\"\n  },\n  \"keywords\": [\n    \"solidity\",\n    \"ethereum\",\n    \"smart\",\n    \"contracts\",\n    \"security\",\n    \"zeppelin\"\n  ],\n  \"author\": \"OpenZeppelin Community <maintainers@openzeppelin.org>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/OpenZeppelin/openzeppelin-contracts/issues\"\n  },\n  \"homepage\": \"https://openzeppelin.com/contracts/\"\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/Clones.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/ERC1967/ERC1967Proxy.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"./ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address implementation, bytes memory _data) payable {\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/ERC1967/ERC1967Utils.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/Proxy.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/beacon/BeaconProxy.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] so that it can be accessed externally.\n *\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\n * the beacon to not upgrade the implementation maliciously.\n *\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\n * an inconsistent state where the beacon storage slot does not match the beacon address.\n */\ncontract BeaconProxy is Proxy {\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\n    address private immutable _beacon;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\n        _beacon = beacon;\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Returns the beacon.\n     */\n    function _getBeacon() internal view virtual returns (address) {\n        return _beacon;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/beacon/IBeacon.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/beacon/UpgradeableBeacon.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev The `implementation` of the beacon is invalid.\n     */\n    error BeaconInvalidImplementation(address implementation);\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\n     */\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert BeaconInvalidImplementation(newImplementation);\n        }\n        _implementation = newImplementation;\n        emit Upgraded(newImplementation);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/transparent/ProxyAdmin.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.20;\n\nimport {ITransparentUpgradeableProxy} from \"./TransparentUpgradeableProxy.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev Sets the initial owner who can perform upgrades.\n     */\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/transparent/TransparentUpgradeableProxy.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\nimport {ERC1967Proxy} from \"../ERC1967/ERC1967Proxy.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {ProxyAdmin} from \"./ProxyAdmin.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    /// @dev See {UUPSUpgradeable-upgradeToAndCall}\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\n * the proxy admin cannot fallback to the target implementation.\n *\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\n *\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\n * undesirable state where the admin slot is different from the actual admin. Relying on the value of the admin slot\n * is generally fine if the implementation is trusted.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\n    // at the expense of removing the ability to change the admin once it's set.\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\n    // with its own ability to transfer the permissions to another account.\n    address private immutable _admin;\n\n    /**\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\n     */\n    error ProxyDeniedAdminAccess();\n\n    /**\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\n     * {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _admin = address(new ProxyAdmin(initialOwner));\n        // Set the storage value and emit an event for ERC-1967 compatibility\n        ERC1967Utils.changeAdmin(_proxyAdmin());\n    }\n\n    /**\n     * @dev Returns the admin of this proxy.\n     */\n    function _proxyAdmin() internal view virtual returns (address) {\n        return _admin;\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _proxyAdmin()) {\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                revert ProxyDeniedAdminAccess();\n            } else {\n                _dispatchUpgradeToAndCall();\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function _dispatchUpgradeToAndCall() private {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/utils/Initializable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/proxy/utils/UUPSUpgradeable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"../../interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/ERC1155.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {ERC1155Utils} from \"./utils/ERC1155Utils.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\n            } else {\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        assembly (\"memory-safe\") {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/IERC1155.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/IERC1155Receiver.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/extensions/ERC1155Burnable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\n        }\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\n        }\n\n        _burnBatch(account, ids, values);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/extensions/ERC1155Pausable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/ERC1155Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\nimport {Pausable} from \"../../../utils/Pausable.sol\";\n\n/**\n * @dev ERC-1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC1155Pausable is ERC1155, Pausable {\n    /**\n     * @dev See {ERC1155-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override whenNotPaused {\n        super._update(from, to, ids, values);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/extensions/ERC1155Supply.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\nimport {Arrays} from \"../../../utils/Arrays.sol\";\n\n/**\n * @dev Extension of ERC-1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n *\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n * that can be minted.\n *\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    using Arrays for uint256[];\n\n    mapping(uint256 id => uint256) private _totalSupply;\n    uint256 private _totalSupplyAll;\n\n    /**\n     * @dev Total value of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Total value of tokens.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_update}.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values.unsafeMemoryAccess(i);\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids.unsafeMemoryAccess(i)] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values.unsafeMemoryAccess(i);\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids.unsafeMemoryAccess(i)] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/extensions/ERC1155URIStorage.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev ERC-1155 token with storage based token URI management.\n * Inspired by the {ERC721URIStorage} extension\n */\nabstract contract ERC1155URIStorage is ERC1155 {\n    using Strings for uint256;\n\n    // Optional base URI\n    string private _baseURI = \"\";\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the concatenation of the `_baseURI`\n     * and the token-specific uri if the latter is set\n     *\n     * This enables the following behaviors:\n     *\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\n     *   is empty per default);\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\n     *   which in most cases will contain `ERC1155._uri`;\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\n     *   uri value set, then the result is empty.\n     */\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory tokenURI = _tokenURIs[tokenId];\n\n        // If token URI is set, concatenate base URI and tokenURI (via string.concat).\n        return bytes(tokenURI).length > 0 ? string.concat(_baseURI, tokenURI) : super.uri(tokenId);\n    }\n\n    /**\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\n     */\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        _tokenURIs[tokenId] = tokenURI;\n        emit URI(uri(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\n     */\n    function _setBaseURI(string memory baseURI) internal virtual {\n        _baseURI = baseURI;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/extensions/IERC1155MetadataURI.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/utils/ERC1155Holder.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165, ERC165} from \"../../../utils/introspection/ERC165.sol\";\nimport {IERC1155Receiver} from \"../IERC1155Receiver.sol\";\n\n/**\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC-1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n */\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC1155/utils/ERC1155Utils.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155Receiver} from \"../IERC1155Receiver.sol\";\nimport {IERC1155Errors} from \"../../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Library that provide common ERC-1155 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\n *\n * _Available since v5.1._\n */\nlibrary ERC1155Utils {\n    /**\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155-onERC1155Received}\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n     *\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\n     * the transfer.\n     */\n    function checkOnERC1155Received(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-IERC1155Receiver implementer\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\n                } else {\n                    assembly (\"memory-safe\") {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155-onERC1155BatchReceived}\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n     *\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\n     * the transfer.\n     */\n    function checkOnERC1155BatchReceived(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-IERC1155Receiver implementer\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\n                } else {\n                    assembly (\"memory-safe\") {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/ERC20.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/IERC20.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC1363.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {IERC165, ERC165} from \"../../../utils/introspection/ERC165.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {ERC1363Utils} from \"../utils/ERC1363Utils.sol\";\n\n/**\n * @title ERC1363\n * @dev Extension of {ERC20} tokens that adds support for code execution after transfers and approvals\n * on recipient contracts. Calls after transfers are enabled through the {ERC1363-transferAndCall} and\n * {ERC1363-transferFromAndCall} methods while calls after approvals can be made with {ERC1363-approveAndCall}\n *\n * _Available since v5.1._\n */\nabstract contract ERC1363 is ERC20, ERC165, IERC1363 {\n    /**\n     * @dev Indicates a failure within the {transfer} part of a transferAndCall operation.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n    error ERC1363TransferFailed(address receiver, uint256 value);\n\n    /**\n     * @dev Indicates a failure within the {transferFrom} part of a transferFromAndCall operation.\n     * @param sender Address from which to send tokens.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n    error ERC1363TransferFromFailed(address sender, address receiver, uint256 value);\n\n    /**\n     * @dev Indicates a failure within the {approve} part of a approveAndCall operation.\n     * @param spender Address which will spend the funds.\n     * @param value Amount of tokens to be spent.\n     */\n    error ERC1363ApproveFailed(address spender, uint256 value);\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transfer} must succeed (returned `true`).\n     */\n    function transferAndCall(address to, uint256 value) public returns (bool) {\n        return transferAndCall(to, value, \"\");\n    }\n\n    /**\n     * @dev Variant of {transferAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n    function transferAndCall(address to, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!transfer(to, value)) {\n            revert ERC1363TransferFailed(to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), _msgSender(), to, value, data);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transferFrom} must succeed (returned `true`).\n     */\n    function transferFromAndCall(address from, address to, uint256 value) public returns (bool) {\n        return transferFromAndCall(from, to, value, \"\");\n    }\n\n    /**\n     * @dev Variant of {transferFromAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) public virtual returns (bool) {\n        if (!transferFrom(from, to, value)) {\n            revert ERC1363TransferFromFailed(from, to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), from, to, value, data);\n        return true;\n    }\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `spender` must implement the {IERC1363Spender} interface.\n     * - The target must return the {IERC1363Spender-onApprovalReceived} selector to accept the approval.\n     * - The internal {approve} must succeed (returned `true`).\n     */\n    function approveAndCall(address spender, uint256 value) public returns (bool) {\n        return approveAndCall(spender, value, \"\");\n    }\n\n    /**\n     * @dev Variant of {approveAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n    function approveAndCall(address spender, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!approve(spender, value)) {\n            revert ERC1363ApproveFailed(spender, value);\n        }\n        ERC1363Utils.checkOnERC1363ApprovalReceived(_msgSender(), spender, value, data);\n        return true;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20Burnable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20Capped.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Total supply cap has been exceeded.\n     */\n    error ERC20ExceededCap(uint256 increasedSupply, uint256 cap);\n\n    /**\n     * @dev The supplied cap is not a valid cap.\n     */\n    error ERC20InvalidCap(uint256 cap);\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        if (cap_ == 0) {\n            revert ERC20InvalidCap(0);\n        }\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_update}.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n\n        if (from == address(0)) {\n            uint256 maxSupply = cap();\n            uint256 supply = totalSupply();\n            if (supply > maxSupply) {\n                revert ERC20ExceededCap(supply, maxSupply);\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20FlashMint.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20FlashMint.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"../../../interfaces/IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"../../../interfaces/IERC3156FlashLender.sol\";\nimport {ERC20} from \"../ERC20.sol\";\n\n/**\n * @dev Implementation of the ERC-3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n *\n * NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions,\n * {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend\n * overriding {maxFlashLoan} so that it correctly reflects the supply cap.\n */\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\n    bytes32 private constant RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev The loan token is not valid.\n     */\n    error ERC3156UnsupportedToken(address token);\n\n    /**\n     * @dev The requested loan exceeds the max loan value for `token`.\n     */\n    error ERC3156ExceededMaxLoan(uint256 maxLoan);\n\n    /**\n     * @dev The receiver of a flashloan is not a valid {IERC3156FlashBorrower-onFlashLoan} implementer.\n     */\n    error ERC3156InvalidReceiver(address receiver);\n\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amount of token that can be loaned.\n     *\n     * NOTE: This function does not consider any form of supply cap, so in case\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\n     * function to integrate the cap instead of `type(uint256).max`.\n     */\n    function maxFlashLoan(address token) public view virtual returns (uint256) {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. This function calls\n     * the {_flashFee} function which returns the fee applied when doing flash\n     * loans.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 value) public view virtual returns (uint256) {\n        if (token != address(this)) {\n            revert ERC3156UnsupportedToken(token);\n        }\n        return _flashFee(token, value);\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\n        // silence warning about unused variable without the addition of bytecode.\n        token;\n        value;\n        return 0;\n    }\n\n    /**\n     * @dev Returns the receiver address of the flash fee. By default this\n     * implementation returns the address(0) which means the fee amount will be burnt.\n     * This function can be overloaded to change the fee receiver.\n     * @return The address for which the flash fee will be sent to.\n     */\n    function _flashFeeReceiver() internal view virtual returns (address) {\n        return address(0);\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * value + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param value The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` if the flash loan was successful.\n     */\n    // This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\n    // minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\n    // slither-disable-next-line reentrancy-no-eth\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 value,\n        bytes calldata data\n    ) public virtual returns (bool) {\n        uint256 maxLoan = maxFlashLoan(token);\n        if (value > maxLoan) {\n            revert ERC3156ExceededMaxLoan(maxLoan);\n        }\n        uint256 fee = flashFee(token, value);\n        _mint(address(receiver), value);\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\n            revert ERC3156InvalidReceiver(address(receiver));\n        }\n        address flashFeeReceiver = _flashFeeReceiver();\n        _spendAllowance(address(receiver), address(this), value + fee);\n        if (fee == 0 || flashFeeReceiver == address(0)) {\n            _burn(address(receiver), value + fee);\n        } else {\n            _burn(address(receiver), value);\n            _transfer(address(receiver), flashFeeReceiver, fee);\n        }\n        return true;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20Pausable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Pausable} from \"../../../utils/Pausable.sol\";\n\n/**\n * @dev ERC-20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20Permit.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20Votes.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Votes} from \"../../../governance/utils/Votes.sol\";\nimport {Checkpoints} from \"../../../utils/structs/Checkpoints.sol\";\n\n/**\n * @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\n * power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n */\nabstract contract ERC20Votes is ERC20, Votes {\n    /**\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\n     */\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\n     *\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\n     * returned.\n     */\n    function _maxSupply() internal view virtual returns (uint256) {\n        return type(uint208).max;\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n        if (from == address(0)) {\n            uint256 supply = totalSupply();\n            uint256 cap = _maxSupply();\n            if (supply > cap) {\n                revert ERC20ExceededSafeSupply(supply, cap);\n            }\n        }\n        _transferVotingUnits(from, to, value);\n    }\n\n    /**\n     * @dev Returns the voting units of an `account`.\n     *\n     * WARNING: Overriding this function may compromise the internal vote accounting.\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\n     */\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return _numCheckpoints(account);\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _checkpoints(account, pos);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC20Wrapper.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Wrapper.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\n\n/**\n * @dev Extension of the ERC-20 token contract to support token wrapping.\n *\n * Users can deposit and withdraw \"underlying tokens\" and receive a matching number of \"wrapped tokens\". This is useful\n * in conjunction with other modules. For example, combining this wrapping mechanism with {ERC20Votes} will allow the\n * wrapping of an existing \"basic\" ERC-20 into a governance token.\n *\n * WARNING: Any mechanism in which the underlying token changes the {balanceOf} of an account without an explicit transfer\n * may desynchronize this contract's supply and its underlying balance. Please exercise caution when wrapping tokens that\n * may undercollateralize the wrapper (i.e. wrapper's total supply is higher than its underlying balance). See {_recover}\n * for recovering value accrued to the wrapper.\n */\nabstract contract ERC20Wrapper is ERC20 {\n    IERC20 private immutable _underlying;\n\n    /**\n     * @dev The underlying token couldn't be wrapped.\n     */\n    error ERC20InvalidUnderlying(address token);\n\n    constructor(IERC20 underlyingToken) {\n        if (underlyingToken == this) {\n            revert ERC20InvalidUnderlying(address(this));\n        }\n        _underlying = underlyingToken;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        try IERC20Metadata(address(_underlying)).decimals() returns (uint8 value) {\n            return value;\n        } catch {\n            return super.decimals();\n        }\n    }\n\n    /**\n     * @dev Returns the address of the underlying ERC-20 token that is being wrapped.\n     */\n    function underlying() public view returns (IERC20) {\n        return _underlying;\n    }\n\n    /**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\n     */\n    function depositFor(address account, uint256 value) public virtual returns (bool) {\n        address sender = _msgSender();\n        if (sender == address(this)) {\n            revert ERC20InvalidSender(address(this));\n        }\n        if (account == address(this)) {\n            revert ERC20InvalidReceiver(account);\n        }\n        SafeERC20.safeTransferFrom(_underlying, sender, address(this), value);\n        _mint(account, value);\n        return true;\n    }\n\n    /**\n     * @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\n     */\n    function withdrawTo(address account, uint256 value) public virtual returns (bool) {\n        if (account == address(this)) {\n            revert ERC20InvalidReceiver(account);\n        }\n        _burn(_msgSender(), value);\n        SafeERC20.safeTransfer(_underlying, account, value);\n        return true;\n    }\n\n    /**\n     * @dev Mint wrapped token to cover any underlyingTokens that would have been transferred by mistake or acquired from\n     * rebasing mechanisms. Internal function that can be exposed with access control if desired.\n     */\n    function _recover(address account) internal virtual returns (uint256) {\n        uint256 value = _underlying.balanceOf(address(this)) - totalSupply();\n        _mint(account, value);\n        return value;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/ERC4626.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC-4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC-20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC-20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\n * underlying math can be found xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}. */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/IERC20Metadata.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/IERC20Permit.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/extensions/draft-ERC20TemporaryApproval.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/draft-ERC20TemporaryApproval.sol)\n\npragma solidity ^0.8.24;\n\nimport {IERC20, ERC20} from \"../ERC20.sol\";\nimport {IERC7674} from \"../../../interfaces/draft-IERC7674.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\nimport {SlotDerivation} from \"../../../utils/SlotDerivation.sol\";\nimport {TransientSlot} from \"../../../utils/TransientSlot.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds support for temporary allowances following ERC-7674.\n *\n * WARNING: This is a draft contract. The corresponding ERC is still subject to changes.\n *\n * _Available since v5.1._\n */\nabstract contract ERC20TemporaryApproval is ERC20, IERC7674 {\n    using SlotDerivation for bytes32;\n    using TransientSlot for bytes32;\n    using TransientSlot for TransientSlot.Uint256Slot;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20_TEMPORARY_APPROVAL_STORAGE\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20_TEMPORARY_APPROVAL_STORAGE =\n        0xea2d0e77a01400d0111492b1321103eed560d8fe44b9a7c2410407714583c400;\n\n    /**\n     * @dev {allowance} override that includes the temporary allowance when looking up the current allowance. If\n     * adding up the persistent and the temporary allowances result in an overflow, type(uint256).max is returned.\n     */\n    function allowance(address owner, address spender) public view virtual override(IERC20, ERC20) returns (uint256) {\n        (bool success, uint256 amount) = Math.tryAdd(\n            super.allowance(owner, spender),\n            _temporaryAllowance(owner, spender)\n        );\n        return success ? amount : type(uint256).max;\n    }\n\n    /**\n     * @dev Internal getter for the current temporary allowance that `spender` has over `owner` tokens.\n     */\n    function _temporaryAllowance(address owner, address spender) internal view virtual returns (uint256) {\n        return _temporaryAllowanceSlot(owner, spender).tload();\n    }\n\n    /**\n     * @dev Alternative to {approve} that sets a `value` amount of tokens as the temporary allowance of `spender` over\n     * the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Requirements:\n     * - `spender` cannot be the zero address.\n     *\n     * Does NOT emit an {Approval} event.\n     */\n    function temporaryApprove(address spender, uint256 value) public virtual returns (bool) {\n        _temporaryApprove(_msgSender(), spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Sets `value` as the temporary allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `temporaryApprove`, and can be used to e.g. set automatic allowances\n     * for certain subsystems, etc.\n     *\n     * Requirements:\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Does NOT emit an {Approval} event.\n     */\n    function _temporaryApprove(address owner, address spender, uint256 value) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _temporaryAllowanceSlot(owner, spender).tstore(value);\n    }\n\n    /**\n     * @dev {_spendAllowance} override that consumes the temporary allowance (if any) before eventually falling back\n     * to consuming the persistent allowance.\n     * NOTE: This function skips calling `super._spendAllowance` if the temporary allowance\n     * is enough to cover the spending.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual override {\n        // load transient allowance\n        uint256 currentTemporaryAllowance = _temporaryAllowance(owner, spender);\n\n        // Check and update (if needed) the temporary allowance + set remaining value\n        if (currentTemporaryAllowance > 0) {\n            // All value is covered by the infinite allowance. nothing left to spend, we can return early\n            if (currentTemporaryAllowance == type(uint256).max) {\n                return;\n            }\n            // check how much of the value is covered by the transient allowance\n            uint256 spendTemporaryAllowance = Math.min(currentTemporaryAllowance, value);\n            unchecked {\n                // decrease transient allowance accordingly\n                _temporaryApprove(owner, spender, currentTemporaryAllowance - spendTemporaryAllowance);\n                // update value necessary\n                value -= spendTemporaryAllowance;\n            }\n        }\n        // reduce any remaining value from the persistent allowance\n        if (value > 0) {\n            super._spendAllowance(owner, spender, value);\n        }\n    }\n\n    function _temporaryAllowanceSlot(address owner, address spender) private pure returns (TransientSlot.Uint256Slot) {\n        return ERC20_TEMPORARY_APPROVAL_STORAGE.deriveMapping(owner).deriveMapping(spender).asUint256();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/utils/ERC1363Utils.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/ERC1363Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1363Receiver} from \"../../../interfaces/IERC1363Receiver.sol\";\nimport {IERC1363Spender} from \"../../../interfaces/IERC1363Spender.sol\";\n\n/**\n * @dev Library that provides common ERC-1363 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n */\nlibrary ERC1363Utils {\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1363InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the token `spender`. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1363InvalidSpender(address spender);\n\n    /**\n     * @dev Performs a call to {IERC1363Receiver-onTransferReceived} on a target address.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     */\n    function checkOnERC1363TransferReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            revert ERC1363InvalidReceiver(to);\n        }\n\n        try IERC1363Receiver(to).onTransferReceived(operator, from, value, data) returns (bytes4 retval) {\n            if (retval != IERC1363Receiver.onTransferReceived.selector) {\n                revert ERC1363InvalidReceiver(to);\n            }\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert ERC1363InvalidReceiver(to);\n            } else {\n                assembly (\"memory-safe\") {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a call to {IERC1363Spender-onApprovalReceived} on a target address.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `spender` must implement the {IERC1363Spender} interface.\n     * - The target must return the {IERC1363Spender-onApprovalReceived} selector to accept the approval.\n     */\n    function checkOnERC1363ApprovalReceived(\n        address operator,\n        address spender,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (spender.code.length == 0) {\n            revert ERC1363InvalidSpender(spender);\n        }\n\n        try IERC1363Spender(spender).onApprovalReceived(operator, value, data) returns (bytes4 retval) {\n            if (retval != IERC1363Spender.onApprovalReceived.selector) {\n                revert ERC1363InvalidSpender(spender);\n            }\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert ERC1363InvalidSpender(spender);\n            } else {\n                assembly (\"memory-safe\") {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC20/utils/SafeERC20.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/ERC721.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {ERC721Utils} from \"./utils/ERC721Utils.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if:\n     * - `spender` does not have approval from `owner` for `tokenId`.\n     * - `spender` does not have approval to manage all of `owner`'s assets.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/IERC721.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/IERC721Receiver.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC-721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC-721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Burnable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @title ERC-721 Burnable Token\n * @dev ERC-721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        _update(address(0), tokenId, _msgSender());\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Consecutive.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Consecutive.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC2309} from \"../../../interfaces/IERC2309.sol\";\nimport {BitMaps} from \"../../../utils/structs/BitMaps.sol\";\nimport {Checkpoints} from \"../../../utils/structs/Checkpoints.sol\";\n\n/**\n * @dev Implementation of the ERC-2309 \"Consecutive Transfer Extension\" as defined in\n * https://eips.ethereum.org/EIPS/eip-2309[ERC-2309].\n *\n * This extension allows the minting of large batches of tokens, during contract construction only. For upgradeable\n * contracts this implies that batch minting is only available during proxy deployment, and not in subsequent upgrades.\n * These batches are limited to 5000 tokens at a time by default to accommodate off-chain indexers.\n *\n * Using this extension removes the ability to mint single tokens during contract construction. This ability is\n * regained after construction. During construction, only batch minting is allowed.\n *\n * IMPORTANT: This extension does not call the {_update} function for tokens minted in batch. Any logic added to this\n * function through overrides will not be triggered when token are minted in batch. You may want to also override\n * {_increaseBalance} or {_mintConsecutive} to account for these mints.\n *\n * IMPORTANT: When overriding {_mintConsecutive}, be careful about call ordering. {ownerOf} may return invalid\n * values during the {_mintConsecutive} execution if the super call is not called first. To be safe, execute the\n * super call before your custom logic.\n */\nabstract contract ERC721Consecutive is IERC2309, ERC721 {\n    using BitMaps for BitMaps.BitMap;\n    using Checkpoints for Checkpoints.Trace160;\n\n    Checkpoints.Trace160 private _sequentialOwnership;\n    BitMaps.BitMap private _sequentialBurn;\n\n    /**\n     * @dev Batch mint is restricted to the constructor.\n     * Any batch mint not emitting the {IERC721-Transfer} event outside of the constructor\n     * is non ERC-721 compliant.\n     */\n    error ERC721ForbiddenBatchMint();\n\n    /**\n     * @dev Exceeds the max amount of mints per batch.\n     */\n    error ERC721ExceededMaxBatchMint(uint256 batchSize, uint256 maxBatch);\n\n    /**\n     * @dev Individual minting is not allowed.\n     */\n    error ERC721ForbiddenMint();\n\n    /**\n     * @dev Batch burn is not supported.\n     */\n    error ERC721ForbiddenBatchBurn();\n\n    /**\n     * @dev Maximum size of a batch of consecutive tokens. This is designed to limit stress on off-chain indexing\n     * services that have to record one entry per token, and have protections against \"unreasonably large\" batches of\n     * tokens.\n     *\n     * NOTE: Overriding the default value of 5000 will not cause onchain issues, but may result in the asset not being\n     * correctly supported by off-chain indexing services (including marketplaces).\n     */\n    function _maxBatchSize() internal view virtual returns (uint96) {\n        return 5000;\n    }\n\n    /**\n     * @dev See {ERC721-_ownerOf}. Override that checks the sequential ownership structure for tokens that have\n     * been minted as part of a batch, and not yet transferred.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual override returns (address) {\n        address owner = super._ownerOf(tokenId);\n\n        // If token is owned by the core, or beyond consecutive range, return base value\n        if (owner != address(0) || tokenId > type(uint96).max || tokenId < _firstConsecutiveId()) {\n            return owner;\n        }\n\n        // Otherwise, check the token was not burned, and fetch ownership from the anchors\n        // Note: no need for safe cast, we know that tokenId <= type(uint96).max\n        return _sequentialBurn.get(tokenId) ? address(0) : address(_sequentialOwnership.lowerLookup(uint96(tokenId)));\n    }\n\n    /**\n     * @dev Mint a batch of tokens of length `batchSize` for `to`. Returns the token id of the first token minted in the\n     * batch; if `batchSize` is 0, returns the number of consecutive ids minted so far.\n     *\n     * Requirements:\n     *\n     * - `batchSize` must not be greater than {_maxBatchSize}.\n     * - The function is called in the constructor of the contract (directly or indirectly).\n     *\n     * CAUTION: Does not emit a `Transfer` event. This is ERC-721 compliant as long as it is done inside of the\n     * constructor, which is enforced by this function.\n     *\n     * CAUTION: Does not invoke `onERC721Received` on the receiver.\n     *\n     * Emits a {IERC2309-ConsecutiveTransfer} event.\n     */\n    function _mintConsecutive(address to, uint96 batchSize) internal virtual returns (uint96) {\n        uint96 next = _nextConsecutiveId();\n\n        // minting a batch of size 0 is a no-op\n        if (batchSize > 0) {\n            if (address(this).code.length > 0) {\n                revert ERC721ForbiddenBatchMint();\n            }\n            if (to == address(0)) {\n                revert ERC721InvalidReceiver(address(0));\n            }\n\n            uint256 maxBatchSize = _maxBatchSize();\n            if (batchSize > maxBatchSize) {\n                revert ERC721ExceededMaxBatchMint(batchSize, maxBatchSize);\n            }\n\n            // push an ownership checkpoint & emit event\n            uint96 last = next + batchSize - 1;\n            _sequentialOwnership.push(last, uint160(to));\n\n            // The invariant required by this function is preserved because the new sequentialOwnership checkpoint\n            // is attributing ownership of `batchSize` new tokens to account `to`.\n            _increaseBalance(to, batchSize);\n\n            emit ConsecutiveTransfer(next, last, address(0), to);\n        }\n\n        return next;\n    }\n\n    /**\n     * @dev See {ERC721-_update}. Override version that restricts normal minting to after construction.\n     *\n     * WARNING: Using {ERC721Consecutive} prevents minting during construction in favor of {_mintConsecutive}.\n     * After construction, {_mintConsecutive} is no longer available and minting through {_update} becomes available.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        // only mint after construction\n        if (previousOwner == address(0) && address(this).code.length == 0) {\n            revert ERC721ForbiddenMint();\n        }\n\n        // record burn\n        if (\n            to == address(0) && // if we burn\n            tokenId < _nextConsecutiveId() && // and the tokenId was minted in a batch\n            !_sequentialBurn.get(tokenId) // and the token was never marked as burnt\n        ) {\n            _sequentialBurn.set(tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Used to offset the first token id in {_nextConsecutiveId}\n     */\n    function _firstConsecutiveId() internal view virtual returns (uint96) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next tokenId to mint using {_mintConsecutive}. It will return {_firstConsecutiveId}\n     * if no consecutive tokenId has been minted before.\n     */\n    function _nextConsecutiveId() private view returns (uint96) {\n        (bool exists, uint96 latestId, ) = _sequentialOwnership.latestCheckpoint();\n        return exists ? latestId + 1 : _firstConsecutiveId();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Enumerable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\n * of all the token ids in the contract as well as all token ids owned by each account.\n *\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\n\n    /**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\n\n    /**\n     * @dev Batch mint is not allowed.\n     */\n    error ERC721EnumerableForbiddenBatchMint();\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_update}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\n\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokensByOwner[lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Pausable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Pausable} from \"../../../utils/Pausable.sol\";\n\n/**\n * @dev ERC-721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal virtual override whenNotPaused returns (address) {\n        return super._update(to, tokenId, auth);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Royalty.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Royalty.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {ERC2981} from \"../../common/ERC2981.sol\";\n\n/**\n * @dev Extension of ERC-721 with the ERC-2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n * information.\n *\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually\n * for specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the ERC. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n */\nabstract contract ERC721Royalty is ERC2981, ERC721 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721URIStorage.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC-721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Votes.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Votes.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Votes} from \"../../../governance/utils/Votes.sol\";\n\n/**\n * @dev Extension of ERC-721 to support voting and delegation as implemented by {Votes}, where each individual NFT counts\n * as 1 vote unit.\n *\n * Tokens do not count as votes until they are delegated, because votes must be tracked which incurs an additional cost\n * on every transfer. Token holders can either delegate to a trusted representative who will decide how to make use of\n * the votes in governance decisions, or they can delegate to themselves to be their own representative.\n */\nabstract contract ERC721Votes is ERC721, Votes {\n    /**\n     * @dev See {ERC721-_update}. Adjusts votes when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        _transferVotingUnits(previousOwner, to, 1);\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Returns the balance of `account`.\n     *\n     * WARNING: Overriding this function will likely result in incorrect vote tracking.\n     */\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }\n\n    /**\n     * @dev See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch.\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        super._increaseBalance(account, amount);\n        _transferVotingUnits(address(0), account, amount);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/ERC721Wrapper.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Wrapper.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721, ERC721} from \"../ERC721.sol\";\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\n\n/**\n * @dev Extension of the ERC-721 token contract to support token wrapping.\n *\n * Users can deposit and withdraw an \"underlying token\" and receive a \"wrapped token\" with a matching tokenId. This is\n * useful in conjunction with other modules. For example, combining this wrapping mechanism with {ERC721Votes} will allow\n * the wrapping of an existing \"basic\" ERC-721 into a governance token.\n */\nabstract contract ERC721Wrapper is ERC721, IERC721Receiver {\n    IERC721 private immutable _underlying;\n\n    /**\n     * @dev The received ERC-721 token couldn't be wrapped.\n     */\n    error ERC721UnsupportedToken(address token);\n\n    constructor(IERC721 underlyingToken) {\n        _underlying = underlyingToken;\n    }\n\n    /**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding tokenIds.\n     */\n    function depositFor(address account, uint256[] memory tokenIds) public virtual returns (bool) {\n        uint256 length = tokenIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n\n            // This is an \"unsafe\" transfer that doesn't call any hook on the receiver. With underlying() being trusted\n            // (by design of this contract) and no other contracts expected to be called from there, we are safe.\n            // slither-disable-next-line reentrancy-no-eth\n            underlying().transferFrom(_msgSender(), address(this), tokenId);\n            _safeMint(account, tokenId);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Allow a user to burn wrapped tokens and withdraw the corresponding tokenIds of the underlying tokens.\n     */\n    function withdrawTo(address account, uint256[] memory tokenIds) public virtual returns (bool) {\n        uint256 length = tokenIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n            // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n            _update(address(0), tokenId, _msgSender());\n            // Checks were already performed at this point, and there's no way to retake ownership or approval from\n            // the wrapped tokenId after this point, so it's safe to remove the reentrancy check for the next line.\n            // slither-disable-next-line reentrancy-no-eth\n            underlying().safeTransferFrom(address(this), account, tokenId);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Overrides {IERC721Receiver-onERC721Received} to allow minting on direct ERC-721 transfers to\n     * this contract.\n     *\n     * In case there's data attached, it validates that the operator is this contract, so only trusted data\n     * is accepted from {depositFor}.\n     *\n     * WARNING: Doesn't work with unsafe transfers (eg. {IERC721-transferFrom}). Use {ERC721Wrapper-_recover}\n     * for recovering in that scenario.\n     */\n    function onERC721Received(address, address from, uint256 tokenId, bytes memory) public virtual returns (bytes4) {\n        if (address(underlying()) != _msgSender()) {\n            revert ERC721UnsupportedToken(_msgSender());\n        }\n        _safeMint(from, tokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /**\n     * @dev Mint a wrapped token to cover any underlyingToken that would have been transferred by mistake. Internal\n     * function that can be exposed with access control if desired.\n     */\n    function _recover(address account, uint256 tokenId) internal virtual returns (uint256) {\n        address owner = underlying().ownerOf(tokenId);\n        if (owner != address(this)) {\n            revert ERC721IncorrectOwner(address(this), tokenId, owner);\n        }\n        _safeMint(account, tokenId);\n        return tokenId;\n    }\n\n    /**\n     * @dev Returns the underlying token.\n     */\n    function underlying() public view virtual returns (IERC721) {\n        return _underlying;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/IERC721Enumerable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/extensions/IERC721Metadata.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/utils/ERC721Holder.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\n * {IERC721-setApprovalForAll}.\n */\nabstract contract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/ERC721/utils/ERC721Utils.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\nimport {IERC721Errors} from \"../../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Library that provide common ERC-721 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\n *\n * _Available since v5.1._\n */\nlibrary ERC721Utils {\n    /**\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n     *\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\n     * the transfer.\n     */\n    function checkOnERC721Received(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    // Token rejected\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-IERC721Receiver implementer\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                } else {\n                    assembly (\"memory-safe\") {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/token/common/ERC2981.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC2981} from \"../../interfaces/IERC2981.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the ERC. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The default royalty receiver is invalid.\n     */\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\n\n    /**\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The royalty receiver for `tokenId` is invalid.\n     */\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) public view virtual returns (address receiver, uint256 amount) {\n        RoyaltyInfo storage _royaltyInfo = _tokenRoyaltyInfo[tokenId];\n        address royaltyReceiver = _royaltyInfo.receiver;\n        uint96 royaltyFraction = _royaltyInfo.royaltyFraction;\n\n        if (royaltyReceiver == address(0)) {\n            royaltyReceiver = _defaultRoyaltyInfo.receiver;\n            royaltyFraction = _defaultRoyaltyInfo.royaltyFraction;\n        }\n\n        uint256 royaltyAmount = (salePrice * royaltyFraction) / _feeDenominator();\n\n        return (royaltyReceiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\n        }\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\n        }\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Address.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Arrays.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Arrays.sol)\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\n\npragma solidity ^0.8.20;\n\nimport {Comparators} from \"./Comparators.sol\";\nimport {SlotDerivation} from \"./SlotDerivation.sol\";\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using SlotDerivation for bytes32;\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        uint256[] memory array,\n        function(uint256, uint256) pure returns (bool) comp\n    ) internal pure returns (uint256[] memory) {\n        _quickSort(_begin(array), _end(array), comp);\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\n     */\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\n        sort(array, Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of address (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        address[] memory array,\n        function(address, address) pure returns (bool) comp\n    ) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\n     */\n    function sort(address[] memory array) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        bytes32[] memory array,\n        function(bytes32, bytes32) pure returns (bool) comp\n    ) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\n     */\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\n     * at end (exclusive). Sorting follows the `comp` comparator.\n     *\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\n     *\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\n     * be used only if the limits are within a memory array.\n     */\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\n        unchecked {\n            if (end - begin < 0x40) return;\n\n            // Use first element as pivot\n            uint256 pivot = _mload(begin);\n            // Position where the pivot should be at the end of the loop\n            uint256 pos = begin;\n\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\n                if (comp(_mload(it), pivot)) {\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\n                    // position of the pivot and move the value there.\n                    pos += 0x20;\n                    _swap(pos, it);\n                }\n            }\n\n            _swap(begin, pos); // Swap pivot into place\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first element of `array`.\n     */\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\n        assembly (\"memory-safe\") {\n            ptr := add(array, 0x20)\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\n     * that comes just after the last element of the array.\n     */\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\n        unchecked {\n            return _begin(array) + array.length * 0x20;\n        }\n    }\n\n    /**\n     * @dev Load memory word (as a uint256) at location `ptr`.\n     */\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\n        assembly {\n            value := mload(ptr)\n        }\n    }\n\n    /**\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\n     */\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\n        assembly {\n            let value1 := mload(ptr1)\n            let value2 := mload(ptr2)\n            mstore(ptr1, value2)\n            mstore(ptr2, value1)\n        }\n    }\n\n    /// @dev Helper: low level cast address memory array to uint256 memory array\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast address comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(address, address) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(bytes32, bytes32) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\n     * contain no repeated elements.\n     *\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\n     * support for repeated elements in the array. The {lowerBound} function should\n     * be used instead.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value greater or equal than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\n     */\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value strictly greater than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\n     */\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {lowerBound}, but with an array in memory.\n     */\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {upperBound}, but with an array in memory.\n     */\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Base64.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Base64.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     * See sections 4 and 5 of https://datatracker.ietf.org/doc/html/rfc4648\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    string internal constant _TABLE_URL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        return _encode(data, _TABLE, true);\n    }\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64Url `string` representation.\n     * Output is not padded with `=` as specified in https://www.rfc-editor.org/rfc/rfc4648[rfc4648].\n     */\n    function encodeURL(bytes memory data) internal pure returns (string memory) {\n        return _encode(data, _TABLE_URL, false);\n    }\n\n    /**\n     * @dev Internal table-agnostic conversion\n     */\n    function _encode(bytes memory data, string memory table, bool withPadding) private pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // If padding is enabled, the final length should be `bytes` data length divided by 3 rounded up and then\n        // multiplied by 4 so that it leaves room for padding the last chunk\n        // - `data.length + 2`  -> Prepare for division rounding up\n        // - `/ 3`              -> Number of 3-bytes chunks (rounded up)\n        // - `4 *`              -> 4 characters for each chunk\n        // This is equivalent to: 4 * Math.ceil(data.length / 3)\n        //\n        // If padding is disabled, the final length should be `bytes` data length multiplied by 4/3 rounded up as\n        // opposed to when padding is required to fill the last chunk.\n        // - `4 * data.length`  -> 4 characters for each chunk\n        // - ` + 2`             -> Prepare for division rounding up\n        // - `/ 3`              -> Number of 3-bytes chunks (rounded up)\n        // This is equivalent to: Math.ceil((4 * data.length) / 3)\n        uint256 resultLength = withPadding ? 4 * ((data.length + 2) / 3) : (4 * data.length + 2) / 3;\n\n        string memory result = new string(resultLength);\n\n        assembly (\"memory-safe\") {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 0x20)\n            let dataPtr := data\n            let endPtr := add(data, mload(data))\n\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\n            // set it to zero to make sure no dirty bytes are read in that section.\n            let afterPtr := add(endPtr, 0x20)\n            let afterCache := mload(afterPtr)\n            mstore(afterPtr, 0x00)\n\n            // Run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 byte (24 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\n                // Use this as an index into the lookup table, mload an entire word\n                // so the desired character is in the least significant byte, and\n                // mstore8 this least significant byte into the result and continue.\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // Reset the value that was cached\n            mstore(afterPtr, afterCache)\n\n            if withPadding {\n                // When data `bytes` is not exactly 3 bytes long\n                // it is padded with `=` characters at the end\n                switch mod(mload(data), 3)\n                case 1 {\n                    mstore8(sub(resultPtr, 1), 0x3d)\n                    mstore8(sub(resultPtr, 2), 0x3d)\n                }\n                case 2 {\n                    mstore8(sub(resultPtr, 1), 0x3d)\n                }\n            }\n        }\n\n        return result;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Comparators.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to compare values.\n *\n * _Available since v5.1._\n */\nlibrary Comparators {\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a < b;\n    }\n\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a > b;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Context.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Create2.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Errors.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Multicall.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract Multicall is Context {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Nonces.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Packing.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Packing.sol)\n// This file was procedurally generated from scripts/generate/templates/Packing.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library packing and unpacking multiple values into bytesXX.\n *\n * Example usage:\n *\n * ```solidity\n * library MyPacker {\n *     type MyType is bytes32;\n *\n *     function _pack(address account, bytes4 selector, uint64 period) external pure returns (MyType) {\n *         bytes12 subpack = Packing.pack_4_8(selector, bytes8(period));\n *         bytes32 pack = Packing.pack_20_12(bytes20(account), subpack);\n *         return MyType.wrap(pack);\n *     }\n *\n *     function _unpack(MyType self) external pure returns (address, bytes4, uint64) {\n *         bytes32 pack = MyType.unwrap(self);\n *         return (\n *             address(Packing.extract_32_20(pack, 0)),\n *             Packing.extract_32_4(pack, 20),\n *             uint64(Packing.extract_32_8(pack, 24))\n *         );\n *     }\n * }\n * ```\n *\n * _Available since v5.1._\n */\n// solhint-disable func-name-mixedcase\nlibrary Packing {\n    error OutOfRangeAccess();\n\n    function pack_1_1(bytes1 left, bytes1 right) internal pure returns (bytes2 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(248, not(0)))\n            right := and(right, shl(248, not(0)))\n            result := or(left, shr(8, right))\n        }\n    }\n\n    function pack_2_2(bytes2 left, bytes2 right) internal pure returns (bytes4 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(240, not(0)))\n            right := and(right, shl(240, not(0)))\n            result := or(left, shr(16, right))\n        }\n    }\n\n    function pack_2_4(bytes2 left, bytes4 right) internal pure returns (bytes6 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(240, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(16, right))\n        }\n    }\n\n    function pack_2_6(bytes2 left, bytes6 right) internal pure returns (bytes8 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(240, not(0)))\n            right := and(right, shl(208, not(0)))\n            result := or(left, shr(16, right))\n        }\n    }\n\n    function pack_4_2(bytes4 left, bytes2 right) internal pure returns (bytes6 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(240, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_4(bytes4 left, bytes4 right) internal pure returns (bytes8 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_8(bytes4 left, bytes8 right) internal pure returns (bytes12 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(192, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_12(bytes4 left, bytes12 right) internal pure returns (bytes16 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(160, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_16(bytes4 left, bytes16 right) internal pure returns (bytes20 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(128, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_20(bytes4 left, bytes20 right) internal pure returns (bytes24 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(96, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_24(bytes4 left, bytes24 right) internal pure returns (bytes28 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(64, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_4_28(bytes4 left, bytes28 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(224, not(0)))\n            right := and(right, shl(32, not(0)))\n            result := or(left, shr(32, right))\n        }\n    }\n\n    function pack_6_2(bytes6 left, bytes2 right) internal pure returns (bytes8 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(208, not(0)))\n            right := and(right, shl(240, not(0)))\n            result := or(left, shr(48, right))\n        }\n    }\n\n    function pack_6_6(bytes6 left, bytes6 right) internal pure returns (bytes12 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(208, not(0)))\n            right := and(right, shl(208, not(0)))\n            result := or(left, shr(48, right))\n        }\n    }\n\n    function pack_8_4(bytes8 left, bytes4 right) internal pure returns (bytes12 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(192, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(64, right))\n        }\n    }\n\n    function pack_8_8(bytes8 left, bytes8 right) internal pure returns (bytes16 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(192, not(0)))\n            right := and(right, shl(192, not(0)))\n            result := or(left, shr(64, right))\n        }\n    }\n\n    function pack_8_12(bytes8 left, bytes12 right) internal pure returns (bytes20 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(192, not(0)))\n            right := and(right, shl(160, not(0)))\n            result := or(left, shr(64, right))\n        }\n    }\n\n    function pack_8_16(bytes8 left, bytes16 right) internal pure returns (bytes24 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(192, not(0)))\n            right := and(right, shl(128, not(0)))\n            result := or(left, shr(64, right))\n        }\n    }\n\n    function pack_8_20(bytes8 left, bytes20 right) internal pure returns (bytes28 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(192, not(0)))\n            right := and(right, shl(96, not(0)))\n            result := or(left, shr(64, right))\n        }\n    }\n\n    function pack_8_24(bytes8 left, bytes24 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(192, not(0)))\n            right := and(right, shl(64, not(0)))\n            result := or(left, shr(64, right))\n        }\n    }\n\n    function pack_12_4(bytes12 left, bytes4 right) internal pure returns (bytes16 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(160, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(96, right))\n        }\n    }\n\n    function pack_12_8(bytes12 left, bytes8 right) internal pure returns (bytes20 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(160, not(0)))\n            right := and(right, shl(192, not(0)))\n            result := or(left, shr(96, right))\n        }\n    }\n\n    function pack_12_12(bytes12 left, bytes12 right) internal pure returns (bytes24 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(160, not(0)))\n            right := and(right, shl(160, not(0)))\n            result := or(left, shr(96, right))\n        }\n    }\n\n    function pack_12_16(bytes12 left, bytes16 right) internal pure returns (bytes28 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(160, not(0)))\n            right := and(right, shl(128, not(0)))\n            result := or(left, shr(96, right))\n        }\n    }\n\n    function pack_12_20(bytes12 left, bytes20 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(160, not(0)))\n            right := and(right, shl(96, not(0)))\n            result := or(left, shr(96, right))\n        }\n    }\n\n    function pack_16_4(bytes16 left, bytes4 right) internal pure returns (bytes20 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(128, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(128, right))\n        }\n    }\n\n    function pack_16_8(bytes16 left, bytes8 right) internal pure returns (bytes24 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(128, not(0)))\n            right := and(right, shl(192, not(0)))\n            result := or(left, shr(128, right))\n        }\n    }\n\n    function pack_16_12(bytes16 left, bytes12 right) internal pure returns (bytes28 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(128, not(0)))\n            right := and(right, shl(160, not(0)))\n            result := or(left, shr(128, right))\n        }\n    }\n\n    function pack_16_16(bytes16 left, bytes16 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(128, not(0)))\n            right := and(right, shl(128, not(0)))\n            result := or(left, shr(128, right))\n        }\n    }\n\n    function pack_20_4(bytes20 left, bytes4 right) internal pure returns (bytes24 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(96, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(160, right))\n        }\n    }\n\n    function pack_20_8(bytes20 left, bytes8 right) internal pure returns (bytes28 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(96, not(0)))\n            right := and(right, shl(192, not(0)))\n            result := or(left, shr(160, right))\n        }\n    }\n\n    function pack_20_12(bytes20 left, bytes12 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(96, not(0)))\n            right := and(right, shl(160, not(0)))\n            result := or(left, shr(160, right))\n        }\n    }\n\n    function pack_24_4(bytes24 left, bytes4 right) internal pure returns (bytes28 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(64, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(192, right))\n        }\n    }\n\n    function pack_24_8(bytes24 left, bytes8 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(64, not(0)))\n            right := and(right, shl(192, not(0)))\n            result := or(left, shr(192, right))\n        }\n    }\n\n    function pack_28_4(bytes28 left, bytes4 right) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            left := and(left, shl(32, not(0)))\n            right := and(right, shl(224, not(0)))\n            result := or(left, shr(224, right))\n        }\n    }\n\n    function extract_2_1(bytes2 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 1) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_2_1(bytes2 self, bytes1 value, uint8 offset) internal pure returns (bytes2 result) {\n        bytes1 oldValue = extract_2_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_4_1(bytes4 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 3) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_4_1(bytes4 self, bytes1 value, uint8 offset) internal pure returns (bytes4 result) {\n        bytes1 oldValue = extract_4_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_4_2(bytes4 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 2) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_4_2(bytes4 self, bytes2 value, uint8 offset) internal pure returns (bytes4 result) {\n        bytes2 oldValue = extract_4_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_6_1(bytes6 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 5) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_6_1(bytes6 self, bytes1 value, uint8 offset) internal pure returns (bytes6 result) {\n        bytes1 oldValue = extract_6_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_6_2(bytes6 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_6_2(bytes6 self, bytes2 value, uint8 offset) internal pure returns (bytes6 result) {\n        bytes2 oldValue = extract_6_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_6_4(bytes6 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 2) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_6_4(bytes6 self, bytes4 value, uint8 offset) internal pure returns (bytes6 result) {\n        bytes4 oldValue = extract_6_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_8_1(bytes8 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 7) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_8_1(bytes8 self, bytes1 value, uint8 offset) internal pure returns (bytes8 result) {\n        bytes1 oldValue = extract_8_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_8_2(bytes8 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 6) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_8_2(bytes8 self, bytes2 value, uint8 offset) internal pure returns (bytes8 result) {\n        bytes2 oldValue = extract_8_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_8_4(bytes8 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_8_4(bytes8 self, bytes4 value, uint8 offset) internal pure returns (bytes8 result) {\n        bytes4 oldValue = extract_8_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_8_6(bytes8 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 2) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_8_6(bytes8 self, bytes6 value, uint8 offset) internal pure returns (bytes8 result) {\n        bytes6 oldValue = extract_8_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_12_1(bytes12 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 11) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_12_1(bytes12 self, bytes1 value, uint8 offset) internal pure returns (bytes12 result) {\n        bytes1 oldValue = extract_12_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_12_2(bytes12 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 10) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_12_2(bytes12 self, bytes2 value, uint8 offset) internal pure returns (bytes12 result) {\n        bytes2 oldValue = extract_12_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_12_4(bytes12 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 8) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_12_4(bytes12 self, bytes4 value, uint8 offset) internal pure returns (bytes12 result) {\n        bytes4 oldValue = extract_12_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_12_6(bytes12 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 6) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_12_6(bytes12 self, bytes6 value, uint8 offset) internal pure returns (bytes12 result) {\n        bytes6 oldValue = extract_12_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_12_8(bytes12 self, uint8 offset) internal pure returns (bytes8 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\n        }\n    }\n\n    function replace_12_8(bytes12 self, bytes8 value, uint8 offset) internal pure returns (bytes12 result) {\n        bytes8 oldValue = extract_12_8(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(192, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_16_1(bytes16 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 15) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_16_1(bytes16 self, bytes1 value, uint8 offset) internal pure returns (bytes16 result) {\n        bytes1 oldValue = extract_16_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_16_2(bytes16 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 14) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_16_2(bytes16 self, bytes2 value, uint8 offset) internal pure returns (bytes16 result) {\n        bytes2 oldValue = extract_16_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_16_4(bytes16 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 12) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_16_4(bytes16 self, bytes4 value, uint8 offset) internal pure returns (bytes16 result) {\n        bytes4 oldValue = extract_16_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_16_6(bytes16 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 10) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_16_6(bytes16 self, bytes6 value, uint8 offset) internal pure returns (bytes16 result) {\n        bytes6 oldValue = extract_16_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_16_8(bytes16 self, uint8 offset) internal pure returns (bytes8 result) {\n        if (offset > 8) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\n        }\n    }\n\n    function replace_16_8(bytes16 self, bytes8 value, uint8 offset) internal pure returns (bytes16 result) {\n        bytes8 oldValue = extract_16_8(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(192, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_16_12(bytes16 self, uint8 offset) internal pure returns (bytes12 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\n        }\n    }\n\n    function replace_16_12(bytes16 self, bytes12 value, uint8 offset) internal pure returns (bytes16 result) {\n        bytes12 oldValue = extract_16_12(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(160, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_1(bytes20 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 19) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_20_1(bytes20 self, bytes1 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes1 oldValue = extract_20_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_2(bytes20 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 18) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_20_2(bytes20 self, bytes2 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes2 oldValue = extract_20_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_4(bytes20 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 16) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_20_4(bytes20 self, bytes4 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes4 oldValue = extract_20_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_6(bytes20 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 14) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_20_6(bytes20 self, bytes6 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes6 oldValue = extract_20_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_8(bytes20 self, uint8 offset) internal pure returns (bytes8 result) {\n        if (offset > 12) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\n        }\n    }\n\n    function replace_20_8(bytes20 self, bytes8 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes8 oldValue = extract_20_8(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(192, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_12(bytes20 self, uint8 offset) internal pure returns (bytes12 result) {\n        if (offset > 8) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\n        }\n    }\n\n    function replace_20_12(bytes20 self, bytes12 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes12 oldValue = extract_20_12(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(160, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_20_16(bytes20 self, uint8 offset) internal pure returns (bytes16 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\n        }\n    }\n\n    function replace_20_16(bytes20 self, bytes16 value, uint8 offset) internal pure returns (bytes20 result) {\n        bytes16 oldValue = extract_20_16(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(128, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_1(bytes24 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 23) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_24_1(bytes24 self, bytes1 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes1 oldValue = extract_24_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_2(bytes24 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 22) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_24_2(bytes24 self, bytes2 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes2 oldValue = extract_24_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_4(bytes24 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 20) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_24_4(bytes24 self, bytes4 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes4 oldValue = extract_24_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_6(bytes24 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 18) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_24_6(bytes24 self, bytes6 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes6 oldValue = extract_24_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_8(bytes24 self, uint8 offset) internal pure returns (bytes8 result) {\n        if (offset > 16) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\n        }\n    }\n\n    function replace_24_8(bytes24 self, bytes8 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes8 oldValue = extract_24_8(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(192, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_12(bytes24 self, uint8 offset) internal pure returns (bytes12 result) {\n        if (offset > 12) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\n        }\n    }\n\n    function replace_24_12(bytes24 self, bytes12 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes12 oldValue = extract_24_12(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(160, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_16(bytes24 self, uint8 offset) internal pure returns (bytes16 result) {\n        if (offset > 8) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\n        }\n    }\n\n    function replace_24_16(bytes24 self, bytes16 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes16 oldValue = extract_24_16(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(128, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_24_20(bytes24 self, uint8 offset) internal pure returns (bytes20 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\n        }\n    }\n\n    function replace_24_20(bytes24 self, bytes20 value, uint8 offset) internal pure returns (bytes24 result) {\n        bytes20 oldValue = extract_24_20(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(96, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_1(bytes28 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 27) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_28_1(bytes28 self, bytes1 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes1 oldValue = extract_28_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_2(bytes28 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 26) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_28_2(bytes28 self, bytes2 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes2 oldValue = extract_28_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_4(bytes28 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 24) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_28_4(bytes28 self, bytes4 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes4 oldValue = extract_28_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_6(bytes28 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 22) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_28_6(bytes28 self, bytes6 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes6 oldValue = extract_28_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_8(bytes28 self, uint8 offset) internal pure returns (bytes8 result) {\n        if (offset > 20) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\n        }\n    }\n\n    function replace_28_8(bytes28 self, bytes8 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes8 oldValue = extract_28_8(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(192, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_12(bytes28 self, uint8 offset) internal pure returns (bytes12 result) {\n        if (offset > 16) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\n        }\n    }\n\n    function replace_28_12(bytes28 self, bytes12 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes12 oldValue = extract_28_12(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(160, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_16(bytes28 self, uint8 offset) internal pure returns (bytes16 result) {\n        if (offset > 12) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\n        }\n    }\n\n    function replace_28_16(bytes28 self, bytes16 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes16 oldValue = extract_28_16(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(128, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_20(bytes28 self, uint8 offset) internal pure returns (bytes20 result) {\n        if (offset > 8) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\n        }\n    }\n\n    function replace_28_20(bytes28 self, bytes20 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes20 oldValue = extract_28_20(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(96, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_28_24(bytes28 self, uint8 offset) internal pure returns (bytes24 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(64, not(0)))\n        }\n    }\n\n    function replace_28_24(bytes28 self, bytes24 value, uint8 offset) internal pure returns (bytes28 result) {\n        bytes24 oldValue = extract_28_24(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(64, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_1(bytes32 self, uint8 offset) internal pure returns (bytes1 result) {\n        if (offset > 31) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\n        }\n    }\n\n    function replace_32_1(bytes32 self, bytes1 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes1 oldValue = extract_32_1(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(248, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_2(bytes32 self, uint8 offset) internal pure returns (bytes2 result) {\n        if (offset > 30) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\n        }\n    }\n\n    function replace_32_2(bytes32 self, bytes2 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes2 oldValue = extract_32_2(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(240, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_4(bytes32 self, uint8 offset) internal pure returns (bytes4 result) {\n        if (offset > 28) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\n        }\n    }\n\n    function replace_32_4(bytes32 self, bytes4 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes4 oldValue = extract_32_4(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(224, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_6(bytes32 self, uint8 offset) internal pure returns (bytes6 result) {\n        if (offset > 26) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\n        }\n    }\n\n    function replace_32_6(bytes32 self, bytes6 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes6 oldValue = extract_32_6(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(208, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_8(bytes32 self, uint8 offset) internal pure returns (bytes8 result) {\n        if (offset > 24) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\n        }\n    }\n\n    function replace_32_8(bytes32 self, bytes8 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes8 oldValue = extract_32_8(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(192, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_12(bytes32 self, uint8 offset) internal pure returns (bytes12 result) {\n        if (offset > 20) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\n        }\n    }\n\n    function replace_32_12(bytes32 self, bytes12 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes12 oldValue = extract_32_12(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(160, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_16(bytes32 self, uint8 offset) internal pure returns (bytes16 result) {\n        if (offset > 16) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\n        }\n    }\n\n    function replace_32_16(bytes32 self, bytes16 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes16 oldValue = extract_32_16(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(128, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_20(bytes32 self, uint8 offset) internal pure returns (bytes20 result) {\n        if (offset > 12) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\n        }\n    }\n\n    function replace_32_20(bytes32 self, bytes20 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes20 oldValue = extract_32_20(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(96, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_24(bytes32 self, uint8 offset) internal pure returns (bytes24 result) {\n        if (offset > 8) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(64, not(0)))\n        }\n    }\n\n    function replace_32_24(bytes32 self, bytes24 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes24 oldValue = extract_32_24(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(64, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n\n    function extract_32_28(bytes32 self, uint8 offset) internal pure returns (bytes28 result) {\n        if (offset > 4) revert OutOfRangeAccess();\n        assembly (\"memory-safe\") {\n            result := and(shl(mul(8, offset), self), shl(32, not(0)))\n        }\n    }\n\n    function replace_32_28(bytes32 self, bytes28 value, uint8 offset) internal pure returns (bytes32 result) {\n        bytes28 oldValue = extract_32_28(self, offset);\n        assembly (\"memory-safe\") {\n            value := and(value, shl(32, not(0)))\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Panic.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Pausable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/ReentrancyGuard.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/ReentrancyGuardTransient.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuardTransient.sol)\n\npragma solidity ^0.8.24;\n\nimport {TransientSlot} from \"./TransientSlot.sol\";\n\n/**\n * @dev Variant of {ReentrancyGuard} that uses transient storage.\n *\n * NOTE: This variant only works on networks where EIP-1153 is available.\n *\n * _Available since v5.1._\n */\nabstract contract ReentrancyGuardTransient {\n    using TransientSlot for *;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant REENTRANCY_GUARD_STORAGE =\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }\n\n    function _nonReentrantAfter() private {\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/ShortStrings.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        assembly (\"memory-safe\") {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/SlotDerivation.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/SlotDerivation.sol)\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\n * the solidity language / compiler.\n *\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\n *\n * Example usage:\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using StorageSlot for bytes32;\n *     using SlotDerivation for bytes32;\n *\n *     // Declare a namespace\n *     string private constant _NAMESPACE = \"<namespace>\" // eg. OpenZeppelin.Slot\n *\n *     function setValueInNamespace(uint256 key, address newValue) internal {\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\n *     }\n *\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {StorageSlot}.\n *\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\n * upgrade safety will ignore the slots accessed through this library.\n *\n * _Available since v5.1._\n */\nlibrary SlotDerivation {\n    /**\n     * @dev Derive an ERC-7201 slot from a string (namespace).\n     */\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\n            slot := and(keccak256(0x00, 0x20), not(0xff))\n        }\n    }\n\n    /**\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\n     */\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\n        unchecked {\n            return bytes32(uint256(slot) + pos);\n        }\n    }\n\n    /**\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\n     */\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, slot)\n            result := keccak256(0x00, 0x20)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, and(key, shr(96, not(0))))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, iszero(iszero(key)))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/StorageSlot.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/Strings.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/TransientSlot.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/TransientSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/TransientSlot.js.\n\npragma solidity ^0.8.24;\n\n/**\n * @dev Library for reading and writing value-types to specific transient storage slots.\n *\n * Transient slots are often used to store temporary values that are removed after the current transaction.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n *  * Example reading and writing values using transient storage:\n * ```solidity\n * contract Lock {\n *     using TransientSlot for *;\n *\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _LOCK_SLOT = 0xf4678858b2b588224636b8522b729e7722d32fc491da849ed75b3fdf3c84f542;\n *\n *     modifier locked() {\n *         require(!_LOCK_SLOT.asBoolean().tload());\n *\n *         _LOCK_SLOT.asBoolean().tstore(true);\n *         _;\n *         _LOCK_SLOT.asBoolean().tstore(false);\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary TransientSlot {\n    /**\n     * @dev UDVT that represent a slot holding a address.\n     */\n    type AddressSlot is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a AddressSlot.\n     */\n    function asAddress(bytes32 slot) internal pure returns (AddressSlot) {\n        return AddressSlot.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a bool.\n     */\n    type BooleanSlot is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a BooleanSlot.\n     */\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlot) {\n        return BooleanSlot.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a bytes32.\n     */\n    type Bytes32Slot is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Bytes32Slot.\n     */\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32Slot) {\n        return Bytes32Slot.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a uint256.\n     */\n    type Uint256Slot is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Uint256Slot.\n     */\n    function asUint256(bytes32 slot) internal pure returns (Uint256Slot) {\n        return Uint256Slot.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a int256.\n     */\n    type Int256Slot is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Int256Slot.\n     */\n    function asInt256(bytes32 slot) internal pure returns (Int256Slot) {\n        return Int256Slot.wrap(slot);\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(AddressSlot slot) internal view returns (address value) {\n        assembly (\"memory-safe\") {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(AddressSlot slot, address value) internal {\n        assembly (\"memory-safe\") {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(BooleanSlot slot) internal view returns (bool value) {\n        assembly (\"memory-safe\") {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(BooleanSlot slot, bool value) internal {\n        assembly (\"memory-safe\") {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Bytes32Slot slot) internal view returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Bytes32Slot slot, bytes32 value) internal {\n        assembly (\"memory-safe\") {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Uint256Slot slot) internal view returns (uint256 value) {\n        assembly (\"memory-safe\") {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Uint256Slot slot, uint256 value) internal {\n        assembly (\"memory-safe\") {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Int256Slot slot) internal view returns (int256 value) {\n        assembly (\"memory-safe\") {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Int256Slot slot, int256 value) internal {\n        assembly (\"memory-safe\") {\n            tstore(slot, value)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/ECDSA.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/EIP712.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/Hashes.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/MerkleProof.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/MessageHashUtils.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/P256.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/P256.sol)\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {Errors} from \"../Errors.sol\";\n\n/**\n * @dev Implementation of secp256r1 verification and recovery functions.\n *\n * The secp256r1 curve (also known as P256) is a NIST standard curve with wide support in modern devices\n * and cryptographic standards. Some notable examples include Apple's Secure Enclave and Android's Keystore\n * as well as authentication protocols like FIDO2.\n *\n * Based on the original https://github.com/itsobvioustech/aa-passkeys-wallet/blob/d3d423f28a4d8dfcb203c7fa0c47f42592a7378e/src/Secp256r1.sol[implementation of itsobvioustech] (GNU General Public License v3.0).\n * Heavily inspired in https://github.com/maxrobot/elliptic-solidity/blob/c4bb1b6e8ae89534d8db3a6b3a6b52219100520f/contracts/Secp256r1.sol[maxrobot] and\n * https://github.com/tdrerup/elliptic-curve-solidity/blob/59a9c25957d4d190eff53b6610731d81a077a15e/contracts/curves/EllipticCurve.sol[tdrerup] implementations.\n *\n * _Available since v5.1._\n */\nlibrary P256 {\n    struct JPoint {\n        uint256 x;\n        uint256 y;\n        uint256 z;\n    }\n\n    /// @dev Generator (x component)\n    uint256 internal constant GX = 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\n    /// @dev Generator (y component)\n    uint256 internal constant GY = 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\n    /// @dev P (size of the field)\n    uint256 internal constant P = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\n    /// @dev N (order of G)\n    uint256 internal constant N = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\n    /// @dev A parameter of the weierstrass equation\n    uint256 internal constant A = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\n    /// @dev B parameter of the weierstrass equation\n    uint256 internal constant B = 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\n\n    /// @dev (P + 1) / 4. Useful to compute sqrt\n    uint256 private constant P1DIV4 = 0x3fffffffc0000000400000000000000000000000400000000000000000000000;\n\n    /// @dev N/2 for excluding higher order `s` values\n    uint256 private constant HALF_N = 0x7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8;\n\n    /**\n     * @dev Verifies a secp256r1 signature using the RIP-7212 precompile and falls back to the Solidity implementation\n     * if the precompile is not available. This version should work on all chains, but requires the deployment of more\n     * bytecode.\n     *\n     * @param h - hashed message\n     * @param r - signature half R\n     * @param s - signature half S\n     * @param qx - public key coordinate X\n     * @param qy - public key coordinate Y\n     *\n     * IMPORTANT: This function disallows signatures where the `s` value is above `N/2` to prevent malleability.\n     * To flip the `s` value, compute `s = N - s`.\n     */\n    function verify(bytes32 h, bytes32 r, bytes32 s, bytes32 qx, bytes32 qy) internal view returns (bool) {\n        (bool valid, bool supported) = _tryVerifyNative(h, r, s, qx, qy);\n        return supported ? valid : verifySolidity(h, r, s, qx, qy);\n    }\n\n    /**\n     * @dev Same as {verify}, but it will revert if the required precompile is not available.\n     *\n     * Make sure any logic (code or precompile) deployed at that address is the expected one,\n     * otherwise the returned value may be misinterpreted as a positive boolean.\n     */\n    function verifyNative(bytes32 h, bytes32 r, bytes32 s, bytes32 qx, bytes32 qy) internal view returns (bool) {\n        (bool valid, bool supported) = _tryVerifyNative(h, r, s, qx, qy);\n        if (supported) {\n            return valid;\n        } else {\n            revert Errors.MissingPrecompile(address(0x100));\n        }\n    }\n\n    /**\n     * @dev Same as {verify}, but it will return false if the required precompile is not available.\n     */\n    function _tryVerifyNative(\n        bytes32 h,\n        bytes32 r,\n        bytes32 s,\n        bytes32 qx,\n        bytes32 qy\n    ) private view returns (bool valid, bool supported) {\n        if (!_isProperSignature(r, s) || !isValidPublicKey(qx, qy)) {\n            return (false, true); // signature is invalid, and its not because the precompile is missing\n        }\n\n        (bool success, bytes memory returndata) = address(0x100).staticcall(abi.encode(h, r, s, qx, qy));\n        return (success && returndata.length == 0x20) ? (abi.decode(returndata, (bool)), true) : (false, false);\n    }\n\n    /**\n     * @dev Same as {verify}, but only the Solidity implementation is used.\n     */\n    function verifySolidity(bytes32 h, bytes32 r, bytes32 s, bytes32 qx, bytes32 qy) internal view returns (bool) {\n        if (!_isProperSignature(r, s) || !isValidPublicKey(qx, qy)) {\n            return false;\n        }\n\n        JPoint[16] memory points = _preComputeJacobianPoints(uint256(qx), uint256(qy));\n        uint256 w = Math.invModPrime(uint256(s), N);\n        uint256 u1 = mulmod(uint256(h), w, N);\n        uint256 u2 = mulmod(uint256(r), w, N);\n        (uint256 x, ) = _jMultShamir(points, u1, u2);\n        return ((x % N) == uint256(r));\n    }\n\n    /**\n     * @dev Public key recovery\n     *\n     * @param h - hashed message\n     * @param v - signature recovery param\n     * @param r - signature half R\n     * @param s - signature half S\n     *\n     * IMPORTANT: This function disallows signatures where the `s` value is above `N/2` to prevent malleability.\n     * To flip the `s` value, compute `s = N - s` and `v = 1 - v` if (`v = 0 | 1`).\n     */\n    function recovery(bytes32 h, uint8 v, bytes32 r, bytes32 s) internal view returns (bytes32 x, bytes32 y) {\n        if (!_isProperSignature(r, s) || v > 1) {\n            return (0, 0);\n        }\n\n        uint256 p = P; // cache P on the stack\n        uint256 rx = uint256(r);\n        uint256 ry2 = addmod(mulmod(addmod(mulmod(rx, rx, p), A, p), rx, p), B, p); // weierstrass equation y² = x³ + a.x + b\n        uint256 ry = Math.modExp(ry2, P1DIV4, p); // This formula for sqrt work because P ≡ 3 (mod 4)\n        if (mulmod(ry, ry, p) != ry2) return (0, 0); // Sanity check\n        if (ry % 2 != v) ry = p - ry;\n\n        JPoint[16] memory points = _preComputeJacobianPoints(rx, ry);\n        uint256 w = Math.invModPrime(uint256(r), N);\n        uint256 u1 = mulmod(N - (uint256(h) % N), w, N);\n        uint256 u2 = mulmod(uint256(s), w, N);\n        (uint256 xU, uint256 yU) = _jMultShamir(points, u1, u2);\n        return (bytes32(xU), bytes32(yU));\n    }\n\n    /**\n     * @dev Checks if (x, y) are valid coordinates of a point on the curve.\n     * In particular this function checks that x < P and y < P.\n     */\n    function isValidPublicKey(bytes32 x, bytes32 y) internal pure returns (bool result) {\n        assembly (\"memory-safe\") {\n            let p := P\n            let lhs := mulmod(y, y, p) // y^2\n            let rhs := addmod(mulmod(addmod(mulmod(x, x, p), A, p), x, p), B, p) // ((x^2 + a) * x) + b = x^3 + ax + b\n            result := and(and(lt(x, p), lt(y, p)), eq(lhs, rhs)) // Should conform with the Weierstrass equation\n        }\n    }\n\n    /**\n     * @dev Checks if (r, s) is a proper signature.\n     * In particular, this checks that `s` is in the \"lower-range\", making the signature non-malleable.\n     */\n    function _isProperSignature(bytes32 r, bytes32 s) private pure returns (bool) {\n        return uint256(r) > 0 && uint256(r) < N && uint256(s) > 0 && uint256(s) <= HALF_N;\n    }\n\n    /**\n     * @dev Reduce from jacobian to affine coordinates\n     * @param jx - jacobian coordinate x\n     * @param jy - jacobian coordinate y\n     * @param jz - jacobian coordinate z\n     * @return ax - affine coordinate x\n     * @return ay - affine coordinate y\n     */\n    function _affineFromJacobian(uint256 jx, uint256 jy, uint256 jz) private view returns (uint256 ax, uint256 ay) {\n        if (jz == 0) return (0, 0);\n        uint256 p = P; // cache P on the stack\n        uint256 zinv = Math.invModPrime(jz, p);\n        assembly (\"memory-safe\") {\n            let zzinv := mulmod(zinv, zinv, p)\n            ax := mulmod(jx, zzinv, p)\n            ay := mulmod(jy, mulmod(zzinv, zinv, p), p)\n        }\n    }\n\n    /**\n     * @dev Point addition on the jacobian coordinates\n     * Reference: https://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-add-1998-cmo-2\n     *\n     * Note that:\n     *\n     * - `addition-add-1998-cmo-2` doesn't support identical input points. This version is modified to use\n     * the `h` and `r` values computed by `addition-add-1998-cmo-2` to detect identical inputs, and fallback to\n     * `doubling-dbl-1998-cmo-2` if needed.\n     * - if one of the points is at infinity (i.e. `z=0`), the result is undefined.\n     */\n    function _jAdd(\n        JPoint memory p1,\n        uint256 x2,\n        uint256 y2,\n        uint256 z2\n    ) private pure returns (uint256 rx, uint256 ry, uint256 rz) {\n        assembly (\"memory-safe\") {\n            let p := P\n            let z1 := mload(add(p1, 0x40))\n            let zz1 := mulmod(z1, z1, p) // zz1 = z1²\n            let s1 := mulmod(mload(add(p1, 0x20)), mulmod(mulmod(z2, z2, p), z2, p), p) // s1 = y1*z2³\n            let r := addmod(mulmod(y2, mulmod(zz1, z1, p), p), sub(p, s1), p) // r = s2-s1 = y2*z1³-s1 = y2*z1³-y1*z2³\n            let u1 := mulmod(mload(p1), mulmod(z2, z2, p), p) // u1 = x1*z2²\n            let h := addmod(mulmod(x2, zz1, p), sub(p, u1), p) // h = u2-u1 = x2*z1²-u1 = x2*z1²-x1*z2²\n\n            // detect edge cases where inputs are identical\n            switch and(iszero(r), iszero(h))\n            // case 0: points are different\n            case 0 {\n                let hh := mulmod(h, h, p) // h²\n\n                // x' = r²-h³-2*u1*h²\n                rx := addmod(\n                    addmod(mulmod(r, r, p), sub(p, mulmod(h, hh, p)), p),\n                    sub(p, mulmod(2, mulmod(u1, hh, p), p)),\n                    p\n                )\n                // y' = r*(u1*h²-x')-s1*h³\n                ry := addmod(\n                    mulmod(r, addmod(mulmod(u1, hh, p), sub(p, rx), p), p),\n                    sub(p, mulmod(s1, mulmod(h, hh, p), p)),\n                    p\n                )\n                // z' = h*z1*z2\n                rz := mulmod(h, mulmod(z1, z2, p), p)\n            }\n            // case 1: points are equal\n            case 1 {\n                let x := x2\n                let y := y2\n                let z := z2\n                let yy := mulmod(y, y, p)\n                let zz := mulmod(z, z, p)\n                let m := addmod(mulmod(3, mulmod(x, x, p), p), mulmod(A, mulmod(zz, zz, p), p), p) // m = 3*x²+a*z⁴\n                let s := mulmod(4, mulmod(x, yy, p), p) // s = 4*x*y²\n\n                // x' = t = m²-2*s\n                rx := addmod(mulmod(m, m, p), sub(p, mulmod(2, s, p)), p)\n\n                // y' = m*(s-t)-8*y⁴ = m*(s-x')-8*y⁴\n                // cut the computation to avoid stack too deep\n                let rytmp1 := sub(p, mulmod(8, mulmod(yy, yy, p), p)) // -8*y⁴\n                let rytmp2 := addmod(s, sub(p, rx), p) // s-x'\n                ry := addmod(mulmod(m, rytmp2, p), rytmp1, p) // m*(s-x')-8*y⁴\n\n                // z' = 2*y*z\n                rz := mulmod(2, mulmod(y, z, p), p)\n            }\n        }\n    }\n\n    /**\n     * @dev Point doubling on the jacobian coordinates\n     * Reference: https://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2\n     */\n    function _jDouble(uint256 x, uint256 y, uint256 z) private pure returns (uint256 rx, uint256 ry, uint256 rz) {\n        assembly (\"memory-safe\") {\n            let p := P\n            let yy := mulmod(y, y, p)\n            let zz := mulmod(z, z, p)\n            let m := addmod(mulmod(3, mulmod(x, x, p), p), mulmod(A, mulmod(zz, zz, p), p), p) // m = 3*x²+a*z⁴\n            let s := mulmod(4, mulmod(x, yy, p), p) // s = 4*x*y²\n\n            // x' = t = m²-2*s\n            rx := addmod(mulmod(m, m, p), sub(p, mulmod(2, s, p)), p)\n            // y' = m*(s-t)-8*y⁴ = m*(s-x')-8*y⁴\n            ry := addmod(mulmod(m, addmod(s, sub(p, rx), p), p), sub(p, mulmod(8, mulmod(yy, yy, p), p)), p)\n            // z' = 2*y*z\n            rz := mulmod(2, mulmod(y, z, p), p)\n        }\n    }\n\n    /**\n     * @dev Compute G·u1 + P·u2 using the precomputed points for G and P (see {_preComputeJacobianPoints}).\n     *\n     * Uses Strauss Shamir trick for EC multiplication\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\n     *\n     * We optimize this for 2 bits at a time rather than a single bit. The individual points for a single pass are\n     * precomputed. Overall this reduces the number of additions while keeping the same number of\n     * doublings\n     */\n    function _jMultShamir(\n        JPoint[16] memory points,\n        uint256 u1,\n        uint256 u2\n    ) private view returns (uint256 rx, uint256 ry) {\n        uint256 x = 0;\n        uint256 y = 0;\n        uint256 z = 0;\n        unchecked {\n            for (uint256 i = 0; i < 128; ++i) {\n                if (z > 0) {\n                    (x, y, z) = _jDouble(x, y, z);\n                    (x, y, z) = _jDouble(x, y, z);\n                }\n                // Read 2 bits of u1, and 2 bits of u2. Combining the two gives the lookup index in the table.\n                uint256 pos = ((u1 >> 252) & 0xc) | ((u2 >> 254) & 0x3);\n                // Points that have z = 0 are points at infinity. They are the additive 0 of the group\n                // - if the lookup point is a 0, we can skip it\n                // - otherwise:\n                //   - if the current point (x, y, z) is 0, we use the lookup point as our new value (0+P=P)\n                //   - if the current point (x, y, z) is not 0, both points are valid and we can use `_jAdd`\n                if (points[pos].z != 0) {\n                    if (z == 0) {\n                        (x, y, z) = (points[pos].x, points[pos].y, points[pos].z);\n                    } else {\n                        (x, y, z) = _jAdd(points[pos], x, y, z);\n                    }\n                }\n                u1 <<= 2;\n                u2 <<= 2;\n            }\n        }\n        return _affineFromJacobian(x, y, z);\n    }\n\n    /**\n     * @dev Precompute a matrice of useful jacobian points associated with a given P. This can be seen as a 4x4 matrix\n     * that contains combination of P and G (generator) up to 3 times each. See the table below:\n     *\n     * ┌────┬─────────────────────┐\n     * │  i │  0    1     2     3 │\n     * ├────┼─────────────────────┤\n     * │  0 │  0    p    2p    3p │\n     * │  4 │  g  g+p  g+2p  g+3p │\n     * │  8 │ 2g 2g+p 2g+2p 2g+3p │\n     * │ 12 │ 3g 3g+p 3g+2p 3g+3p │\n     * └────┴─────────────────────┘\n     *\n     * Note that `_jAdd` (and thus `_jAddPoint`) does not handle the case where one of the inputs is a point at\n     * infinity (z = 0). However, we know that since `N ≡ 1 mod 2` and `N ≡ 1 mod 3`, there is no point P such that\n     * 2P = 0 or 3P = 0. This guarantees that g, 2g, 3g, p, 2p, 3p are all non-zero, and that all `_jAddPoint` calls\n     * have valid inputs.\n     */\n    function _preComputeJacobianPoints(uint256 px, uint256 py) private pure returns (JPoint[16] memory points) {\n        points[0x00] = JPoint(0, 0, 0); // 0,0\n        points[0x01] = JPoint(px, py, 1); // 1,0 (p)\n        points[0x04] = JPoint(GX, GY, 1); // 0,1 (g)\n        points[0x02] = _jDoublePoint(points[0x01]); // 2,0 (2p)\n        points[0x08] = _jDoublePoint(points[0x04]); // 0,2 (2g)\n        points[0x03] = _jAddPoint(points[0x01], points[0x02]); // 3,0 (p+2p = 3p)\n        points[0x05] = _jAddPoint(points[0x01], points[0x04]); // 1,1 (p+g)\n        points[0x06] = _jAddPoint(points[0x02], points[0x04]); // 2,1 (2p+g)\n        points[0x07] = _jAddPoint(points[0x03], points[0x04]); // 3,1 (3p+g)\n        points[0x09] = _jAddPoint(points[0x01], points[0x08]); // 1,2 (p+2g)\n        points[0x0a] = _jAddPoint(points[0x02], points[0x08]); // 2,2 (2p+2g)\n        points[0x0b] = _jAddPoint(points[0x03], points[0x08]); // 3,2 (3p+2g)\n        points[0x0c] = _jAddPoint(points[0x04], points[0x08]); // 0,3 (g+2g = 3g)\n        points[0x0d] = _jAddPoint(points[0x01], points[0x0c]); // 1,3 (p+3g)\n        points[0x0e] = _jAddPoint(points[0x02], points[0x0c]); // 2,3 (2p+3g)\n        points[0x0f] = _jAddPoint(points[0x03], points[0x0c]); // 3,3 (3p+3g)\n    }\n\n    function _jAddPoint(JPoint memory p1, JPoint memory p2) private pure returns (JPoint memory) {\n        (uint256 x, uint256 y, uint256 z) = _jAdd(p1, p2.x, p2.y, p2.z);\n        return JPoint(x, y, z);\n    }\n\n    function _jDoublePoint(JPoint memory p) private pure returns (JPoint memory) {\n        (uint256 x, uint256 y, uint256 z) = _jDouble(p.x, p.y, p.z);\n        return JPoint(x, y, z);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/RSA.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/RSA.sol)\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev RSA PKCS#1 v1.5 signature verification implementation according to https://datatracker.ietf.org/doc/html/rfc8017[RFC8017].\n *\n * This library supports PKCS#1 v1.5 padding to avoid malleability via chosen plaintext attacks in practical implementations.\n * The padding follows the EMSA-PKCS1-v1_5-ENCODE encoding definition as per section 9.2 of the RFC. This padding makes\n * RSA semantically secure for signing messages.\n *\n * Inspired by https://github.com/adria0/SolRsaVerify/blob/79c6182cabb9102ea69d4a2e996816091d5f1cd1[Adrià Massanet's work] (GNU General Public License v3.0).\n *\n * _Available since v5.1._\n */\nlibrary RSA {\n    /**\n     * @dev Same as {pkcs1Sha256} but using SHA256 to calculate the digest of `data`.\n     */\n    function pkcs1Sha256(\n        bytes memory data,\n        bytes memory s,\n        bytes memory e,\n        bytes memory n\n    ) internal view returns (bool) {\n        return pkcs1Sha256(sha256(data), s, e, n);\n    }\n\n    /**\n     * @dev Verifies a PKCSv1.5 signature given a digest according to the verification\n     * method described in https://datatracker.ietf.org/doc/html/rfc8017#section-8.2.2[section 8.2.2 of RFC8017] with\n     * support for explicit or implicit NULL parameters in the DigestInfo (no other optional parameters are supported).\n     *\n     * IMPORTANT: For security reason, this function requires the signature and modulus to have a length of at least\n     * 2048 bits. If you use a smaller key, consider replacing it with a larger, more secure, one.\n     *\n     * WARNING: This verification algorithm doesn't prevent replayability. If called multiple times with the same\n     * digest, public key and (valid signature), it will return true every time. Consider including an onchain nonce\n     * or unique identifier in the message to prevent replay attacks.\n     *\n     * WARNING: This verification algorithm supports any exponent. NIST recommends using `65537` (or higher).\n     * That is the default value many libraries use, such as OpenSSL. Developers may choose to reject public keys\n     * using a low exponent out of security concerns.\n     *\n     * @param digest the digest to verify\n     * @param s is a buffer containing the signature\n     * @param e is the exponent of the public key\n     * @param n is the modulus of the public key\n     */\n    function pkcs1Sha256(bytes32 digest, bytes memory s, bytes memory e, bytes memory n) internal view returns (bool) {\n        unchecked {\n            // cache and check length\n            uint256 length = n.length;\n            if (\n                length < 0x100 || // Enforce 2048 bits minimum\n                length != s.length // signature must have the same length as the finite field\n            ) {\n                return false;\n            }\n\n            // Verify that s < n to ensure there's only one valid signature for a given message\n            for (uint256 i = 0; i < length; i += 0x20) {\n                uint256 p = Math.min(i, length - 0x20);\n                bytes32 sp = _unsafeReadBytes32(s, p);\n                bytes32 np = _unsafeReadBytes32(n, p);\n                if (sp < np) {\n                    // s < n in the upper bits (everything before is equal) → s < n globally: ok\n                    break;\n                } else if (sp > np || p == length - 0x20) {\n                    // s > n in the upper bits (everything before is equal) → s > n globally: fail\n                    // or\n                    // s = n and we are looking at the lower bits → s = n globally: fail\n                    return false;\n                }\n            }\n\n            // RSAVP1 https://datatracker.ietf.org/doc/html/rfc8017#section-5.2.2\n            // The previous check guarantees that n > 0. Therefore modExp cannot revert.\n            bytes memory buffer = Math.modExp(s, e, n);\n\n            // Check that buffer is well encoded:\n            // buffer ::= 0x00 | 0x01 | PS | 0x00 | DigestInfo\n            //\n            // With\n            // - PS is padding filled with 0xFF\n            // - DigestInfo ::= SEQUENCE {\n            //    digestAlgorithm AlgorithmIdentifier,\n            //      [optional algorithm parameters] -- not currently supported\n            //    digest OCTET STRING\n            // }\n\n            // Get AlgorithmIdentifier from the DigestInfo, and set the config accordingly\n            // - params: includes 00 + first part of DigestInfo\n            // - mask: filter to check the params\n            // - offset: length of the suffix (including digest)\n            bytes32 params; // 0x00 | DigestInfo\n            bytes32 mask;\n            uint256 offset;\n\n            // Digest is expected at the end of the buffer. Therefore if NULL param is present,\n            // it should be at 32 (digest) + 2 bytes from the end. To those 34 bytes, we add the\n            // OID (9 bytes) and its length (2 bytes) to get the position of the DigestInfo sequence,\n            // which is expected to have a length of 0x31 when the NULL param is present or 0x2f if not.\n            if (bytes1(_unsafeReadBytes32(buffer, length - 0x32)) == 0x31) {\n                offset = 0x34;\n                // 00 (1 byte) | SEQUENCE length (0x31) = 3031 (2 bytes) | SEQUENCE length (0x0d) = 300d (2 bytes) | OBJECT_IDENTIFIER length (0x09) = 0609 (2 bytes)\n                // SHA256 OID = 608648016503040201 (9 bytes) | NULL = 0500 (2 bytes) (explicit) | OCTET_STRING length (0x20) = 0420 (2 bytes)\n                params = 0x003031300d060960864801650304020105000420000000000000000000000000;\n                mask = 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000; // (20 bytes)\n            } else if (bytes1(_unsafeReadBytes32(buffer, length - 0x30)) == 0x2F) {\n                offset = 0x32;\n                // 00 (1 byte) | SEQUENCE length (0x2f) = 302f (2 bytes) | SEQUENCE length (0x0b) = 300b (2 bytes) | OBJECT_IDENTIFIER length (0x09) = 0609 (2 bytes)\n                // SHA256 OID = 608648016503040201 (9 bytes) | NULL = <implicit> | OCTET_STRING length (0x20) = 0420 (2 bytes)\n                params = 0x00302f300b060960864801650304020104200000000000000000000000000000;\n                mask = 0xffffffffffffffffffffffffffffffffffff0000000000000000000000000000; // (18 bytes)\n            } else {\n                // unknown\n                return false;\n            }\n\n            // Length is at least 0x100 and offset is at most 0x34, so this is safe. There is always some padding.\n            uint256 paddingEnd = length - offset;\n\n            // The padding has variable (arbitrary) length, so we check it byte per byte in a loop.\n            // This is required to ensure non-malleability. Not checking would allow an attacker to\n            // use the padding to manipulate the message in order to create a valid signature out of\n            // multiple valid signatures.\n            for (uint256 i = 2; i < paddingEnd; ++i) {\n                if (bytes1(_unsafeReadBytes32(buffer, i)) != 0xFF) {\n                    return false;\n                }\n            }\n\n            // All the other parameters are small enough to fit in a bytes32, so we can check them directly.\n            return\n                bytes2(0x0001) == bytes2(_unsafeReadBytes32(buffer, 0x00)) && // 00 | 01\n                // PS was checked in the loop\n                params == _unsafeReadBytes32(buffer, paddingEnd) & mask && // DigestInfo\n                // Optional parameters are not checked\n                digest == _unsafeReadBytes32(buffer, length - 0x20); // Digest\n        }\n    }\n\n    /// @dev Reads a bytes32 from a bytes array without bounds checking.\n    function _unsafeReadBytes32(bytes memory array, uint256 offset) private pure returns (bytes32 result) {\n        // Memory safeness is guaranteed as long as the provided `array` is a Solidity-allocated bytes array\n        // and `offset` is within bounds. This is the case for all calls to this private function from {pkcs1Sha256}.\n        assembly (\"memory-safe\") {\n            result := mload(add(add(array, 0x20), offset))\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/cryptography/SignatureChecker.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.20;\n\nimport {ECDSA} from \"./ECDSA.sol\";\nimport {IERC1271} from \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like\n * Argent and Safe Wallet (previously Gnosis Safe).\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        if (signer.code.length == 0) {\n            (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(hash, signature);\n            return err == ECDSA.RecoverError.NoError && recovered == signer;\n        } else {\n            return isValidERC1271SignatureNow(signer, hash, signature);\n        }\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC-1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/introspection/ERC165.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/introspection/ERC165Checker.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the ERC-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC-165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC-165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC-165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC-165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC-165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC-165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/introspection/IERC165.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/math/Math.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 exp;\n        unchecked {\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\n            value >>= exp;\n            result += exp;\n\n            result += SafeCast.toUint(value > 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 isGt;\n        unchecked {\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= isGt * 128;\n            result += isGt * 16;\n\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= isGt * 64;\n            result += isGt * 8;\n\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= isGt * 32;\n            result += isGt * 4;\n\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= isGt * 16;\n            result += isGt * 2;\n\n            result += SafeCast.toUint(value > (1 << 8) - 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/math/SafeCast.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/math/SignedMath.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/BitMaps.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n *\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\n * unlike the regular `bool` which would consume an entire slot for a single value.\n *\n * This results in gas savings in two ways:\n *\n * - Setting a zero value to non-zero only once every 256 times\n * - Accessing the same warm slot for every 256 _sequential_ indices\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 bucket => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/Checkpoints.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/Checkpoints.sol)\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n */\nlibrary Checkpoints {\n    /**\n     * @dev A value was attempted to be inserted on a past checkpoint.\n     */\n    error CheckpointUnorderedInsertion();\n\n    struct Trace224 {\n        Checkpoint224[] _checkpoints;\n    }\n\n    struct Checkpoint224 {\n        uint32 _key;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\n     * library.\n     */\n    function push(\n        Trace224 storage self,\n        uint32 key,\n        uint224 value\n    ) internal returns (uint224 oldValue, uint224 newValue) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace224 storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint224 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace224 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint224 value\n    ) private returns (uint224 oldValue, uint224 newValue) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            Checkpoint224 storage last = _unsafeAccess(self, pos - 1);\n            uint32 lastKey = last._key;\n            uint224 lastValue = last._value;\n\n            // Checkpoint keys must be non-decreasing.\n            if (lastKey > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (lastKey == key) {\n                last._value = value;\n            } else {\n                self.push(Checkpoint224({_key: key, _value: value}));\n            }\n            return (lastValue, value);\n        } else {\n            self.push(Checkpoint224({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint224[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint224 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace208 {\n        Checkpoint208[] _checkpoints;\n    }\n\n    struct Checkpoint208 {\n        uint48 _key;\n        uint208 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\n     * library.\n     */\n    function push(\n        Trace208 storage self,\n        uint48 key,\n        uint208 value\n    ) internal returns (uint208 oldValue, uint208 newValue) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace208 storage self) internal view returns (uint208) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint208 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace208 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint208 value\n    ) private returns (uint208 oldValue, uint208 newValue) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            Checkpoint208 storage last = _unsafeAccess(self, pos - 1);\n            uint48 lastKey = last._key;\n            uint208 lastValue = last._value;\n\n            // Checkpoint keys must be non-decreasing.\n            if (lastKey > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (lastKey == key) {\n                last._value = value;\n            } else {\n                self.push(Checkpoint208({_key: key, _value: value}));\n            }\n            return (lastValue, value);\n        } else {\n            self.push(Checkpoint208({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint208[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint208 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace160 {\n        Checkpoint160[] _checkpoints;\n    }\n\n    struct Checkpoint160 {\n        uint96 _key;\n        uint160 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\n     * library.\n     */\n    function push(\n        Trace160 storage self,\n        uint96 key,\n        uint160 value\n    ) internal returns (uint160 oldValue, uint160 newValue) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace160 storage self) internal view returns (uint160) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint160 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace160 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint160 value\n    ) private returns (uint160 oldValue, uint160 newValue) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            Checkpoint160 storage last = _unsafeAccess(self, pos - 1);\n            uint96 lastKey = last._key;\n            uint160 lastValue = last._value;\n\n            // Checkpoint keys must be non-decreasing.\n            if (lastKey > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (lastKey == key) {\n                last._value = value;\n            } else {\n                self.push(Checkpoint160({_key: key, _value: value}));\n            }\n            return (lastValue, value);\n        } else {\n            self.push(Checkpoint160({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint160[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint160 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/CircularBuffer.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/CircularBuffer.sol)\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {Arrays} from \"../Arrays.sol\";\nimport {Panic} from \"../Panic.sol\";\n\n/**\n * @dev A fixed-size buffer for keeping `bytes32` items in storage.\n *\n * This data structure allows for pushing elements to it, and when its length exceeds the specified fixed size,\n * new items take the place of the oldest element in the buffer, keeping at most `N` elements in the\n * structure.\n *\n * Elements can't be removed but the data structure can be cleared. See {clear}.\n *\n * Complexity:\n * - insertion ({push}): O(1)\n * - lookup ({last}): O(1)\n * - inclusion ({includes}): O(N) (worst case)\n * - reset ({clear}): O(1)\n *\n * * The struct is called `Bytes32CircularBuffer`. Other types can be cast to and from `bytes32`. This data structure\n * can only be used in storage, and not in memory.\n *\n * Example usage:\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using CircularBuffer for CircularBuffer.Bytes32CircularBuffer;\n *\n *     // Declare a buffer storage variable\n *     CircularBuffer.Bytes32CircularBuffer private myBuffer;\n * }\n * ```\n *\n * _Available since v5.1._\n */\nlibrary CircularBuffer {\n    /**\n     * @dev Error emitted when trying to setup a buffer with a size of 0.\n     */\n    error InvalidBufferSize();\n\n    /**\n     * @dev Counts the number of items that have been pushed to the buffer. The residuo modulo _data.length indicates\n     * where the next value should be stored.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * In a full buffer:\n     * - The most recently pushed item (last) is at data[(index - 1) % data.length]\n     * - The oldest item (first) is at data[index % data.length]\n     */\n    struct Bytes32CircularBuffer {\n        uint256 _count;\n        bytes32[] _data;\n    }\n\n    /**\n     * @dev Initialize a new CircularBuffer of given size.\n     *\n     * If the CircularBuffer was already setup and used, calling that function again will reset it to a blank state.\n     *\n     * NOTE: The size of the buffer will affect the execution of {includes} function, as it has a complexity of O(N).\n     * Consider a large buffer size may render the function unusable.\n     */\n    function setup(Bytes32CircularBuffer storage self, uint256 size) internal {\n        if (size == 0) revert InvalidBufferSize();\n        clear(self);\n        Arrays.unsafeSetLength(self._data, size);\n    }\n\n    /**\n     * @dev Clear all data in the buffer without resetting memory, keeping the existing size.\n     */\n    function clear(Bytes32CircularBuffer storage self) internal {\n        self._count = 0;\n    }\n\n    /**\n     * @dev Push a new value to the buffer. If the buffer is already full, the new value replaces the oldest value in\n     * the buffer.\n     */\n    function push(Bytes32CircularBuffer storage self, bytes32 value) internal {\n        uint256 index = self._count++;\n        uint256 modulus = self._data.length;\n        Arrays.unsafeAccess(self._data, index % modulus).value = value;\n    }\n\n    /**\n     * @dev Number of values currently in the buffer. This value is 0 for an empty buffer, and cannot exceed the size of\n     * the buffer.\n     */\n    function count(Bytes32CircularBuffer storage self) internal view returns (uint256) {\n        return Math.min(self._count, self._data.length);\n    }\n\n    /**\n     * @dev Length of the buffer. This is the maximum number of elements kept in the buffer.\n     */\n    function length(Bytes32CircularBuffer storage self) internal view returns (uint256) {\n        return self._data.length;\n    }\n\n    /**\n     * @dev Getter for the i-th value in the buffer, from the end.\n     *\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if trying to access an element that was not pushed, or that was\n     * dropped to make room for newer elements.\n     */\n    function last(Bytes32CircularBuffer storage self, uint256 i) internal view returns (bytes32) {\n        uint256 index = self._count;\n        uint256 modulus = self._data.length;\n        uint256 total = Math.min(index, modulus); // count(self)\n        if (i >= total) {\n            Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\n        }\n        return Arrays.unsafeAccess(self._data, (index - i - 1) % modulus).value;\n    }\n\n    /**\n     * @dev Check if a given value is in the buffer.\n     */\n    function includes(Bytes32CircularBuffer storage self, bytes32 value) internal view returns (bool) {\n        uint256 index = self._count;\n        uint256 modulus = self._data.length;\n        uint256 total = Math.min(index, modulus); // count(self)\n        for (uint256 i = 0; i < total; ++i) {\n            if (Arrays.unsafeAccess(self._data, (index - i - 1) % modulus).value == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/DoubleEndedQueue.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/DoubleEndedQueue.sol)\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\n\n/**\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\n * the existing queue contents are left in storage.\n *\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\n * used in storage, and not in memory.\n * ```solidity\n * DoubleEndedQueue.Bytes32Deque queue;\n * ```\n */\nlibrary DoubleEndedQueue {\n    /**\n     * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\n     */\n    struct Bytes32Deque {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint128 index => bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *\n     * Reverts with {Panic-RESOURCE_ERROR} if the queue is full.\n     */\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\n        unchecked {\n            uint128 backIndex = deque._end;\n            if (backIndex + 1 == deque._begin) Panic.panic(Panic.RESOURCE_ERROR);\n            deque._data[backIndex] = value;\n            deque._end = backIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Removes the item at the end of the queue and returns it.\n     *\n     * Reverts with {Panic-EMPTY_ARRAY_POP} if the queue is empty.\n     */\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        unchecked {\n            uint128 backIndex = deque._end;\n            if (backIndex == deque._begin) Panic.panic(Panic.EMPTY_ARRAY_POP);\n            --backIndex;\n            value = deque._data[backIndex];\n            delete deque._data[backIndex];\n            deque._end = backIndex;\n        }\n    }\n\n    /**\n     * @dev Inserts an item at the beginning of the queue.\n     *\n     * Reverts with {Panic-RESOURCE_ERROR} if the queue is full.\n     */\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\n        unchecked {\n            uint128 frontIndex = deque._begin - 1;\n            if (frontIndex == deque._end) Panic.panic(Panic.RESOURCE_ERROR);\n            deque._data[frontIndex] = value;\n            deque._begin = frontIndex;\n        }\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *\n     * Reverts with {Panic-EMPTY_ARRAY_POP} if the queue is empty.\n     */\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        unchecked {\n            uint128 frontIndex = deque._begin;\n            if (frontIndex == deque._end) Panic.panic(Panic.EMPTY_ARRAY_POP);\n            value = deque._data[frontIndex];\n            delete deque._data[frontIndex];\n            deque._begin = frontIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Returns the item at the beginning of the queue.\n     *\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if the queue is empty.\n     */\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\n        return deque._data[deque._begin];\n    }\n\n    /**\n     * @dev Returns the item at the end of the queue.\n     *\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if the queue is empty.\n     */\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\n        unchecked {\n            return deque._data[deque._end - 1];\n        }\n    }\n\n    /**\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\n     * `length(deque) - 1`.\n     *\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if the index is out of bounds.\n     */\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\n        if (index >= length(deque)) Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\n        // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\n        unchecked {\n            return deque._data[deque._begin + uint128(index)];\n        }\n    }\n\n    /**\n     * @dev Resets the queue back to being empty.\n     *\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\n     * out on potential gas refunds.\n     */\n    function clear(Bytes32Deque storage deque) internal {\n        deque._begin = 0;\n        deque._end = 0;\n    }\n\n    /**\n     * @dev Returns the number of items in the queue.\n     */\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\n        unchecked {\n            return uint256(deque._end - deque._begin);\n        }\n    }\n\n    /**\n     * @dev Returns true if the queue is empty.\n     */\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\n        return deque._end == deque._begin;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/EnumerableMap.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.20;\n\nimport {EnumerableSet} from \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n * - `uint256 -> bytes32` (`UintToBytes32Map`) since v5.1.0\n * - `address -> address` (`AddressToAddressMap`) since v5.1.0\n * - `address -> bytes32` (`AddressToBytes32Map`) since v5.1.0\n * - `bytes32 -> address` (`Bytes32ToAddressMap`) since v5.1.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\n\n    /**\n     * @dev Query for a nonexistent map key.\n     */\n    error EnumerableMapNonexistentKey(bytes32 key);\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 key => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32 key, bytes32 value) {\n        bytes32 atKey = map._keys.at(index);\n        return (atKey, map._values[atKey]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool exists, bytes32 value) {\n        bytes32 val = map._values[key];\n        if (val == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, val);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        if (value == 0 && !contains(map, key)) {\n            revert EnumerableMapNonexistentKey(key);\n        }\n        return value;\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\n        return map._keys.values();\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256 key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), uint256(val));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256 key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToBytes32Map\n\n    struct UintToBytes32Map {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToBytes32Map storage map, uint256 key, bytes32 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), value);\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToBytes32Map storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToBytes32Map storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToBytes32Map storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToBytes32Map storage map, uint256 index) internal view returns (uint256 key, bytes32 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), val);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToBytes32Map storage map, uint256 key) internal view returns (bool exists, bytes32 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, val);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToBytes32Map storage map, uint256 key) internal view returns (bytes32) {\n        return get(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToBytes32Map storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), uint256(val));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToAddressMap\n\n    struct AddressToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToAddressMap storage map, address key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(uint256(uint160(key)))))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToAddressMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToBytes32Map\n\n    struct AddressToBytes32Map {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToBytes32Map storage map, address key, bytes32 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), value);\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToBytes32Map storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToBytes32Map storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToBytes32Map storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToBytes32Map storage map, uint256 index) internal view returns (address key, bytes32 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), val);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToBytes32Map storage map, address key) internal view returns (bool exists, bytes32 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, val);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToBytes32Map storage map, address key) internal view returns (bytes32) {\n        return get(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToBytes32Map storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32 key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (atKey, uint256(val));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, key);\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToAddressMap\n\n    struct Bytes32ToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToAddressMap storage map, bytes32 key, address value) internal returns (bool) {\n        return set(map._inner, key, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32 key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (atKey, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, key);\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, key))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToAddressMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/EnumerableSet.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/Heap.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/Heap.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\nimport {Comparators} from \"../Comparators.sol\";\nimport {Arrays} from \"../Arrays.sol\";\nimport {Panic} from \"../Panic.sol\";\nimport {StorageSlot} from \"../StorageSlot.sol\";\n\n/**\n * @dev Library for managing https://en.wikipedia.org/wiki/Binary_heap[binary heap] that can be used as\n * https://en.wikipedia.org/wiki/Priority_queue[priority queue].\n *\n * Heaps are represented as a tree of values where the first element (index 0) is the root, and where the node at\n * index i is the child of the node at index (i-1)/2 and the parent of nodes at index 2*i+1 and 2*i+2. Each node\n * stores an element of the heap.\n *\n * The structure is ordered so that each node is bigger than its parent. An immediate consequence is that the\n * highest priority value is the one at the root. This value can be looked up in constant time (O(1)) at\n * `heap.tree[0]`\n *\n * The structure is designed to perform the following operations with the corresponding complexities:\n *\n * * peek (get the highest priority value): O(1)\n * * insert (insert a value): O(log(n))\n * * pop (remove the highest priority value): O(log(n))\n * * replace (replace the highest priority value with a new value): O(log(n))\n * * length (get the number of elements): O(1)\n * * clear (remove all elements): O(1)\n *\n * IMPORTANT: This library allows for the use of custom comparator functions. Given that manipulating\n * memory can lead to unexpected behavior. Consider verifying that the comparator does not manipulate\n * the Heap's state directly and that it follows the Solidity memory safety rules.\n *\n * _Available since v5.1._\n */\nlibrary Heap {\n    using Arrays for *;\n    using Math for *;\n    using SafeCast for *;\n\n    /**\n     * @dev Binary heap that supports values of type uint256.\n     *\n     * Each element of that structure uses one storage slot.\n     */\n    struct Uint256Heap {\n        uint256[] tree;\n    }\n\n    /**\n     * @dev Lookup the root element of the heap.\n     */\n    function peek(Uint256Heap storage self) internal view returns (uint256) {\n        // self.tree[0] will `ARRAY_ACCESS_OUT_OF_BOUNDS` panic if heap is empty.\n        return self.tree[0];\n    }\n\n    /**\n     * @dev Remove (and return) the root element for the heap using the default comparator.\n     *\n     * NOTE: All inserting and removal from a heap should always be done using the same comparator. Mixing comparator\n     * during the lifecycle of a heap will result in undefined behavior.\n     */\n    function pop(Uint256Heap storage self) internal returns (uint256) {\n        return pop(self, Comparators.lt);\n    }\n\n    /**\n     * @dev Remove (and return) the root element for the heap using the provided comparator.\n     *\n     * NOTE: All inserting and removal from a heap should always be done using the same comparator. Mixing comparator\n     * during the lifecycle of a heap will result in undefined behavior.\n     */\n    function pop(\n        Uint256Heap storage self,\n        function(uint256, uint256) view returns (bool) comp\n    ) internal returns (uint256) {\n        unchecked {\n            uint256 size = length(self);\n            if (size == 0) Panic.panic(Panic.EMPTY_ARRAY_POP);\n\n            // cache\n            uint256 rootValue = self.tree.unsafeAccess(0).value;\n            uint256 lastValue = self.tree.unsafeAccess(size - 1).value;\n\n            // swap last leaf with root, shrink tree and re-heapify\n            self.tree.pop();\n            self.tree.unsafeAccess(0).value = lastValue;\n            _siftDown(self, size - 1, 0, lastValue, comp);\n\n            return rootValue;\n        }\n    }\n\n    /**\n     * @dev Insert a new element in the heap using the default comparator.\n     *\n     * NOTE: All inserting and removal from a heap should always be done using the same comparator. Mixing comparator\n     * during the lifecycle of a heap will result in undefined behavior.\n     */\n    function insert(Uint256Heap storage self, uint256 value) internal {\n        insert(self, value, Comparators.lt);\n    }\n\n    /**\n     * @dev Insert a new element in the heap using the provided comparator.\n     *\n     * NOTE: All inserting and removal from a heap should always be done using the same comparator. Mixing comparator\n     * during the lifecycle of a heap will result in undefined behavior.\n     */\n    function insert(\n        Uint256Heap storage self,\n        uint256 value,\n        function(uint256, uint256) view returns (bool) comp\n    ) internal {\n        uint256 size = length(self);\n\n        // push new item and re-heapify\n        self.tree.push(value);\n        _siftUp(self, size, value, comp);\n    }\n\n    /**\n     * @dev Return the root element for the heap, and replace it with a new value, using the default comparator.\n     * This is equivalent to using {pop} and {insert}, but requires only one rebalancing operation.\n     *\n     * NOTE: All inserting and removal from a heap should always be done using the same comparator. Mixing comparator\n     * during the lifecycle of a heap will result in undefined behavior.\n     */\n    function replace(Uint256Heap storage self, uint256 newValue) internal returns (uint256) {\n        return replace(self, newValue, Comparators.lt);\n    }\n\n    /**\n     * @dev Return the root element for the heap, and replace it with a new value, using the provided comparator.\n     * This is equivalent to using {pop} and {insert}, but requires only one rebalancing operation.\n     *\n     * NOTE: All inserting and removal from a heap should always be done using the same comparator. Mixing comparator\n     * during the lifecycle of a heap will result in undefined behavior.\n     */\n    function replace(\n        Uint256Heap storage self,\n        uint256 newValue,\n        function(uint256, uint256) view returns (bool) comp\n    ) internal returns (uint256) {\n        uint256 size = length(self);\n        if (size == 0) Panic.panic(Panic.EMPTY_ARRAY_POP);\n\n        // cache\n        uint256 oldValue = self.tree.unsafeAccess(0).value;\n\n        // replace and re-heapify\n        self.tree.unsafeAccess(0).value = newValue;\n        _siftDown(self, size, 0, newValue, comp);\n\n        return oldValue;\n    }\n\n    /**\n     * @dev Returns the number of elements in the heap.\n     */\n    function length(Uint256Heap storage self) internal view returns (uint256) {\n        return self.tree.length;\n    }\n\n    /**\n     * @dev Removes all elements in the heap.\n     */\n    function clear(Uint256Heap storage self) internal {\n        self.tree.unsafeSetLength(0);\n    }\n\n    /**\n     * @dev Swap node `i` and `j` in the tree.\n     */\n    function _swap(Uint256Heap storage self, uint256 i, uint256 j) private {\n        StorageSlot.Uint256Slot storage ni = self.tree.unsafeAccess(i);\n        StorageSlot.Uint256Slot storage nj = self.tree.unsafeAccess(j);\n        (ni.value, nj.value) = (nj.value, ni.value);\n    }\n\n    /**\n     * @dev Perform heap maintenance on `self`, starting at `index` (with the `value`), using `comp` as a\n     * comparator, and moving toward the leaves of the underlying tree.\n     *\n     * NOTE: This is a private function that is called in a trusted context with already cached parameters. `size`\n     * and `value` could be extracted from `self` and `index`, but that would require redundant storage read. These\n     * parameters are not verified. It is the caller role to make sure the parameters are correct.\n     */\n    function _siftDown(\n        Uint256Heap storage self,\n        uint256 size,\n        uint256 index,\n        uint256 value,\n        function(uint256, uint256) view returns (bool) comp\n    ) private {\n        unchecked {\n            // Check if there is a risk of overflow when computing the indices of the child nodes. If that is the case,\n            // there cannot be child nodes in the tree, so sifting is done.\n            if (index >= type(uint256).max / 2) return;\n\n            // Compute the indices of the potential child nodes\n            uint256 lIndex = 2 * index + 1;\n            uint256 rIndex = 2 * index + 2;\n\n            // Three cases:\n            // 1. Both children exist: sifting may continue on one of the branch (selection required)\n            // 2. Only left child exist: sifting may continue on the left branch (no selection required)\n            // 3. Neither child exist: sifting is done\n            if (rIndex < size) {\n                uint256 lValue = self.tree.unsafeAccess(lIndex).value;\n                uint256 rValue = self.tree.unsafeAccess(rIndex).value;\n                if (comp(lValue, value) || comp(rValue, value)) {\n                    uint256 cIndex = comp(lValue, rValue).ternary(lIndex, rIndex);\n                    _swap(self, index, cIndex);\n                    _siftDown(self, size, cIndex, value, comp);\n                }\n            } else if (lIndex < size) {\n                uint256 lValue = self.tree.unsafeAccess(lIndex).value;\n                if (comp(lValue, value)) {\n                    _swap(self, index, lIndex);\n                    _siftDown(self, size, lIndex, value, comp);\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Perform heap maintenance on `self`, starting at `index` (with the `value`), using `comp` as a\n     * comparator, and moving toward the root of the underlying tree.\n     *\n     * NOTE: This is a private function that is called in a trusted context with already cached parameters. `value`\n     * could be extracted from `self` and `index`, but that would require redundant storage read. These parameters are not\n     * verified. It is the caller role to make sure the parameters are correct.\n     */\n    function _siftUp(\n        Uint256Heap storage self,\n        uint256 index,\n        uint256 value,\n        function(uint256, uint256) view returns (bool) comp\n    ) private {\n        unchecked {\n            while (index > 0) {\n                uint256 parentIndex = (index - 1) / 2;\n                uint256 parentValue = self.tree.unsafeAccess(parentIndex).value;\n                if (comp(parentValue, value)) break;\n                _swap(self, index, parentIndex);\n                index = parentIndex;\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/MerkleTree.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/MerkleTree.sol)\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"../cryptography/Hashes.sol\";\nimport {Arrays} from \"../Arrays.sol\";\nimport {Panic} from \"../Panic.sol\";\n\n/**\n * @dev Library for managing https://wikipedia.org/wiki/Merkle_Tree[Merkle Tree] data structures.\n *\n * Each tree is a complete binary tree with the ability to sequentially insert leaves, changing them from a zero to a\n * non-zero value and updating its root. This structure allows inserting commitments (or other entries) that are not\n * stored, but can be proven to be part of the tree at a later time if the root is kept. See {MerkleProof}.\n *\n * A tree is defined by the following parameters:\n *\n * * Depth: The number of levels in the tree, it also defines the maximum number of leaves as 2**depth.\n * * Zero value: The value that represents an empty leaf. Used to avoid regular zero values to be part of the tree.\n * * Hashing function: A cryptographic hash function used to produce internal nodes. Defaults to {Hashes-commutativeKeccak256}.\n *\n * NOTE: Building trees using non-commutative hashing functions (i.e. `H(a, b) != H(b, a)`) is supported. However,\n * proving the inclusion of a leaf in such trees is not possible with the {MerkleProof} library since it only supports\n * _commutative_ hashing functions.\n *\n * _Available since v5.1._\n */\nlibrary MerkleTree {\n    /**\n     * @dev A complete `bytes32` Merkle tree.\n     *\n     * The `sides` and `zero` arrays are set to have a length equal to the depth of the tree during setup.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * NOTE: The `root` and the updates history is not stored within the tree. Consider using a secondary structure to\n     * store a list of historical roots from the values returned from {setup} and {push} (e.g. a mapping, {BitMaps} or\n     * {Checkpoints}).\n     *\n     * WARNING: Updating any of the tree's parameters after the first insertion will result in a corrupted tree.\n     */\n    struct Bytes32PushTree {\n        uint256 _nextLeafIndex;\n        bytes32[] _sides;\n        bytes32[] _zeros;\n    }\n\n    /**\n     * @dev Initialize a {Bytes32PushTree} using {Hashes-commutativeKeccak256} to hash internal nodes.\n     * The capacity of the tree (i.e. number of leaves) is set to `2**treeDepth`.\n     *\n     * Calling this function on MerkleTree that was already setup and used will reset it to a blank state.\n     *\n     * Once a tree is setup, any push to it must use the same hashing function. This means that values\n     * should be pushed to it using the default {xref-MerkleTree-push-struct-MerkleTree-Bytes32PushTree-bytes32-}[push] function.\n     *\n     * IMPORTANT: The zero value should be carefully chosen since it will be stored in the tree representing\n     * empty leaves. It should be a value that is not expected to be part of the tree.\n     */\n    function setup(Bytes32PushTree storage self, uint8 treeDepth, bytes32 zero) internal returns (bytes32 initialRoot) {\n        return setup(self, treeDepth, zero, Hashes.commutativeKeccak256);\n    }\n\n    /**\n     * @dev Same as {xref-MerkleTree-setup-struct-MerkleTree-Bytes32PushTree-uint8-bytes32-}[setup], but allows to specify a custom hashing function.\n     *\n     * Once a tree is setup, any push to it must use the same hashing function. This means that values\n     * should be pushed to it using the custom push function, which should be the same one as used during the setup.\n     *\n     * IMPORTANT: Providing a custom hashing function is a security-sensitive operation since it may\n     * compromise the soundness of the tree.\n     *\n     * NOTE: Consider verifying that the hashing function does not manipulate the memory state directly and that it\n     * follows the Solidity memory safety rules. Otherwise, it may lead to unexpected behavior.\n     */\n    function setup(\n        Bytes32PushTree storage self,\n        uint8 treeDepth,\n        bytes32 zero,\n        function(bytes32, bytes32) view returns (bytes32) fnHash\n    ) internal returns (bytes32 initialRoot) {\n        // Store depth in the dynamic array\n        Arrays.unsafeSetLength(self._sides, treeDepth);\n        Arrays.unsafeSetLength(self._zeros, treeDepth);\n\n        // Build each root of zero-filled subtrees\n        bytes32 currentZero = zero;\n        for (uint32 i = 0; i < treeDepth; ++i) {\n            Arrays.unsafeAccess(self._zeros, i).value = currentZero;\n            currentZero = fnHash(currentZero, currentZero);\n        }\n\n        // Set the first root\n        self._nextLeafIndex = 0;\n\n        return currentZero;\n    }\n\n    /**\n     * @dev Insert a new leaf in the tree, and compute the new root. Returns the position of the inserted leaf in the\n     * tree, and the resulting root.\n     *\n     * Hashing the leaf before calling this function is recommended as a protection against\n     * second pre-image attacks.\n     *\n     * This variant uses {Hashes-commutativeKeccak256} to hash internal nodes. It should only be used on merkle trees\n     * that were setup using the same (default) hashing function (i.e. by calling\n     * {xref-MerkleTree-setup-struct-MerkleTree-Bytes32PushTree-uint8-bytes32-}[the default setup] function).\n     */\n    function push(Bytes32PushTree storage self, bytes32 leaf) internal returns (uint256 index, bytes32 newRoot) {\n        return push(self, leaf, Hashes.commutativeKeccak256);\n    }\n\n    /**\n     * @dev Insert a new leaf in the tree, and compute the new root. Returns the position of the inserted leaf in the\n     * tree, and the resulting root.\n     *\n     * Hashing the leaf before calling this function is recommended as a protection against\n     * second pre-image attacks.\n     *\n     * This variant uses a custom hashing function to hash internal nodes. It should only be called with the same\n     * function as the one used during the initial setup of the merkle tree.\n     */\n    function push(\n        Bytes32PushTree storage self,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) fnHash\n    ) internal returns (uint256 index, bytes32 newRoot) {\n        // Cache read\n        uint256 treeDepth = depth(self);\n\n        // Get leaf index\n        index = self._nextLeafIndex++;\n\n        // Check if tree is full.\n        if (index >= 1 << treeDepth) {\n            Panic.panic(Panic.RESOURCE_ERROR);\n        }\n\n        // Rebuild branch from leaf to root\n        uint256 currentIndex = index;\n        bytes32 currentLevelHash = leaf;\n        for (uint32 i = 0; i < treeDepth; i++) {\n            // Reaching the parent node, is currentLevelHash the left child?\n            bool isLeft = currentIndex % 2 == 0;\n\n            // If so, next time we will come from the right, so we need to save it\n            if (isLeft) {\n                Arrays.unsafeAccess(self._sides, i).value = currentLevelHash;\n            }\n\n            // Compute the current node hash by using the hash function\n            // with either its sibling (side) or the zero value for that level.\n            currentLevelHash = fnHash(\n                isLeft ? currentLevelHash : Arrays.unsafeAccess(self._sides, i).value,\n                isLeft ? Arrays.unsafeAccess(self._zeros, i).value : currentLevelHash\n            );\n\n            // Update node index\n            currentIndex >>= 1;\n        }\n\n        return (index, currentLevelHash);\n    }\n\n    /**\n     * @dev Tree's depth (set at initialization)\n     */\n    function depth(Bytes32PushTree storage self) internal view returns (uint256) {\n        return self._zeros.length;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/types/Time.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/types/Time.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\n\n/**\n * @dev This library provides helpers for manipulating time-related objects.\n *\n * It uses the following types:\n * - `uint48` for timepoints\n * - `uint32` for durations\n *\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n * - additional helper functions\n */\nlibrary Time {\n    using Time for *;\n\n    /**\n     * @dev Get the block timestamp as a Timepoint.\n     */\n    function timestamp() internal view returns (uint48) {\n        return SafeCast.toUint48(block.timestamp);\n    }\n\n    /**\n     * @dev Get the block number as a Timepoint.\n     */\n    function blockNumber() internal view returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    // ==================================================== Delay =====================================================\n    /**\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\n     * future. The \"effect\" timepoint describes when the transitions happens from the \"old\" value to the \"new\" value.\n     * This allows updating the delay applied to some operation while keeping some guarantees.\n     *\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\n     * still apply for some time.\n     *\n     *\n     * The `Delay` type is 112 bits long, and packs the following:\n     *\n     * ```\n     *   | [uint48]: effect date (timepoint)\n     *   |           | [uint32]: value before (duration)\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\n     * ```\n     *\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\n     * supported.\n     */\n    type Delay is uint112;\n\n    /**\n     * @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature\n     */\n    function toDelay(uint32 duration) internal pure returns (Delay) {\n        return Delay.wrap(duration);\n    }\n\n    /**\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\n     */\n    function _getFullAt(\n        Delay self,\n        uint48 timepoint\n    ) private pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        (valueBefore, valueAfter, effect) = self.unpack();\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n     * effect timepoint is 0, then the pending value should not be considered.\n     */\n    function getFull(Delay self) internal view returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        return _getFullAt(self, timestamp());\n    }\n\n    /**\n     * @dev Get the current value.\n     */\n    function get(Delay self) internal view returns (uint32) {\n        (uint32 delay, , ) = self.getFull();\n        return delay;\n    }\n\n    /**\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n     * new delay becomes effective.\n     */\n    function withUpdate(\n        Delay self,\n        uint32 newValue,\n        uint32 minSetback\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\n        uint32 value = self.get();\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\n        effect = timestamp() + setback;\n        return (pack(value, newValue, effect), effect);\n    }\n\n    /**\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\n     */\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        uint112 raw = Delay.unwrap(self);\n\n        valueAfter = uint32(raw);\n        valueBefore = uint32(raw >> 32);\n        effect = uint48(raw >> 64);\n\n        return (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev pack the components into a Delay object.\n     */\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/vendor/compound/ICompoundTimelock.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (vendor/compound/ICompoundTimelock.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol[Compound timelock] interface\n */\ninterface ICompoundTimelock {\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    receive() external payable;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function GRACE_PERIOD() external view returns (uint256);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function MINIMUM_DELAY() external view returns (uint256);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function MAXIMUM_DELAY() external view returns (uint256);\n\n    function admin() external view returns (address);\n\n    function pendingAdmin() external view returns (address);\n\n    function delay() external view returns (uint256);\n\n    function queuedTransactions(bytes32) external view returns (bool);\n\n    function setDelay(uint256) external;\n\n    function acceptAdmin() external;\n\n    function setPendingAdmin(address) external;\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) external returns (bytes32);\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) external;\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) external payable returns (bytes memory);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/.gitattributes": "src/Vm.sol linguist-generated\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/.github/workflows/ci.yml": "name: CI\n\non:\n  workflow_dispatch:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: nightly\n\n      - name: Print forge version\n        run: forge --version\n\n      # Backwards compatibility checks:\n      # - the oldest and newest version of each supported minor version\n      # - versions with specific issues\n      - name: Check compatibility with latest\n        if: always()\n        run: |\n          output=$(forge build --skip test)\n          if echo \"$output\" | grep -q \"Warning\"; then\n            echo \"$output\"\n            exit 1\n          fi\n\n      - name: Check compatibility with 0.8.0\n        if: always()\n        run: |\n          output=$(forge build --skip test --use solc:0.8.0)\n          if echo \"$output\" | grep -q \"Warning\"; then\n            echo \"$output\"\n            exit 1\n          fi\n\n      - name: Check compatibility with 0.7.6\n        if: always()\n        run: |\n          output=$(forge build --skip test --use solc:0.7.6)\n          if echo \"$output\" | grep -q \"Warning\"; then\n            echo \"$output\"\n            exit 1\n          fi\n\n      - name: Check compatibility with 0.7.0\n        if: always()\n        run: |\n          output=$(forge build --skip test --use solc:0.7.0)\n          if echo \"$output\" | grep -q \"Warning\"; then\n            echo \"$output\"\n            exit 1\n          fi\n\n      - name: Check compatibility with 0.6.12\n        if: always()\n        run: |\n          output=$(forge build --skip test --use solc:0.6.12)\n          if echo \"$output\" | grep -q \"Warning\"; then\n            echo \"$output\"\n            exit 1\n          fi\n\n      - name: Check compatibility with 0.6.2\n        if: always()\n        run: |\n          output=$(forge build --skip test --use solc:0.6.2)\n          if echo \"$output\" | grep -q \"Warning\"; then\n            echo \"$output\"\n            exit 1\n          fi\n\n      # via-ir compilation time checks.\n      - name: Measure compilation time of Test with 0.8.17 --via-ir\n        if: always()\n        run: forge build --skip test --contracts test/compilation/CompilationTest.sol --use solc:0.8.17 --via-ir\n\n      - name: Measure compilation time of TestBase with 0.8.17 --via-ir\n        if: always()\n        run: forge build --skip test --contracts test/compilation/CompilationTestBase.sol --use solc:0.8.17 --via-ir\n\n      - name: Measure compilation time of Script with 0.8.17 --via-ir\n        if: always()\n        run: forge build --skip test --contracts test/compilation/CompilationScript.sol --use solc:0.8.17 --via-ir\n\n      - name: Measure compilation time of ScriptBase with 0.8.17 --via-ir\n        if: always()\n        run: forge build --skip test --contracts test/compilation/CompilationScriptBase.sol --use solc:0.8.17 --via-ir\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: nightly\n\n      - name: Print forge version\n        run: forge --version\n\n      - name: Run tests\n        run: forge test -vvv\n\n  fmt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: nightly\n\n      - name: Print forge version\n        run: forge --version\n\n      - name: Check formatting\n        run: forge fmt --check\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/.github/workflows/sync.yml": "name: Sync Release Branch\n\non:\n  release:\n    types:\n      - created\n\njobs:\n  sync-release-branch:\n    runs-on: ubuntu-latest\n    if: startsWith(github.event.release.tag_name, 'v1')\n    steps:\n      - name: Check out the repo\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: v1\n\n      # The email is derived from the bots user id,\n      # found here: https://api.github.com/users/github-actions%5Bbot%5D\n      - name: Configure Git\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n\n      - name: Sync Release Branch\n        run: |\n          git fetch --tags\n          git checkout v1\n          git reset --hard ${GITHUB_REF}\n          git push --force\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/.gitignore": "cache/\nout/\n.vscode\n.idea\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/CONTRIBUTING.md": "## Contributing to Foundry\n\nThanks for your interest in improving Foundry!\n\nThere are multiple opportunities to contribute at any level. It doesn't matter if you are just getting started with Rust or are the most weathered expert, we can use your help.\n\nThis document will help you get started. **Do not let the document intimidate you**.\nIt should be considered as a guide to help you navigate the process.\n\nThe [dev Telegram][dev-tg] is available for any concerns you may have that are not covered in this guide.\n\n### Code of Conduct\n\nThe Foundry project adheres to the [Rust Code of Conduct][rust-coc]. This code of conduct describes the _minimum_ behavior expected from all contributors.\n\nInstances of violations of the Code of Conduct can be reported by contacting the team at [me@gakonst.com](mailto:me@gakonst.com).\n\n### Ways to contribute\n\nThere are fundamentally four ways an individual can contribute:\n\n1. **By opening an issue:** For example, if you believe that you have uncovered a bug\n   in Foundry, creating a new issue in the issue tracker is the way to report it.\n2. **By adding context:** Providing additional context to existing issues,\n   such as screenshots and code snippets, which help resolve issues.\n3. **By resolving issues:** Typically this is done in the form of either\n   demonstrating that the issue reported is not a problem after all, or more often,\n   by opening a pull request that fixes the underlying problem, in a concrete and\n   reviewable manner.\n\n**Anybody can participate in any stage of contribution**. We urge you to participate in the discussion\naround bugs and participate in reviewing PRs.\n\n### Contributions Related to Spelling and Grammar\n\nAt this time, we will not be accepting contributions that only fix spelling or grammatical errors in documentation, code or\nelsewhere.\n\n### Asking for help\n\nIf you have reviewed existing documentation and still have questions, or you are having problems, you can get help in the following ways:\n\n-   **Asking in the support Telegram:** The [Foundry Support Telegram][support-tg] is a fast and easy way to ask questions.\n-   **Opening a discussion:** This repository comes with a discussions board where you can also ask for help. Click the \"Discussions\" tab at the top.\n\nAs Foundry is still in heavy development, the documentation can be a bit scattered.\nThe [Foundry Book][foundry-book] is our current best-effort attempt at keeping up-to-date information.\n\n### Submitting a bug report\n\nWhen filing a new bug report in the issue tracker, you will be presented with a basic form to fill out.\n\nIf you believe that you have uncovered a bug, please fill out the form to the best of your ability. Do not worry if you cannot answer every detail; just fill in what you can. Contributors will ask follow-up questions if something is unclear.\n\nThe most important pieces of information we need in a bug report are:\n\n-   The Foundry version you are on (and that it is up to date)\n-   The platform you are on (Windows, macOS, an M1 Mac or Linux)\n-   Code snippets if this is happening in relation to testing or building code\n-   Concrete steps to reproduce the bug\n\nIn order to rule out the possibility of the bug being in your project, the code snippets should be as minimal\nas possible. It is better if you can reproduce the bug with a small snippet as opposed to an entire project!\n\nSee [this guide][mcve] on how to create a minimal, complete, and verifiable example.\n\n### Submitting a feature request\n\nWhen adding a feature request in the issue tracker, you will be presented with a basic form to fill out.\n\nPlease include as detailed of an explanation as possible of the feature you would like, adding additional context if necessary.\n\nIf you have examples of other tools that have the feature you are requesting, please include them as well.\n\n### Resolving an issue\n\nPull requests are the way concrete changes are made to the code, documentation, and dependencies of Foundry.\n\nEven minor pull requests, such as those fixing wording, are greatly appreciated. Before making a large change, it is usually\na good idea to first open an issue describing the change to solicit feedback and guidance. This will increase\nthe likelihood of the PR getting merged.\n\nPlease make sure that the following commands pass if you have changed the code:\n\n```sh\nforge fmt --check\nforge test -vvv\n```\n\nTo make sure your changes are compatible with all compiler version targets, run the following commands:\n\n```sh\nforge build --skip test --use solc:0.6.2\nforge build --skip test --use solc:0.6.12\nforge build --skip test --use solc:0.7.0\nforge build --skip test --use solc:0.7.6\nforge build --skip test --use solc:0.8.0\n```\n\nThe CI will also ensure that the code is formatted correctly and that the tests are passing across all compiler version targets.\n\n#### Adding cheatcodes\n\nPlease follow the guide outlined in the [cheatcodes](https://github.com/foundry-rs/foundry/blob/master/docs/dev/cheatcodes.md#adding-a-new-cheatcode) documentation of Foundry.\n\nWhen making modifications to the native cheatcodes or adding new ones, please make sure to run [`./scripts/vm.py`](./scripts/vm.py) to update the cheatcodes in the [`src/Vm.sol`](./src/Vm.sol) file.\n\nBy default the script will automatically generate the cheatcodes from the [`cheatcodes.json`](https://raw.githubusercontent.com/foundry-rs/foundry/master/crates/cheatcodes/assets/cheatcodes.json) file but alternatively you can provide a path to a JSON file containing the Vm interface, as generated by Foundry, with the `--from` flag.\n\n```sh\n./scripts/vm.py --from path/to/cheatcodes.json\n```\n\nIt is possible that the resulting [`src/Vm.sol`](./src/Vm.sol) file will have some changes that are not directly related to your changes, this is not a problem.\n\n#### Commits\n\nIt is a recommended best practice to keep your changes as logically grouped as possible within individual commits. There is no limit to the number of commits any single pull request may have, and many contributors find it easier to review changes that are split across multiple commits.\n\nThat said, if you have a number of commits that are \"checkpoints\" and don't represent a single logical change, please squash those together.\n\n#### Opening the pull request\n\nFrom within GitHub, opening a new pull request will present you with a template that should be filled out. Please try your best at filling out the details, but feel free to skip parts if you're not sure what to put.\n\n#### Discuss and update\n\nYou will probably get feedback or requests for changes to your pull request.\nThis is a big part of the submission process, so don't be discouraged! Some contributors may sign off on the pull request right away, others may have more detailed comments or feedback.\nThis is a necessary part of the process in order to evaluate whether the changes are correct and necessary.\n\n**Any community member can review a PR, so you might get conflicting feedback**.\nKeep an eye out for comments from code owners to provide guidance on conflicting feedback.\n\n#### Reviewing pull requests\n\n**Any Foundry community member is welcome to review any pull request**.\n\nAll contributors who choose to review and provide feedback on pull requests have a responsibility to both the project and individual making the contribution. Reviews and feedback must be helpful, insightful, and geared towards improving the contribution as opposed to simply blocking it. If there are reasons why you feel the PR should not be merged, explain what those are. Do not expect to be able to block a PR from advancing simply because you say \"no\" without giving an explanation. Be open to having your mind changed. Be open to working _with_ the contributor to make the pull request better.\n\nReviews that are dismissive or disrespectful of the contributor or any other reviewers are strictly counter to the Code of Conduct.\n\nWhen reviewing a pull request, the primary goals are for the codebase to improve and for the person submitting the request to succeed. **Even if a pull request is not merged, the submitter should come away from the experience feeling like their effort was not unappreciated**. Every PR from a new contributor is an opportunity to grow the community.\n\n##### Review a bit at a time\n\nDo not overwhelm new contributors.\n\nIt is tempting to micro-optimize and make everything about relative performance, perfect grammar, or exact style matches. Do not succumb to that temptation..\n\nFocus first on the most significant aspects of the change:\n\n1. Does this change make sense for Foundry?\n2. Does this change make Foundry better, even if only incrementally?\n3. Are there clear bugs or larger scale issues that need attending?\n4. Are the commit messages readable and correct? If it contains a breaking change, is it clear enough?\n\nNote that only **incremental** improvement is needed to land a PR. This means that the PR does not need to be perfect, only better than the status quo. Follow-up PRs may be opened to continue iterating.\n\nWhen changes are necessary, _request_ them, do not _demand_ them, and **do not assume that the submitter already knows how to add a test or run a benchmark**.\n\nSpecific performance optimization techniques, coding styles and conventions change over time. The first impression you give to a new contributor never does.\n\nNits (requests for small changes that are not essential) are fine, but try to avoid stalling the pull request. Most nits can typically be fixed by the Foundry maintainers merging the pull request, but they can also be an opportunity for the contributor to learn a bit more about the project.\n\nIt is always good to clearly indicate nits when you comment, e.g.: `Nit: change foo() to bar(). But this is not blocking`.\n\nIf your comments were addressed but were not folded after new commits, or if they proved to be mistaken, please, [hide them][hiding-a-comment] with the appropriate reason to keep the conversation flow concise and relevant.\n\n##### Be aware of the person behind the code\n\nBe aware that _how_ you communicate requests and reviews in your feedback can have a significant impact on the success of the pull request. Yes, we may merge a particular change that makes Foundry better, but the individual might just not want to have anything to do with Foundry ever again. The goal is not just having good code.\n\n##### Abandoned or stale pull requests\n\nIf a pull request appears to be abandoned or stalled, it is polite to first check with the contributor to see if they intend to continue the work before checking if they would mind if you took it over (especially if it just has nits left). When doing so, it is courteous to give the original contributor credit for the work they started, either by preserving their name and e-mail address in the commit log, or by using the `Author: ` or `Co-authored-by: ` metadata tag in the commits.\n\n_Adapted from the [ethers-rs contributing guide](https://github.com/gakonst/ethers-rs/blob/master/CONTRIBUTING.md)_.\n\n### Releasing\n\nReleases are automatically done by the release workflow when a tag is pushed, however, these steps still need to be taken:\n\n1. Ensure that the versions in the relevant `Cargo.toml` files are up-to-date.\n2. Update documentation links\n3. Perform a final audit for breaking changes.\n\n[rust-coc]: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md\n[dev-tg]: https://t.me/foundry_rs\n[foundry-book]: https://github.com/foundry-rs/foundry-book\n[support-tg]: https://t.me/foundry_support\n[mcve]: https://stackoverflow.com/help/mcve\n[hiding-a-comment]: https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/LICENSE-APACHE": "Copyright Contributors to Forge Standard Library\n\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/LICENSE-MIT": "Copyright Contributors to Forge Standard Library\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE O THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.R\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/README.md": "# Forge Standard Library • [![CI status](https://github.com/foundry-rs/forge-std/actions/workflows/ci.yml/badge.svg)](https://github.com/foundry-rs/forge-std/actions/workflows/ci.yml)\n\nForge Standard Library is a collection of helpful contracts and libraries for use with [Forge and Foundry](https://github.com/foundry-rs/foundry). It leverages Forge's cheatcodes to make writing tests easier and faster, while improving the UX of cheatcodes.\n\n**Learn how to use Forge-Std with the [📖 Foundry Book (Forge-Std Guide)](https://book.getfoundry.sh/forge/forge-std.html).**\n\n## Install\n\n```bash\nforge install foundry-rs/forge-std\n```\n\n## Contracts\n### stdError\n\nThis is a helper contract for errors and reverts. In Forge, this contract is particularly helpful for the `expectRevert` cheatcode, as it provides all compiler builtin errors.\n\nSee the contract itself for all error codes.\n\n#### Example usage\n\n```solidity\n\nimport \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    ErrorsTest test;\n\n    function setUp() public {\n        test = new ErrorsTest();\n    }\n\n    function testExpectArithmetic() public {\n        vm.expectRevert(stdError.arithmeticError);\n        test.arithmeticError(10);\n    }\n}\n\ncontract ErrorsTest {\n    function arithmeticError(uint256 a) public {\n        uint256 a = a - 100;\n    }\n}\n```\n\n### stdStorage\n\nThis is a rather large contract due to all of the overloading to make the UX decent. Primarily, it is a wrapper around the `record` and `accesses` cheatcodes. It can *always* find and write the storage slot(s) associated with a particular variable without knowing the storage layout. The one _major_ caveat to this is while a slot can be found for packed storage variables, we can't write to that variable safely. If a user tries to write to a packed slot, the execution throws an error, unless it is uninitialized (`bytes32(0)`).\n\nThis works by recording all `SLOAD`s and `SSTORE`s during a function call. If there is a single slot read or written to, it immediately returns the slot. Otherwise, behind the scenes, we iterate through and check each one (assuming the user passed in a `depth` parameter). If the variable is a struct, you can pass in a `depth` parameter which is basically the field depth.\n\nI.e.:\n```solidity\nstruct T {\n    // depth 0\n    uint256 a;\n    // depth 1\n    uint256 b;\n}\n```\n\n#### Example usage\n\n```solidity\nimport \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    using stdStorage for StdStorage;\n\n    Storage test;\n\n    function setUp() public {\n        test = new Storage();\n    }\n\n    function testFindExists() public {\n        // Lets say we want to find the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `find` command\n        uint256 slot = stdstore.target(address(test)).sig(\"exists()\").find();\n        assertEq(slot, 0);\n    }\n\n    function testWriteExists() public {\n        // Lets say we want to write to the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `checked_write` command\n        stdstore.target(address(test)).sig(\"exists()\").checked_write(100);\n        assertEq(test.exists(), 100);\n    }\n\n    // It supports arbitrary storage layouts, like assembly based storage locations\n    function testFindHidden() public {\n        // `hidden` is a random hash of a bytes, iteration through slots would\n        // not find it. Our mechanism does\n        // Also, you can use the selector instead of a string\n        uint256 slot = stdstore.target(address(test)).sig(test.hidden.selector).find();\n        assertEq(slot, uint256(keccak256(\"my.random.var\")));\n    }\n\n    // If targeting a mapping, you have to pass in the keys necessary to perform the find\n    // i.e.:\n    function testFindMapping() public {\n        uint256 slot = stdstore\n            .target(address(test))\n            .sig(test.map_addr.selector)\n            .with_key(address(this))\n            .find();\n        // in the `Storage` constructor, we wrote that this address' value was 1 in the map\n        // so when we load the slot, we expect it to be 1\n        assertEq(uint(vm.load(address(test), bytes32(slot))), 1);\n    }\n\n    // If the target is a struct, you can specify the field depth:\n    function testFindStruct() public {\n        // NOTE: see the depth parameter - 0 means 0th field, 1 means 1st field, etc.\n        uint256 slot_for_a_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(0)\n            .find();\n\n        uint256 slot_for_b_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(1)\n            .find();\n\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_a_field))), 1);\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_b_field))), 2);\n    }\n}\n\n// A complex storage contract\ncontract Storage {\n    struct UnpackedStruct {\n        uint256 a;\n        uint256 b;\n    }\n\n    constructor() {\n        map_addr[msg.sender] = 1;\n    }\n\n    uint256 public exists = 1;\n    mapping(address => uint256) public map_addr;\n    // mapping(address => Packed) public map_packed;\n    mapping(address => UnpackedStruct) public map_struct;\n    mapping(address => mapping(address => uint256)) public deep_map;\n    mapping(address => mapping(address => UnpackedStruct)) public deep_map_struct;\n    UnpackedStruct public basicStruct = UnpackedStruct({\n        a: 1,\n        b: 2\n    });\n\n    function hidden() public view returns (bytes32 t) {\n        // an extremely hidden storage slot\n        bytes32 slot = keccak256(\"my.random.var\");\n        assembly {\n            t := sload(slot)\n        }\n    }\n}\n```\n\n### stdCheats\n\nThis is a wrapper over miscellaneous cheatcodes that need wrappers to be more dev friendly. Currently there are only functions related to `prank`. In general, users may expect ETH to be put into an address on `prank`, but this is not the case for safety reasons. Explicitly this `hoax` function should only be used for addresses that have expected balances as it will get overwritten. If an address already has ETH, you should just use `prank`. If you want to change that balance explicitly, just use `deal`. If you want to do both, `hoax` is also right for you.\n\n\n#### Example usage:\n```solidity\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"forge-std/Test.sol\";\n\n// Inherit the stdCheats\ncontract StdCheatsTest is Test {\n    Bar test;\n    function setUp() public {\n        test = new Bar();\n    }\n\n    function testHoax() public {\n        // we call `hoax`, which gives the target address\n        // eth and then calls `prank`\n        hoax(address(1337));\n        test.bar{value: 100}(address(1337));\n\n        // overloaded to allow you to specify how much eth to\n        // initialize the address with\n        hoax(address(1337), 1);\n        test.bar{value: 1}(address(1337));\n    }\n\n    function testStartHoax() public {\n        // we call `startHoax`, which gives the target address\n        // eth and then calls `startPrank`\n        //\n        // it is also overloaded so that you can specify an eth amount\n        startHoax(address(1337));\n        test.bar{value: 100}(address(1337));\n        test.bar{value: 100}(address(1337));\n        vm.stopPrank();\n        test.bar(address(this));\n    }\n}\n\ncontract Bar {\n    function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }\n}\n```\n\n### Std Assertions\n\nContains various assertions.\n\n### `console.log`\n\nUsage follows the same format as [Hardhat](https://hardhat.org/hardhat-network/reference/#console-log).\nIt's recommended to use `console2.sol` as shown below, as this will show the decoded logs in Forge traces.\n\n```solidity\n// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console2.sol\";\n...\nconsole2.log(someValue);\n```\n\nIf you need compatibility with Hardhat, you must use the standard `console.sol` instead.\nDue to a bug in `console.sol`, logs that use `uint256` or `int256` types will not be properly decoded in Forge traces.\n\n```solidity\n// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console.sol\";\n...\nconsole.log(someValue);\n```\n\n## Contributing\n\nSee our [contributing guidelines](./CONTRIBUTING.md).\n\n## Getting Help\n\nFirst, see if the answer to your question can be found in [book](https://book.getfoundry.sh).\n\nIf the answer is not there:\n\n-   Join the [support Telegram](https://t.me/foundry_support) to get help, or\n-   Open a [discussion](https://github.com/foundry-rs/foundry/discussions/new/choose) with your question, or\n-   Open an issue with [the bug](https://github.com/foundry-rs/foundry/issues/new/choose)\n\nIf you want to contribute, or follow along with contributor discussion, you can use our [main telegram](https://t.me/foundry_rs) to chat with us about the development of Foundry!\n\n## License\n\nForge Standard Library is offered under either [MIT](LICENSE-MIT) or [Apache 2.0](LICENSE-APACHE) license.\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/foundry.toml": "[profile.default]\nfs_permissions = [{ access = \"read-write\", path = \"./\"}]\n\n[rpc_endpoints]\n# The RPC URLs are modified versions of the default for testing initialization.\nmainnet = \"https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX\" # Different API key.\noptimism_sepolia = \"https://sepolia.optimism.io/\" # Adds a trailing slash.\narbitrum_one_sepolia = \"https://sepolia-rollup.arbitrum.io/rpc/\" # Adds a trailing slash.\nneeds_undefined_env_var = \"${UNDEFINED_RPC_URL_PLACEHOLDER}\"\n\n[fmt]\n# These are all the `forge fmt` defaults.\nline_length = 120\ntab_width = 4\nbracket_spacing = false\nint_types = 'long'\nmultiline_func_header = 'attributes_first'\nquote_style = 'double'\nnumber_underscore = 'preserve'\nsingle_line_statement_blocks = 'preserve'\nignore = [\"src/console.sol\", \"src/console2.sol\"]",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/package.json": "{\n  \"name\": \"forge-std\",\n  \"version\": \"1.9.4\",\n  \"description\": \"Forge Standard Library is a collection of helpful contracts and libraries for use with Forge and Foundry.\",\n  \"homepage\": \"https://book.getfoundry.sh/forge/forge-std\",\n  \"bugs\": \"https://github.com/foundry-rs/forge-std/issues\",\n  \"license\": \"(Apache-2.0 OR MIT)\",\n  \"author\": \"Contributors to Forge Standard Library\",\n  \"files\": [\n    \"src/**/*\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/foundry-rs/forge-std.git\"\n  }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/scripts/vm.py": "#!/usr/bin/env python3\n\nimport argparse\nimport copy\nimport json\nimport re\nimport subprocess\nfrom enum import Enum as PyEnum\nfrom pathlib import Path\nfrom typing import Callable\nfrom urllib import request\n\nVoidFn = Callable[[], None]\n\nCHEATCODES_JSON_URL = \"https://raw.githubusercontent.com/foundry-rs/foundry/master/crates/cheatcodes/assets/cheatcodes.json\"\nOUT_PATH = \"src/Vm.sol\"\n\nVM_SAFE_DOC = \"\"\"\\\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from onchain execution. It is recommended to only use\n/// these cheats in scripts.\n\"\"\"\n\nVM_DOC = \"\"\"\\\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\n\"\"\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n            description=\"Generate Vm.sol based on the cheatcodes json created by Foundry\")\n    parser.add_argument(\n            \"--from\",\n            metavar=\"PATH\",\n            dest=\"path\",\n            required=False,\n            help=\"path to a json file containing the Vm interface, as generated by Foundry\")\n    args = parser.parse_args()\n    json_str = request.urlopen(CHEATCODES_JSON_URL).read().decode(\"utf-8\") if args.path is None else Path(args.path).read_text()\n    contract = Cheatcodes.from_json(json_str)\n\n    ccs = contract.cheatcodes\n    ccs = list(filter(lambda cc: cc.status not in [\"experimental\", \"internal\"], ccs))\n    ccs.sort(key=lambda cc: cc.func.id)\n\n    safe = list(filter(lambda cc: cc.safety == \"safe\", ccs))\n    safe.sort(key=CmpCheatcode)\n    unsafe = list(filter(lambda cc: cc.safety == \"unsafe\", ccs))\n    unsafe.sort(key=CmpCheatcode)\n    assert len(safe) + len(unsafe) == len(ccs)\n\n    prefix_with_group_headers(safe)\n    prefix_with_group_headers(unsafe)\n\n    out = \"\"\n\n    out += \"// Automatically @generated by scripts/vm.py. Do not modify manually.\\n\\n\"\n\n    pp = CheatcodesPrinter(\n        spdx_identifier=\"MIT OR Apache-2.0\",\n        solidity_requirement=\">=0.6.2 <0.9.0\",\n        abicoder_pragma=True,\n    )\n    pp.p_prelude()\n    pp.prelude = False\n    out += pp.finish()\n\n    out += \"\\n\\n\"\n    out += VM_SAFE_DOC\n    vm_safe = Cheatcodes(\n        # TODO: Custom errors were introduced in 0.8.4\n        errors=[],  # contract.errors\n        events=contract.events,\n        enums=contract.enums,\n        structs=contract.structs,\n        cheatcodes=safe,\n    )\n    pp.p_contract(vm_safe, \"VmSafe\")\n    out += pp.finish()\n\n    out += \"\\n\\n\"\n    out += VM_DOC\n    vm_unsafe = Cheatcodes(\n        errors=[],\n        events=[],\n        enums=[],\n        structs=[],\n        cheatcodes=unsafe,\n    )\n    pp.p_contract(vm_unsafe, \"Vm\", \"VmSafe\")\n    out += pp.finish()\n\n    # Compatibility with <0.8.0\n    def memory_to_calldata(m: re.Match) -> str:\n        return \" calldata \" + m.group(1)\n\n    out = re.sub(r\" memory (.*returns)\", memory_to_calldata, out)\n\n    with open(OUT_PATH, \"w\") as f:\n        f.write(out)\n\n    forge_fmt = [\"forge\", \"fmt\", OUT_PATH]\n    res = subprocess.run(forge_fmt)\n    assert res.returncode == 0, f\"command failed: {forge_fmt}\"\n\n    print(f\"Wrote to {OUT_PATH}\")\n\n\nclass CmpCheatcode:\n    cheatcode: \"Cheatcode\"\n\n    def __init__(self, cheatcode: \"Cheatcode\"):\n        self.cheatcode = cheatcode\n\n    def __lt__(self, other: \"CmpCheatcode\") -> bool:\n        return cmp_cheatcode(self.cheatcode, other.cheatcode) < 0\n\n    def __eq__(self, other: \"CmpCheatcode\") -> bool:\n        return cmp_cheatcode(self.cheatcode, other.cheatcode) == 0\n\n    def __gt__(self, other: \"CmpCheatcode\") -> bool:\n        return cmp_cheatcode(self.cheatcode, other.cheatcode) > 0\n\n\ndef cmp_cheatcode(a: \"Cheatcode\", b: \"Cheatcode\") -> int:\n    if a.group != b.group:\n        return -1 if a.group < b.group else 1\n    if a.status != b.status:\n        return -1 if a.status < b.status else 1\n    if a.safety != b.safety:\n        return -1 if a.safety < b.safety else 1\n    if a.func.id != b.func.id:\n        return -1 if a.func.id < b.func.id else 1\n    return 0\n\n\n# HACK: A way to add group header comments without having to modify printer code\ndef prefix_with_group_headers(cheats: list[\"Cheatcode\"]):\n    s = set()\n    for i, cheat in enumerate(cheats):\n        if cheat.group in s:\n            continue\n\n        s.add(cheat.group)\n\n        c = copy.deepcopy(cheat)\n        c.func.description = \"\"\n        c.func.declaration = f\"// ======== {group(c.group)} ========\"\n        cheats.insert(i, c)\n    return cheats\n\n\ndef group(s: str) -> str:\n    if s == \"evm\":\n        return \"EVM\"\n    if s == \"json\":\n        return \"JSON\"\n    return s[0].upper() + s[1:]\n\n\nclass Visibility(PyEnum):\n    EXTERNAL: str = \"external\"\n    PUBLIC: str = \"public\"\n    INTERNAL: str = \"internal\"\n    PRIVATE: str = \"private\"\n\n    def __str__(self):\n        return self.value\n\n\nclass Mutability(PyEnum):\n    PURE: str = \"pure\"\n    VIEW: str = \"view\"\n    NONE: str = \"\"\n\n    def __str__(self):\n        return self.value\n\n\nclass Function:\n    id: str\n    description: str\n    declaration: str\n    visibility: Visibility\n    mutability: Mutability\n    signature: str\n    selector: str\n    selector_bytes: bytes\n\n    def __init__(\n        self,\n        id: str,\n        description: str,\n        declaration: str,\n        visibility: Visibility,\n        mutability: Mutability,\n        signature: str,\n        selector: str,\n        selector_bytes: bytes,\n    ):\n        self.id = id\n        self.description = description\n        self.declaration = declaration\n        self.visibility = visibility\n        self.mutability = mutability\n        self.signature = signature\n        self.selector = selector\n        self.selector_bytes = selector_bytes\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Function\":\n        return Function(\n            d[\"id\"],\n            d[\"description\"],\n            d[\"declaration\"],\n            Visibility(d[\"visibility\"]),\n            Mutability(d[\"mutability\"]),\n            d[\"signature\"],\n            d[\"selector\"],\n            bytes(d[\"selectorBytes\"]),\n        )\n\n\nclass Cheatcode:\n    func: Function\n    group: str\n    status: str\n    safety: str\n\n    def __init__(self, func: Function, group: str, status: str, safety: str):\n        self.func = func\n        self.group = group\n        self.status = status\n        self.safety = safety\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Cheatcode\":\n        return Cheatcode(\n            Function.from_dict(d[\"func\"]),\n            str(d[\"group\"]),\n            str(d[\"status\"]),\n            str(d[\"safety\"]),\n        )\n\n\nclass Error:\n    name: str\n    description: str\n    declaration: str\n\n    def __init__(self, name: str, description: str, declaration: str):\n        self.name = name\n        self.description = description\n        self.declaration = declaration\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Error\":\n        return Error(**d)\n\n\nclass Event:\n    name: str\n    description: str\n    declaration: str\n\n    def __init__(self, name: str, description: str, declaration: str):\n        self.name = name\n        self.description = description\n        self.declaration = declaration\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Event\":\n        return Event(**d)\n\n\nclass EnumVariant:\n    name: str\n    description: str\n\n    def __init__(self, name: str, description: str):\n        self.name = name\n        self.description = description\n\n\nclass Enum:\n    name: str\n    description: str\n    variants: list[EnumVariant]\n\n    def __init__(self, name: str, description: str, variants: list[EnumVariant]):\n        self.name = name\n        self.description = description\n        self.variants = variants\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Enum\":\n        return Enum(\n            d[\"name\"],\n            d[\"description\"],\n            list(map(lambda v: EnumVariant(**v), d[\"variants\"])),\n        )\n\n\nclass StructField:\n    name: str\n    ty: str\n    description: str\n\n    def __init__(self, name: str, ty: str, description: str):\n        self.name = name\n        self.ty = ty\n        self.description = description\n\n\nclass Struct:\n    name: str\n    description: str\n    fields: list[StructField]\n\n    def __init__(self, name: str, description: str, fields: list[StructField]):\n        self.name = name\n        self.description = description\n        self.fields = fields\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Struct\":\n        return Struct(\n            d[\"name\"],\n            d[\"description\"],\n            list(map(lambda f: StructField(**f), d[\"fields\"])),\n        )\n\n\nclass Cheatcodes:\n    errors: list[Error]\n    events: list[Event]\n    enums: list[Enum]\n    structs: list[Struct]\n    cheatcodes: list[Cheatcode]\n\n    def __init__(\n        self,\n        errors: list[Error],\n        events: list[Event],\n        enums: list[Enum],\n        structs: list[Struct],\n        cheatcodes: list[Cheatcode],\n    ):\n        self.errors = errors\n        self.events = events\n        self.enums = enums\n        self.structs = structs\n        self.cheatcodes = cheatcodes\n\n    @staticmethod\n    def from_dict(d: dict) -> \"Cheatcodes\":\n        return Cheatcodes(\n            errors=[Error.from_dict(e) for e in d[\"errors\"]],\n            events=[Event.from_dict(e) for e in d[\"events\"]],\n            enums=[Enum.from_dict(e) for e in d[\"enums\"]],\n            structs=[Struct.from_dict(e) for e in d[\"structs\"]],\n            cheatcodes=[Cheatcode.from_dict(e) for e in d[\"cheatcodes\"]],\n        )\n\n    @staticmethod\n    def from_json(s) -> \"Cheatcodes\":\n        return Cheatcodes.from_dict(json.loads(s))\n\n    @staticmethod\n    def from_json_file(file_path: str) -> \"Cheatcodes\":\n        with open(file_path, \"r\") as f:\n            return Cheatcodes.from_dict(json.load(f))\n\n\nclass Item(PyEnum):\n    ERROR: str = \"error\"\n    EVENT: str = \"event\"\n    ENUM: str = \"enum\"\n    STRUCT: str = \"struct\"\n    FUNCTION: str = \"function\"\n\n\nclass ItemOrder:\n    _list: list[Item]\n\n    def __init__(self, list: list[Item]) -> None:\n        assert len(list) <= len(Item), \"list must not contain more items than Item\"\n        assert len(list) == len(set(list)), \"list must not contain duplicates\"\n        self._list = list\n        pass\n\n    def get_list(self) -> list[Item]:\n        return self._list\n\n    @staticmethod\n    def default() -> \"ItemOrder\":\n        return ItemOrder(\n            [\n                Item.ERROR,\n                Item.EVENT,\n                Item.ENUM,\n                Item.STRUCT,\n                Item.FUNCTION,\n            ]\n        )\n\n\nclass CheatcodesPrinter:\n    buffer: str\n\n    prelude: bool\n    spdx_identifier: str\n    solidity_requirement: str\n    abicoder_v2: bool\n\n    block_doc_style: bool\n\n    indent_level: int\n    _indent_str: str\n\n    nl_str: str\n\n    items_order: ItemOrder\n\n    def __init__(\n        self,\n        buffer: str = \"\",\n        prelude: bool = True,\n        spdx_identifier: str = \"UNLICENSED\",\n        solidity_requirement: str = \"\",\n        abicoder_pragma: bool = False,\n        block_doc_style: bool = False,\n        indent_level: int = 0,\n        indent_with: int | str = 4,\n        nl_str: str = \"\\n\",\n        items_order: ItemOrder = ItemOrder.default(),\n    ):\n        self.prelude = prelude\n        self.spdx_identifier = spdx_identifier\n        self.solidity_requirement = solidity_requirement\n        self.abicoder_v2 = abicoder_pragma\n        self.block_doc_style = block_doc_style\n        self.buffer = buffer\n        self.indent_level = indent_level\n        self.nl_str = nl_str\n\n        if isinstance(indent_with, int):\n            assert indent_with >= 0\n            self._indent_str = \" \" * indent_with\n        elif isinstance(indent_with, str):\n            self._indent_str = indent_with\n        else:\n            assert False, \"indent_with must be int or str\"\n\n        self.items_order = items_order\n\n    def finish(self) -> str:\n        ret = self.buffer.rstrip()\n        self.buffer = \"\"\n        return ret\n\n    def p_contract(self, contract: Cheatcodes, name: str, inherits: str = \"\"):\n        if self.prelude:\n            self.p_prelude(contract)\n\n        self._p_str(\"interface \")\n        name = name.strip()\n        if name != \"\":\n            self._p_str(name)\n            self._p_str(\" \")\n        if inherits != \"\":\n            self._p_str(\"is \")\n            self._p_str(inherits)\n            self._p_str(\" \")\n        self._p_str(\"{\")\n        self._p_nl()\n        self._with_indent(lambda: self._p_items(contract))\n        self._p_str(\"}\")\n        self._p_nl()\n\n    def _p_items(self, contract: Cheatcodes):\n        for item in self.items_order.get_list():\n            if item == Item.ERROR:\n                self.p_errors(contract.errors)\n            elif item == Item.EVENT:\n                self.p_events(contract.events)\n            elif item == Item.ENUM:\n                self.p_enums(contract.enums)\n            elif item == Item.STRUCT:\n                self.p_structs(contract.structs)\n            elif item == Item.FUNCTION:\n                self.p_functions(contract.cheatcodes)\n            else:\n                assert False, f\"unknown item {item}\"\n\n    def p_prelude(self, contract: Cheatcodes | None = None):\n        self._p_str(f\"// SPDX-License-Identifier: {self.spdx_identifier}\")\n        self._p_nl()\n\n        if self.solidity_requirement != \"\":\n            req = self.solidity_requirement\n        elif contract and len(contract.errors) > 0:\n            req = \">=0.8.4 <0.9.0\"\n        else:\n            req = \">=0.6.0 <0.9.0\"\n        self._p_str(f\"pragma solidity {req};\")\n        self._p_nl()\n\n        if self.abicoder_v2:\n            self._p_str(\"pragma experimental ABIEncoderV2;\")\n            self._p_nl()\n\n        self._p_nl()\n\n    def p_errors(self, errors: list[Error]):\n        for error in errors:\n            self._p_line(lambda: self.p_error(error))\n\n    def p_error(self, error: Error):\n        self._p_comment(error.description, doc=True)\n        self._p_line(lambda: self._p_str(error.declaration))\n\n    def p_events(self, events: list[Event]):\n        for event in events:\n            self._p_line(lambda: self.p_event(event))\n\n    def p_event(self, event: Event):\n        self._p_comment(event.description, doc=True)\n        self._p_line(lambda: self._p_str(event.declaration))\n\n    def p_enums(self, enums: list[Enum]):\n        for enum in enums:\n            self._p_line(lambda: self.p_enum(enum))\n\n    def p_enum(self, enum: Enum):\n        self._p_comment(enum.description, doc=True)\n        self._p_line(lambda: self._p_str(f\"enum {enum.name} {{\"))\n        self._with_indent(lambda: self.p_enum_variants(enum.variants))\n        self._p_line(lambda: self._p_str(\"}\"))\n\n    def p_enum_variants(self, variants: list[EnumVariant]):\n        for i, variant in enumerate(variants):\n            self._p_indent()\n            self._p_comment(variant.description)\n\n            self._p_indent()\n            self._p_str(variant.name)\n            if i < len(variants) - 1:\n                self._p_str(\",\")\n            self._p_nl()\n\n    def p_structs(self, structs: list[Struct]):\n        for struct in structs:\n            self._p_line(lambda: self.p_struct(struct))\n\n    def p_struct(self, struct: Struct):\n        self._p_comment(struct.description, doc=True)\n        self._p_line(lambda: self._p_str(f\"struct {struct.name} {{\"))\n        self._with_indent(lambda: self.p_struct_fields(struct.fields))\n        self._p_line(lambda: self._p_str(\"}\"))\n\n    def p_struct_fields(self, fields: list[StructField]):\n        for field in fields:\n            self._p_line(lambda: self.p_struct_field(field))\n\n    def p_struct_field(self, field: StructField):\n        self._p_comment(field.description)\n        self._p_indented(lambda: self._p_str(f\"{field.ty} {field.name};\"))\n\n    def p_functions(self, cheatcodes: list[Cheatcode]):\n        for cheatcode in cheatcodes:\n            self._p_line(lambda: self.p_function(cheatcode.func))\n\n    def p_function(self, func: Function):\n        self._p_comment(func.description, doc=True)\n        self._p_line(lambda: self._p_str(func.declaration))\n\n    def _p_comment(self, s: str, doc: bool = False):\n        s = s.strip()\n        if s == \"\":\n            return\n\n        s = map(lambda line: line.lstrip(), s.split(\"\\n\"))\n        if self.block_doc_style:\n            self._p_str(\"/*\")\n            if doc:\n                self._p_str(\"*\")\n            self._p_nl()\n            for line in s:\n                self._p_indent()\n                self._p_str(\" \")\n                if doc:\n                    self._p_str(\"* \")\n                self._p_str(line)\n                self._p_nl()\n            self._p_indent()\n            self._p_str(\" */\")\n            self._p_nl()\n        else:\n            first_line = True\n            for line in s:\n                if not first_line:\n                    self._p_indent()\n                first_line = False\n\n                if doc:\n                    self._p_str(\"/// \")\n                else:\n                    self._p_str(\"// \")\n                self._p_str(line)\n                self._p_nl()\n\n    def _with_indent(self, f: VoidFn):\n        self._inc_indent()\n        f()\n        self._dec_indent()\n\n    def _p_line(self, f: VoidFn):\n        self._p_indent()\n        f()\n        self._p_nl()\n\n    def _p_indented(self, f: VoidFn):\n        self._p_indent()\n        f()\n\n    def _p_indent(self):\n        for _ in range(self.indent_level):\n            self._p_str(self._indent_str)\n\n    def _p_nl(self):\n        self._p_str(self.nl_str)\n\n    def _p_str(self, txt: str):\n        self.buffer += txt\n\n    def _inc_indent(self):\n        self.indent_level += 1\n\n    def _dec_indent(self):\n        self.indent_level -= 1\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/Base.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\n    // console.sol and console2.sol work by executing a staticcall to this address.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    // Deterministic deployment address of the Multicall3 contract.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n    // The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/Script.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n// 💬 ABOUT\n// Forge Std's default Script.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheatsSafe} from \"./StdCheats.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorageSafe} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {ScriptBase} from \"./Base.sol\";\n\n// ⭐️ SCRIPT\nabstract contract Script is ScriptBase, StdChains, StdCheatsSafe, StdUtils {\n    // Note: IS_SCRIPT() must return true.\n    bool public IS_SCRIPT = true;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdAssertions.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdAssertions {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    event log(string);\n    event logs(bytes);\n\n    event log_address(address);\n    event log_bytes32(bytes32);\n    event log_int(int256);\n    event log_uint(uint256);\n    event log_bytes(bytes);\n    event log_string(string);\n\n    event log_named_address(string key, address val);\n    event log_named_bytes32(string key, bytes32 val);\n    event log_named_decimal_int(string key, int256 val, uint256 decimals);\n    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);\n    event log_named_int(string key, int256 val);\n    event log_named_uint(string key, uint256 val);\n    event log_named_bytes(string key, bytes val);\n    event log_named_string(string key, string val);\n\n    event log_array(uint256[] val);\n    event log_array(int256[] val);\n    event log_array(address[] val);\n    event log_named_array(string key, uint256[] val);\n    event log_named_array(string key, int256[] val);\n    event log_named_array(string key, address[] val);\n\n    bool private _failed;\n\n    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n    }\n\n    function fail() internal virtual {\n        vm.store(address(vm), bytes32(\"failed\"), bytes32(uint256(1)));\n        _failed = true;\n    }\n\n    function assertTrue(bool data) internal pure virtual {\n        vm.assertTrue(data);\n    }\n\n    function assertTrue(bool data, string memory err) internal pure virtual {\n        vm.assertTrue(data, err);\n    }\n\n    function assertFalse(bool data) internal pure virtual {\n        vm.assertFalse(data);\n    }\n\n    function assertFalse(bool data, string memory err) internal pure virtual {\n        vm.assertFalse(data, err);\n    }\n\n    function assertEq(bool left, bool right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bool left, bool right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(uint256 left, uint256 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals);\n    }\n\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals, err);\n    }\n\n    function assertEq(int256 left, int256 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals);\n    }\n\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertEqDecimal(left, right, decimals, err);\n    }\n\n    function assertEq(address left, address right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(address left, address right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes32 left, bytes32 right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq32(bytes32 left, bytes32 right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        assertEq(left, right, err);\n    }\n\n    function assertEq(string memory left, string memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(string memory left, string memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes memory left, bytes memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(address[] memory left, address[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(string[] memory left, string[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {\n        vm.assertEq(left, right);\n    }\n\n    function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {\n        vm.assertEq(left, right, err);\n    }\n\n    // Legacy helper\n    function assertEqUint(uint256 left, uint256 right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertNotEq(bool left, bool right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bool left, bool right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(uint256 left, uint256 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals);\n    }\n\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertNotEqDecimal(left, right, decimals, err);\n    }\n\n    function assertNotEq(int256 left, int256 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals);\n    }\n\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertNotEqDecimal(left, right, decimals, err);\n    }\n\n    function assertNotEq(address left, address right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(address left, address right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes32 left, bytes32 right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq32(bytes32 left, bytes32 right) internal pure virtual {\n        assertNotEq(left, right);\n    }\n\n    function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {\n        assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(string memory left, string memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(string memory left, string memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes memory left, bytes memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bool[] memory left, bool[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(uint256[] memory left, uint256[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(int256[] memory left, int256[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(address[] memory left, address[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(string[] memory left, string[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertNotEq(bytes[] memory left, bytes[] memory right) internal pure virtual {\n        vm.assertNotEq(left, right);\n    }\n\n    function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {\n        vm.assertNotEq(left, right, err);\n    }\n\n    function assertLt(uint256 left, uint256 right) internal pure virtual {\n        vm.assertLt(left, right);\n    }\n\n    function assertLt(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertLt(left, right, err);\n    }\n\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals);\n    }\n\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals, err);\n    }\n\n    function assertLt(int256 left, int256 right) internal pure virtual {\n        vm.assertLt(left, right);\n    }\n\n    function assertLt(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertLt(left, right, err);\n    }\n\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals);\n    }\n\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLtDecimal(left, right, decimals, err);\n    }\n\n    function assertGt(uint256 left, uint256 right) internal pure virtual {\n        vm.assertGt(left, right);\n    }\n\n    function assertGt(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertGt(left, right, err);\n    }\n\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals);\n    }\n\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals, err);\n    }\n\n    function assertGt(int256 left, int256 right) internal pure virtual {\n        vm.assertGt(left, right);\n    }\n\n    function assertGt(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertGt(left, right, err);\n    }\n\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals);\n    }\n\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGtDecimal(left, right, decimals, err);\n    }\n\n    function assertLe(uint256 left, uint256 right) internal pure virtual {\n        vm.assertLe(left, right);\n    }\n\n    function assertLe(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertLe(left, right, err);\n    }\n\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals);\n    }\n\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals, err);\n    }\n\n    function assertLe(int256 left, int256 right) internal pure virtual {\n        vm.assertLe(left, right);\n    }\n\n    function assertLe(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertLe(left, right, err);\n    }\n\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals);\n    }\n\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertLeDecimal(left, right, decimals, err);\n    }\n\n    function assertGe(uint256 left, uint256 right) internal pure virtual {\n        vm.assertGe(left, right);\n    }\n\n    function assertGe(uint256 left, uint256 right, string memory err) internal pure virtual {\n        vm.assertGe(left, right, err);\n    }\n\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals);\n    }\n\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals, err);\n    }\n\n    function assertGe(int256 left, int256 right) internal pure virtual {\n        vm.assertGe(left, right);\n    }\n\n    function assertGe(int256 left, int256 right, string memory err) internal pure virtual {\n        vm.assertGe(left, right, err);\n    }\n\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals);\n    }\n\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {\n        vm.assertGeDecimal(left, right, decimals, err);\n    }\n\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta);\n    }\n\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbs(left, right, maxDelta, err);\n    }\n\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);\n    }\n\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);\n    }\n\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta);\n    }\n\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal pure virtual {\n        vm.assertApproxEqAbs(left, right, maxDelta, err);\n    }\n\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);\n    }\n\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err)\n        internal\n        pure\n        virtual\n    {\n        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);\n    }\n\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }\n\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }\n\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }\n\n    function assertApproxEqRel(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }\n\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }\n\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }\n\n    // Inherited from DSTest, not used but kept for backwards-compatibility\n    function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {\n        return keccak256(left) == keccak256(right);\n    }\n\n    function assertEq0(bytes memory left, bytes memory right) internal pure virtual {\n        assertEq(left, right);\n    }\n\n    function assertEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        assertEq(left, right, err);\n    }\n\n    function assertNotEq0(bytes memory left, bytes memory right) internal pure virtual {\n        assertNotEq(left, right);\n    }\n\n    function assertNotEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {\n        assertNotEq(left, right, err);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {\n        assertEqCall(target, callDataA, target, callDataB, true);\n    }\n\n    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)\n        internal\n        virtual\n    {\n        assertEqCall(targetA, callDataA, targetB, callDataB, true);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)\n        internal\n        virtual\n    {\n        assertEqCall(target, callDataA, target, callDataB, strictRevertData);\n    }\n\n    function assertEqCall(\n        address targetA,\n        bytes memory callDataA,\n        address targetB,\n        bytes memory callDataB,\n        bool strictRevertData\n    ) internal virtual {\n        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);\n        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);\n\n        if (successA && successB) {\n            assertEq(returnDataA, returnDataB, \"Call return data does not match\");\n        }\n\n        if (!successA && !successB && strictRevertData) {\n            assertEq(returnDataA, returnDataB, \"Call revert data does not match\");\n        }\n\n        if (!successA && successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call revert data\", returnDataA);\n            emit log_named_bytes(\" Right call return data\", returnDataB);\n            revert(\"assertion failed\");\n        }\n\n        if (successA && !successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call return data\", returnDataA);\n            emit log_named_bytes(\" Right call revert data\", returnDataB);\n            revert(\"assertion failed\");\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdChains.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve the RPC URL for `mainnet`:\n *   - If you have specified data with `setChain`, it will return that.\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\n *   - If neither of the above conditions is met, the default data is returned.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private stdChainsInitialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initializeStdChains();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initializeStdChains() private {\n        if (stdChainsInitialized) return;\n\n        stdChainsInitialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\"holesky\", ChainData(\"Holesky\", 17000, \"https://rpc.holesky.ethpandaops.io\"));\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\n            \"optimism_sepolia\", ChainData(\"Optimism Sepolia\", 11155420, \"https://sepolia.optimism.io\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_sepolia\", ChainData(\"Arbitrum One Sepolia\", 421614, \"https://sepolia-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_amoy\", ChainData(\"Polygon Amoy\", 80002, \"https://rpc-amoy.polygon.technology\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\n        );\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\"base_sepolia\", ChainData(\"Base Sepolia\", 84532, \"https://sepolia.base.org\"));\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\n        setChainWithDefaultRpcUrl(\"blast_sepolia\", ChainData(\"Blast Sepolia\", 168587773, \"https://sepolia.blast.io\"));\n        setChainWithDefaultRpcUrl(\"blast\", ChainData(\"Blast\", 81457, \"https://rpc.blast.io\"));\n        setChainWithDefaultRpcUrl(\"fantom_opera\", ChainData(\"Fantom Opera\", 250, \"https://rpc.ankr.com/fantom/\"));\n        setChainWithDefaultRpcUrl(\n            \"fantom_opera_testnet\", ChainData(\"Fantom Opera Testnet\", 4002, \"https://rpc.ankr.com/fantom_testnet/\")\n        );\n        setChainWithDefaultRpcUrl(\"fraxtal\", ChainData(\"Fraxtal\", 252, \"https://rpc.frax.com\"));\n        setChainWithDefaultRpcUrl(\"fraxtal_testnet\", ChainData(\"Fraxtal Testnet\", 2522, \"https://rpc.testnet.frax.com\"));\n        setChainWithDefaultRpcUrl(\n            \"berachain_bartio_testnet\", ChainData(\"Berachain bArtio Testnet\", 80084, \"https://bartio.rpc.berachain.com\")\n        );\n        setChainWithDefaultRpcUrl(\"flare\", ChainData(\"Flare\", 14, \"https://flare-api.flare.network/ext/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"flare_coston2\", ChainData(\"Flare Coston2\", 114, \"https://coston2-api.flare.network/ext/C/rpc\")\n        );\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdCheats.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {console2} from \"./console2.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    struct Account {\n        address addr;\n        uint256 key;\n    }\n\n    enum AddressType {\n        Payable,\n        NonPayable,\n        ZeroAddress,\n        Precompile,\n        ForgeAddress\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n    // backwards compatibility, since this name was used in the original PR which already has\n    // a release. This function can be removed in a future release once we want a breaking change.\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\n        if (addressType == AddressType.Payable) {\n            assumeNotPayable(addr);\n        } else if (addressType == AddressType.NonPayable) {\n            assumePayable(addr);\n        } else if (addressType == AddressType.ZeroAddress) {\n            assumeNotZeroAddress(addr);\n        } else if (addressType == AddressType.Precompile) {\n            assumeNotPrecompile(addr);\n        } else if (addressType == AddressType.ForgeAddress) {\n            assumeNotForgeAddress(addr);\n        }\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3,\n        AddressType addressType4\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n        assumeAddressIsNot(addr, addressType4);\n    }\n\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n    // `addr` and checking the `success` return value.\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used.\n    function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }\n\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used. See the\n    // `_isPayable` method for more information.\n    function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }\n\n    function assumeNotPayable(address addr) internal virtual {\n        vm.assume(!_isPayable(addr));\n    }\n\n    function assumeNotZeroAddress(address addr) internal pure virtual {\n        vm.assume(addr != address(0));\n    }\n\n    function assumeNotPrecompile(address addr) internal pure virtual {\n        assumeNotPrecompile(addr, _pureChainId());\n    }\n\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These are reserved by Ethereum and may be on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0xff));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function assumeNotForgeAddress(address addr) internal pure virtual {\n        // vm, console, and Create2Deployer addresses\n        vm.assume(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // Destroys an account immediately, sending the balance to beneficiary.\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n    // only after tx ends, this will run immediately.\n    function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }\n\n    // creates a struct containing both a labeled address and the corresponding private key\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    function changePrank(address msgSender, address txOrigin) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender, txOrigin);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) =\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n\n    function deployCodeTo(string memory what, address where) internal virtual {\n        deployCodeTo(what, \"\", 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\n        deployCodeTo(what, args, 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\n        bytes memory creationCode = vm.getCode(what);\n        vm.etch(where, abi.encodePacked(creationCode, args));\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        vm.etch(where, runtimeBytecode);\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n    function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdError.sol": "// SPDX-License-Identifier: MIT\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdError {\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdInvariant.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nabstract contract StdInvariant {\n    struct FuzzSelector {\n        address addr;\n        bytes4[] selectors;\n    }\n\n    struct FuzzArtifactSelector {\n        string artifact;\n        bytes4[] selectors;\n    }\n\n    struct FuzzInterface {\n        address addr;\n        string[] artifacts;\n    }\n\n    address[] private _excludedContracts;\n    address[] private _excludedSenders;\n    address[] private _targetedContracts;\n    address[] private _targetedSenders;\n\n    string[] private _excludedArtifacts;\n    string[] private _targetedArtifacts;\n\n    FuzzArtifactSelector[] private _targetedArtifactSelectors;\n\n    FuzzSelector[] private _excludedSelectors;\n    FuzzSelector[] private _targetedSelectors;\n\n    FuzzInterface[] private _targetedInterfaces;\n\n    // Functions for users:\n    // These are intended to be called in tests.\n\n    function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }\n\n    function excludeSelector(FuzzSelector memory newExcludedSelector_) internal {\n        _excludedSelectors.push(newExcludedSelector_);\n    }\n\n    function excludeSender(address newExcludedSender_) internal {\n        _excludedSenders.push(newExcludedSender_);\n    }\n\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\n        _excludedArtifacts.push(newExcludedArtifact_);\n    }\n\n    function targetArtifact(string memory newTargetedArtifact_) internal {\n        _targetedArtifacts.push(newTargetedArtifact_);\n    }\n\n    function targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_) internal {\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\n    }\n\n    function targetContract(address newTargetedContract_) internal {\n        _targetedContracts.push(newTargetedContract_);\n    }\n\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\n        _targetedSelectors.push(newTargetedSelector_);\n    }\n\n    function targetSender(address newTargetedSender_) internal {\n        _targetedSenders.push(newTargetedSender_);\n    }\n\n    function targetInterface(FuzzInterface memory newTargetedInterface_) internal {\n        _targetedInterfaces.push(newTargetedInterface_);\n    }\n\n    // Functions for forge:\n    // These are called by forge to run invariant tests and don't need to be called in tests.\n\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n    function excludeSelectors() public view returns (FuzzSelector[] memory excludedSelectors_) {\n        excludedSelectors_ = _excludedSelectors;\n    }\n\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n    function targetArtifactSelectors() public view returns (FuzzArtifactSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdJson.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"<some_path>\");\n// json.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function keyExists(string memory json, string memory key) internal view returns (bool) {\n        return vm.keyExistsJson(json, key);\n    }\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function readUintOr(string memory json, string memory key, uint256 defaultValue) internal view returns (uint256) {\n        return keyExists(json, key) ? readUint(json, key) : defaultValue;\n    }\n\n    function readUintArrayOr(string memory json, string memory key, uint256[] memory defaultValue)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        return keyExists(json, key) ? readUintArray(json, key) : defaultValue;\n    }\n\n    function readIntOr(string memory json, string memory key, int256 defaultValue) internal view returns (int256) {\n        return keyExists(json, key) ? readInt(json, key) : defaultValue;\n    }\n\n    function readIntArrayOr(string memory json, string memory key, int256[] memory defaultValue)\n        internal\n        view\n        returns (int256[] memory)\n    {\n        return keyExists(json, key) ? readIntArray(json, key) : defaultValue;\n    }\n\n    function readBytes32Or(string memory json, string memory key, bytes32 defaultValue)\n        internal\n        view\n        returns (bytes32)\n    {\n        return keyExists(json, key) ? readBytes32(json, key) : defaultValue;\n    }\n\n    function readBytes32ArrayOr(string memory json, string memory key, bytes32[] memory defaultValue)\n        internal\n        view\n        returns (bytes32[] memory)\n    {\n        return keyExists(json, key) ? readBytes32Array(json, key) : defaultValue;\n    }\n\n    function readStringOr(string memory json, string memory key, string memory defaultValue)\n        internal\n        view\n        returns (string memory)\n    {\n        return keyExists(json, key) ? readString(json, key) : defaultValue;\n    }\n\n    function readStringArrayOr(string memory json, string memory key, string[] memory defaultValue)\n        internal\n        view\n        returns (string[] memory)\n    {\n        return keyExists(json, key) ? readStringArray(json, key) : defaultValue;\n    }\n\n    function readAddressOr(string memory json, string memory key, address defaultValue)\n        internal\n        view\n        returns (address)\n    {\n        return keyExists(json, key) ? readAddress(json, key) : defaultValue;\n    }\n\n    function readAddressArrayOr(string memory json, string memory key, address[] memory defaultValue)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return keyExists(json, key) ? readAddressArray(json, key) : defaultValue;\n    }\n\n    function readBoolOr(string memory json, string memory key, bool defaultValue) internal view returns (bool) {\n        return keyExists(json, key) ? readBool(json, key) : defaultValue;\n    }\n\n    function readBoolArrayOr(string memory json, string memory key, bool[] memory defaultValue)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        return keyExists(json, key) ? readBoolArray(json, key) : defaultValue;\n    }\n\n    function readBytesOr(string memory json, string memory key, bytes memory defaultValue)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return keyExists(json, key) ? readBytes(json, key) : defaultValue;\n    }\n\n    function readBytesArrayOr(string memory json, string memory key, bytes[] memory defaultValue)\n        internal\n        view\n        returns (bytes[] memory)\n    {\n        return keyExists(json, key) ? readBytesArray(json, key) : defaultValue;\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdMath.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdStorage.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct FindData {\n    uint256 slot;\n    uint256 offsetLeft;\n    uint256 offsetRight;\n    bool found;\n}\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n    bool _enable_packed_slots;\n    bytes _calldata;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {\n        if (self._calldata.length == 0) {\n            return flatten(self._keys);\n        } else {\n            return self._calldata;\n        }\n    }\n\n    // Calls target contract with configured parameters\n    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {\n        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));\n        (bool success, bytes memory rdat) = self._target.staticcall(cald);\n        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);\n\n        return (success, result);\n    }\n\n    // Tries mutating slot value to determine if the targeted value is stored in it.\n    // If current value is 0, then we are setting slot value to type(uint256).max\n    // Otherwise, we set it to 0. That way, return value should always be affected.\n    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n        (bool success, bytes32 prevReturnValue) = callTarget(self);\n\n        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);\n        vm.store(self._target, slot, testVal);\n\n        (, bytes32 newReturnValue) = callTarget(self);\n\n        vm.store(self._target, slot, prevSlotValue);\n\n        return (success && (prevReturnValue != newReturnValue));\n    }\n\n    // Tries setting one of the bits in slot to 1 until return value changes.\n    // Index of resulted bit is an offset packed slot has from left/right side\n    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {\n        for (uint256 offset = 0; offset < 256; offset++) {\n            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);\n            vm.store(self._target, slot, bytes32(valueToPut));\n\n            (bool success, bytes32 data) = callTarget(self);\n\n            if (success && (uint256(data) > 0)) {\n                return (true, offset);\n            }\n        }\n        return (false, 0);\n    }\n\n    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n\n        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);\n        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);\n\n        // `findOffset` may mutate slot value, so we are setting it to initial value\n        vm.store(self._target, slot, prevSlotValue);\n        return (foundLeft && foundRight, offsetLeft, offsetRight);\n    }\n\n    function find(StdStorage storage self) internal returns (FindData storage) {\n        return find(self, true);\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = getCallParams(self);\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            if (_clear) {\n                clear(self);\n            }\n            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        }\n        vm.record();\n        (, bytes32 callResult) = callTarget(self);\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n\n        if (reads.length == 0) {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        } else {\n            for (uint256 i = reads.length; --i >= 0;) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n\n                if (!checkSlotMutatesCall(self, reads[i])) {\n                    continue;\n                }\n\n                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);\n\n                if (self._enable_packed_slots) {\n                    bool found;\n                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);\n                    if (!found) {\n                        continue;\n                    }\n                }\n\n                // Check that value between found offsets is equal to the current call result\n                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;\n\n                if (uint256(callResult) != curVal) {\n                    continue;\n                }\n\n                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));\n                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =\n                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);\n                break;\n            }\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        if (_clear) {\n            clear(self);\n        }\n        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        self._calldata = _calldata;\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        self._enable_packed_slots = true;\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        FindData storage data = find(self, false);\n        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);\n        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;\n        clear(self);\n        return abi.encode(value);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        return (uint256(parent_slot), key);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        bool found;\n        bytes32 root_slot;\n        bytes32 parent_slot;\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        while (found) {\n            root_slot = parent_slot;\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\n        }\n        return uint256(root_slot);\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n    function clear(StdStorage storage self) internal {\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n        delete self._enable_packed_slots;\n        delete self._calldata;\n    }\n\n    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`\n    // (slotValue & mask) >> offsetRight will be the value of the given packed variable\n    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {\n        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;\n        // using assembly because (1 << 256) causes overflow\n        assembly {\n            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))\n        }\n    }\n\n    // Returns slot value with updated packed variable.\n    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)\n        internal\n        pure\n        returns (bytes32 newValue)\n    {\n        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return find(self, true);\n    }\n\n    function find(StdStorage storage self, bool _clear) internal returns (uint256) {\n        return stdStorageSafe.find(self, _clear).slot;\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_calldata(self, _calldata);\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        return stdStorageSafe.enable_packed_slots(self);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function clear(StdStorage storage self) internal {\n        stdStorageSafe.clear(self);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write_int(StdStorage storage self, int256 val) internal {\n        checked_write(self, bytes32(uint256(val)));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = stdStorageSafe.getCallParams(self);\n\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            find(self, false);\n        }\n        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        if ((data.offsetLeft + data.offsetRight) > 0) {\n            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));\n            require(\n                uint256(set) < maxVal,\n                string(\n                    abi.encodePacked(\n                        \"stdStorage find(StdStorage): Packed slot. We can't fit value greater than \",\n                        vm.toString(maxVal)\n                    )\n                )\n            );\n        }\n        bytes32 curVal = vm.load(who, bytes32(data.slot));\n        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);\n\n        vm.store(who, bytes32(data.slot), valToSet);\n\n        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);\n\n        if (!success || callResult != set) {\n            vm.store(who, bytes32(data.slot), curVal);\n            revert(\"stdStorage find(StdStorage): Failed to write value.\");\n        }\n        clear(self);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        return stdStorageSafe.parent(self);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.root(self);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdStyle.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdToml.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing TOML files\n// To parse:\n// ```\n// using stdToml for string;\n// string memory toml = vm.readFile(\"<some_path>\");\n// toml.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdToml for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdToml {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function keyExists(string memory toml, string memory key) internal view returns (bool) {\n        return vm.keyExistsToml(toml, key);\n    }\n\n    function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseToml(toml, key);\n    }\n\n    function readUint(string memory toml, string memory key) internal pure returns (uint256) {\n        return vm.parseTomlUint(toml, key);\n    }\n\n    function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseTomlUintArray(toml, key);\n    }\n\n    function readInt(string memory toml, string memory key) internal pure returns (int256) {\n        return vm.parseTomlInt(toml, key);\n    }\n\n    function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseTomlIntArray(toml, key);\n    }\n\n    function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {\n        return vm.parseTomlBytes32(toml, key);\n    }\n\n    function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseTomlBytes32Array(toml, key);\n    }\n\n    function readString(string memory toml, string memory key) internal pure returns (string memory) {\n        return vm.parseTomlString(toml, key);\n    }\n\n    function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {\n        return vm.parseTomlStringArray(toml, key);\n    }\n\n    function readAddress(string memory toml, string memory key) internal pure returns (address) {\n        return vm.parseTomlAddress(toml, key);\n    }\n\n    function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {\n        return vm.parseTomlAddressArray(toml, key);\n    }\n\n    function readBool(string memory toml, string memory key) internal pure returns (bool) {\n        return vm.parseTomlBool(toml, key);\n    }\n\n    function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseTomlBoolArray(toml, key);\n    }\n\n    function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseTomlBytes(toml, key);\n    }\n\n    function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseTomlBytesArray(toml, key);\n    }\n\n    function readUintOr(string memory toml, string memory key, uint256 defaultValue) internal view returns (uint256) {\n        return keyExists(toml, key) ? readUint(toml, key) : defaultValue;\n    }\n\n    function readUintArrayOr(string memory toml, string memory key, uint256[] memory defaultValue)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        return keyExists(toml, key) ? readUintArray(toml, key) : defaultValue;\n    }\n\n    function readIntOr(string memory toml, string memory key, int256 defaultValue) internal view returns (int256) {\n        return keyExists(toml, key) ? readInt(toml, key) : defaultValue;\n    }\n\n    function readIntArrayOr(string memory toml, string memory key, int256[] memory defaultValue)\n        internal\n        view\n        returns (int256[] memory)\n    {\n        return keyExists(toml, key) ? readIntArray(toml, key) : defaultValue;\n    }\n\n    function readBytes32Or(string memory toml, string memory key, bytes32 defaultValue)\n        internal\n        view\n        returns (bytes32)\n    {\n        return keyExists(toml, key) ? readBytes32(toml, key) : defaultValue;\n    }\n\n    function readBytes32ArrayOr(string memory toml, string memory key, bytes32[] memory defaultValue)\n        internal\n        view\n        returns (bytes32[] memory)\n    {\n        return keyExists(toml, key) ? readBytes32Array(toml, key) : defaultValue;\n    }\n\n    function readStringOr(string memory toml, string memory key, string memory defaultValue)\n        internal\n        view\n        returns (string memory)\n    {\n        return keyExists(toml, key) ? readString(toml, key) : defaultValue;\n    }\n\n    function readStringArrayOr(string memory toml, string memory key, string[] memory defaultValue)\n        internal\n        view\n        returns (string[] memory)\n    {\n        return keyExists(toml, key) ? readStringArray(toml, key) : defaultValue;\n    }\n\n    function readAddressOr(string memory toml, string memory key, address defaultValue)\n        internal\n        view\n        returns (address)\n    {\n        return keyExists(toml, key) ? readAddress(toml, key) : defaultValue;\n    }\n\n    function readAddressArrayOr(string memory toml, string memory key, address[] memory defaultValue)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return keyExists(toml, key) ? readAddressArray(toml, key) : defaultValue;\n    }\n\n    function readBoolOr(string memory toml, string memory key, bool defaultValue) internal view returns (bool) {\n        return keyExists(toml, key) ? readBool(toml, key) : defaultValue;\n    }\n\n    function readBoolArrayOr(string memory toml, string memory key, bool[] memory defaultValue)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        return keyExists(toml, key) ? readBoolArray(toml, key) : defaultValue;\n    }\n\n    function readBytesOr(string memory toml, string memory key, bytes memory defaultValue)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return keyExists(toml, key) ? readBytes(toml, key) : defaultValue;\n    }\n\n    function readBytesArrayOr(string memory toml, string memory key, bytes[] memory defaultValue)\n        internal\n        view\n        returns (bytes[] memory)\n    {\n        return keyExists(toml, key) ? readBytesArray(toml, key) : defaultValue;\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeToml(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeToml(jsonKey, path, valueKey);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/StdUtils.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {MockERC20} from \"./mocks/MockERC20.sol\";\nimport {MockERC721} from \"./mocks/MockERC721.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", result);\n    }\n\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns an initialized mock ERC20 contract\n    function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }\n\n    /// @dev returns an initialized mock ERC721 contract\n    function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/Test.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\n// 💬 ABOUT\n// Forge Std's default Test.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdAssertions} from \"./StdAssertions.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheats} from \"./StdCheats.sol\";\nimport {stdError} from \"./StdError.sol\";\nimport {StdInvariant} from \"./StdInvariant.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {stdToml} from \"./StdToml.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {Vm} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {TestBase} from \"./Base.sol\";\n\n// ⭐️ TEST\nabstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {\n    // Note: IS_TEST() must return true.\n    bool public IS_TEST = true;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/Vm.sol": "// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from onchain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// Forge execution contexts.\n    enum ForgeContext {\n        // Test group execution context (test, coverage or snapshot).\n        TestGroup,\n        // `forge test` execution context.\n        Test,\n        // `forge coverage` execution context.\n        Coverage,\n        // `forge snapshot` execution context.\n        Snapshot,\n        // Script group execution context (dry run, broadcast or resume).\n        ScriptGroup,\n        // `forge script` execution context.\n        ScriptDryRun,\n        // `forge script --broadcast` execution context.\n        ScriptBroadcast,\n        // `forge script --resume` execution context.\n        ScriptResume,\n        // Unknown `forge` execution context.\n        Unknown\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    /// Gas used. Returned by `lastCallGas`.\n    struct Gas {\n        // The gas limit of the call.\n        uint64 gasLimit;\n        // The total gas used.\n        uint64 gasTotalUsed;\n        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>\n        uint64 gasMemoryUsed;\n        // The amount of gas refunded.\n        int64 gasRefunded;\n        // The amount of gas remaining.\n        uint64 gasRemaining;\n    }\n\n    /// The result of the `stopDebugTraceRecording` call\n    struct DebugStep {\n        // The stack before executing the step of the run.\n        // stack\\[0\\] represents the top of the stack.\n        // and only stack data relevant to the opcode execution is contained.\n        uint256[] stack;\n        // The memory input data before executing the step of the run.\n        // only input data relevant to the opcode execution is contained.\n        // e.g. for MLOAD, it will have memory\\[offset:offset+32\\] copied here.\n        // the offset value can be get by the stack data.\n        bytes memoryInput;\n        // The opcode that was accessed.\n        uint8 opcode;\n        // The call depth of the step.\n        uint64 depth;\n        // Whether the call end up with out of gas error.\n        bool isOutOfGas;\n        // The contract address where the opcode is running\n        address contractAddr;\n    }\n\n    // ======== Crypto ========\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derives secp256r1 public key from the provided `privateKey`.\n    function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Derive a set number of wallets from a mnemonic at the derivation path `m/44'/60'/0'/0/{0..count}`.\n    ///\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\n    function rememberKeys(string calldata mnemonic, string calldata derivationPath, uint32 count)\n        external\n        returns (address[] memory keyAddrs);\n\n    /// Derive a set number of wallets from a mnemonic in the specified language at the derivation path `m/44'/60'/0'/0/{0..count}`.\n    ///\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\n    function rememberKeys(\n        string calldata mnemonic,\n        string calldata derivationPath,\n        string calldata language,\n        uint32 count\n    ) external returns (address[] memory keyAddrs);\n\n    /// Signs data with a `Wallet`.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and returns true if it exists, else returns false.\n    function envExists(string calldata name) external view returns (bool result);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Returns true if `forge` command was executed in given context.\n    function isContext(ForgeContext context) external view returns (bool result);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.blobbasefee`.\n    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlobBaseFee() external view returns (uint256 blobBaseFee);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Get the nonce of a `Wallet`.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Gets the gas used in the last call from the callee perspective.\n    function lastCallGas() external view returns (Gas memory gas);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Reset gas metering (i.e. gas usage is set to gas limit).\n    function resetGasMetering() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Performs an Ethereum JSON-RPC request to the given endpoint.\n    function rpc(string calldata urlOrAlias, string calldata method, string calldata params)\n        external\n        returns (bytes memory data);\n\n    /// Records the debug trace during the run.\n    function startDebugTraceRecording() external;\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Stop debug trace recording and returns the recorded debug trace.\n    function stopAndReturnDebugTraceRecording() external returns (DebugStep[] memory step);\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function deployCode(string calldata artifactPath) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs)\n        external\n        returns (address deployedAddress);\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the artifact path from code (aka. creation code).\n    function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);\n\n    /// Gets the artifact path from deployed code (aka. runtime code).\n    function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Prompts the user for a string value in the terminal.\n    function prompt(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for an address in the terminal.\n    function promptAddress(string calldata promptText) external returns (address);\n\n    /// Prompts the user for a hidden string value in the terminal.\n    function promptSecret(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for hidden uint256 in the terminal (usually pk).\n    function promptSecretUint(string calldata promptText) external returns (uint256);\n\n    /// Prompts the user for uint256 in the terminal.\n    function promptUint(string calldata promptText) external returns (uint256);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(string calldata typeDescription, bytes calldata value)\n        external\n        pure\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(\n        string calldata objectKey,\n        string calldata valueKey,\n        string calldata typeDescription,\n        bytes calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    // ======== Scripting ========\n\n    /// Takes a signed transaction and broadcasts it to the network.\n    function broadcastRawTransaction(bytes calldata data) external;\n\n    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Returns addresses of available unlocked wallets in the script environment.\n    function getScriptWallets() external returns (address[] memory wallets);\n\n    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    /// Returns addresses of available unlocked wallets in the script environment.\n    function getWallets() external returns (address[] memory wallets);\n\n    // ======== String ========\n\n    /// Returns the index of the first occurrence of a `key` in an `input` string.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\n    /// Returns 0 in case of an empty `key`.\n    function indexOf(string calldata input, string calldata key) external pure returns (uint256);\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverted.\n    function assumeNoRevert() external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external pure;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external pure;\n\n    /// Returns the Foundry version.\n    /// Format: <cargo_version>+<git_sha>+<build_timestamp>\n    /// Sample output: 0.2.0+faa94c384+202407110019\n    /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.\n    /// For reliable version comparisons, use YYYYMMDD0000 format (e.g., >= 202407110000)\n    /// to compare timestamps while ignoring minor time differences.\n    function getFoundryVersion() external view returns (string memory version);\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.\n    function parseTomlType(string calldata toml, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Utility cheatcode to copy storage of `from` contract to another `to` contract.\n    function copyStorage(address from, address to) external;\n\n    /// Returns ENS namehash for provided string.\n    function ensNamehash(string calldata name) external pure returns (bytes32);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Pauses collection of call traces. Useful in cases when you want to skip tracing of\n    /// complex calls which are not useful for debugging.\n    function pauseTracing() external view;\n\n    /// Returns a random `address`.\n    function randomAddress() external returns (address);\n\n    /// Returns a random `bool`.\n    function randomBool() external view returns (bool);\n\n    /// Returns a random byte array value of the given length.\n    function randomBytes(uint256 len) external view returns (bytes memory);\n\n    /// Returns a random fixed-size byte array of length 4.\n    function randomBytes4() external view returns (bytes4);\n\n    /// Returns a random fixed-size byte array of length 8.\n    function randomBytes8() external view returns (bytes8);\n\n    /// Returns a random `int256` value.\n    function randomInt() external view returns (int256);\n\n    /// Returns a random `int256` value of given bits.\n    function randomInt(uint256 bits) external view returns (int256);\n\n    /// Returns a random uint256 value.\n    function randomUint() external returns (uint256);\n\n    /// Returns random uint256 value between the provided range (=min..=max).\n    function randomUint(uint256 min, uint256 max) external returns (uint256);\n\n    /// Returns a random `uint256` value of given bits.\n    function randomUint(uint256 bits) external view returns (uint256);\n\n    /// Unpauses collection of call traces.\n    function resumeTracing() external view;\n\n    /// Utility cheatcode to set arbitrary storage for given target address.\n    function setArbitraryStorage(address target) external;\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.blobbasefee`\n    function blobBaseFee(uint256 newBlobBaseFee) external;\n\n    /// Sets the blobhashes in the transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function blobhashes(bytes32[] calldata hashes) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Clones a source account code, state, balance and nonce to a target account and updates in-memory EVM state.\n    function cloneAccount(address source, address target) external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteStateSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Gets the blockhashes from the current transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function getBlobhashes() external view returns (bytes32[] memory hashes);\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory EVM state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks multiple calls to an address, returning specified data for each call.\n    function mockCalls(address callee, bytes calldata data, bytes[] calldata returnData) external;\n\n    /// Mocks multiple calls to an address with a specific `msg.value`, returning specified data for each call.\n    function mockCalls(address callee, uint256 msgValue, bytes calldata data, bytes[] calldata returnData) external;\n\n    /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls\n    /// `target` with the same calldata. This functionality is similar to a delegate call made to\n    /// `target` contract from `callee`.\n    /// Can be used to substitute a call to a function with another implementation that captures\n    /// the primary logic of the original function but is easier to reason about.\n    /// If calldata is not a strict match then partial match by selector is attempted.\n    function mockFunction(address callee, address target, bytes calldata data) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(uint256 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.\n    function revertToState(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Set blockhash for the current block.\n    /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.\n    function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot capture the gas usage of the last call by name from the callee perspective.\n    function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);\n\n    /// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.\n    function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertToState`.\n    function snapshotState() external returns (uint256 snapshotId);\n\n    /// Snapshot capture an arbitrary numerical value by name.\n    /// The group name is derived from the contract name.\n    function snapshotValue(string calldata name, uint256 value) external;\n\n    /// Snapshot capture an arbitrary numerical value by name in a group.\n    function snapshotValue(string calldata group, string calldata name, uint256 value) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Start a snapshot capture of the current gas usage by name.\n    /// The group name is derived from the contract name.\n    function startSnapshotGas(string calldata name) external;\n\n    /// Start a snapshot capture of the current gas usage by name in a group.\n    function startSnapshotGas(string calldata group, string calldata name) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.\n    function stopSnapshotGas() external returns (uint256 gasUsed);\n\n    /// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.\n    /// The group name is derived from the contract name.\n    function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);\n\n    /// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.\n    function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    /// `deleteSnapshot` is being deprecated in favor of `deleteStateSnapshot`. It will be removed in future versions.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// `deleteSnapshots` is being deprecated in favor of `deleteStateSnapshots`. It will be removed in future versions.\n    function deleteSnapshots() external;\n\n    /// `revertToAndDelete` is being deprecated in favor of `revertToStateAndDelete`. It will be removed in future versions.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// `revertTo` is being deprecated in favor of `revertToState`. It will be removed in future versions.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// `snapshot` is being deprecated in favor of `snapshotState`. It will be removed in future versions.\n    function snapshot() external returns (uint256 snapshotId);\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)\n        external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(\n        bool checkTopic0,\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter\n    ) external;\n\n    /// Prepare an expected anonymous log with all topic and data checks enabled.\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmitAnonymous() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(address emitter) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectPartialRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call to reverter address, that starts with the revert data.\n    function expectPartialRevert(bytes4 revertData, address reverter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Expects an error with any revert data on next call to reverter address.\n    function expectRevert(address reverter) external;\n\n    /// Expects an error from reverter address on next call, with any revert data.\n    function expectRevert(bytes4 revertData, address reverter) external;\n\n    /// Expects an error from reverter address on next call, that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData, address reverter) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top level of a test.\n    function skip(bool skipTest) external;\n\n    /// Marks a test as skipped with a reason. Must be called at the top level of a test.\n    function skip(bool skipTest, string calldata reason) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/console.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/console2.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {console as console2} from \"./console.sol\";\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/interfaces/IERC1155.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-1155 Multi Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 is IERC165 {\n    /// @dev\n    /// - Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n    /// - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n    /// - The `_from` argument MUST be the address of the holder whose balance is decreased.\n    /// - The `_to` argument MUST be the address of the recipient whose balance is increased.\n    /// - The `_id` argument MUST be the token type being transferred.\n    /// - The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n    /// - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n    /// - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n    event TransferSingle(\n        address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value\n    );\n\n    /// @dev\n    /// - Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n    /// - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n    /// - The `_from` argument MUST be the address of the holder whose balance is decreased.\n    /// - The `_to` argument MUST be the address of the recipient whose balance is increased.\n    /// - The `_ids` argument MUST be the list of tokens being transferred.\n    /// - The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\n    /// - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n    /// - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n    event TransferBatch(\n        address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values\n    );\n\n    /// @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev MUST emit when the URI is updated for a token ID. URIs are defined in RFC 3986.\n    /// The URI MUST point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\n    event URI(string _value, uint256 indexed _id);\n\n    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n    /// - MUST revert if `_to` is the zero address.\n    /// - MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n    /// - MUST revert on any other error.\n    /// - MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\n    /// - After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n    /// @param _from Source address\n    /// @param _to Target address\n    /// @param _id ID of the token type\n    /// @param _value Transfer amount\n    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n\n    /// @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n    /// - MUST revert if `_to` is the zero address.\n    /// - MUST revert if length of `_ids` is not the same as length of `_values`.\n    /// - MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n    /// - MUST revert on any other error.\n    /// - MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n    /// - Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n    /// - After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n    /// @param _from Source address\n    /// @param _to Target address\n    /// @param _ids IDs of each token type (order and length must match _values array)\n    /// @param _values Transfer amounts per token type (order and length must match _ids array)\n    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n    function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external;\n\n    /// @notice Get the balance of an account's tokens.\n    /// @param _owner The address of the token holder\n    /// @param _id ID of the token\n    /// @return The _owner's balance of the token type requested\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n    /// @notice Get the balance of multiple account/token pairs\n    /// @param _owners The addresses of the token holders\n    /// @param _ids ID of the tokens\n    /// @return The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n    /// @dev MUST emit the ApprovalForAll event on success.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Queries the approval status of an operator for a given owner.\n    /// @param _owner The owner of the tokens\n    /// @param _operator Address of authorized operator\n    /// @return True if the operator is approved, false if not\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/interfaces/IERC165.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    /// uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/interfaces/IERC20.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/interfaces/IERC4626.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC20.sol\";\n\n/// @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n/// https://eips.ethereum.org/EIPS/eip-4626\ninterface IERC4626 is IERC20 {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares\n    );\n\n    /// @notice Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n    /// @dev\n    /// - MUST be an ERC-20 token contract.\n    /// - MUST NOT revert.\n    function asset() external view returns (address assetTokenAddress);\n\n    /// @notice Returns the total amount of the underlying asset that is “managed” by Vault.\n    /// @dev\n    /// - SHOULD include any compounding that occurs from yield.\n    /// - MUST be inclusive of any fees that are charged against assets in the Vault.\n    /// - MUST NOT revert.\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /// @notice Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n    /// scenario where all the conditions are met.\n    /// @dev\n    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n    /// - MUST NOT show any variations depending on the caller.\n    /// - MUST NOT reflect slippage or other onchain conditions, when performing the actual exchange.\n    /// - MUST NOT revert.\n    ///\n    /// NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n    /// “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n    /// from.\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /// @notice Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n    /// scenario where all the conditions are met.\n    /// @dev\n    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n    /// - MUST NOT show any variations depending on the caller.\n    /// - MUST NOT reflect slippage or other onchain conditions, when performing the actual exchange.\n    /// - MUST NOT revert.\n    ///\n    /// NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n    /// “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n    /// from.\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /// @notice Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n    /// through a deposit call.\n    /// @dev\n    /// - MUST return a limited value if receiver is subject to some deposit limit.\n    /// - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n    /// - MUST NOT revert.\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /// @notice Allows an onchain or off-chain user to simulate the effects of their deposit at the current block, given\n    /// current onchain conditions.\n    /// @dev\n    /// - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n    ///   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n    ///   in the same transaction.\n    /// - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n    ///   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n    /// - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n    /// - MUST NOT revert.\n    ///\n    /// NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n    /// share price or some other type of condition, meaning the depositor will lose assets by depositing.\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /// @notice Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n    /// @dev\n    /// - MUST emit the Deposit event.\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n    ///   deposit execution, and are accounted for during deposit.\n    /// - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n    ///   approving enough underlying tokens to the Vault contract, etc).\n    ///\n    /// NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /// @notice Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n    /// @dev\n    /// - MUST return a limited value if receiver is subject to some mint limit.\n    /// - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n    /// - MUST NOT revert.\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /// @notice Allows an onchain or off-chain user to simulate the effects of their mint at the current block, given\n    /// current onchain conditions.\n    /// @dev\n    /// - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n    ///   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n    ///   same transaction.\n    /// - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n    ///   would be accepted, regardless if the user has enough tokens approved, etc.\n    /// - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n    /// - MUST NOT revert.\n    ///\n    /// NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n    /// share price or some other type of condition, meaning the depositor will lose assets by minting.\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /// @notice Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n    /// @dev\n    /// - MUST emit the Deposit event.\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n    ///   execution, and are accounted for during mint.\n    /// - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n    ///   approving enough underlying tokens to the Vault contract, etc).\n    ///\n    /// NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /// @notice Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n    /// Vault, through a withdrawal call.\n    /// @dev\n    /// - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n    /// - MUST NOT revert.\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /// @notice Allows an onchain or off-chain user to simulate the effects of their withdrawal at the current block,\n    /// given current onchain conditions.\n    /// @dev\n    /// - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n    ///   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n    ///   called\n    ///   in the same transaction.\n    /// - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n    ///   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n    /// - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n    /// - MUST NOT revert.\n    ///\n    /// NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n    /// share price or some other type of condition, meaning the depositor will lose assets by depositing.\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /// @notice Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n    /// @dev\n    /// - MUST emit the Withdraw event.\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n    ///   withdraw execution, and are accounted for during withdrawal.\n    /// - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n    ///   not having enough shares, etc).\n    ///\n    /// Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n    /// Those methods should be performed separately.\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /// @notice Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n    /// through a redeem call.\n    /// @dev\n    /// - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n    /// - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n    /// - MUST NOT revert.\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /// @notice Allows an onchain or off-chain user to simulate the effects of their redeemption at the current block,\n    /// given current onchain conditions.\n    /// @dev\n    /// - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n    ///   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n    ///   same transaction.\n    /// - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n    ///   redemption would be accepted, regardless if the user has enough shares, etc.\n    /// - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n    /// - MUST NOT revert.\n    ///\n    /// NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n    /// share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /// @notice Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n    /// @dev\n    /// - MUST emit the Withdraw event.\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n    ///   redeem execution, and are accounted for during redeem.\n    /// - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n    ///   not having enough shares, etc).\n    ///\n    /// NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n    /// Those methods should be performed separately.\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/interfaces/IERC721.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC165 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    /// This event emits when NFTs are created (`from` == 0) and destroyed\n    /// (`to` == 0). Exception: during contract creation, any number of NFTs\n    /// may be created and assigned without emitting Transfer. At the time of\n    /// any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    /// reaffirmed. The zero address indicates there is no approved address.\n    /// When a Transfer event emits, this also indicates that the approved\n    /// address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    /// The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    /// function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    /// about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT. When transfer is complete, this function\n    /// checks if `_to` is a smart contract (code size > 0). If so, it calls\n    /// `onERC721Received` on `_to` and throws if the return value is not\n    /// `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    /// except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    /// THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// Throws unless `msg.sender` is the current NFT owner, or an authorized\n    /// operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    /// all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    /// multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    /// after a `transfer`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted.\n    /// Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)\n        external\n        returns (bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata is IERC721 {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    /// 3986. The URI may point to a JSON file that conforms to the \"ERC721\n    /// Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable is IERC721 {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    /// them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    /// (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    /// `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    /// (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/interfaces/IMulticall3.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/mocks/MockERC20.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/mocks/MockERC721.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC721Metadata, IERC721TokenReceiver} from \"../interfaces/IERC721.sol\";\n\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\ncontract MockERC721 is IERC721Metadata {\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {}\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n    function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _isApprovedForAll[owner][operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(address from, address to, uint256 id) public payable virtual override {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        _balanceOf[from]--;\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        delete _getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data)\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        _balanceOf[owner]--;\n\n        delete _ownerOf[id];\n\n        delete _getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/safeconsole.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n/// @author philogy <https://github.com/philogy>\n/// @dev Code generated automatically by script.\nlibrary safeconsole {\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\n\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\n    // for the view-to-pure log trick.\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\n        function(uint256, uint256) internal pure pureSendLogPayload;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pureSendLogPayload := fnIn\n        }\n        pureSendLogPayload(offset, size);\n    }\n\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\n        }\n    }\n\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pureMemcopy := fnIn\n        }\n        pureMemcopy(fromOffset, toOffset, length);\n    }\n\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\n        }\n    }\n\n    function logMemory(uint256 offset, uint256 length) internal pure {\n        if (offset >= 0x60) {\n            // Sufficient memory before slice to prepare call header.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            /// @solidity memory-safe-assembly\n            assembly {\n                m0 := mload(sub(offset, 0x60))\n                m1 := mload(sub(offset, 0x40))\n                m2 := mload(sub(offset, 0x20))\n                // Selector of `log(bytes)`.\n                mstore(sub(offset, 0x60), 0x0be77f56)\n                mstore(sub(offset, 0x40), 0x20)\n                mstore(sub(offset, 0x20), length)\n            }\n            _sendLogPayload(offset - 0x44, length + 0x44);\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(sub(offset, 0x60), m0)\n                mstore(sub(offset, 0x40), m1)\n                mstore(sub(offset, 0x20), m2)\n            }\n        } else {\n            // Insufficient space, so copy slice forward, add header and reverse.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            uint256 endOffset = offset + length;\n            /// @solidity memory-safe-assembly\n            assembly {\n                m0 := mload(add(endOffset, 0x00))\n                m1 := mload(add(endOffset, 0x20))\n                m2 := mload(add(endOffset, 0x40))\n            }\n            _memcopy(offset, offset + 0x60, length);\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Selector of `log(bytes)`.\n                mstore(add(offset, 0x00), 0x0be77f56)\n                mstore(add(offset, 0x20), 0x20)\n                mstore(add(offset, 0x40), length)\n            }\n            _sendLogPayload(offset + 0x1c, length + 0x44);\n            _memcopy(offset + 0x60, offset, length);\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(endOffset, 0x00), m0)\n                mstore(add(endOffset, 0x20), m1)\n                mstore(add(endOffset, 0x40), m2)\n            }\n        }\n    }\n\n    function log(address p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(address)`.\n            mstore(0x00, 0x2c2ecbc2)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bool p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(bool)`.\n            mstore(0x00, 0x32458eed)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(uint256 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(uint256)`.\n            mstore(0x00, 0xf82c50f1)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bytes32 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(string)`.\n            mstore(0x00, 0x41304fac)\n            mstore(0x20, 0x20)\n            writeString(0x40, p0)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,address)`.\n            mstore(0x00, 0xdaf0d4aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,bool)`.\n            mstore(0x00, 0x75b605d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,uint256)`.\n            mstore(0x00, 0x8309e8a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,string)`.\n            mstore(0x00, 0x759f86bb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,address)`.\n            mstore(0x00, 0x853c4849)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,bool)`.\n            mstore(0x00, 0x2a110e83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,uint256)`.\n            mstore(0x00, 0x399174d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,string)`.\n            mstore(0x00, 0x8feac525)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,address)`.\n            mstore(0x00, 0x69276c86)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,bool)`.\n            mstore(0x00, 0x1c9d7eb3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,uint256)`.\n            mstore(0x00, 0xf666715a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,string)`.\n            mstore(0x00, 0x643fd0df)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,address)`.\n            mstore(0x00, 0x319af333)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,bool)`.\n            mstore(0x00, 0xc3b55635)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,uint256)`.\n            mstore(0x00, 0xb60e72cc)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,string)`.\n            mstore(0x00, 0x4b5c4277)\n            mstore(0x20, 0x40)\n            mstore(0x40, 0x80)\n            writeString(0x60, p0)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,address)`.\n            mstore(0x00, 0x018c84c2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,bool)`.\n            mstore(0x00, 0xf2a66286)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,uint256)`.\n            mstore(0x00, 0x17fe6185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,address,string)`.\n            mstore(0x00, 0x007150be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,address)`.\n            mstore(0x00, 0xf11699ed)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,bool)`.\n            mstore(0x00, 0xeb830c92)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,uint256)`.\n            mstore(0x00, 0x9c4f99fb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,bool,string)`.\n            mstore(0x00, 0x212255cc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,address)`.\n            mstore(0x00, 0x7bc0d848)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,bool)`.\n            mstore(0x00, 0x678209a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,uint256)`.\n            mstore(0x00, 0xb69bcaf6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,uint256,string)`.\n            mstore(0x00, 0xa1f2e8aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,address)`.\n            mstore(0x00, 0xf08744e8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,bool)`.\n            mstore(0x00, 0xcf020fb1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,uint256)`.\n            mstore(0x00, 0x67dd6ff1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(address,string,string)`.\n            mstore(0x00, 0xfb772265)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,address)`.\n            mstore(0x00, 0xd2763667)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,bool)`.\n            mstore(0x00, 0x18c9c746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,uint256)`.\n            mstore(0x00, 0x5f7b9afb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,address,string)`.\n            mstore(0x00, 0xde9a9270)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,address)`.\n            mstore(0x00, 0x1078f68d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,bool)`.\n            mstore(0x00, 0x50709698)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,uint256)`.\n            mstore(0x00, 0x12f21602)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,bool,string)`.\n            mstore(0x00, 0x2555fa46)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,address)`.\n            mstore(0x00, 0x088ef9d2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,bool)`.\n            mstore(0x00, 0xe8defba9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,uint256)`.\n            mstore(0x00, 0x37103367)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,uint256,string)`.\n            mstore(0x00, 0xc3fc3970)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,address)`.\n            mstore(0x00, 0x9591b953)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,bool)`.\n            mstore(0x00, 0xdbb4c247)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,uint256)`.\n            mstore(0x00, 0x1093ee11)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(bool,string,string)`.\n            mstore(0x00, 0xb076847f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,address)`.\n            mstore(0x00, 0xbcfd9be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,bool)`.\n            mstore(0x00, 0x9b6ec042)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,uint256)`.\n            mstore(0x00, 0x5a9b5ed5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,address,string)`.\n            mstore(0x00, 0x63cb41f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,address)`.\n            mstore(0x00, 0x35085f7b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,bool)`.\n            mstore(0x00, 0x20718650)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,uint256)`.\n            mstore(0x00, 0x20098014)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,bool,string)`.\n            mstore(0x00, 0x85775021)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,address)`.\n            mstore(0x00, 0x5c96b331)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,bool)`.\n            mstore(0x00, 0x4766da72)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,uint256)`.\n            mstore(0x00, 0xd1ed7a3c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,uint256,string)`.\n            mstore(0x00, 0x71d04af2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,address)`.\n            mstore(0x00, 0x7afac959)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,bool)`.\n            mstore(0x00, 0x4ceda75a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,uint256)`.\n            mstore(0x00, 0x37aa7d4c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(uint256,string,string)`.\n            mstore(0x00, 0xb115611f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,address)`.\n            mstore(0x00, 0xfcec75e0)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,bool)`.\n            mstore(0x00, 0xc91d5ed4)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,uint256)`.\n            mstore(0x00, 0x0d26b925)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,address,string)`.\n            mstore(0x00, 0xe0e9ad4f)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,address)`.\n            mstore(0x00, 0x932bbb38)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,bool)`.\n            mstore(0x00, 0x850b7ad6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,uint256)`.\n            mstore(0x00, 0xc95958d6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,bool,string)`.\n            mstore(0x00, 0xe298f47d)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,address)`.\n            mstore(0x00, 0x1c7ec448)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,bool)`.\n            mstore(0x00, 0xca7733b1)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,uint256)`.\n            mstore(0x00, 0xca47c4eb)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,uint256,string)`.\n            mstore(0x00, 0x5970e089)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,address)`.\n            mstore(0x00, 0x95ed0195)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,bool)`.\n            mstore(0x00, 0xb0e0f9b5)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,uint256)`.\n            mstore(0x00, 0x5821efa1)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            // Selector of `log(string,string,string)`.\n            mstore(0x00, 0x2ced7cef)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, 0xe0)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n            writeString(0x100, p2)\n        }\n        _sendLogPayload(0x1c, 0x124);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n        }\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,address)`.\n            mstore(0x00, 0x665bf134)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,bool)`.\n            mstore(0x00, 0x0e378994)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,uint256)`.\n            mstore(0x00, 0x94250d77)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,address,string)`.\n            mstore(0x00, 0xf808da20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,address)`.\n            mstore(0x00, 0x9f1bc36e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,bool)`.\n            mstore(0x00, 0x2cd4134a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,uint256)`.\n            mstore(0x00, 0x3971e78c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,bool,string)`.\n            mstore(0x00, 0xaa6540c8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,address)`.\n            mstore(0x00, 0x8da6def5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,bool)`.\n            mstore(0x00, 0x9b4254e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,uint256)`.\n            mstore(0x00, 0xbe553481)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,uint256,string)`.\n            mstore(0x00, 0xfdb4f990)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,address)`.\n            mstore(0x00, 0x8f736d16)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,bool)`.\n            mstore(0x00, 0x6f1a594e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,uint256)`.\n            mstore(0x00, 0xef1cefe7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,address,string,string)`.\n            mstore(0x00, 0x21bdaf25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,address)`.\n            mstore(0x00, 0x660375dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,bool)`.\n            mstore(0x00, 0xa6f50b0f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,uint256)`.\n            mstore(0x00, 0xa75c59de)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,address,string)`.\n            mstore(0x00, 0x2dd778e6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,address)`.\n            mstore(0x00, 0xcf394485)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,bool)`.\n            mstore(0x00, 0xcac43479)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,uint256)`.\n            mstore(0x00, 0x8c4e5de6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,bool,string)`.\n            mstore(0x00, 0xdfc4a2e8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,address)`.\n            mstore(0x00, 0xccf790a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,bool)`.\n            mstore(0x00, 0xc4643e20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,uint256)`.\n            mstore(0x00, 0x386ff5f4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,uint256,string)`.\n            mstore(0x00, 0x0aa6cfad)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,address)`.\n            mstore(0x00, 0x19fd4956)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,bool)`.\n            mstore(0x00, 0x50ad461d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,uint256)`.\n            mstore(0x00, 0x80e6a20b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,bool,string,string)`.\n            mstore(0x00, 0x475c5c33)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,address)`.\n            mstore(0x00, 0x478d1c62)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,bool)`.\n            mstore(0x00, 0xa1bcc9b3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,uint256)`.\n            mstore(0x00, 0x100f650e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,address,string)`.\n            mstore(0x00, 0x1da986ea)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,address)`.\n            mstore(0x00, 0xa31bfdcc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,bool)`.\n            mstore(0x00, 0x3bf5e537)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,uint256)`.\n            mstore(0x00, 0x22f6b999)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,bool,string)`.\n            mstore(0x00, 0xc5ad85f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,address)`.\n            mstore(0x00, 0x20e3984d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,bool)`.\n            mstore(0x00, 0x66f1bc67)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,uint256)`.\n            mstore(0x00, 0x34f0e636)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,uint256,string)`.\n            mstore(0x00, 0x4a28c017)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,address)`.\n            mstore(0x00, 0x5c430d47)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,bool)`.\n            mstore(0x00, 0xcf18105c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,uint256)`.\n            mstore(0x00, 0xbf01f891)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,uint256,string,string)`.\n            mstore(0x00, 0x88a8c406)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,address)`.\n            mstore(0x00, 0x0d36fa20)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,bool)`.\n            mstore(0x00, 0x0df12b76)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,uint256)`.\n            mstore(0x00, 0x457fe3cf)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,address,string)`.\n            mstore(0x00, 0xf7e36245)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,address)`.\n            mstore(0x00, 0x205871c2)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,bool)`.\n            mstore(0x00, 0x5f1d5c9f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,uint256)`.\n            mstore(0x00, 0x515e38b6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,bool,string)`.\n            mstore(0x00, 0xbc0b61fe)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,address)`.\n            mstore(0x00, 0x63183678)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,bool)`.\n            mstore(0x00, 0x0ef7e050)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,uint256)`.\n            mstore(0x00, 0x1dc8e1b8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,uint256,string)`.\n            mstore(0x00, 0x448830a8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,address)`.\n            mstore(0x00, 0xa04e2f87)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,bool)`.\n            mstore(0x00, 0x35a5071f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,uint256)`.\n            mstore(0x00, 0x159f8927)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(address,string,string,string)`.\n            mstore(0x00, 0x5d02c50b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,address)`.\n            mstore(0x00, 0x1d14d001)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,bool)`.\n            mstore(0x00, 0x46600be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,uint256)`.\n            mstore(0x00, 0x0c66d1be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,address,string)`.\n            mstore(0x00, 0xd812a167)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,address)`.\n            mstore(0x00, 0x1c41a336)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,bool)`.\n            mstore(0x00, 0x6a9c478b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,uint256)`.\n            mstore(0x00, 0x07831502)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,bool,string)`.\n            mstore(0x00, 0x4a66cb34)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,address)`.\n            mstore(0x00, 0x136b05dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,bool)`.\n            mstore(0x00, 0xd6019f1c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,uint256)`.\n            mstore(0x00, 0x7bf181a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,uint256,string)`.\n            mstore(0x00, 0x51f09ff8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,address)`.\n            mstore(0x00, 0x6f7c603e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,bool)`.\n            mstore(0x00, 0xe2bfd60b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,uint256)`.\n            mstore(0x00, 0xc21f64c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,address,string,string)`.\n            mstore(0x00, 0xa73c1db6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,address)`.\n            mstore(0x00, 0xf4880ea4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,bool)`.\n            mstore(0x00, 0xc0a302d8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,uint256)`.\n            mstore(0x00, 0x4c123d57)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,address,string)`.\n            mstore(0x00, 0xa0a47963)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,address)`.\n            mstore(0x00, 0x8c329b1a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,bool)`.\n            mstore(0x00, 0x3b2a5ce0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,uint256)`.\n            mstore(0x00, 0x6d7045c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,bool,string)`.\n            mstore(0x00, 0x2ae408d4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,address)`.\n            mstore(0x00, 0x54a7a9a0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,bool)`.\n            mstore(0x00, 0x619e4d0e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,uint256)`.\n            mstore(0x00, 0x0bb00eab)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,uint256,string)`.\n            mstore(0x00, 0x7dd4d0e0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,address)`.\n            mstore(0x00, 0xf9ad2b89)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,bool)`.\n            mstore(0x00, 0xb857163a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,uint256)`.\n            mstore(0x00, 0xe3a9ca2f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,bool,string,string)`.\n            mstore(0x00, 0x6d1e8751)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,address)`.\n            mstore(0x00, 0x26f560a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,bool)`.\n            mstore(0x00, 0xb4c314ff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,uint256)`.\n            mstore(0x00, 0x1537dc87)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,address,string)`.\n            mstore(0x00, 0x1bb3b09a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,address)`.\n            mstore(0x00, 0x9acd3616)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,bool)`.\n            mstore(0x00, 0xceb5f4d7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,uint256)`.\n            mstore(0x00, 0x7f9bbca2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,bool,string)`.\n            mstore(0x00, 0x9143dbb1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,address)`.\n            mstore(0x00, 0x00dd87b9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,bool)`.\n            mstore(0x00, 0xbe984353)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,uint256)`.\n            mstore(0x00, 0x374bb4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,uint256,string)`.\n            mstore(0x00, 0x8e69fb5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,address)`.\n            mstore(0x00, 0xfedd1fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,bool)`.\n            mstore(0x00, 0xe5e70b2b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,uint256)`.\n            mstore(0x00, 0x6a1199e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,uint256,string,string)`.\n            mstore(0x00, 0xf5bc2249)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,address)`.\n            mstore(0x00, 0x2b2b18dc)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,bool)`.\n            mstore(0x00, 0x6dd434ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,uint256)`.\n            mstore(0x00, 0xa5cada94)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,address,string)`.\n            mstore(0x00, 0x12d6c788)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,address)`.\n            mstore(0x00, 0x538e06ab)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,bool)`.\n            mstore(0x00, 0xdc5e935b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,uint256)`.\n            mstore(0x00, 0x1606a393)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,bool,string)`.\n            mstore(0x00, 0x483d0416)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,address)`.\n            mstore(0x00, 0x1596a1ce)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,bool)`.\n            mstore(0x00, 0x6b0e5d53)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,uint256)`.\n            mstore(0x00, 0x28863fcb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,uint256,string)`.\n            mstore(0x00, 0x1ad96de6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,address)`.\n            mstore(0x00, 0x97d394d8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,bool)`.\n            mstore(0x00, 0x1e4b87e5)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,uint256)`.\n            mstore(0x00, 0x7be0c3eb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(bool,string,string,string)`.\n            mstore(0x00, 0x1762e32a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,address)`.\n            mstore(0x00, 0x2488b414)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,bool)`.\n            mstore(0x00, 0x091ffaf5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,uint256)`.\n            mstore(0x00, 0x736efbb6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,address,string)`.\n            mstore(0x00, 0x031c6f73)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,address)`.\n            mstore(0x00, 0xef72c513)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,bool)`.\n            mstore(0x00, 0xe351140f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,uint256)`.\n            mstore(0x00, 0x5abd992a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,bool,string)`.\n            mstore(0x00, 0x90fb06aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,address)`.\n            mstore(0x00, 0x15c127b5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,bool)`.\n            mstore(0x00, 0x5f743a7c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,uint256)`.\n            mstore(0x00, 0x0c9cd9c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,uint256,string)`.\n            mstore(0x00, 0xddb06521)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,address)`.\n            mstore(0x00, 0x9cba8fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,bool)`.\n            mstore(0x00, 0xcc32ab07)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,uint256)`.\n            mstore(0x00, 0x46826b5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,address,string,string)`.\n            mstore(0x00, 0x3e128ca3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,address)`.\n            mstore(0x00, 0xa1ef4cbb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,bool)`.\n            mstore(0x00, 0x454d54a5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,uint256)`.\n            mstore(0x00, 0x078287f5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,address,string)`.\n            mstore(0x00, 0xade052c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,address)`.\n            mstore(0x00, 0x69640b59)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,bool)`.\n            mstore(0x00, 0xb6f577a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,uint256)`.\n            mstore(0x00, 0x7464ce23)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,bool,string)`.\n            mstore(0x00, 0xdddb9561)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,address)`.\n            mstore(0x00, 0x88cb6041)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,bool)`.\n            mstore(0x00, 0x91a02e2a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,uint256)`.\n            mstore(0x00, 0xc6acc7a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,uint256,string)`.\n            mstore(0x00, 0xde03e774)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,address)`.\n            mstore(0x00, 0xef529018)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,bool)`.\n            mstore(0x00, 0xeb928d7f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,uint256)`.\n            mstore(0x00, 0x2c1d0746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,bool,string,string)`.\n            mstore(0x00, 0x68c8b8bd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,address)`.\n            mstore(0x00, 0x56a5d1b1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,bool)`.\n            mstore(0x00, 0x15cac476)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,uint256)`.\n            mstore(0x00, 0x88f6e4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,address,string)`.\n            mstore(0x00, 0x6cde40b8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,address)`.\n            mstore(0x00, 0x9a816a83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,bool)`.\n            mstore(0x00, 0xab085ae6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,uint256)`.\n            mstore(0x00, 0xeb7f6fd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,bool,string)`.\n            mstore(0x00, 0xa5b4fc99)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,address)`.\n            mstore(0x00, 0xfa8185af)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,bool)`.\n            mstore(0x00, 0xc598d185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        /// @solidity memory-safe-assembly\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\n            mstore(0x00, 0x193fb800)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,uint256,string)`.\n            mstore(0x00, 0x59cfcbe3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,address)`.\n            mstore(0x00, 0x42d21db7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,bool)`.\n            mstore(0x00, 0x7af6ab25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,uint256)`.\n            mstore(0x00, 0x5da297eb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,uint256,string,string)`.\n            mstore(0x00, 0x27d8afd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,address)`.\n            mstore(0x00, 0x6168ed61)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,bool)`.\n            mstore(0x00, 0x90c30a56)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,uint256)`.\n            mstore(0x00, 0xe8d3018d)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,address,string)`.\n            mstore(0x00, 0x9c3adfa1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,address)`.\n            mstore(0x00, 0xae2ec581)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,bool)`.\n            mstore(0x00, 0xba535d9c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,uint256)`.\n            mstore(0x00, 0xcf009880)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,bool,string)`.\n            mstore(0x00, 0xd2d423cd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,address)`.\n            mstore(0x00, 0x3b2279b4)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,bool)`.\n            mstore(0x00, 0x691a8f74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,uint256)`.\n            mstore(0x00, 0x82c25b74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,uint256,string)`.\n            mstore(0x00, 0xb7b914ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,address)`.\n            mstore(0x00, 0xd583c602)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,bool)`.\n            mstore(0x00, 0xb3a6b6bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,uint256)`.\n            mstore(0x00, 0xb028c9bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(uint256,string,string,string)`.\n            mstore(0x00, 0x21ad0683)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,address)`.\n            mstore(0x00, 0xed8f28f6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,bool)`.\n            mstore(0x00, 0xb59dbd60)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,uint256)`.\n            mstore(0x00, 0x8ef3f399)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,address,string)`.\n            mstore(0x00, 0x800a1c67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,address)`.\n            mstore(0x00, 0x223603bd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,bool)`.\n            mstore(0x00, 0x79884c2b)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,uint256)`.\n            mstore(0x00, 0x3e9f866a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,bool,string)`.\n            mstore(0x00, 0x0454c079)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,address)`.\n            mstore(0x00, 0x63fb8bc5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,bool)`.\n            mstore(0x00, 0xfc4845f0)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,uint256)`.\n            mstore(0x00, 0xf8f51b1e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,uint256,string)`.\n            mstore(0x00, 0x5a477632)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,address)`.\n            mstore(0x00, 0xaabc9a31)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,bool)`.\n            mstore(0x00, 0x5f15d28c)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,uint256)`.\n            mstore(0x00, 0x91d1112e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,address,string,string)`.\n            mstore(0x00, 0x245986f2)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,address)`.\n            mstore(0x00, 0x33e9dd1d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,bool)`.\n            mstore(0x00, 0x958c28c6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,uint256)`.\n            mstore(0x00, 0x5d08bb05)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,address,string)`.\n            mstore(0x00, 0x2d8e33a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,address)`.\n            mstore(0x00, 0x7190a529)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,bool)`.\n            mstore(0x00, 0x895af8c5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,uint256)`.\n            mstore(0x00, 0x8e3f78a9)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,bool,string)`.\n            mstore(0x00, 0x9d22d5dd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,address)`.\n            mstore(0x00, 0x935e09bf)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,bool)`.\n            mstore(0x00, 0x8af7cf8a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,uint256)`.\n            mstore(0x00, 0x64b5bb67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,uint256,string)`.\n            mstore(0x00, 0x742d6ee7)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,address)`.\n            mstore(0x00, 0xe0625b29)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,bool)`.\n            mstore(0x00, 0x3f8a701d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,uint256)`.\n            mstore(0x00, 0x24f91465)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,bool,string,string)`.\n            mstore(0x00, 0xa826caeb)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,address)`.\n            mstore(0x00, 0x5ea2b7ae)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,bool)`.\n            mstore(0x00, 0x82112a42)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,uint256)`.\n            mstore(0x00, 0x4f04fdc6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,address,string)`.\n            mstore(0x00, 0x9ffb2f93)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,address)`.\n            mstore(0x00, 0xe0e95b98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,bool)`.\n            mstore(0x00, 0x354c36d6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,uint256)`.\n            mstore(0x00, 0xe41b6f6f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,bool,string)`.\n            mstore(0x00, 0xabf73a98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,address)`.\n            mstore(0x00, 0xe21de278)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,bool)`.\n            mstore(0x00, 0x7626db92)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,uint256)`.\n            mstore(0x00, 0xa7a87853)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,uint256,string)`.\n            mstore(0x00, 0x854b3496)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,address)`.\n            mstore(0x00, 0x7c4632a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,bool)`.\n            mstore(0x00, 0x7d24491d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,uint256)`.\n            mstore(0x00, 0xc67ea9d1)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,uint256,string,string)`.\n            mstore(0x00, 0x5ab84e1f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,address)`.\n            mstore(0x00, 0x439c7bef)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,bool)`.\n            mstore(0x00, 0x5ccd4e37)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,uint256)`.\n            mstore(0x00, 0x7cc3c607)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,address,string)`.\n            mstore(0x00, 0xeb1bff80)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,address)`.\n            mstore(0x00, 0xc371c7db)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,bool)`.\n            mstore(0x00, 0x40785869)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,uint256)`.\n            mstore(0x00, 0xd6aefad2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,bool,string)`.\n            mstore(0x00, 0x5e84b0ea)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,address)`.\n            mstore(0x00, 0x1023f7b2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,bool)`.\n            mstore(0x00, 0xc3a8a654)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,uint256)`.\n            mstore(0x00, 0xf45d7d2c)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,uint256,string)`.\n            mstore(0x00, 0x5d1a971a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,address)`.\n            mstore(0x00, 0x6d572f44)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,bool)`.\n            mstore(0x00, 0x2c1754ed)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,uint256)`.\n            mstore(0x00, 0x8eafb02b)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        bytes32 m11;\n        bytes32 m12;\n        /// @solidity memory-safe-assembly\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            m11 := mload(0x160)\n            m12 := mload(0x180)\n            // Selector of `log(string,string,string,string)`.\n            mstore(0x00, 0xde68f20a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, 0x140)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n            writeString(0x160, p3)\n        }\n        _sendLogPayload(0x1c, 0x184);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n            mstore(0x160, m11)\n            mstore(0x180, m12)\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdAssertions.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {StdAssertions} from \"../src/StdAssertions.sol\";\nimport {Vm} from \"../src/Vm.sol\";\n\ninterface VmInternal is Vm {\n    function _expectCheatcodeRevert(bytes memory message) external;\n}\n\ncontract StdAssertionsTest is StdAssertions {\n    string constant errorMessage = \"User provided message\";\n    uint256 constant maxDecimals = 77;\n\n    bool constant SHOULD_REVERT = true;\n    bool constant SHOULD_RETURN = false;\n\n    bool constant STRICT_REVERT_DATA = true;\n    bool constant NON_STRICT_REVERT_DATA = false;\n\n    VmInternal constant vm = VmInternal(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function testFuzz_AssertEqCall_Return_Pass(\n        bytes memory callDataA,\n        bytes memory callDataB,\n        bytes memory returnData,\n        bool strictRevertData\n    ) external {\n        address targetA = address(new TestMockCall(returnData, SHOULD_RETURN));\n        address targetB = address(new TestMockCall(returnData, SHOULD_RETURN));\n\n        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);\n    }\n\n    function testFuzz_RevertWhenCalled_AssertEqCall_Return_Fail(\n        bytes memory callDataA,\n        bytes memory callDataB,\n        bytes memory returnDataA,\n        bytes memory returnDataB,\n        bool strictRevertData\n    ) external {\n        vm.assume(keccak256(returnDataA) != keccak256(returnDataB));\n\n        address targetA = address(new TestMockCall(returnDataA, SHOULD_RETURN));\n        address targetB = address(new TestMockCall(returnDataB, SHOULD_RETURN));\n\n        vm._expectCheatcodeRevert(\n            bytes(\n                string.concat(\n                    \"Call return data does not match: \", vm.toString(returnDataA), \" != \", vm.toString(returnDataB)\n                )\n            )\n        );\n        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);\n    }\n\n    function testFuzz_AssertEqCall_Revert_Pass(\n        bytes memory callDataA,\n        bytes memory callDataB,\n        bytes memory revertDataA,\n        bytes memory revertDataB\n    ) external {\n        address targetA = address(new TestMockCall(revertDataA, SHOULD_REVERT));\n        address targetB = address(new TestMockCall(revertDataB, SHOULD_REVERT));\n\n        assertEqCall(targetA, callDataA, targetB, callDataB, NON_STRICT_REVERT_DATA);\n    }\n\n    function testFuzz_RevertWhenCalled_AssertEqCall_Revert_Fail(\n        bytes memory callDataA,\n        bytes memory callDataB,\n        bytes memory revertDataA,\n        bytes memory revertDataB\n    ) external {\n        vm.assume(keccak256(revertDataA) != keccak256(revertDataB));\n\n        address targetA = address(new TestMockCall(revertDataA, SHOULD_REVERT));\n        address targetB = address(new TestMockCall(revertDataB, SHOULD_REVERT));\n\n        vm._expectCheatcodeRevert(\n            bytes(\n                string.concat(\n                    \"Call revert data does not match: \", vm.toString(revertDataA), \" != \", vm.toString(revertDataB)\n                )\n            )\n        );\n        assertEqCall(targetA, callDataA, targetB, callDataB, STRICT_REVERT_DATA);\n    }\n\n    function testFuzz_RevertWhenCalled_AssertEqCall_Fail(\n        bytes memory callDataA,\n        bytes memory callDataB,\n        bytes memory returnDataA,\n        bytes memory returnDataB,\n        bool strictRevertData\n    ) external {\n        address targetA = address(new TestMockCall(returnDataA, SHOULD_RETURN));\n        address targetB = address(new TestMockCall(returnDataB, SHOULD_REVERT));\n\n        vm.expectRevert(bytes(\"assertion failed\"));\n        this.assertEqCallExternal(targetA, callDataA, targetB, callDataB, strictRevertData);\n\n        vm.expectRevert(bytes(\"assertion failed\"));\n        this.assertEqCallExternal(targetB, callDataB, targetA, callDataA, strictRevertData);\n    }\n\n    // Helper function to test outcome of assertEqCall via `expect` cheatcodes\n    function assertEqCallExternal(\n        address targetA,\n        bytes memory callDataA,\n        address targetB,\n        bytes memory callDataB,\n        bool strictRevertData\n    ) public {\n        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);\n    }\n\n    function testFailFail() public {\n        fail();\n    }\n}\n\ncontract TestMockCall {\n    bytes returnData;\n    bool shouldRevert;\n\n    constructor(bytes memory returnData_, bool shouldRevert_) {\n        returnData = returnData_;\n        shouldRevert = shouldRevert_;\n    }\n\n    fallback() external payable {\n        bytes memory returnData_ = returnData;\n\n        if (shouldRevert) {\n            assembly {\n                revert(add(returnData_, 0x20), mload(returnData_))\n            }\n        } else {\n            assembly {\n                return(add(returnData_, 0x20), mload(returnData_))\n            }\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdChains.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Test} from \"../src/Test.sol\";\n\ncontract StdChainsMock is Test {\n    function exposed_getChain(string memory chainAlias) public returns (Chain memory) {\n        return getChain(chainAlias);\n    }\n\n    function exposed_getChain(uint256 chainId) public returns (Chain memory) {\n        return getChain(chainId);\n    }\n\n    function exposed_setChain(string memory chainAlias, ChainData memory chainData) public {\n        setChain(chainAlias, chainData);\n    }\n\n    function exposed_setFallbackToDefaultRpcUrls(bool useDefault) public {\n        setFallbackToDefaultRpcUrls(useDefault);\n    }\n}\n\ncontract StdChainsTest is Test {\n    function test_ChainRpcInitialization() public {\n        // RPCs specified in `foundry.toml` should be updated.\n        assertEq(getChain(1).rpcUrl, \"https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX\");\n        assertEq(getChain(\"optimism_sepolia\").rpcUrl, \"https://sepolia.optimism.io/\");\n        assertEq(getChain(\"arbitrum_one_sepolia\").rpcUrl, \"https://sepolia-rollup.arbitrum.io/rpc/\");\n\n        // Environment variables should be the next fallback\n        assertEq(getChain(\"arbitrum_nova\").rpcUrl, \"https://nova.arbitrum.io/rpc\");\n        vm.setEnv(\"ARBITRUM_NOVA_RPC_URL\", \"myoverride\");\n        assertEq(getChain(\"arbitrum_nova\").rpcUrl, \"myoverride\");\n        vm.setEnv(\"ARBITRUM_NOVA_RPC_URL\", \"https://nova.arbitrum.io/rpc\");\n\n        // Cannot override RPCs defined in `foundry.toml`\n        vm.setEnv(\"MAINNET_RPC_URL\", \"myoverride2\");\n        assertEq(getChain(\"mainnet\").rpcUrl, \"https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX\");\n\n        // Other RPCs should remain unchanged.\n        assertEq(getChain(31337).rpcUrl, \"http://127.0.0.1:8545\");\n        assertEq(getChain(\"sepolia\").rpcUrl, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\");\n    }\n\n    // Named with a leading underscore to clarify this is not intended to be run as a normal test,\n    // and is intended to be used in the below `test_Rpcs` test.\n    function _testRpc(string memory rpcAlias) internal {\n        string memory rpcUrl = getChain(rpcAlias).rpcUrl;\n        vm.createSelectFork(rpcUrl);\n    }\n\n    // Ensure we can connect to the default RPC URL for each chain.\n    // Currently commented out since this is slow and public RPCs are flaky, often resulting in failing CI.\n    // function test_Rpcs() public {\n    //     _testRpc(\"mainnet\");\n    //     _testRpc(\"sepolia\");\n    //     _testRpc(\"holesky\");\n    //     _testRpc(\"optimism\");\n    //     _testRpc(\"optimism_sepolia\");\n    //     _testRpc(\"arbitrum_one\");\n    //     _testRpc(\"arbitrum_one_sepolia\");\n    //     _testRpc(\"arbitrum_nova\");\n    //     _testRpc(\"polygon\");\n    //     _testRpc(\"polygon_amoy\");\n    //     _testRpc(\"avalanche\");\n    //     _testRpc(\"avalanche_fuji\");\n    //     _testRpc(\"bnb_smart_chain\");\n    //     _testRpc(\"bnb_smart_chain_testnet\");\n    //     _testRpc(\"gnosis_chain\");\n    //     _testRpc(\"moonbeam\");\n    //     _testRpc(\"moonriver\");\n    //     _testRpc(\"moonbase\");\n    //     _testRpc(\"base_sepolia\");\n    //     _testRpc(\"base\");\n    //     _testRpc(\"blast_sepolia\");\n    //     _testRpc(\"blast\");\n    //     _testRpc(\"fantom_opera\");\n    //     _testRpc(\"fantom_opera_testnet\");\n    //     _testRpc(\"fraxtal\");\n    //     _testRpc(\"fraxtal_testnet\");\n    //     _testRpc(\"berachain_bartio_testnet\");\n    //     _testRpc(\"flare\");\n    //     _testRpc(\"flare_coston2\");\n    // }\n\n    function test_RevertIf_ChainNotFound() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(string): Chain with alias \\\"does_not_exist\\\" not found.\");\n        stdChainsMock.exposed_getChain(\"does_not_exist\");\n    }\n\n    function test_RevertIf_SetChain_ChainIdExist_FirstTest() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains setChain(string,ChainData): Chain ID 31337 already used by \\\"anvil\\\".\");\n        stdChainsMock.exposed_setChain(\"anvil2\", ChainData(\"Anvil\", 31337, \"URL\"));\n    }\n\n    function test_RevertIf_ChainBubbleUp() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        stdChainsMock.exposed_setChain(\"needs_undefined_env_var\", ChainData(\"\", 123456789, \"\"));\n        vm.expectRevert(\n            \"Failed to resolve env var `UNDEFINED_RPC_URL_PLACEHOLDER` in `${UNDEFINED_RPC_URL_PLACEHOLDER}`: environment variable not found\"\n        );\n        stdChainsMock.exposed_getChain(\"needs_undefined_env_var\");\n    }\n\n    function test_RevertIf_SetChain_ChainIdExists_SecondTest() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        stdChainsMock.exposed_setChain(\"custom_chain\", ChainData(\"Custom Chain\", 123456789, \"https://custom.chain/\"));\n\n        vm.expectRevert('StdChains setChain(string,ChainData): Chain ID 123456789 already used by \"custom_chain\".');\n\n        stdChainsMock.exposed_setChain(\"another_custom_chain\", ChainData(\"\", 123456789, \"\"));\n    }\n\n    function test_SetChain() public {\n        setChain(\"custom_chain\", ChainData(\"Custom Chain\", 123456789, \"https://custom.chain/\"));\n        Chain memory customChain = getChain(\"custom_chain\");\n        assertEq(customChain.name, \"Custom Chain\");\n        assertEq(customChain.chainId, 123456789);\n        assertEq(customChain.chainAlias, \"custom_chain\");\n        assertEq(customChain.rpcUrl, \"https://custom.chain/\");\n        Chain memory chainById = getChain(123456789);\n        assertEq(chainById.name, customChain.name);\n        assertEq(chainById.chainId, customChain.chainId);\n        assertEq(chainById.chainAlias, customChain.chainAlias);\n        assertEq(chainById.rpcUrl, customChain.rpcUrl);\n        customChain.name = \"Another Custom Chain\";\n        customChain.chainId = 987654321;\n        setChain(\"another_custom_chain\", customChain);\n        Chain memory anotherCustomChain = getChain(\"another_custom_chain\");\n        assertEq(anotherCustomChain.name, \"Another Custom Chain\");\n        assertEq(anotherCustomChain.chainId, 987654321);\n        assertEq(anotherCustomChain.chainAlias, \"another_custom_chain\");\n        assertEq(anotherCustomChain.rpcUrl, \"https://custom.chain/\");\n        // Verify the first chain data was not overwritten\n        chainById = getChain(123456789);\n        assertEq(chainById.name, \"Custom Chain\");\n        assertEq(chainById.chainId, 123456789);\n    }\n\n    function test_RevertIf_SetEmptyAlias() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\");\n        stdChainsMock.exposed_setChain(\"\", ChainData(\"\", 123456789, \"\"));\n    }\n\n    function test_RevertIf_SetNoChainId0() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n        stdChainsMock.exposed_setChain(\"alias\", ChainData(\"\", 0, \"\"));\n    }\n\n    function test_RevertIf_GetNoChainId0() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        stdChainsMock.exposed_getChain(0);\n    }\n\n    function test_RevertIf_GetNoEmptyAlias() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(string): Chain alias cannot be the empty string.\");\n        stdChainsMock.exposed_getChain(\"\");\n    }\n\n    function test_RevertIf_ChainIdNotFound() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(string): Chain with alias \\\"no_such_alias\\\" not found.\");\n        stdChainsMock.exposed_getChain(\"no_such_alias\");\n    }\n\n    function test_RevertIf_ChainAliasNotFound() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(uint256): Chain with ID 321 not found.\");\n\n        stdChainsMock.exposed_getChain(321);\n    }\n\n    function test_SetChain_ExistingOne() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        setChain(\"custom_chain\", ChainData(\"Custom Chain\", 123456789, \"https://custom.chain/\"));\n        assertEq(getChain(123456789).chainId, 123456789);\n\n        setChain(\"custom_chain\", ChainData(\"Modified Chain\", 999999999, \"https://modified.chain/\"));\n        vm.expectRevert(\"StdChains getChain(uint256): Chain with ID 123456789 not found.\");\n        stdChainsMock.exposed_getChain(123456789);\n\n        Chain memory modifiedChain = getChain(999999999);\n        assertEq(modifiedChain.name, \"Modified Chain\");\n        assertEq(modifiedChain.chainId, 999999999);\n        assertEq(modifiedChain.rpcUrl, \"https://modified.chain/\");\n    }\n\n    function test_RevertIf_DontUseDefaultRpcUrl() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        // Should error if default RPCs flag is set to false.\n        stdChainsMock.exposed_setFallbackToDefaultRpcUrls(false);\n        vm.expectRevert();\n        stdChainsMock.exposed_getChain(31337);\n        vm.expectRevert();\n        stdChainsMock.exposed_getChain(\"sepolia\");\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdCheats.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {StdCheats} from \"../src/StdCheats.sol\";\nimport {Test} from \"../src/Test.sol\";\nimport {stdJson} from \"../src/StdJson.sol\";\nimport {stdToml} from \"../src/StdToml.sol\";\nimport {IERC20} from \"../src/interfaces/IERC20.sol\";\n\ncontract StdCheatsTest is Test {\n    Bar test;\n\n    using stdJson for string;\n\n    function setUp() public {\n        test = new Bar();\n    }\n\n    function test_Skip() public {\n        vm.warp(100);\n        skip(25);\n        assertEq(block.timestamp, 125);\n    }\n\n    function test_Rewind() public {\n        vm.warp(100);\n        rewind(25);\n        assertEq(block.timestamp, 75);\n    }\n\n    function test_Hoax() public {\n        hoax(address(1337));\n        test.bar{value: 100}(address(1337));\n    }\n\n    function test_HoaxOrigin() public {\n        hoax(address(1337), address(1337));\n        test.origin{value: 100}(address(1337));\n    }\n\n    function test_HoaxDifferentAddresses() public {\n        hoax(address(1337), address(7331));\n        test.origin{value: 100}(address(1337), address(7331));\n    }\n\n    function test_StartHoax() public {\n        startHoax(address(1337));\n        test.bar{value: 100}(address(1337));\n        test.bar{value: 100}(address(1337));\n        vm.stopPrank();\n        test.bar(address(this));\n    }\n\n    function test_StartHoaxOrigin() public {\n        startHoax(address(1337), address(1337));\n        test.origin{value: 100}(address(1337));\n        test.origin{value: 100}(address(1337));\n        vm.stopPrank();\n        test.bar(address(this));\n    }\n\n    function test_ChangePrankMsgSender() public {\n        vm.startPrank(address(1337));\n        test.bar(address(1337));\n        changePrank(address(0xdead));\n        test.bar(address(0xdead));\n        changePrank(address(1337));\n        test.bar(address(1337));\n        vm.stopPrank();\n    }\n\n    function test_ChangePrankMsgSenderAndTxOrigin() public {\n        vm.startPrank(address(1337), address(1338));\n        test.origin(address(1337), address(1338));\n        changePrank(address(0xdead), address(0xbeef));\n        test.origin(address(0xdead), address(0xbeef));\n        changePrank(address(1337), address(1338));\n        test.origin(address(1337), address(1338));\n        vm.stopPrank();\n    }\n\n    function test_MakeAccountEquivalence() public {\n        Account memory account = makeAccount(\"1337\");\n        (address addr, uint256 key) = makeAddrAndKey(\"1337\");\n        assertEq(account.addr, addr);\n        assertEq(account.key, key);\n    }\n\n    function test_MakeAddrEquivalence() public {\n        (address addr,) = makeAddrAndKey(\"1337\");\n        assertEq(makeAddr(\"1337\"), addr);\n    }\n\n    function test_MakeAddrSigning() public {\n        (address addr, uint256 key) = makeAddrAndKey(\"1337\");\n        bytes32 hash = keccak256(\"some_message\");\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(key, hash);\n        assertEq(ecrecover(hash, v, r, s), addr);\n    }\n\n    function test_Deal() public {\n        deal(address(this), 1 ether);\n        assertEq(address(this).balance, 1 ether);\n    }\n\n    function test_DealToken() public {\n        Bar barToken = new Bar();\n        address bar = address(barToken);\n        deal(bar, address(this), 10000e18);\n        assertEq(barToken.balanceOf(address(this)), 10000e18);\n    }\n\n    function test_DealTokenAdjustTotalSupply() public {\n        Bar barToken = new Bar();\n        address bar = address(barToken);\n        deal(bar, address(this), 10000e18, true);\n        assertEq(barToken.balanceOf(address(this)), 10000e18);\n        assertEq(barToken.totalSupply(), 20000e18);\n        deal(bar, address(this), 0, true);\n        assertEq(barToken.balanceOf(address(this)), 0);\n        assertEq(barToken.totalSupply(), 10000e18);\n    }\n\n    function test_DealERC1155Token() public {\n        BarERC1155 barToken = new BarERC1155();\n        address bar = address(barToken);\n        dealERC1155(bar, address(this), 0, 10000e18, false);\n        assertEq(barToken.balanceOf(address(this), 0), 10000e18);\n    }\n\n    function test_DealERC1155TokenAdjustTotalSupply() public {\n        BarERC1155 barToken = new BarERC1155();\n        address bar = address(barToken);\n        dealERC1155(bar, address(this), 0, 10000e18, true);\n        assertEq(barToken.balanceOf(address(this), 0), 10000e18);\n        assertEq(barToken.totalSupply(0), 20000e18);\n        dealERC1155(bar, address(this), 0, 0, true);\n        assertEq(barToken.balanceOf(address(this), 0), 0);\n        assertEq(barToken.totalSupply(0), 10000e18);\n    }\n\n    function test_DealERC721Token() public {\n        BarERC721 barToken = new BarERC721();\n        address bar = address(barToken);\n        dealERC721(bar, address(2), 1);\n        assertEq(barToken.balanceOf(address(2)), 1);\n        assertEq(barToken.balanceOf(address(1)), 0);\n        dealERC721(bar, address(1), 2);\n        assertEq(barToken.balanceOf(address(1)), 1);\n        assertEq(barToken.balanceOf(bar), 1);\n    }\n\n    function test_DeployCode() public {\n        address deployed = deployCode(\"StdCheats.t.sol:Bar\", bytes(\"\"));\n        assertEq(string(getCode(deployed)), string(getCode(address(test))));\n    }\n\n    function test_DestroyAccount() public {\n        // deploy something to destroy it\n        BarERC721 barToken = new BarERC721();\n        address bar = address(barToken);\n        vm.setNonce(bar, 10);\n        deal(bar, 100);\n\n        uint256 prevThisBalance = address(this).balance;\n        uint256 size;\n        assembly {\n            size := extcodesize(bar)\n        }\n\n        assertGt(size, 0);\n        assertEq(bar.balance, 100);\n        assertEq(vm.getNonce(bar), 10);\n\n        destroyAccount(bar, address(this));\n        assembly {\n            size := extcodesize(bar)\n        }\n        assertEq(address(this).balance, prevThisBalance + 100);\n        assertEq(vm.getNonce(bar), 0);\n        assertEq(size, 0);\n        assertEq(bar.balance, 0);\n    }\n\n    function test_DeployCodeNoArgs() public {\n        address deployed = deployCode(\"StdCheats.t.sol:Bar\");\n        assertEq(string(getCode(deployed)), string(getCode(address(test))));\n    }\n\n    function test_DeployCodeVal() public {\n        address deployed = deployCode(\"StdCheats.t.sol:Bar\", bytes(\"\"), 1 ether);\n        assertEq(string(getCode(deployed)), string(getCode(address(test))));\n        assertEq(deployed.balance, 1 ether);\n    }\n\n    function test_DeployCodeValNoArgs() public {\n        address deployed = deployCode(\"StdCheats.t.sol:Bar\", 1 ether);\n        assertEq(string(getCode(deployed)), string(getCode(address(test))));\n        assertEq(deployed.balance, 1 ether);\n    }\n\n    // We need this so we can call \"this.deployCode\" rather than \"deployCode\" directly\n    function deployCodeHelper(string memory what) external {\n        deployCode(what);\n    }\n\n    function test_RevertIf_DeployCodeFail() public {\n        vm.expectRevert(bytes(\"StdCheats deployCode(string): Deployment failed.\"));\n        this.deployCodeHelper(\"StdCheats.t.sol:RevertingContract\");\n    }\n\n    function getCode(address who) internal view returns (bytes memory o_code) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(who)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            o_code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(o_code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(who, add(o_code, 0x20), 0, size)\n        }\n    }\n\n    function test_DeriveRememberKey() public {\n        string memory mnemonic = \"test test test test test test test test test test test junk\";\n\n        (address deployer, uint256 privateKey) = deriveRememberKey(mnemonic, 0);\n        assertEq(deployer, 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\n        assertEq(privateKey, 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80);\n    }\n\n    function test_BytesToUint() public pure {\n        assertEq(3, bytesToUint_test(hex\"03\"));\n        assertEq(2, bytesToUint_test(hex\"02\"));\n        assertEq(255, bytesToUint_test(hex\"ff\"));\n        assertEq(29625, bytesToUint_test(hex\"73b9\"));\n    }\n\n    function test_ParseJsonTxDetail() public view {\n        string memory root = vm.projectRoot();\n        string memory path = string.concat(root, \"/test/fixtures/broadcast.log.json\");\n        string memory json = vm.readFile(path);\n        bytes memory transactionDetails = json.parseRaw(\".transactions[0].tx\");\n        RawTx1559Detail memory rawTxDetail = abi.decode(transactionDetails, (RawTx1559Detail));\n        Tx1559Detail memory txDetail = rawToConvertedEIP1559Detail(rawTxDetail);\n        assertEq(txDetail.from, 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\n        assertEq(txDetail.to, 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\n        assertEq(\n            txDetail.data,\n            hex\"23e99187000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000013370000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004\"\n        );\n        assertEq(txDetail.nonce, 3);\n        assertEq(txDetail.txType, 2);\n        assertEq(txDetail.gas, 29625);\n        assertEq(txDetail.value, 0);\n    }\n\n    function test_ReadEIP1559Transaction() public view {\n        string memory root = vm.projectRoot();\n        string memory path = string.concat(root, \"/test/fixtures/broadcast.log.json\");\n        uint256 index = 0;\n        Tx1559 memory transaction = readTx1559(path, index);\n        transaction;\n    }\n\n    function test_ReadEIP1559Transactions() public view {\n        string memory root = vm.projectRoot();\n        string memory path = string.concat(root, \"/test/fixtures/broadcast.log.json\");\n        Tx1559[] memory transactions = readTx1559s(path);\n        transactions;\n    }\n\n    function test_ReadReceipt() public view {\n        string memory root = vm.projectRoot();\n        string memory path = string.concat(root, \"/test/fixtures/broadcast.log.json\");\n        uint256 index = 5;\n        Receipt memory receipt = readReceipt(path, index);\n        assertEq(\n            receipt.logsBloom,\n            hexn        );\n    }\n\n    function test_ReadReceipts() public view {\n        string memory root = vm.projectRoot();\n        string memory path = string.concat(root, \"/test/fixtures/broadcast.log.json\");\n        Receipt[] memory receipts = readReceipts(path);\n        receipts;\n    }\n\n    function test_GasMeteringModifier() public {\n        uint256 gas_start_normal = gasleft();\n        addInLoop();\n        uint256 gas_used_normal = gas_start_normal - gasleft();\n\n        uint256 gas_start_single = gasleft();\n        addInLoopNoGas();\n        uint256 gas_used_single = gas_start_single - gasleft();\n\n        uint256 gas_start_double = gasleft();\n        addInLoopNoGasNoGas();\n        uint256 gas_used_double = gas_start_double - gasleft();\n\n        assertTrue(gas_used_double + gas_used_single < gas_used_normal);\n    }\n\n    function addInLoop() internal pure returns (uint256) {\n        uint256 b;\n        for (uint256 i; i < 10000; i++) {\n            b += i;\n        }\n        return b;\n    }\n\n    function addInLoopNoGas() internal noGasMetering returns (uint256) {\n        return addInLoop();\n    }\n\n    function addInLoopNoGasNoGas() internal noGasMetering returns (uint256) {\n        return addInLoopNoGas();\n    }\n\n    function bytesToUint_test(bytes memory b) private pure returns (uint256) {\n        uint256 number;\n        for (uint256 i = 0; i < b.length; i++) {\n            number = number + uint256(uint8(b[i])) * (2 ** (8 * (b.length - (i + 1))));\n        }\n        return number;\n    }\n\n    function testFuzz_AssumeAddressIsNot(address addr) external {\n        // skip over Payable and NonPayable enums\n        for (uint8 i = 2; i < uint8(type(AddressType).max); i++) {\n            assumeAddressIsNot(addr, AddressType(i));\n        }\n        assertTrue(addr != address(0));\n        assertTrue(addr < address(1) || addr > address(9));\n        assertTrue(addr != address(vm) || addr != 0x000000000000000000636F6e736F6c652e6c6f67);\n    }\n\n    function test_AssumePayable() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdCheatsMock stdCheatsMock = new StdCheatsMock();\n\n        // all should revert since these addresses are not payable\n\n        // VM address\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumePayable(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n        // Console address\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumePayable(0x000000000000000000636F6e736F6c652e6c6f67);\n\n        // Create2Deployer\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumePayable(0x4e59b44847b379578588920cA78FbF26c0B4956C);\n\n        // all should pass since these addresses are payable\n\n        // vitalik.eth\n        stdCheatsMock.exposed_assumePayable(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045);\n\n        // mock payable contract\n        MockContractPayable cp = new MockContractPayable();\n        stdCheatsMock.exposed_assumePayable(address(cp));\n    }\n\n    function test_AssumeNotPayable() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdCheatsMock stdCheatsMock = new StdCheatsMock();\n\n        // all should pass since these addresses are not payable\n\n        // VM address\n        stdCheatsMock.exposed_assumeNotPayable(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n        // Console address\n        stdCheatsMock.exposed_assumeNotPayable(0x000000000000000000636F6e736F6c652e6c6f67);\n\n        // Create2Deployer\n        stdCheatsMock.exposed_assumeNotPayable(0x4e59b44847b379578588920cA78FbF26c0B4956C);\n\n        // all should revert since these addresses are payable\n\n        // vitalik.eth\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumeNotPayable(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045);\n\n        // mock payable contract\n        MockContractPayable cp = new MockContractPayable();\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumeNotPayable(address(cp));\n    }\n\n    function testFuzz_AssumeNotPrecompile(address addr) external {\n        assumeNotPrecompile(addr, getChain(\"optimism_sepolia\").chainId);\n        assertTrue(\n            addr < address(1) || (addr > address(9) && addr < address(0x4200000000000000000000000000000000000000))\n                || addr > address(0x4200000000000000000000000000000000000800)\n        );\n    }\n\n    function testFuzz_AssumeNotForgeAddress(address addr) external pure {\n        assumeNotForgeAddress(addr);\n        assertTrue(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function test_RevertIf_CannotDeployCodeTo() external {\n        vm.expectRevert(\"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        this._revertDeployCodeTo();\n    }\n\n    function _revertDeployCodeTo() external {\n        deployCodeTo(\"StdCheats.t.sol:RevertingContract\", address(0));\n    }\n\n    function test_DeployCodeTo() external {\n        address arbitraryAddress = makeAddr(\"arbitraryAddress\");\n\n        deployCodeTo(\n            \"StdCheats.t.sol:MockContractWithConstructorArgs\",\n            abi.encode(uint256(6), true, bytes20(arbitraryAddress)),\n            1 ether,\n            arbitraryAddress\n        );\n\n        MockContractWithConstructorArgs ct = MockContractWithConstructorArgs(arbitraryAddress);\n\n        assertEq(arbitraryAddress.balance, 1 ether);\n        assertEq(ct.x(), 6);\n        assertTrue(ct.y());\n        assertEq(ct.z(), bytes20(arbitraryAddress));\n    }\n}\n\ncontract StdCheatsMock is StdCheats {\n    function exposed_assumePayable(address addr) external {\n        assumePayable(addr);\n    }\n\n    function exposed_assumeNotPayable(address addr) external {\n        assumeNotPayable(addr);\n    }\n\n    // We deploy a mock version so we can properly test expected reverts.\n    function exposed_assumeNotBlacklisted(address token, address addr) external view {\n        return assumeNotBlacklisted(token, addr);\n    }\n}\n\ncontract StdCheatsForkTest is Test {\n    address internal constant SHIB = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal constant USDC_BLACKLISTED_USER = 0x1E34A77868E19A6647b1f2F47B51ed72dEDE95DD;\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address internal constant USDT_BLACKLISTED_USER = 0x8f8a8F4B54a2aAC7799d7bc81368aC27b852822A;\n\n    function setUp() public {\n        // All tests of the `assumeNotBlacklisted` method are fork tests using live contracts.\n        vm.createSelectFork({urlOrAlias: \"mainnet\", blockNumber: 16_428_900});\n    }\n\n    function test_RevertIf_CannotAssumeNoBlacklisted_EOA() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdCheatsMock stdCheatsMock = new StdCheatsMock();\n        address eoa = vm.addr({privateKey: 1});\n        vm.expectRevert(\"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n        stdCheatsMock.exposed_assumeNotBlacklisted(eoa, address(0));\n    }\n\n    function testFuzz_AssumeNotBlacklisted_TokenWithoutBlacklist(address addr) external view {\n        assumeNotBlacklisted(SHIB, addr);\n        assertTrue(true);\n    }\n\n    function test_RevertIf_AssumeNoBlacklisted_USDC() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdCheatsMock stdCheatsMock = new StdCheatsMock();\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumeNotBlacklisted(USDC, USDC_BLACKLISTED_USER);\n    }\n\n    function testFuzz_AssumeNotBlacklisted_USDC(address addr) external view {\n        assumeNotBlacklisted(USDC, addr);\n        assertFalse(USDCLike(USDC).isBlacklisted(addr));\n    }\n\n    function test_RevertIf_AssumeNoBlacklisted_USDT() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdCheatsMock stdCheatsMock = new StdCheatsMock();\n        vm.expectRevert();\n        stdCheatsMock.exposed_assumeNotBlacklisted(USDT, USDT_BLACKLISTED_USER);\n    }\n\n    function testFuzz_AssumeNotBlacklisted_USDT(address addr) external view {\n        assumeNotBlacklisted(USDT, addr);\n        assertFalse(USDTLike(USDT).isBlackListed(addr));\n    }\n\n    function test_dealUSDC() external {\n        // roll fork to the point when USDC contract updated to store balance in packed slots\n        vm.rollFork(19279215);\n\n        uint256 balance = 100e6;\n        deal(USDC, address(this), balance);\n        assertEq(IERC20(USDC).balanceOf(address(this)), balance);\n    }\n}\n\ncontract Bar {\n    constructor() payable {\n        /// `DEAL` STDCHEAT\n        totalSupply = 10000e18;\n        balanceOf[address(this)] = totalSupply;\n    }\n\n    /// `HOAX` and `CHANGEPRANK` STDCHEATS\n    function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }\n\n    function origin(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n        require(tx.origin == expectedSender, \"!prank\");\n    }\n\n    function origin(address expectedSender, address expectedOrigin) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n        require(tx.origin == expectedOrigin, \"!prank\");\n    }\n\n    /// `DEAL` STDCHEAT\n    mapping(address => uint256) public balanceOf;\n    uint256 public totalSupply;\n}\n\ncontract BarERC1155 {\n    constructor() payable {\n        /// `DEALERC1155` STDCHEAT\n        _totalSupply[0] = 10000e18;\n        _balances[0][address(this)] = _totalSupply[0];\n    }\n\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /// `DEALERC1155` STDCHEAT\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n    mapping(uint256 => uint256) private _totalSupply;\n}\n\ncontract BarERC721 {\n    constructor() payable {\n        /// `DEALERC721` STDCHEAT\n        _owners[1] = address(1);\n        _balances[address(1)] = 1;\n        _owners[2] = address(this);\n        _owners[3] = address(this);\n        _balances[address(this)] = 2;\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        return _balances[owner];\n    }\n\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        address owner = _owners[tokenId];\n        return owner;\n    }\n\n    mapping(uint256 => address) private _owners;\n    mapping(address => uint256) private _balances;\n}\n\ninterface USDCLike {\n    function isBlacklisted(address) external view returns (bool);\n}\n\ninterface USDTLike {\n    function isBlackListed(address) external view returns (bool);\n}\n\ncontract RevertingContract {\n    constructor() {\n        revert();\n    }\n}\n\ncontract MockContractWithConstructorArgs {\n    uint256 public immutable x;\n    bool public y;\n    bytes20 public z;\n\n    constructor(uint256 _x, bool _y, bytes20 _z) payable {\n        x = _x;\n        y = _y;\n        z = _z;\n    }\n}\n\ncontract MockContractPayable {\n    receive() external payable {}\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdError.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {stdError} from \"../src/StdError.sol\";\nimport {Test} from \"../src/Test.sol\";\n\ncontract StdErrorsTest is Test {\n    ErrorsTest test;\n\n    function setUp() public {\n        test = new ErrorsTest();\n    }\n\n    function test_RevertIf_AssertionError() public {\n        vm.expectRevert(stdError.assertionError);\n        test.assertionError();\n    }\n\n    function test_RevertIf_ArithmeticError() public {\n        vm.expectRevert(stdError.arithmeticError);\n        test.arithmeticError(10);\n    }\n\n    function test_RevertIf_DivisionError() public {\n        vm.expectRevert(stdError.divisionError);\n        test.divError(0);\n    }\n\n    function test_RevertIf_ModError() public {\n        vm.expectRevert(stdError.divisionError);\n        test.modError(0);\n    }\n\n    function test_RevertIf_EnumConversionError() public {\n        vm.expectRevert(stdError.enumConversionError);\n        test.enumConversion(1);\n    }\n\n    function test_RevertIf_EncodeStgError() public {\n        vm.expectRevert(stdError.encodeStorageError);\n        test.encodeStgError();\n    }\n\n    function test_RevertIf_PopError() public {\n        vm.expectRevert(stdError.popError);\n        test.pop();\n    }\n\n    function test_RevertIf_IndexOOBError() public {\n        vm.expectRevert(stdError.indexOOBError);\n        test.indexOOBError(1);\n    }\n\n    function test_RevertIf_MemOverflowError() public {\n        vm.expectRevert(stdError.memOverflowError);\n        test.mem();\n    }\n\n    function test_RevertIf_InternError() public {\n        vm.expectRevert(stdError.zeroVarError);\n        test.intern();\n    }\n}\n\ncontract ErrorsTest {\n    enum T {\n        T1\n    }\n\n    uint256[] public someArr;\n    bytes someBytes;\n\n    function assertionError() public pure {\n        assert(false);\n    }\n\n    function arithmeticError(uint256 a) public pure {\n        a -= 100;\n    }\n\n    function divError(uint256 a) public pure {\n        100 / a;\n    }\n\n    function modError(uint256 a) public pure {\n        100 % a;\n    }\n\n    function enumConversion(uint256 a) public pure {\n        T(a);\n    }\n\n    function encodeStgError() public {\n        /// @solidity memory-safe-assembly\n        assembly {\n            sstore(someBytes.slot, 1)\n        }\n        keccak256(someBytes);\n    }\n\n    function pop() public {\n        someArr.pop();\n    }\n\n    function indexOOBError(uint256 a) public pure {\n        uint256[] memory t = new uint256[](0);\n        t[a];\n    }\n\n    function mem() public pure {\n        uint256 l = 2 ** 256 / 32;\n        new uint256[](l);\n    }\n\n    function intern() public returns (uint256) {\n        function(uint256) internal returns (uint256) x;\n        x(2);\n        return 7;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdJson.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Test, stdJson} from \"../src/Test.sol\";\n\ncontract StdJsonTest is Test {\n    using stdJson for string;\n\n    string root;\n    string path;\n\n    function setUp() public {\n        root = vm.projectRoot();\n        path = string.concat(root, \"/test/fixtures/test.json\");\n    }\n\n    struct SimpleJson {\n        uint256 a;\n        string b;\n    }\n\n    struct NestedJson {\n        uint256 a;\n        string b;\n        SimpleJson c;\n    }\n\n    function test_readJson() public view {\n        string memory json = vm.readFile(path);\n        assertEq(json.readUint(\".a\"), 123);\n    }\n\n    function test_writeJson() public {\n        string memory json = \"json\";\n        json.serialize(\"a\", uint256(123));\n        string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n        string memory finalJson = json.serialize(\"c\", semiFinal);\n        finalJson.write(path);\n\n        string memory json_ = vm.readFile(path);\n        bytes memory data = json_.parseRaw(\"$\");\n        NestedJson memory decodedData = abi.decode(data, (NestedJson));\n\n        assertEq(decodedData.a, 123);\n        assertEq(decodedData.b, \"test\");\n        assertEq(decodedData.c.a, 123);\n        assertEq(decodedData.c.b, \"test\");\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdMath.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {stdMath} from \"../src/StdMath.sol\";\nimport {Test, stdError} from \"../src/Test.sol\";\n\ncontract StdMathMock is Test {\n    function exposed_percentDelta(uint256 a, uint256 b) public pure returns (uint256) {\n        return stdMath.percentDelta(a, b);\n    }\n\n    function exposed_percentDelta(int256 a, int256 b) public pure returns (uint256) {\n        return stdMath.percentDelta(a, b);\n    }\n}\n\ncontract StdMathTest is Test {\n    function test_GetAbs() external pure {\n        assertEq(stdMath.abs(-50), 50);\n        assertEq(stdMath.abs(50), 50);\n        assertEq(stdMath.abs(-1337), 1337);\n        assertEq(stdMath.abs(0), 0);\n\n        assertEq(stdMath.abs(type(int256).min), (type(uint256).max >> 1) + 1);\n        assertEq(stdMath.abs(type(int256).max), (type(uint256).max >> 1));\n    }\n\n    function testFuzz_GetAbs(int256 a) external pure {\n        uint256 manualAbs = getAbs(a);\n\n        uint256 abs = stdMath.abs(a);\n\n        assertEq(abs, manualAbs);\n    }\n\n    function test_GetDelta_Uint() external pure {\n        assertEq(stdMath.delta(uint256(0), uint256(0)), 0);\n        assertEq(stdMath.delta(uint256(0), uint256(1337)), 1337);\n        assertEq(stdMath.delta(uint256(0), type(uint64).max), type(uint64).max);\n        assertEq(stdMath.delta(uint256(0), type(uint128).max), type(uint128).max);\n        assertEq(stdMath.delta(uint256(0), type(uint256).max), type(uint256).max);\n\n        assertEq(stdMath.delta(0, uint256(0)), 0);\n        assertEq(stdMath.delta(1337, uint256(0)), 1337);\n        assertEq(stdMath.delta(type(uint64).max, uint256(0)), type(uint64).max);\n        assertEq(stdMath.delta(type(uint128).max, uint256(0)), type(uint128).max);\n        assertEq(stdMath.delta(type(uint256).max, uint256(0)), type(uint256).max);\n\n        assertEq(stdMath.delta(1337, uint256(1337)), 0);\n        assertEq(stdMath.delta(type(uint256).max, type(uint256).max), 0);\n        assertEq(stdMath.delta(5000, uint256(1250)), 3750);\n    }\n\n    function testFuzz_GetDelta_Uint(uint256 a, uint256 b) external pure {\n        uint256 manualDelta = a > b ? a - b : b - a;\n\n        uint256 delta = stdMath.delta(a, b);\n\n        assertEq(delta, manualDelta);\n    }\n\n    function test_GetDelta_Int() external pure {\n        assertEq(stdMath.delta(int256(0), int256(0)), 0);\n        assertEq(stdMath.delta(int256(0), int256(1337)), 1337);\n        assertEq(stdMath.delta(int256(0), type(int64).max), type(uint64).max >> 1);\n        assertEq(stdMath.delta(int256(0), type(int128).max), type(uint128).max >> 1);\n        assertEq(stdMath.delta(int256(0), type(int256).max), type(uint256).max >> 1);\n\n        assertEq(stdMath.delta(0, int256(0)), 0);\n        assertEq(stdMath.delta(1337, int256(0)), 1337);\n        assertEq(stdMath.delta(type(int64).max, int256(0)), type(uint64).max >> 1);\n        assertEq(stdMath.delta(type(int128).max, int256(0)), type(uint128).max >> 1);\n        assertEq(stdMath.delta(type(int256).max, int256(0)), type(uint256).max >> 1);\n\n        assertEq(stdMath.delta(-0, int256(0)), 0);\n        assertEq(stdMath.delta(-1337, int256(0)), 1337);\n        assertEq(stdMath.delta(type(int64).min, int256(0)), (type(uint64).max >> 1) + 1);\n        assertEq(stdMath.delta(type(int128).min, int256(0)), (type(uint128).max >> 1) + 1);\n        assertEq(stdMath.delta(type(int256).min, int256(0)), (type(uint256).max >> 1) + 1);\n\n        assertEq(stdMath.delta(int256(0), -0), 0);\n        assertEq(stdMath.delta(int256(0), -1337), 1337);\n        assertEq(stdMath.delta(int256(0), type(int64).min), (type(uint64).max >> 1) + 1);\n        assertEq(stdMath.delta(int256(0), type(int128).min), (type(uint128).max >> 1) + 1);\n        assertEq(stdMath.delta(int256(0), type(int256).min), (type(uint256).max >> 1) + 1);\n\n        assertEq(stdMath.delta(1337, int256(1337)), 0);\n        assertEq(stdMath.delta(type(int256).max, type(int256).max), 0);\n        assertEq(stdMath.delta(type(int256).min, type(int256).min), 0);\n        assertEq(stdMath.delta(type(int256).min, type(int256).max), type(uint256).max);\n        assertEq(stdMath.delta(5000, int256(1250)), 3750);\n    }\n\n    function testFuzz_GetDelta_Int(int256 a, int256 b) external pure {\n        uint256 absA = getAbs(a);\n        uint256 absB = getAbs(b);\n        uint256 absDelta = absA > absB ? absA - absB : absB - absA;\n\n        uint256 manualDelta;\n        if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {\n            manualDelta = absDelta;\n        }\n        // (a < 0 && b >= 0) || (a >= 0 && b < 0)\n        else {\n            manualDelta = absA + absB;\n        }\n\n        uint256 delta = stdMath.delta(a, b);\n\n        assertEq(delta, manualDelta);\n    }\n\n    function test_GetPercentDelta_Uint() external {\n        StdMathMock stdMathMock = new StdMathMock();\n\n        assertEq(stdMath.percentDelta(uint256(0), uint256(1337)), 1e18);\n        assertEq(stdMath.percentDelta(uint256(0), type(uint64).max), 1e18);\n        assertEq(stdMath.percentDelta(uint256(0), type(uint128).max), 1e18);\n        assertEq(stdMath.percentDelta(uint256(0), type(uint192).max), 1e18);\n\n        assertEq(stdMath.percentDelta(1337, uint256(1337)), 0);\n        assertEq(stdMath.percentDelta(type(uint192).max, type(uint192).max), 0);\n        assertEq(stdMath.percentDelta(0, uint256(2500)), 1e18);\n        assertEq(stdMath.percentDelta(2500, uint256(2500)), 0);\n        assertEq(stdMath.percentDelta(5000, uint256(2500)), 1e18);\n        assertEq(stdMath.percentDelta(7500, uint256(2500)), 2e18);\n\n        vm.expectRevert(stdError.divisionError);\n        stdMathMock.exposed_percentDelta(uint256(1), 0);\n    }\n\n    function testFuzz_GetPercentDelta_Uint(uint192 a, uint192 b) external pure {\n        vm.assume(b != 0);\n        uint256 manualDelta = a > b ? a - b : b - a;\n\n        uint256 manualPercentDelta = manualDelta * 1e18 / b;\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        assertEq(percentDelta, manualPercentDelta);\n    }\n\n    function test_GetPercentDelta_Int() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdMathMock stdMathMock = new StdMathMock();\n\n        assertEq(stdMath.percentDelta(int256(0), int256(1337)), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), -1337), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), type(int64).min), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), type(int128).min), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), type(int192).min), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), type(int64).max), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), type(int128).max), 1e18);\n        assertEq(stdMath.percentDelta(int256(0), type(int192).max), 1e18);\n\n        assertEq(stdMath.percentDelta(1337, int256(1337)), 0);\n        assertEq(stdMath.percentDelta(type(int192).max, type(int192).max), 0);\n        assertEq(stdMath.percentDelta(type(int192).min, type(int192).min), 0);\n\n        assertEq(stdMath.percentDelta(type(int192).min, type(int192).max), 2e18); // rounds the 1 wei diff down\n        assertEq(stdMath.percentDelta(type(int192).max, type(int192).min), 2e18 - 1); // rounds the 1 wei diff down\n        assertEq(stdMath.percentDelta(0, int256(2500)), 1e18);\n        assertEq(stdMath.percentDelta(2500, int256(2500)), 0);\n        assertEq(stdMath.percentDelta(5000, int256(2500)), 1e18);\n        assertEq(stdMath.percentDelta(7500, int256(2500)), 2e18);\n\n        vm.expectRevert(stdError.divisionError);\n        stdMathMock.exposed_percentDelta(int256(1), 0);\n    }\n\n    function testFuzz_GetPercentDelta_Int(int192 a, int192 b) external pure {\n        vm.assume(b != 0);\n        uint256 absA = getAbs(a);\n        uint256 absB = getAbs(b);\n        uint256 absDelta = absA > absB ? absA - absB : absB - absA;\n\n        uint256 manualDelta;\n        if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {\n            manualDelta = absDelta;\n        }\n        // (a < 0 && b >= 0) || (a >= 0 && b < 0)\n        else {\n            manualDelta = absA + absB;\n        }\n\n        uint256 manualPercentDelta = manualDelta * 1e18 / absB;\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        assertEq(percentDelta, manualPercentDelta);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                   HELPERS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function getAbs(int256 a) private pure returns (uint256) {\n        if (a < 0) {\n            return a == type(int256).min ? uint256(type(int256).max) + 1 : uint256(-a);\n        }\n\n        return uint256(a);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdStorage.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {stdStorage, StdStorage} from \"../src/StdStorage.sol\";\nimport {Test} from \"../src/Test.sol\";\n\ncontract StdStorageTest is Test {\n    using stdStorage for StdStorage;\n\n    StorageTest internal test;\n\n    function setUp() public {\n        test = new StorageTest();\n    }\n\n    function test_StorageHidden() public {\n        assertEq(uint256(keccak256(\"my.random.var\")), stdstore.target(address(test)).sig(\"hidden()\").find());\n    }\n\n    function test_StorageObvious() public {\n        assertEq(uint256(0), stdstore.target(address(test)).sig(\"exists()\").find());\n    }\n\n    function test_StorageExtraSload() public {\n        assertEq(16, stdstore.target(address(test)).sig(test.extra_sload.selector).find());\n    }\n\n    function test_StorageCheckedWriteHidden() public {\n        stdstore.target(address(test)).sig(test.hidden.selector).checked_write(100);\n        assertEq(uint256(test.hidden()), 100);\n    }\n\n    function test_StorageCheckedWriteObvious() public {\n        stdstore.target(address(test)).sig(test.exists.selector).checked_write(100);\n        assertEq(test.exists(), 100);\n    }\n\n    function test_StorageCheckedWriteSignedIntegerHidden() public {\n        stdstore.target(address(test)).sig(test.hidden.selector).checked_write_int(-100);\n        assertEq(int256(uint256(test.hidden())), -100);\n    }\n\n    function test_StorageCheckedWriteSignedIntegerObvious() public {\n        stdstore.target(address(test)).sig(test.tG.selector).checked_write_int(-100);\n        assertEq(test.tG(), -100);\n    }\n\n    function test_StorageMapStructA() public {\n        uint256 slot =\n            stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(0).find();\n        assertEq(uint256(keccak256(abi.encode(address(this), 4))), slot);\n    }\n\n    function test_StorageMapStructB() public {\n        uint256 slot =\n            stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(1).find();\n        assertEq(uint256(keccak256(abi.encode(address(this), 4))) + 1, slot);\n    }\n\n    function test_StorageDeepMap() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.deep_map.selector).with_key(address(this)).with_key(\n            address(this)\n        ).find();\n        assertEq(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint256(5)))))), slot);\n    }\n\n    function test_StorageCheckedWriteDeepMap() public {\n        stdstore.target(address(test)).sig(test.deep_map.selector).with_key(address(this)).with_key(address(this))\n            .checked_write(100);\n        assertEq(100, test.deep_map(address(this), address(this)));\n    }\n\n    function test_StorageDeepMapStructA() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this))\n            .with_key(address(this)).depth(0).find();\n        assertEq(\n            bytes32(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint256(6)))))) + 0),\n            bytes32(slot)\n        );\n    }\n\n    function test_StorageDeepMapStructB() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this))\n            .with_key(address(this)).depth(1).find();\n        assertEq(\n            bytes32(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint256(6)))))) + 1),\n            bytes32(slot)\n        );\n    }\n\n    function test_StorageCheckedWriteDeepMapStructA() public {\n        stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this)).with_key(\n            address(this)\n        ).depth(0).checked_write(100);\n        (uint256 a, uint256 b) = test.deep_map_struct(address(this), address(this));\n        assertEq(100, a);\n        assertEq(0, b);\n    }\n\n    function test_StorageCheckedWriteDeepMapStructB() public {\n        stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this)).with_key(\n            address(this)\n        ).depth(1).checked_write(100);\n        (uint256 a, uint256 b) = test.deep_map_struct(address(this), address(this));\n        assertEq(0, a);\n        assertEq(100, b);\n    }\n\n    function test_StorageCheckedWriteMapStructA() public {\n        stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(0).checked_write(100);\n        (uint256 a, uint256 b) = test.map_struct(address(this));\n        assertEq(a, 100);\n        assertEq(b, 0);\n    }\n\n    function test_StorageCheckedWriteMapStructB() public {\n        stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(1).checked_write(100);\n        (uint256 a, uint256 b) = test.map_struct(address(this));\n        assertEq(a, 0);\n        assertEq(b, 100);\n    }\n\n    function test_StorageStructA() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.basic.selector).depth(0).find();\n        assertEq(uint256(7), slot);\n    }\n\n    function test_StorageStructB() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.basic.selector).depth(1).find();\n        assertEq(uint256(7) + 1, slot);\n    }\n\n    function test_StorageCheckedWriteStructA() public {\n        stdstore.target(address(test)).sig(test.basic.selector).depth(0).checked_write(100);\n        (uint256 a, uint256 b) = test.basic();\n        assertEq(a, 100);\n        assertEq(b, 1337);\n    }\n\n    function test_StorageCheckedWriteStructB() public {\n        stdstore.target(address(test)).sig(test.basic.selector).depth(1).checked_write(100);\n        (uint256 a, uint256 b) = test.basic();\n        assertEq(a, 1337);\n        assertEq(b, 100);\n    }\n\n    function test_StorageMapAddrFound() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).find();\n        assertEq(uint256(keccak256(abi.encode(address(this), uint256(1)))), slot);\n    }\n\n    function test_StorageMapAddrRoot() public {\n        (uint256 slot, bytes32 key) =\n            stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).parent();\n        assertEq(address(uint160(uint256(key))), address(this));\n        assertEq(uint256(1), slot);\n        slot = stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).root();\n        assertEq(uint256(1), slot);\n    }\n\n    function test_StorageMapUintFound() public {\n        uint256 slot = stdstore.target(address(test)).sig(test.map_uint.selector).with_key(100).find();\n        assertEq(uint256(keccak256(abi.encode(100, uint256(2)))), slot);\n    }\n\n    function test_StorageCheckedWriteMapUint() public {\n        stdstore.target(address(test)).sig(test.map_uint.selector).with_key(100).checked_write(100);\n        assertEq(100, test.map_uint(100));\n    }\n\n    function test_StorageCheckedWriteMapAddr() public {\n        stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).checked_write(100);\n        assertEq(100, test.map_addr(address(this)));\n    }\n\n    function test_StorageCheckedWriteMapBool() public {\n        stdstore.target(address(test)).sig(test.map_bool.selector).with_key(address(this)).checked_write(true);\n        assertTrue(test.map_bool(address(this)));\n    }\n\n    function testFuzz_StorageCheckedWriteMapPacked(address addr, uint128 value) public {\n        stdstore.enable_packed_slots().target(address(test)).sig(test.read_struct_lower.selector).with_key(addr)\n            .checked_write(value);\n        assertEq(test.read_struct_lower(addr), value);\n\n        stdstore.enable_packed_slots().target(address(test)).sig(test.read_struct_upper.selector).with_key(addr)\n            .checked_write(value);\n        assertEq(test.read_struct_upper(addr), value);\n    }\n\n    function test_StorageCheckedWriteMapPackedFullSuccess() public {\n        uint256 full = test.map_packed(address(1337));\n        // keep upper 128, set lower 128 to 1337\n        full = (full & (uint256((1 << 128) - 1) << 128)) | 1337;\n        stdstore.target(address(test)).sig(test.map_packed.selector).with_key(address(uint160(1337))).checked_write(\n            full\n        );\n        assertEq(1337, test.read_struct_lower(address(1337)));\n    }\n\n    function testFail_StorageConst() public {\n        // vm.expectRevert(abi.encodeWithSignature(\"NotStorage(bytes4)\", bytes4(keccak256(\"const()\"))));\n        stdstore.target(address(test)).sig(\"const()\").find();\n    }\n\n    function testFuzz_StorageNativePack(uint248 val1, uint248 val2, bool boolVal1, bool boolVal2) public {\n        stdstore.enable_packed_slots().target(address(test)).sig(test.tA.selector).checked_write(val1);\n        stdstore.enable_packed_slots().target(address(test)).sig(test.tB.selector).checked_write(boolVal1);\n        stdstore.enable_packed_slots().target(address(test)).sig(test.tC.selector).checked_write(boolVal2);\n        stdstore.enable_packed_slots().target(address(test)).sig(test.tD.selector).checked_write(val2);\n\n        assertEq(test.tA(), val1);\n        assertEq(test.tB(), boolVal1);\n        assertEq(test.tC(), boolVal2);\n        assertEq(test.tD(), val2);\n    }\n\n    function test_StorageReadBytes32() public {\n        bytes32 val = stdstore.target(address(test)).sig(test.tE.selector).read_bytes32();\n        assertEq(val, hex\"1337\");\n    }\n\n    function test_StorageReadBool_False() public {\n        bool val = stdstore.target(address(test)).sig(test.tB.selector).read_bool();\n        assertEq(val, false);\n    }\n\n    function test_StorageReadBool_True() public {\n        bool val = stdstore.target(address(test)).sig(test.tH.selector).read_bool();\n        assertEq(val, true);\n    }\n\n    function test_RevertIf_ReadingNonBoolValue() public {\n        vm.expectRevert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n        this.readNonBoolValue();\n    }\n\n    function readNonBoolValue() public {\n        stdstore.target(address(test)).sig(test.tE.selector).read_bool();\n    }\n\n    function test_StorageReadAddress() public {\n        address val = stdstore.target(address(test)).sig(test.tF.selector).read_address();\n        assertEq(val, address(1337));\n    }\n\n    function test_StorageReadUint() public {\n        uint256 val = stdstore.target(address(test)).sig(test.exists.selector).read_uint();\n        assertEq(val, 1);\n    }\n\n    function test_StorageReadInt() public {\n        int256 val = stdstore.target(address(test)).sig(test.tG.selector).read_int();\n        assertEq(val, type(int256).min);\n    }\n\n    function testFuzz_Packed(uint256 val, uint8 elemToGet) public {\n        // This function tries an assortment of packed slots, shifts meaning number of elements\n        // that are packed. Shiftsizes are the size of each element, i.e. 8 means a data type that is 8 bits, 16 == 16 bits, etc.\n        // Combined, these determine how a slot is packed. Making it random is too hard to avoid global rejection limit\n        // and make it performant.\n\n        // change the number of shifts\n        for (uint256 i = 1; i < 5; i++) {\n            uint256 shifts = i;\n\n            elemToGet = uint8(bound(elemToGet, 0, shifts - 1));\n\n            uint256[] memory shiftSizes = new uint256[](shifts);\n            for (uint256 j; j < shifts; j++) {\n                shiftSizes[j] = 8 * (j + 1);\n            }\n\n            test.setRandomPacking(val);\n\n            uint256 leftBits;\n            uint256 rightBits;\n            for (uint256 j; j < shiftSizes.length; j++) {\n                if (j < elemToGet) {\n                    leftBits += shiftSizes[j];\n                } else if (elemToGet != j) {\n                    rightBits += shiftSizes[j];\n                }\n            }\n\n            // we may have some right bits unaccounted for\n            leftBits += 256 - (leftBits + shiftSizes[elemToGet] + rightBits);\n            // clear left bits, then clear right bits and realign\n            uint256 expectedValToRead = (val << leftBits) >> (leftBits + rightBits);\n\n            uint256 readVal = stdstore.target(address(test)).enable_packed_slots().sig(\n                \"getRandomPacked(uint8,uint8[],uint8)\"\n            ).with_calldata(abi.encode(shifts, shiftSizes, elemToGet)).read_uint();\n\n            assertEq(readVal, expectedValToRead);\n        }\n    }\n\n    function testFuzz_Packed2(uint256 nvars, uint256 seed) public {\n        // Number of random variables to generate.\n        nvars = bound(nvars, 1, 20);\n\n        // This will decrease as we generate values in the below loop.\n        uint256 bitsRemaining = 256;\n\n        // Generate a random value and size for each variable.\n        uint256[] memory vals = new uint256[](nvars);\n        uint256[] memory sizes = new uint256[](nvars);\n        uint256[] memory offsets = new uint256[](nvars);\n\n        for (uint256 i = 0; i < nvars; i++) {\n            // Generate a random value and size.\n            offsets[i] = i == 0 ? 0 : offsets[i - 1] + sizes[i - 1];\n\n            uint256 nvarsRemaining = nvars - i;\n            uint256 maxVarSize = bitsRemaining - nvarsRemaining + 1;\n            sizes[i] = bound(uint256(keccak256(abi.encodePacked(seed, i + 256))), 1, maxVarSize);\n            bitsRemaining -= sizes[i];\n\n            uint256 maxVal;\n            uint256 varSize = sizes[i];\n            assembly {\n                // mask = (1 << varSize) - 1\n                maxVal := sub(shl(varSize, 1), 1)\n            }\n            vals[i] = bound(uint256(keccak256(abi.encodePacked(seed, i))), 0, maxVal);\n        }\n\n        // Pack all values into the slot.\n        for (uint256 i = 0; i < nvars; i++) {\n            stdstore.enable_packed_slots().target(address(test)).sig(\"getRandomPacked(uint256,uint256)\").with_key(\n                sizes[i]\n            ).with_key(offsets[i]).checked_write(vals[i]);\n        }\n\n        // Verify the read data matches.\n        for (uint256 i = 0; i < nvars; i++) {\n            uint256 readVal = stdstore.enable_packed_slots().target(address(test)).sig(\n                \"getRandomPacked(uint256,uint256)\"\n            ).with_key(sizes[i]).with_key(offsets[i]).read_uint();\n\n            uint256 retVal = test.getRandomPacked(sizes[i], offsets[i]);\n\n            assertEq(readVal, vals[i]);\n            assertEq(retVal, vals[i]);\n        }\n    }\n\n    function testEdgeCaseArray() public {\n        stdstore.target(address(test)).sig(\"edgeCaseArray(uint256)\").with_key(uint256(0)).checked_write(1);\n        assertEq(test.edgeCaseArray(0), 1);\n    }\n}\n\ncontract StorageTest {\n    uint256 public exists = 1;\n    mapping(address => uint256) public map_addr;\n    mapping(uint256 => uint256) public map_uint;\n    mapping(address => uint256) public map_packed;\n    mapping(address => UnpackedStruct) public map_struct;\n    mapping(address => mapping(address => uint256)) public deep_map;\n    mapping(address => mapping(address => UnpackedStruct)) public deep_map_struct;\n    UnpackedStruct public basic;\n\n    uint248 public tA;\n    bool public tB;\n\n    bool public tC = false;\n    uint248 public tD = 1;\n\n    struct UnpackedStruct {\n        uint256 a;\n        uint256 b;\n    }\n\n    mapping(address => bool) public map_bool;\n\n    bytes32 public tE = hex\"1337\";\n    address public tF = address(1337);\n    int256 public tG = type(int256).min;\n    bool public tH = true;\n    bytes32 private tI = ~bytes32(hex\"1337\");\n\n    uint256 randomPacking;\n\n    // Array with length matching values of elements.\n    uint256[] public edgeCaseArray = [3, 3, 3];\n\n    constructor() {\n        basic = UnpackedStruct({a: 1337, b: 1337});\n\n        uint256 two = (1 << 128) | 1;\n        map_packed[msg.sender] = two;\n        map_packed[address(uint160(1337))] = 1 << 128;\n    }\n\n    function read_struct_upper(address who) public view returns (uint256) {\n        return map_packed[who] >> 128;\n    }\n\n    function read_struct_lower(address who) public view returns (uint256) {\n        return map_packed[who] & ((1 << 128) - 1);\n    }\n\n    function hidden() public view returns (bytes32 t) {\n        bytes32 slot = keccak256(\"my.random.var\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := sload(slot)\n        }\n    }\n\n    function const() public pure returns (bytes32 t) {\n        t = bytes32(hex\"1337\");\n    }\n\n    function extra_sload() public view returns (bytes32 t) {\n        // trigger read on slot `tE`, and make a staticcall to make sure compiler doesn't optimize this SLOAD away\n        assembly {\n            pop(staticcall(gas(), sload(tE.slot), 0, 0, 0, 0))\n        }\n        t = tI;\n    }\n\n    function setRandomPacking(uint256 val) public {\n        randomPacking = val;\n    }\n\n    function _getMask(uint256 size) internal pure returns (uint256 mask) {\n        assembly {\n            // mask = (1 << size) - 1\n            mask := sub(shl(size, 1), 1)\n        }\n    }\n\n    function setRandomPacking(uint256 val, uint256 size, uint256 offset) public {\n        // Generate mask based on the size of the value\n        uint256 mask = _getMask(size);\n        // Zero out all bits for the word we're about to set\n        uint256 cleanedWord = randomPacking & ~(mask << offset);\n        // Place val in the correct spot of the cleaned word\n        randomPacking = cleanedWord | val << offset;\n    }\n\n    function getRandomPacked(uint256 size, uint256 offset) public view returns (uint256) {\n        // Generate mask based on the size of the value\n        uint256 mask = _getMask(size);\n        // Shift to place the bits in the correct position, and use mask to zero out remaining bits\n        return (randomPacking >> offset) & mask;\n    }\n\n    function getRandomPacked(uint8 shifts, uint8[] memory shiftSizes, uint8 elem) public view returns (uint256) {\n        require(elem < shifts, \"!elem\");\n        uint256 leftBits;\n        uint256 rightBits;\n\n        for (uint256 i; i < shiftSizes.length; i++) {\n            if (i < elem) {\n                leftBits += shiftSizes[i];\n            } else if (elem != i) {\n                rightBits += shiftSizes[i];\n            }\n        }\n\n        // we may have some right bits unaccounted for\n        leftBits += 256 - (leftBits + shiftSizes[elem] + rightBits);\n\n        // clear left bits, then clear right bits and realign\n        return (randomPacking << leftBits) >> (leftBits + rightBits);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdStyle.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Test, console2, StdStyle} from \"../src/Test.sol\";\n\ncontract StdStyleTest is Test {\n    function test_StyleColor() public pure {\n        console2.log(StdStyle.red(\"StdStyle.red String Test\"));\n        console2.log(StdStyle.red(uint256(10e18)));\n        console2.log(StdStyle.red(int256(-10e18)));\n        console2.log(StdStyle.red(true));\n        console2.log(StdStyle.red(address(0)));\n        console2.log(StdStyle.redBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.redBytes32(\"StdStyle.redBytes32\"));\n        console2.log(StdStyle.green(\"StdStyle.green String Test\"));\n        console2.log(StdStyle.green(uint256(10e18)));\n        console2.log(StdStyle.green(int256(-10e18)));\n        console2.log(StdStyle.green(true));\n        console2.log(StdStyle.green(address(0)));\n        console2.log(StdStyle.greenBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.greenBytes32(\"StdStyle.greenBytes32\"));\n        console2.log(StdStyle.yellow(\"StdStyle.yellow String Test\"));\n        console2.log(StdStyle.yellow(uint256(10e18)));\n        console2.log(StdStyle.yellow(int256(-10e18)));\n        console2.log(StdStyle.yellow(true));\n        console2.log(StdStyle.yellow(address(0)));\n        console2.log(StdStyle.yellowBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.yellowBytes32(\"StdStyle.yellowBytes32\"));\n        console2.log(StdStyle.blue(\"StdStyle.blue String Test\"));\n        console2.log(StdStyle.blue(uint256(10e18)));\n        console2.log(StdStyle.blue(int256(-10e18)));\n        console2.log(StdStyle.blue(true));\n        console2.log(StdStyle.blue(address(0)));\n        console2.log(StdStyle.blueBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.blueBytes32(\"StdStyle.blueBytes32\"));\n        console2.log(StdStyle.magenta(\"StdStyle.magenta String Test\"));\n        console2.log(StdStyle.magenta(uint256(10e18)));\n        console2.log(StdStyle.magenta(int256(-10e18)));\n        console2.log(StdStyle.magenta(true));\n        console2.log(StdStyle.magenta(address(0)));\n        console2.log(StdStyle.magentaBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.magentaBytes32(\"StdStyle.magentaBytes32\"));\n        console2.log(StdStyle.cyan(\"StdStyle.cyan String Test\"));\n        console2.log(StdStyle.cyan(uint256(10e18)));\n        console2.log(StdStyle.cyan(int256(-10e18)));\n        console2.log(StdStyle.cyan(true));\n        console2.log(StdStyle.cyan(address(0)));\n        console2.log(StdStyle.cyanBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.cyanBytes32(\"StdStyle.cyanBytes32\"));\n    }\n\n    function test_StyleFontWeight() public pure {\n        console2.log(StdStyle.bold(\"StdStyle.bold String Test\"));\n        console2.log(StdStyle.bold(uint256(10e18)));\n        console2.log(StdStyle.bold(int256(-10e18)));\n        console2.log(StdStyle.bold(address(0)));\n        console2.log(StdStyle.bold(true));\n        console2.log(StdStyle.boldBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.boldBytes32(\"StdStyle.boldBytes32\"));\n        console2.log(StdStyle.dim(\"StdStyle.dim String Test\"));\n        console2.log(StdStyle.dim(uint256(10e18)));\n        console2.log(StdStyle.dim(int256(-10e18)));\n        console2.log(StdStyle.dim(address(0)));\n        console2.log(StdStyle.dim(true));\n        console2.log(StdStyle.dimBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.dimBytes32(\"StdStyle.dimBytes32\"));\n        console2.log(StdStyle.italic(\"StdStyle.italic String Test\"));\n        console2.log(StdStyle.italic(uint256(10e18)));\n        console2.log(StdStyle.italic(int256(-10e18)));\n        console2.log(StdStyle.italic(address(0)));\n        console2.log(StdStyle.italic(true));\n        console2.log(StdStyle.italicBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.italicBytes32(\"StdStyle.italicBytes32\"));\n        console2.log(StdStyle.underline(\"StdStyle.underline String Test\"));\n        console2.log(StdStyle.underline(uint256(10e18)));\n        console2.log(StdStyle.underline(int256(-10e18)));\n        console2.log(StdStyle.underline(address(0)));\n        console2.log(StdStyle.underline(true));\n        console2.log(StdStyle.underlineBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.underlineBytes32(\"StdStyle.underlineBytes32\"));\n        console2.log(StdStyle.inverse(\"StdStyle.inverse String Test\"));\n        console2.log(StdStyle.inverse(uint256(10e18)));\n        console2.log(StdStyle.inverse(int256(-10e18)));\n        console2.log(StdStyle.inverse(address(0)));\n        console2.log(StdStyle.inverse(true));\n        console2.log(StdStyle.inverseBytes(hex\"7109709ECfa91a80626fF3989D68f67F5b1DD12D\"));\n        console2.log(StdStyle.inverseBytes32(\"StdStyle.inverseBytes32\"));\n    }\n\n    function test_StyleCombined() public pure {\n        console2.log(StdStyle.red(StdStyle.bold(\"Red Bold String Test\")));\n        console2.log(StdStyle.green(StdStyle.dim(uint256(10e18))));\n        console2.log(StdStyle.yellow(StdStyle.italic(int256(-10e18))));\n        console2.log(StdStyle.blue(StdStyle.underline(address(0))));\n        console2.log(StdStyle.magenta(StdStyle.inverse(true)));\n    }\n\n    function test_StyleCustom() public pure {\n        console2.log(h1(\"Custom Style 1\"));\n        console2.log(h2(\"Custom Style 2\"));\n    }\n\n    function h1(string memory a) private pure returns (string memory) {\n        return StdStyle.cyan(StdStyle.inverse(StdStyle.bold(a)));\n    }\n\n    function h2(string memory a) private pure returns (string memory) {\n        return StdStyle.magenta(StdStyle.bold(StdStyle.underline(a)));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdToml.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Test, stdToml} from \"../src/Test.sol\";\n\ncontract StdTomlTest is Test {\n    using stdToml for string;\n\n    string root;\n    string path;\n\n    function setUp() public {\n        root = vm.projectRoot();\n        path = string.concat(root, \"/test/fixtures/test.toml\");\n    }\n\n    struct SimpleToml {\n        uint256 a;\n        string b;\n    }\n\n    struct NestedToml {\n        uint256 a;\n        string b;\n        SimpleToml c;\n    }\n\n    function test_readToml() public view {\n        string memory json = vm.readFile(path);\n        assertEq(json.readUint(\".a\"), 123);\n    }\n\n    function test_writeToml() public {\n        string memory json = \"json\";\n        json.serialize(\"a\", uint256(123));\n        string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n        string memory finalJson = json.serialize(\"c\", semiFinal);\n        finalJson.write(path);\n\n        string memory toml = vm.readFile(path);\n        bytes memory data = toml.parseRaw(\"$\");\n        NestedToml memory decodedData = abi.decode(data, (NestedToml));\n\n        assertEq(decodedData.a, 123);\n        assertEq(decodedData.b, \"test\");\n        assertEq(decodedData.c.a, 123);\n        assertEq(decodedData.c.b, \"test\");\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/StdUtils.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Test, StdUtils} from \"../src/Test.sol\";\n\ncontract StdUtilsMock is StdUtils {\n    // We deploy a mock version so we can properly test expected reverts.\n    function exposed_getTokenBalances(address token, address[] memory addresses)\n        external\n        returns (uint256[] memory balances)\n    {\n        return getTokenBalances(token, addresses);\n    }\n\n    function exposed_bound(int256 num, int256 min, int256 max) external pure returns (int256) {\n        return bound(num, min, max);\n    }\n\n    function exposed_bound(uint256 num, uint256 min, uint256 max) external pure returns (uint256) {\n        return bound(num, min, max);\n    }\n\n    function exposed_bytesToUint(bytes memory b) external pure returns (uint256) {\n        return bytesToUint(b);\n    }\n}\n\ncontract StdUtilsTest is Test {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     BOUND UINT\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function test_Bound() public pure {\n        assertEq(bound(uint256(5), 0, 4), 0);\n        assertEq(bound(uint256(0), 69, 69), 69);\n        assertEq(bound(uint256(0), 68, 69), 68);\n        assertEq(bound(uint256(10), 150, 190), 174);\n        assertEq(bound(uint256(300), 2800, 3200), 3107);\n        assertEq(bound(uint256(9999), 1337, 6666), 4669);\n    }\n\n    function test_Bound_WithinRange() public pure {\n        assertEq(bound(uint256(51), 50, 150), 51);\n        assertEq(bound(uint256(51), 50, 150), bound(bound(uint256(51), 50, 150), 50, 150));\n        assertEq(bound(uint256(149), 50, 150), 149);\n        assertEq(bound(uint256(149), 50, 150), bound(bound(uint256(149), 50, 150), 50, 150));\n    }\n\n    function test_Bound_EdgeCoverage() public pure {\n        assertEq(bound(uint256(0), 50, 150), 50);\n        assertEq(bound(uint256(1), 50, 150), 51);\n        assertEq(bound(uint256(2), 50, 150), 52);\n        assertEq(bound(uint256(3), 50, 150), 53);\n        assertEq(bound(type(uint256).max, 50, 150), 150);\n        assertEq(bound(type(uint256).max - 1, 50, 150), 149);\n        assertEq(bound(type(uint256).max - 2, 50, 150), 148);\n        assertEq(bound(type(uint256).max - 3, 50, 150), 147);\n    }\n\n    function testFuzz_Bound_DistributionIsEven(uint256 min, uint256 size) public pure {\n        size = size % 100 + 1;\n        min = bound(min, UINT256_MAX / 2, UINT256_MAX / 2 + size);\n        uint256 max = min + size - 1;\n        uint256 result;\n\n        for (uint256 i = 1; i <= size * 4; ++i) {\n            // x > max\n            result = bound(max + i, min, max);\n            assertEq(result, min + (i - 1) % size);\n            // x < min\n            result = bound(min - i, min, max);\n            assertEq(result, max - (i - 1) % size);\n        }\n    }\n\n    function testFuzz_Bound(uint256 num, uint256 min, uint256 max) public pure {\n        if (min > max) (min, max) = (max, min);\n\n        uint256 result = bound(num, min, max);\n\n        assertGe(result, min);\n        assertLe(result, max);\n        assertEq(result, bound(result, min, max));\n        if (num >= min && num <= max) assertEq(result, num);\n    }\n\n    function test_BoundUint256Max() public pure {\n        assertEq(bound(0, type(uint256).max - 1, type(uint256).max), type(uint256).max - 1);\n        assertEq(bound(1, type(uint256).max - 1, type(uint256).max), type(uint256).max);\n    }\n\n    function test_RevertIf_BoundMaxLessThanMin() public {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        vm.expectRevert(bytes(\"StdUtils bound(uint256,uint256,uint256): Max is less than min.\"));\n        stdUtils.exposed_bound(uint256(5), 100, 10);\n    }\n\n    function testFuzz_RevertIf_BoundMaxLessThanMin(uint256 num, uint256 min, uint256 max) public {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        vm.assume(min > max);\n        vm.expectRevert(bytes(\"StdUtils bound(uint256,uint256,uint256): Max is less than min.\"));\n        stdUtils.exposed_bound(num, min, max);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     BOUND INT\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function test_BoundInt() public pure {\n        assertEq(bound(-3, 0, 4), 2);\n        assertEq(bound(0, -69, -69), -69);\n        assertEq(bound(0, -69, -68), -68);\n        assertEq(bound(-10, 150, 190), 154);\n        assertEq(bound(-300, 2800, 3200), 2908);\n        assertEq(bound(9999, -1337, 6666), 1995);\n    }\n\n    function test_BoundInt_WithinRange() public pure {\n        assertEq(bound(51, -50, 150), 51);\n        assertEq(bound(51, -50, 150), bound(bound(51, -50, 150), -50, 150));\n        assertEq(bound(149, -50, 150), 149);\n        assertEq(bound(149, -50, 150), bound(bound(149, -50, 150), -50, 150));\n    }\n\n    function test_BoundInt_EdgeCoverage() public pure {\n        assertEq(bound(type(int256).min, -50, 150), -50);\n        assertEq(bound(type(int256).min + 1, -50, 150), -49);\n        assertEq(bound(type(int256).min + 2, -50, 150), -48);\n        assertEq(bound(type(int256).min + 3, -50, 150), -47);\n        assertEq(bound(type(int256).min, 10, 150), 10);\n        assertEq(bound(type(int256).min + 1, 10, 150), 11);\n        assertEq(bound(type(int256).min + 2, 10, 150), 12);\n        assertEq(bound(type(int256).min + 3, 10, 150), 13);\n\n        assertEq(bound(type(int256).max, -50, 150), 150);\n        assertEq(bound(type(int256).max - 1, -50, 150), 149);\n        assertEq(bound(type(int256).max - 2, -50, 150), 148);\n        assertEq(bound(type(int256).max - 3, -50, 150), 147);\n        assertEq(bound(type(int256).max, -50, -10), -10);\n        assertEq(bound(type(int256).max - 1, -50, -10), -11);\n        assertEq(bound(type(int256).max - 2, -50, -10), -12);\n        assertEq(bound(type(int256).max - 3, -50, -10), -13);\n    }\n\n    function testFuzz_BoundInt_DistributionIsEven(int256 min, uint256 size) public pure {\n        size = size % 100 + 1;\n        min = bound(min, -int256(size / 2), int256(size - size / 2));\n        int256 max = min + int256(size) - 1;\n        int256 result;\n\n        for (uint256 i = 1; i <= size * 4; ++i) {\n            // x > max\n            result = bound(max + int256(i), min, max);\n            assertEq(result, min + int256((i - 1) % size));\n            // x < min\n            result = bound(min - int256(i), min, max);\n            assertEq(result, max - int256((i - 1) % size));\n        }\n    }\n\n    function testFuzz_BoundInt(int256 num, int256 min, int256 max) public pure {\n        if (min > max) (min, max) = (max, min);\n\n        int256 result = bound(num, min, max);\n\n        assertGe(result, min);\n        assertLe(result, max);\n        assertEq(result, bound(result, min, max));\n        if (num >= min && num <= max) assertEq(result, num);\n    }\n\n    function test_BoundIntInt256Max() public pure {\n        assertEq(bound(0, type(int256).max - 1, type(int256).max), type(int256).max - 1);\n        assertEq(bound(1, type(int256).max - 1, type(int256).max), type(int256).max);\n    }\n\n    function test_BoundIntInt256Min() public pure {\n        assertEq(bound(0, type(int256).min, type(int256).min + 1), type(int256).min);\n        assertEq(bound(1, type(int256).min, type(int256).min + 1), type(int256).min + 1);\n    }\n\n    function test_RevertIf_BoundIntMaxLessThanMin() public {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        vm.expectRevert(bytes(\"StdUtils bound(int256,int256,int256): Max is less than min.\"));\n        stdUtils.exposed_bound(-5, 100, 10);\n    }\n\n    function testFuzz_RevertIf_BoundIntMaxLessThanMin(int256 num, int256 min, int256 max) public {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        vm.assume(min > max);\n        vm.expectRevert(bytes(\"StdUtils bound(int256,int256,int256): Max is less than min.\"));\n        stdUtils.exposed_bound(num, min, max);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                BOUND PRIVATE KEY\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function test_BoundPrivateKey() public pure {\n        assertEq(boundPrivateKey(0), 1);\n        assertEq(boundPrivateKey(1), 1);\n        assertEq(boundPrivateKey(300), 300);\n        assertEq(boundPrivateKey(9999), 9999);\n        assertEq(boundPrivateKey(SECP256K1_ORDER - 1), SECP256K1_ORDER - 1);\n        assertEq(boundPrivateKey(SECP256K1_ORDER), 1);\n        assertEq(boundPrivateKey(SECP256K1_ORDER + 1), 2);\n        assertEq(boundPrivateKey(UINT256_MAX), UINT256_MAX & SECP256K1_ORDER - 1); // x&y is equivalent to x-x%y\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                   BYTES TO UINT\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function test_BytesToUint() external pure {\n        bytes memory maxUint = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n        bytes memory two = hex\"02\";\n        bytes memory millionEther = hex\"d3c21bcecceda1000000\";\n\n        assertEq(bytesToUint(maxUint), type(uint256).max);\n        assertEq(bytesToUint(two), 2);\n        assertEq(bytesToUint(millionEther), 1_000_000 ether);\n    }\n\n    function test_RevertIf_BytesLengthExceeds32() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        bytes memory thirty3Bytes = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n        vm.expectRevert(\"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        stdUtils.exposed_bytesToUint(thirty3Bytes);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                               COMPUTE CREATE ADDRESS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function test_ComputeCreateAddress() external pure {\n        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;\n        uint256 nonce = 14;\n        address createAddress = computeCreateAddress(deployer, nonce);\n        assertEq(createAddress, 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                              COMPUTE CREATE2 ADDRESS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function test_ComputeCreate2Address() external pure {\n        bytes32 salt = bytes32(uint256(31415));\n        bytes32 initcodeHash = keccak256(abi.encode(0x6080));\n        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;\n        address create2Address = computeCreate2Address(salt, initcodeHash, deployer);\n        assertEq(create2Address, 0xB147a5d25748fda14b463EB04B111027C290f4d3);\n    }\n\n    function test_ComputeCreate2AddressWithDefaultDeployer() external pure {\n        bytes32 salt = 0xc290c670fde54e5ef686f9132cbc8711e76a98f0333a438a92daa442c71403c0;\n        bytes32 initcodeHash = hashInitCode(hex\"6080\", \"\");\n        assertEq(initcodeHash, 0x1a578b7a4b0b5755db6d121b4118d4bc68fe170dca840c59bc922f14175a76b0);\n        address create2Address = computeCreate2Address(salt, initcodeHash);\n        assertEq(create2Address, 0xc0ffEe2198a06235aAbFffe5Db0CacF1717f5Ac6);\n    }\n}\n\ncontract StdUtilsForkTest is Test {\n    /*//////////////////////////////////////////////////////////////////////////\n                                  GET TOKEN BALANCES\n    //////////////////////////////////////////////////////////////////////////*/\n\n    address internal SHIB = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;\n    address internal SHIB_HOLDER_0 = 0x855F5981e831D83e6A4b4EBFCAdAa68D92333170;\n    address internal SHIB_HOLDER_1 = 0x8F509A90c2e47779cA408Fe00d7A72e359229AdA;\n    address internal SHIB_HOLDER_2 = 0x0e3bbc0D04fF62211F71f3e4C45d82ad76224385;\n\n    address internal USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal USDC_HOLDER_0 = 0xDa9CE944a37d218c3302F6B82a094844C6ECEb17;\n    address internal USDC_HOLDER_1 = 0x3e67F4721E6d1c41a015f645eFa37BEd854fcf52;\n\n    function setUp() public {\n        // All tests of the `getTokenBalances` method are fork tests using live contracts.\n        vm.createSelectFork({urlOrAlias: \"mainnet\", blockNumber: 16_428_900});\n    }\n\n    function test_RevertIf_CannotGetTokenBalances_NonTokenContract() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        // The UniswapV2Factory contract has neither a `balanceOf` function nor a fallback function,\n        // so the `balanceOf` call should revert.\n        address token = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n        address[] memory addresses = new address[](1);\n        addresses[0] = USDC_HOLDER_0;\n\n        vm.expectRevert(\"Multicall3: call failed\");\n        stdUtils.exposed_getTokenBalances(token, addresses);\n    }\n\n    function test_RevertIf_CannotGetTokenBalances_EOA() external {\n        // We deploy a mock version so we can properly test the revert.\n        StdUtilsMock stdUtils = new StdUtilsMock();\n\n        address eoa = vm.addr({privateKey: 1});\n        address[] memory addresses = new address[](1);\n        addresses[0] = USDC_HOLDER_0;\n        vm.expectRevert(\"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n        stdUtils.exposed_getTokenBalances(eoa, addresses);\n    }\n\n    function test_GetTokenBalances_Empty() external {\n        address[] memory addresses = new address[](0);\n        uint256[] memory balances = getTokenBalances(USDC, addresses);\n        assertEq(balances.length, 0);\n    }\n\n    function test_GetTokenBalances_USDC() external {\n        address[] memory addresses = new address[](2);\n        addresses[0] = USDC_HOLDER_0;\n        addresses[1] = USDC_HOLDER_1;\n        uint256[] memory balances = getTokenBalances(USDC, addresses);\n        assertEq(balances[0], 159_000_000_000_000);\n        assertEq(balances[1], 131_350_000_000_000);\n    }\n\n    function test_GetTokenBalances_SHIB() external {\n        address[] memory addresses = new address[](3);\n        addresses[0] = SHIB_HOLDER_0;\n        addresses[1] = SHIB_HOLDER_1;\n        addresses[2] = SHIB_HOLDER_2;\n        uint256[] memory balances = getTokenBalances(SHIB, addresses);\n        assertEq(balances[0], 3_323_256_285_484.42e18);\n        assertEq(balances[1], 1_271_702_771_149.99999928e18);\n        assertEq(balances[2], 606_357_106_247e18);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/Vm.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Test} from \"../src/Test.sol\";\nimport {Vm, VmSafe} from \"../src/Vm.sol\";\n\n// These tests ensure that functions are never accidentally removed from a Vm interface, or\n// inadvertently moved between Vm and VmSafe. These tests must be updated each time a function is\n// added to or removed from Vm or VmSafe.\ncontract VmTest is Test {\n    function test_VmInterfaceId() public pure {\n        assertEq(type(Vm).interfaceId, bytes4(0x329891d9), \"Vm\");\n    }\n\n    function test_VmSafeInterfaceId() public pure {\n        assertEq(type(VmSafe).interfaceId, bytes4(0xb09496a4), \"VmSafe\");\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/compilation/CompilationScript.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"../../src/Script.sol\";\n\n// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing\n// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207\ncontract CompilationScript is Script {}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/compilation/CompilationScriptBase.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"../../src/Script.sol\";\n\n// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing\n// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207\ncontract CompilationScriptBase is ScriptBase {}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/compilation/CompilationTest.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"../../src/Test.sol\";\n\n// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing\n// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207\ncontract CompilationTest is Test {}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/compilation/CompilationTestBase.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"../../src/Test.sol\";\n\n// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing\n// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207\ncontract CompilationTestBase is TestBase {}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/fixtures/broadcast.log.json": "{\n  \"transactions\": [\n    {\n      \"hash\": \"0xc6006863c267735a11476b7f15b15bc718e117e2da114a2be815dd651e1a509f\",\n      \"type\": \"CALL\",\n      \"contractName\": \"Test\",\n      \"contractAddress\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n      \"function\": \"multiple_arguments(uint256,address,uint256[]):(uint256)\",\n      \"arguments\": [\"1\", \"0000000000000000000000000000000000001337\", \"[3,4]\"],\n      \"tx\": {\n        \"type\": \"0x02\",\n        \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n        \"to\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n        \"gas\": \"0x73b9\",\n        \"value\": \"0x0\",\n        \"data\": \"0x23e99187000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000013370000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004\",\n        \"nonce\": \"0x3\",\n        \"accessList\": []\n      }\n    },\n    {\n      \"hash\": \"0xedf2b38d8d896519a947a1acf720f859bb35c0c5ecb8dd7511995b67b9853298\",\n      \"type\": \"CALL\",\n      \"contractName\": \"Test\",\n      \"contractAddress\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n      \"function\": \"inc():(uint256)\",\n      \"arguments\": [],\n      \"tx\": {\n        \"type\": \"0x02\",\n        \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n        \"to\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n        \"gas\": \"0xdcb2\",\n        \"value\": \"0x0\",\n        \"data\": \"0x371303c0\",\n        \"nonce\": \"0x4\",\n        \"accessList\": []\n      }\n    },\n    {\n      \"hash\": \"0xa57e8e3981a6c861442e46c9471bd19cb3e21f9a8a6c63a72e7b5c47c6675a7c\",\n      \"type\": \"CALL\",\n      \"contractName\": \"Test\",\n      \"contractAddress\": \"0x7c6b4bbe207d642d98d5c537142d85209e585087\",\n      \"function\": \"t(uint256):(uint256)\",\n      \"arguments\": [\"1\"],\n      \"tx\": {\n        \"type\": \"0x02\",\n        \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n        \"to\": \"0x7c6b4bbe207d642d98d5c537142d85209e585087\",\n        \"gas\": \"0x8599\",\n        \"value\": \"0x0\",\n        \"data\": \"0xafe29f710000000000000000000000000000000000000000000000000000000000000001\",\n        \"nonce\": \"0x5\",\n        \"accessList\": []\n      }\n    }\n  ],\n  \"receipts\": [\n    {\n      \"transactionHash\": \"0x481dc86e40bba90403c76f8e144aa9ff04c1da2164299d0298573835f0991181\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0xef0730448490304e5403be0fa8f8ce64f118e9adcca60c07a2ae1ab921d748af\",\n      \"blockNumber\": \"0x1\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": null,\n      \"cumulativeGasUsed\": \"0x13f3a\",\n      \"gasUsed\": \"0x13f3a\",\n      \"contractAddress\": \"0x5fbdb2315678afecb367f032d93f642f64180aa3\",\n      \"logs\": [],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"effectiveGasPrice\": \"0xee6b2800\"\n    },\n    {\n      \"transactionHash\": \"0x6a187183545b8a9e7f1790e847139379bf5622baff2cb43acf3f5c79470af782\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0xf3acb96a90071640c2a8c067ae4e16aad87e634ea8d8bbbb5b352fba86ba0148\",\n      \"blockNumber\": \"0x2\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": null,\n      \"cumulativeGasUsed\": \"0x45d80\",\n      \"gasUsed\": \"0x45d80\",\n      \"contractAddress\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n      \"logs\": [],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"effectiveGasPrice\": \"0xee6b2800\"\n    },\n    {\n      \"transactionHash\": \"0x064ad173b4867bdef2fb60060bbdaf01735fbf10414541ea857772974e74ea9d\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0x8373d02109d3ee06a0225f23da4c161c656ccc48fe0fcee931d325508ae73e58\",\n      \"blockNumber\": \"0x3\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": \"0x4e59b44847b379578588920ca78fbf26c0b4956c\",\n      \"cumulativeGasUsed\": \"0x45feb\",\n      \"gasUsed\": \"0x45feb\",\n      \"contractAddress\": null,\n      \"logs\": [],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"effectiveGasPrice\": \"0xee6b2800\"\n    },\n    {\n      \"transactionHash\": \"0xc6006863c267735a11476b7f15b15bc718e117e2da114a2be815dd651e1a509f\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0x16712fae5c0e18f75045f84363fb6b4d9a9fe25e660c4ce286833a533c97f629\",\n      \"blockNumber\": \"0x4\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n      \"cumulativeGasUsed\": \"0x5905\",\n      \"gasUsed\": \"0x5905\",\n      \"contractAddress\": null,\n      \"logs\": [],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"effectiveGasPrice\": \"0xee6b2800\"\n    },\n    {\n      \"transactionHash\": \"0xedf2b38d8d896519a947a1acf720f859bb35c0c5ecb8dd7511995b67b9853298\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0x156b88c3eb9a1244ba00a1834f3f70de735b39e3e59006dd03af4fe7d5480c11\",\n      \"blockNumber\": \"0x5\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n      \"cumulativeGasUsed\": \"0xa9c4\",\n      \"gasUsed\": \"0xa9c4\",\n      \"contractAddress\": null,\n      \"logs\": [],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"effectiveGasPrice\": \"0xee6b2800\"\n    },\n    {\n      \"transactionHash\": \"0xa57e8e3981a6c861442e46c9471bd19cb3e21f9a8a6c63a72e7b5c47c6675a7c\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0xcf61faca67dbb2c28952b0b8a379e53b1505ae0821e84779679390cb8571cadb\",\n      \"blockNumber\": \"0x6\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": \"0x7c6b4bbe207d642d98d5c537142d85209e585087\",\n      \"cumulativeGasUsed\": \"0x66c5\",\n      \"gasUsed\": \"0x66c5\",\n      \"contractAddress\": null,\n      \"logs\": [\n        {\n          \"address\": \"0x7c6b4bbe207d642d98d5c537142d85209e585087\",\n          \"topics\": [\n            \"0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b\"\n          ],\n          \"data\": \"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046865726500000000000000000000000000000000000000000000000000000000\",\n          \"blockHash\": \"0xcf61faca67dbb2c28952b0b8a379e53b1505ae0821e84779679390cb8571cadb\",\n          \"blockNumber\": \"0x6\",\n          \"transactionHash\": \"0xa57e8e3981a6c861442e46c9471bd19cb3e21f9a8a6c63a72e7b5c47c6675a7c\",\n          \"transactionIndex\": \"0x1\",\n          \"logIndex\": \"0x0\",\n          \"transactionLogIndex\": \"0x0\",\n          \"removed\": false\n        }\n      ],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0xn      \"effectiveGasPrice\": \"0xee6b2800\"\n    },\n    {\n      \"transactionHash\": \"0x11fbb10230c168ca1e36a7e5c69a6dbcd04fd9e64ede39d10a83e36ee8065c16\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0xf1e0ed2eda4e923626ec74621006ed50b3fc27580dc7b4cf68a07ca77420e29c\",\n      \"blockNumber\": \"0x7\",\n      \"from\": \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n      \"to\": \"0x0000000000000000000000000000000000001337\",\n      \"cumulativeGasUsed\": \"0x5208\",\n      \"gasUsed\": \"0x5208\",\n      \"contractAddress\": null,\n      \"logs\": [],\n      \"status\": \"0x1\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"effectiveGasPrice\": \"0xee6b2800\"\n    }\n  ],\n  \"libraries\": [\n    \"src/Broadcast.t.sol:F:0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n  ],\n  \"pending\": [],\n  \"path\": \"broadcast/Broadcast.t.sol/31337/run-latest.json\",\n  \"returns\": {},\n  \"timestamp\": 1655140035\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/fixtures/test.json": "{\n  \"a\": 123,\n  \"b\": \"test\",\n  \"c\": {\n    \"a\": 123,\n    \"b\": \"test\"\n  }\n}",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/fixtures/test.toml": "a = 123\nb = \"test\"\n\n[c]\na = 123\nb = \"test\"\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/mocks/MockERC20.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {MockERC20} from \"../../src/mocks/MockERC20.sol\";\nimport {StdCheats} from \"../../src/StdCheats.sol\";\nimport {Test} from \"../../src/Test.sol\";\n\ncontract Token_ERC20 is MockERC20 {\n    constructor(string memory name, string memory symbol, uint8 decimals) {\n        initialize(name, symbol, decimals);\n    }\n\n    function mint(address to, uint256 value) public virtual {\n        _mint(to, value);\n    }\n\n    function burn(address from, uint256 value) public virtual {\n        _burn(from, value);\n    }\n}\n\ncontract MockERC20Test is StdCheats, Test {\n    Token_ERC20 token;\n\n    bytes32 constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    function setUp() public {\n        token = new Token_ERC20(\"Token\", \"TKN\", 18);\n    }\n\n    function invariantMetadata() public view {\n        assertEq(token.name(), \"Token\");\n        assertEq(token.symbol(), \"TKN\");\n        assertEq(token.decimals(), 18);\n    }\n\n    function testMint() public {\n        token.mint(address(0xBEEF), 1e18);\n\n        assertEq(token.totalSupply(), 1e18);\n        assertEq(token.balanceOf(address(0xBEEF)), 1e18);\n    }\n\n    function testBurn() public {\n        token.mint(address(0xBEEF), 1e18);\n        token.burn(address(0xBEEF), 0.9e18);\n\n        assertEq(token.totalSupply(), 1e18 - 0.9e18);\n        assertEq(token.balanceOf(address(0xBEEF)), 0.1e18);\n    }\n\n    function testApprove() public {\n        assertTrue(token.approve(address(0xBEEF), 1e18));\n\n        assertEq(token.allowance(address(this), address(0xBEEF)), 1e18);\n    }\n\n    function testTransfer() public {\n        token.mint(address(this), 1e18);\n\n        assertTrue(token.transfer(address(0xBEEF), 1e18));\n        assertEq(token.totalSupply(), 1e18);\n\n        assertEq(token.balanceOf(address(this)), 0);\n        assertEq(token.balanceOf(address(0xBEEF)), 1e18);\n    }\n\n    function testTransferFrom() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 1e18);\n\n        vm.prank(from);\n        token.approve(address(this), 1e18);\n\n        assertTrue(token.transferFrom(from, address(0xBEEF), 1e18));\n        assertEq(token.totalSupply(), 1e18);\n\n        assertEq(token.allowance(from, address(this)), 0);\n\n        assertEq(token.balanceOf(from), 0);\n        assertEq(token.balanceOf(address(0xBEEF)), 1e18);\n    }\n\n    function testInfiniteApproveTransferFrom() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 1e18);\n\n        vm.prank(from);\n        token.approve(address(this), type(uint256).max);\n\n        assertTrue(token.transferFrom(from, address(0xBEEF), 1e18));\n        assertEq(token.totalSupply(), 1e18);\n\n        assertEq(token.allowance(from, address(this)), type(uint256).max);\n\n        assertEq(token.balanceOf(from), 0);\n        assertEq(token.balanceOf(address(0xBEEF)), 1e18);\n    }\n\n    function testPermit() public {\n        uint256 privateKey = 0xBEEF;\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, address(0xCAFE), 1e18, 0, block.timestamp))\n                )\n            )\n        );\n\n        token.permit(owner, address(0xCAFE), 1e18, block.timestamp, v, r, s);\n\n        assertEq(token.allowance(owner, address(0xCAFE)), 1e18);\n        assertEq(token.nonces(owner), 1);\n    }\n\n    function testFailTransferInsufficientBalance() public {\n        token.mint(address(this), 0.9e18);\n        token.transfer(address(0xBEEF), 1e18);\n    }\n\n    function testFailTransferFromInsufficientAllowance() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 1e18);\n\n        vm.prank(from);\n        token.approve(address(this), 0.9e18);\n\n        token.transferFrom(from, address(0xBEEF), 1e18);\n    }\n\n    function testFailTransferFromInsufficientBalance() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 0.9e18);\n\n        vm.prank(from);\n        token.approve(address(this), 1e18);\n\n        token.transferFrom(from, address(0xBEEF), 1e18);\n    }\n\n    function testFailPermitBadNonce() public {\n        uint256 privateKey = 0xBEEF;\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, address(0xCAFE), 1e18, 1, block.timestamp))\n                )\n            )\n        );\n\n        token.permit(owner, address(0xCAFE), 1e18, block.timestamp, v, r, s);\n    }\n\n    function testFailPermitBadDeadline() public {\n        uint256 privateKey = 0xBEEF;\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, address(0xCAFE), 1e18, 0, block.timestamp))\n                )\n            )\n        );\n\n        token.permit(owner, address(0xCAFE), 1e18, block.timestamp + 1, v, r, s);\n    }\n\n    function testFailPermitPastDeadline() public {\n        uint256 oldTimestamp = block.timestamp;\n        uint256 privateKey = 0xBEEF;\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, address(0xCAFE), 1e18, 0, oldTimestamp))\n                )\n            )\n        );\n\n        vm.warp(block.timestamp + 1);\n        token.permit(owner, address(0xCAFE), 1e18, oldTimestamp, v, r, s);\n    }\n\n    function testFailPermitReplay() public {\n        uint256 privateKey = 0xBEEF;\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, address(0xCAFE), 1e18, 0, block.timestamp))\n                )\n            )\n        );\n\n        token.permit(owner, address(0xCAFE), 1e18, block.timestamp, v, r, s);\n        token.permit(owner, address(0xCAFE), 1e18, block.timestamp, v, r, s);\n    }\n\n    function testMetadata(string calldata name, string calldata symbol, uint8 decimals) public {\n        Token_ERC20 tkn = new Token_ERC20(name, symbol, decimals);\n        assertEq(tkn.name(), name);\n        assertEq(tkn.symbol(), symbol);\n        assertEq(tkn.decimals(), decimals);\n    }\n\n    function testMint(address from, uint256 amount) public {\n        token.mint(from, amount);\n\n        assertEq(token.totalSupply(), amount);\n        assertEq(token.balanceOf(from), amount);\n    }\n\n    function testBurn(address from, uint256 mintAmount, uint256 burnAmount) public {\n        burnAmount = bound(burnAmount, 0, mintAmount);\n\n        token.mint(from, mintAmount);\n        token.burn(from, burnAmount);\n\n        assertEq(token.totalSupply(), mintAmount - burnAmount);\n        assertEq(token.balanceOf(from), mintAmount - burnAmount);\n    }\n\n    function testApprove(address to, uint256 amount) public {\n        assertTrue(token.approve(to, amount));\n\n        assertEq(token.allowance(address(this), to), amount);\n    }\n\n    function testTransfer(address from, uint256 amount) public {\n        token.mint(address(this), amount);\n\n        assertTrue(token.transfer(from, amount));\n        assertEq(token.totalSupply(), amount);\n\n        if (address(this) == from) {\n            assertEq(token.balanceOf(address(this)), amount);\n        } else {\n            assertEq(token.balanceOf(address(this)), 0);\n            assertEq(token.balanceOf(from), amount);\n        }\n    }\n\n    function testTransferFrom(address to, uint256 approval, uint256 amount) public {\n        amount = bound(amount, 0, approval);\n\n        address from = address(0xABCD);\n\n        token.mint(from, amount);\n\n        vm.prank(from);\n        token.approve(address(this), approval);\n\n        assertTrue(token.transferFrom(from, to, amount));\n        assertEq(token.totalSupply(), amount);\n\n        uint256 app = from == address(this) || approval == type(uint256).max ? approval : approval - amount;\n        assertEq(token.allowance(from, address(this)), app);\n\n        if (from == to) {\n            assertEq(token.balanceOf(from), amount);\n        } else {\n            assertEq(token.balanceOf(from), 0);\n            assertEq(token.balanceOf(to), amount);\n        }\n    }\n\n    function testPermit(uint248 privKey, address to, uint256 amount, uint256 deadline) public {\n        uint256 privateKey = privKey;\n        if (deadline < block.timestamp) deadline = block.timestamp;\n        if (privateKey == 0) privateKey = 1;\n\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, to, amount, 0, deadline))\n                )\n            )\n        );\n\n        token.permit(owner, to, amount, deadline, v, r, s);\n\n        assertEq(token.allowance(owner, to), amount);\n        assertEq(token.nonces(owner), 1);\n    }\n\n    function testFailBurnInsufficientBalance(address to, uint256 mintAmount, uint256 burnAmount) public {\n        burnAmount = bound(burnAmount, mintAmount + 1, type(uint256).max);\n\n        token.mint(to, mintAmount);\n        token.burn(to, burnAmount);\n    }\n\n    function testFailTransferInsufficientBalance(address to, uint256 mintAmount, uint256 sendAmount) public {\n        sendAmount = bound(sendAmount, mintAmount + 1, type(uint256).max);\n\n        token.mint(address(this), mintAmount);\n        token.transfer(to, sendAmount);\n    }\n\n    function testFailTransferFromInsufficientAllowance(address to, uint256 approval, uint256 amount) public {\n        amount = bound(amount, approval + 1, type(uint256).max);\n\n        address from = address(0xABCD);\n\n        token.mint(from, amount);\n\n        vm.prank(from);\n        token.approve(address(this), approval);\n\n        token.transferFrom(from, to, amount);\n    }\n\n    function testFailTransferFromInsufficientBalance(address to, uint256 mintAmount, uint256 sendAmount) public {\n        sendAmount = bound(sendAmount, mintAmount + 1, type(uint256).max);\n\n        address from = address(0xABCD);\n\n        token.mint(from, mintAmount);\n\n        vm.prank(from);\n        token.approve(address(this), sendAmount);\n\n        token.transferFrom(from, to, sendAmount);\n    }\n\n    function testFailPermitBadNonce(uint256 privateKey, address to, uint256 amount, uint256 deadline, uint256 nonce)\n        public\n    {\n        if (deadline < block.timestamp) deadline = block.timestamp;\n        if (privateKey == 0) privateKey = 1;\n        if (nonce == 0) nonce = 1;\n\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, to, amount, nonce, deadline))\n                )\n            )\n        );\n\n        token.permit(owner, to, amount, deadline, v, r, s);\n    }\n\n    function testFailPermitBadDeadline(uint256 privateKey, address to, uint256 amount, uint256 deadline) public {\n        if (deadline < block.timestamp) deadline = block.timestamp;\n        if (privateKey == 0) privateKey = 1;\n\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, to, amount, 0, deadline))\n                )\n            )\n        );\n\n        token.permit(owner, to, amount, deadline + 1, v, r, s);\n    }\n\n    function testFailPermitPastDeadline(uint256 privateKey, address to, uint256 amount, uint256 deadline) public {\n        deadline = bound(deadline, 0, block.timestamp - 1);\n        if (privateKey == 0) privateKey = 1;\n\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, to, amount, 0, deadline))\n                )\n            )\n        );\n\n        token.permit(owner, to, amount, deadline, v, r, s);\n    }\n\n    function testFailPermitReplay(uint256 privateKey, address to, uint256 amount, uint256 deadline) public {\n        if (deadline < block.timestamp) deadline = block.timestamp;\n        if (privateKey == 0) privateKey = 1;\n\n        address owner = vm.addr(privateKey);\n\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(\n            privateKey,\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    token.DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, to, amount, 0, deadline))\n                )\n            )\n        );\n\n        token.permit(owner, to, amount, deadline, v, r, s);\n        token.permit(owner, to, amount, deadline, v, r, s);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/test/mocks/MockERC721.t.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {MockERC721, IERC721TokenReceiver} from \"../../src/mocks/MockERC721.sol\";\nimport {StdCheats} from \"../../src/StdCheats.sol\";\nimport {Test} from \"../../src/Test.sol\";\n\ncontract ERC721Recipient is IERC721TokenReceiver {\n    address public operator;\n    address public from;\n    uint256 public id;\n    bytes public data;\n\n    function onERC721Received(address _operator, address _from, uint256 _id, bytes calldata _data)\n        public\n        virtual\n        override\n        returns (bytes4)\n    {\n        operator = _operator;\n        from = _from;\n        id = _id;\n        data = _data;\n\n        return IERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n\ncontract RevertingERC721Recipient is IERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        revert(string(abi.encodePacked(IERC721TokenReceiver.onERC721Received.selector)));\n    }\n}\n\ncontract WrongReturnDataERC721Recipient is IERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return 0xCAFEBEEF;\n    }\n}\n\ncontract NonERC721Recipient {}\n\ncontract Token_ERC721 is MockERC721 {\n    constructor(string memory _name, string memory _symbol) {\n        initialize(_name, _symbol);\n    }\n\n    function tokenURI(uint256) public pure virtual override returns (string memory) {}\n\n    function mint(address to, uint256 tokenId) public virtual {\n        _mint(to, tokenId);\n    }\n\n    function burn(uint256 tokenId) public virtual {\n        _burn(tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public virtual {\n        _safeMint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId, bytes memory data) public virtual {\n        _safeMint(to, tokenId, data);\n    }\n}\n\ncontract MockERC721Test is StdCheats, Test {\n    Token_ERC721 token;\n\n    function setUp() public {\n        token = new Token_ERC721(\"Token\", \"TKN\");\n    }\n\n    function invariantMetadata() public view {\n        assertEq(token.name(), \"Token\");\n        assertEq(token.symbol(), \"TKN\");\n    }\n\n    function testMint() public {\n        token.mint(address(0xBEEF), 1337);\n\n        assertEq(token.balanceOf(address(0xBEEF)), 1);\n        assertEq(token.ownerOf(1337), address(0xBEEF));\n    }\n\n    function testBurn() public {\n        token.mint(address(0xBEEF), 1337);\n        token.burn(1337);\n\n        assertEq(token.balanceOf(address(0xBEEF)), 0);\n\n        vm.expectRevert(\"NOT_MINTED\");\n        token.ownerOf(1337);\n    }\n\n    function testApprove() public {\n        token.mint(address(this), 1337);\n\n        token.approve(address(0xBEEF), 1337);\n\n        assertEq(token.getApproved(1337), address(0xBEEF));\n    }\n\n    function testApproveBurn() public {\n        token.mint(address(this), 1337);\n\n        token.approve(address(0xBEEF), 1337);\n\n        token.burn(1337);\n\n        assertEq(token.balanceOf(address(this)), 0);\n        assertEq(token.getApproved(1337), address(0));\n\n        vm.expectRevert(\"NOT_MINTED\");\n        token.ownerOf(1337);\n    }\n\n    function testApproveAll() public {\n        token.setApprovalForAll(address(0xBEEF), true);\n\n        assertTrue(token.isApprovedForAll(address(this), address(0xBEEF)));\n    }\n\n    function testTransferFrom() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 1337);\n\n        vm.prank(from);\n        token.approve(address(this), 1337);\n\n        token.transferFrom(from, address(0xBEEF), 1337);\n\n        assertEq(token.getApproved(1337), address(0));\n        assertEq(token.ownerOf(1337), address(0xBEEF));\n        assertEq(token.balanceOf(address(0xBEEF)), 1);\n        assertEq(token.balanceOf(from), 0);\n    }\n\n    function testTransferFromSelf() public {\n        token.mint(address(this), 1337);\n\n        token.transferFrom(address(this), address(0xBEEF), 1337);\n\n        assertEq(token.getApproved(1337), address(0));\n        assertEq(token.ownerOf(1337), address(0xBEEF));\n        assertEq(token.balanceOf(address(0xBEEF)), 1);\n        assertEq(token.balanceOf(address(this)), 0);\n    }\n\n    function testTransferFromApproveAll() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 1337);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.transferFrom(from, address(0xBEEF), 1337);\n\n        assertEq(token.getApproved(1337), address(0));\n        assertEq(token.ownerOf(1337), address(0xBEEF));\n        assertEq(token.balanceOf(address(0xBEEF)), 1);\n        assertEq(token.balanceOf(from), 0);\n    }\n\n    function testSafeTransferFromToEOA() public {\n        address from = address(0xABCD);\n\n        token.mint(from, 1337);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.safeTransferFrom(from, address(0xBEEF), 1337);\n\n        assertEq(token.getApproved(1337), address(0));\n        assertEq(token.ownerOf(1337), address(0xBEEF));\n        assertEq(token.balanceOf(address(0xBEEF)), 1);\n        assertEq(token.balanceOf(from), 0);\n    }\n\n    function testSafeTransferFromToERC721Recipient() public {\n        address from = address(0xABCD);\n        ERC721Recipient recipient = new ERC721Recipient();\n\n        token.mint(from, 1337);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.safeTransferFrom(from, address(recipient), 1337);\n\n        assertEq(token.getApproved(1337), address(0));\n        assertEq(token.ownerOf(1337), address(recipient));\n        assertEq(token.balanceOf(address(recipient)), 1);\n        assertEq(token.balanceOf(from), 0);\n\n        assertEq(recipient.operator(), address(this));\n        assertEq(recipient.from(), from);\n        assertEq(recipient.id(), 1337);\n        assertEq(recipient.data(), \"\");\n    }\n\n    function testSafeTransferFromToERC721RecipientWithData() public {\n        address from = address(0xABCD);\n        ERC721Recipient recipient = new ERC721Recipient();\n\n        token.mint(from, 1337);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.safeTransferFrom(from, address(recipient), 1337, \"testing 123\");\n\n        assertEq(token.getApproved(1337), address(0));\n        assertEq(token.ownerOf(1337), address(recipient));\n        assertEq(token.balanceOf(address(recipient)), 1);\n        assertEq(token.balanceOf(from), 0);\n\n        assertEq(recipient.operator(), address(this));\n        assertEq(recipient.from(), from);\n        assertEq(recipient.id(), 1337);\n        assertEq(recipient.data(), \"testing 123\");\n    }\n\n    function testSafeMintToEOA() public {\n        token.safeMint(address(0xBEEF), 1337);\n\n        assertEq(token.ownerOf(1337), address(address(0xBEEF)));\n        assertEq(token.balanceOf(address(address(0xBEEF))), 1);\n    }\n\n    function testSafeMintToERC721Recipient() public {\n        ERC721Recipient to = new ERC721Recipient();\n\n        token.safeMint(address(to), 1337);\n\n        assertEq(token.ownerOf(1337), address(to));\n        assertEq(token.balanceOf(address(to)), 1);\n\n        assertEq(to.operator(), address(this));\n        assertEq(to.from(), address(0));\n        assertEq(to.id(), 1337);\n        assertEq(to.data(), \"\");\n    }\n\n    function testSafeMintToERC721RecipientWithData() public {\n        ERC721Recipient to = new ERC721Recipient();\n\n        token.safeMint(address(to), 1337, \"testing 123\");\n\n        assertEq(token.ownerOf(1337), address(to));\n        assertEq(token.balanceOf(address(to)), 1);\n\n        assertEq(to.operator(), address(this));\n        assertEq(to.from(), address(0));\n        assertEq(to.id(), 1337);\n        assertEq(to.data(), \"testing 123\");\n    }\n\n    function testFailMintToZero() public {\n        token.mint(address(0), 1337);\n    }\n\n    function testFailDoubleMint() public {\n        token.mint(address(0xBEEF), 1337);\n        token.mint(address(0xBEEF), 1337);\n    }\n\n    function testFailBurnUnMinted() public {\n        token.burn(1337);\n    }\n\n    function testFailDoubleBurn() public {\n        token.mint(address(0xBEEF), 1337);\n\n        token.burn(1337);\n        token.burn(1337);\n    }\n\n    function testFailApproveUnMinted() public {\n        token.approve(address(0xBEEF), 1337);\n    }\n\n    function testFailApproveUnAuthorized() public {\n        token.mint(address(0xCAFE), 1337);\n\n        token.approve(address(0xBEEF), 1337);\n    }\n\n    function testFailTransferFromUnOwned() public {\n        token.transferFrom(address(0xFEED), address(0xBEEF), 1337);\n    }\n\n    function testFailTransferFromWrongFrom() public {\n        token.mint(address(0xCAFE), 1337);\n\n        token.transferFrom(address(0xFEED), address(0xBEEF), 1337);\n    }\n\n    function testFailTransferFromToZero() public {\n        token.mint(address(this), 1337);\n\n        token.transferFrom(address(this), address(0), 1337);\n    }\n\n    function testFailTransferFromNotOwner() public {\n        token.mint(address(0xFEED), 1337);\n\n        token.transferFrom(address(0xFEED), address(0xBEEF), 1337);\n    }\n\n    function testFailSafeTransferFromToNonERC721Recipient() public {\n        token.mint(address(this), 1337);\n\n        token.safeTransferFrom(address(this), address(new NonERC721Recipient()), 1337);\n    }\n\n    function testFailSafeTransferFromToNonERC721RecipientWithData() public {\n        token.mint(address(this), 1337);\n\n        token.safeTransferFrom(address(this), address(new NonERC721Recipient()), 1337, \"testing 123\");\n    }\n\n    function testFailSafeTransferFromToRevertingERC721Recipient() public {\n        token.mint(address(this), 1337);\n\n        token.safeTransferFrom(address(this), address(new RevertingERC721Recipient()), 1337);\n    }\n\n    function testFailSafeTransferFromToRevertingERC721RecipientWithData() public {\n        token.mint(address(this), 1337);\n\n        token.safeTransferFrom(address(this), address(new RevertingERC721Recipient()), 1337, \"testing 123\");\n    }\n\n    function testFailSafeTransferFromToERC721RecipientWithWrongReturnData() public {\n        token.mint(address(this), 1337);\n\n        token.safeTransferFrom(address(this), address(new WrongReturnDataERC721Recipient()), 1337);\n    }\n\n    function testFailSafeTransferFromToERC721RecipientWithWrongReturnDataWithData() public {\n        token.mint(address(this), 1337);\n\n        token.safeTransferFrom(address(this), address(new WrongReturnDataERC721Recipient()), 1337, \"testing 123\");\n    }\n\n    function testFailSafeMintToNonERC721Recipient() public {\n        token.safeMint(address(new NonERC721Recipient()), 1337);\n    }\n\n    function testFailSafeMintToNonERC721RecipientWithData() public {\n        token.safeMint(address(new NonERC721Recipient()), 1337, \"testing 123\");\n    }\n\n    function testFailSafeMintToRevertingERC721Recipient() public {\n        token.safeMint(address(new RevertingERC721Recipient()), 1337);\n    }\n\n    function testFailSafeMintToRevertingERC721RecipientWithData() public {\n        token.safeMint(address(new RevertingERC721Recipient()), 1337, \"testing 123\");\n    }\n\n    function testFailSafeMintToERC721RecipientWithWrongReturnData() public {\n        token.safeMint(address(new WrongReturnDataERC721Recipient()), 1337);\n    }\n\n    function testFailSafeMintToERC721RecipientWithWrongReturnDataWithData() public {\n        token.safeMint(address(new WrongReturnDataERC721Recipient()), 1337, \"testing 123\");\n    }\n\n    function testFailBalanceOfZeroAddress() public view {\n        token.balanceOf(address(0));\n    }\n\n    function testFailOwnerOfUnminted() public view {\n        token.ownerOf(1337);\n    }\n\n    function testMetadata(string memory name, string memory symbol) public {\n        MockERC721 tkn = new Token_ERC721(name, symbol);\n\n        assertEq(tkn.name(), name);\n        assertEq(tkn.symbol(), symbol);\n    }\n\n    function testMint(address to, uint256 id) public {\n        if (to == address(0)) to = address(0xBEEF);\n\n        token.mint(to, id);\n\n        assertEq(token.balanceOf(to), 1);\n        assertEq(token.ownerOf(id), to);\n    }\n\n    function testBurn(address to, uint256 id) public {\n        if (to == address(0)) to = address(0xBEEF);\n\n        token.mint(to, id);\n        token.burn(id);\n\n        assertEq(token.balanceOf(to), 0);\n\n        vm.expectRevert(\"NOT_MINTED\");\n        token.ownerOf(id);\n    }\n\n    function testApprove(address to, uint256 id) public {\n        if (to == address(0)) to = address(0xBEEF);\n\n        token.mint(address(this), id);\n\n        token.approve(to, id);\n\n        assertEq(token.getApproved(id), to);\n    }\n\n    function testApproveBurn(address to, uint256 id) public {\n        token.mint(address(this), id);\n\n        token.approve(address(to), id);\n\n        token.burn(id);\n\n        assertEq(token.balanceOf(address(this)), 0);\n        assertEq(token.getApproved(id), address(0));\n\n        vm.expectRevert(\"NOT_MINTED\");\n        token.ownerOf(id);\n    }\n\n    function testApproveAll(address to, bool approved) public {\n        token.setApprovalForAll(to, approved);\n\n        assertEq(token.isApprovedForAll(address(this), to), approved);\n    }\n\n    function testTransferFrom(uint256 id, address to) public {\n        address from = address(0xABCD);\n\n        if (to == address(0) || to == from) to = address(0xBEEF);\n\n        token.mint(from, id);\n\n        vm.prank(from);\n        token.approve(address(this), id);\n\n        token.transferFrom(from, to, id);\n\n        assertEq(token.getApproved(id), address(0));\n        assertEq(token.ownerOf(id), to);\n        assertEq(token.balanceOf(to), 1);\n        assertEq(token.balanceOf(from), 0);\n    }\n\n    function testTransferFromSelf(uint256 id, address to) public {\n        if (to == address(0) || to == address(this)) to = address(0xBEEF);\n\n        token.mint(address(this), id);\n\n        token.transferFrom(address(this), to, id);\n\n        assertEq(token.getApproved(id), address(0));\n        assertEq(token.ownerOf(id), to);\n        assertEq(token.balanceOf(to), 1);\n        assertEq(token.balanceOf(address(this)), 0);\n    }\n\n    function testTransferFromApproveAll(uint256 id, address to) public {\n        address from = address(0xABCD);\n\n        if (to == address(0) || to == from) to = address(0xBEEF);\n\n        token.mint(from, id);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.transferFrom(from, to, id);\n\n        assertEq(token.getApproved(id), address(0));\n        assertEq(token.ownerOf(id), to);\n        assertEq(token.balanceOf(to), 1);\n        assertEq(token.balanceOf(from), 0);\n    }\n\n    function testSafeTransferFromToEOA(uint256 id, address to) public {\n        address from = address(0xABCD);\n\n        if (to == address(0) || to == from) to = address(0xBEEF);\n\n        if (uint256(uint160(to)) <= 18 || to.code.length > 0) return;\n\n        token.mint(from, id);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.safeTransferFrom(from, to, id);\n\n        assertEq(token.getApproved(id), address(0));\n        assertEq(token.ownerOf(id), to);\n        assertEq(token.balanceOf(to), 1);\n        assertEq(token.balanceOf(from), 0);\n    }\n\n    function testSafeTransferFromToERC721Recipient(uint256 id) public {\n        address from = address(0xABCD);\n\n        ERC721Recipient recipient = new ERC721Recipient();\n\n        token.mint(from, id);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.safeTransferFrom(from, address(recipient), id);\n\n        assertEq(token.getApproved(id), address(0));\n        assertEq(token.ownerOf(id), address(recipient));\n        assertEq(token.balanceOf(address(recipient)), 1);\n        assertEq(token.balanceOf(from), 0);\n\n        assertEq(recipient.operator(), address(this));\n        assertEq(recipient.from(), from);\n        assertEq(recipient.id(), id);\n        assertEq(recipient.data(), \"\");\n    }\n\n    function testSafeTransferFromToERC721RecipientWithData(uint256 id, bytes calldata data) public {\n        address from = address(0xABCD);\n        ERC721Recipient recipient = new ERC721Recipient();\n\n        token.mint(from, id);\n\n        vm.prank(from);\n        token.setApprovalForAll(address(this), true);\n\n        token.safeTransferFrom(from, address(recipient), id, data);\n\n        assertEq(token.getApproved(id), address(0));\n        assertEq(token.ownerOf(id), address(recipient));\n        assertEq(token.balanceOf(address(recipient)), 1);\n        assertEq(token.balanceOf(from), 0);\n\n        assertEq(recipient.operator(), address(this));\n        assertEq(recipient.from(), from);\n        assertEq(recipient.id(), id);\n        assertEq(recipient.data(), data);\n    }\n\n    function testSafeMintToEOA(uint256 id, address to) public {\n        if (to == address(0)) to = address(0xBEEF);\n\n        if (uint256(uint160(to)) <= 18 || to.code.length > 0) return;\n\n        token.safeMint(to, id);\n\n        assertEq(token.ownerOf(id), address(to));\n        assertEq(token.balanceOf(address(to)), 1);\n    }\n\n    function testSafeMintToERC721Recipient(uint256 id) public {\n        ERC721Recipient to = new ERC721Recipient();\n\n        token.safeMint(address(to), id);\n\n        assertEq(token.ownerOf(id), address(to));\n        assertEq(token.balanceOf(address(to)), 1);\n\n        assertEq(to.operator(), address(this));\n        assertEq(to.from(), address(0));\n        assertEq(to.id(), id);\n        assertEq(to.data(), \"\");\n    }\n\n    function testSafeMintToERC721RecipientWithData(uint256 id, bytes calldata data) public {\n        ERC721Recipient to = new ERC721Recipient();\n\n        token.safeMint(address(to), id, data);\n\n        assertEq(token.ownerOf(id), address(to));\n        assertEq(token.balanceOf(address(to)), 1);\n\n        assertEq(to.operator(), address(this));\n        assertEq(to.from(), address(0));\n        assertEq(to.id(), id);\n        assertEq(to.data(), data);\n    }\n\n    function testFailMintToZero(uint256 id) public {\n        token.mint(address(0), id);\n    }\n\n    function testFailDoubleMint(uint256 id, address to) public {\n        if (to == address(0)) to = address(0xBEEF);\n\n        token.mint(to, id);\n        token.mint(to, id);\n    }\n\n    function testFailBurnUnMinted(uint256 id) public {\n        token.burn(id);\n    }\n\n    function testFailDoubleBurn(uint256 id, address to) public {\n        if (to == address(0)) to = address(0xBEEF);\n\n        token.mint(to, id);\n\n        token.burn(id);\n        token.burn(id);\n    }\n\n    function testFailApproveUnMinted(uint256 id, address to) public {\n        token.approve(to, id);\n    }\n\n    function testFailApproveUnAuthorized(address owner, uint256 id, address to) public {\n        if (owner == address(0) || owner == address(this)) owner = address(0xBEEF);\n\n        token.mint(owner, id);\n\n        token.approve(to, id);\n    }\n\n    function testFailTransferFromUnOwned(address from, address to, uint256 id) public {\n        token.transferFrom(from, to, id);\n    }\n\n    function testFailTransferFromWrongFrom(address owner, address from, address to, uint256 id) public {\n        if (owner == address(0)) to = address(0xBEEF);\n        if (from == owner) revert();\n\n        token.mint(owner, id);\n\n        token.transferFrom(from, to, id);\n    }\n\n    function testFailTransferFromToZero(uint256 id) public {\n        token.mint(address(this), id);\n\n        token.transferFrom(address(this), address(0), id);\n    }\n\n    function testFailTransferFromNotOwner(address from, address to, uint256 id) public {\n        if (from == address(this)) from = address(0xBEEF);\n\n        token.mint(from, id);\n\n        token.transferFrom(from, to, id);\n    }\n\n    function testFailSafeTransferFromToNonERC721Recipient(uint256 id) public {\n        token.mint(address(this), id);\n\n        token.safeTransferFrom(address(this), address(new NonERC721Recipient()), id);\n    }\n\n    function testFailSafeTransferFromToNonERC721RecipientWithData(uint256 id, bytes calldata data) public {\n        token.mint(address(this), id);\n\n        token.safeTransferFrom(address(this), address(new NonERC721Recipient()), id, data);\n    }\n\n    function testFailSafeTransferFromToRevertingERC721Recipient(uint256 id) public {\n        token.mint(address(this), id);\n\n        token.safeTransferFrom(address(this), address(new RevertingERC721Recipient()), id);\n    }\n\n    function testFailSafeTransferFromToRevertingERC721RecipientWithData(uint256 id, bytes calldata data) public {\n        token.mint(address(this), id);\n\n        token.safeTransferFrom(address(this), address(new RevertingERC721Recipient()), id, data);\n    }\n\n    function testFailSafeTransferFromToERC721RecipientWithWrongReturnData(uint256 id) public {\n        token.mint(address(this), id);\n\n        token.safeTransferFrom(address(this), address(new WrongReturnDataERC721Recipient()), id);\n    }\n\n    function testFailSafeTransferFromToERC721RecipientWithWrongReturnDataWithData(uint256 id, bytes calldata data)\n        public\n    {\n        token.mint(address(this), id);\n\n        token.safeTransferFrom(address(this), address(new WrongReturnDataERC721Recipient()), id, data);\n    }\n\n    function testFailSafeMintToNonERC721Recipient(uint256 id) public {\n        token.safeMint(address(new NonERC721Recipient()), id);\n    }\n\n    function testFailSafeMintToNonERC721RecipientWithData(uint256 id, bytes calldata data) public {\n        token.safeMint(address(new NonERC721Recipient()), id, data);\n    }\n\n    function testFailSafeMintToRevertingERC721Recipient(uint256 id) public {\n        token.safeMint(address(new RevertingERC721Recipient()), id);\n    }\n\n    function testFailSafeMintToRevertingERC721RecipientWithData(uint256 id, bytes calldata data) public {\n        token.safeMint(address(new RevertingERC721Recipient()), id, data);\n    }\n\n    function testFailSafeMintToERC721RecipientWithWrongReturnData(uint256 id) public {\n        token.safeMint(address(new WrongReturnDataERC721Recipient()), id);\n    }\n\n    function testFailSafeMintToERC721RecipientWithWrongReturnDataWithData(uint256 id, bytes calldata data) public {\n        token.safeMint(address(new WrongReturnDataERC721Recipient()), id, data);\n    }\n\n    function testFailOwnerOfUnminted(uint256 id) public view {\n        token.ownerOf(id);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/examples/IncredibleSquaringBlueprint.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"../src/BlueprintServiceManagerBase.sol\";\n\n/**\n * @title IncredibleSquaringBlueprint\n * @dev This contract is an example of a service blueprint that provides a single\n * service to square a number. It demonstrates the lifecycle hooks that can be\n * implemented in a service blueprint.\n */\ncontract IncredibleSquaringBlueprint is BlueprintServiceManagerBase {\n    /**\n     * @dev A mapping of all service operators registered with the blueprint.\n     * The key is the operator's address and the value is the operator's details.\n     */\n    mapping(address => ServiceOperators.OperatorPreferences) public operators;\n\n    /**\n     * @dev A mapping of all service instances requested from the blueprint.\n     * The key is the service ID and the value is the service operator's address.\n     */\n    mapping(uint64 => address[]) public serviceInstances;\n\n    /**\n     * @dev Hook for service operator registration. Called when a service operator\n     * attempts to register with the blueprint.\n     * @param operator The operator's details.\n     * @param registrationInputs Inputs required for registration.\n     */\n    function onRegister(\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata registrationInputs\n    )\n        public\n        payable\n        override\n        onlyFromMaster\n    {\n        // compute the operator's address from the operator's public key\n        address operatorAddress = ServiceOperators.asOperatorAddress(operator.ecdsaPublicKey);\n        // store the operator's details\n        operators[operatorAddress] = operator;\n    }\n\n    /**\n     * @dev Hook for service instance requests. Called when a user requests a service\n     * instance from the blueprint.\n     * @param params The parameters for the service request.\n     */\n    function onRequest(ServiceOperators.RequestParams calldata params) public payable override onlyFromMaster {\n        // store the service instance request\n        for (uint256 i = 0; i < params.operators.length; i++) {\n            address operatorAddress = ServiceOperators.asOperatorAddress(params.operators[i].ecdsaPublicKey);\n            serviceInstances[params.requestId].push(operatorAddress);\n        }\n    }\n\n    /**\n     * @dev Hook for job calls on the service. Called when a job is called within\n     * the service context.\n     */\n    function onJobCall(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        bytes calldata inputs\n    )\n        public\n        payable\n        override\n        onlyFromMaster\n    {\n        // Implement job call logic here\n    }\n\n    /**\n     * @dev Hook for handling job result. Called when operators send the result\n     * of a job execution.\n     */\n    function onJobResult(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata inputs,\n        bytes calldata outputs\n    )\n        public\n        payable\n        override\n        onlyFromMaster\n    {\n        // Do something with the job result\n    }\n\n    /**\n     * @dev Verifies the result of a job call.\n     */\n    function verifyResult(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata inputs,\n        bytes calldata outputs\n    )\n        public\n        view\n        returns (bool)\n    {\n        // check if job is zero.\n        require(job == 0, \"Job not found\");\n\n        // Check if the operator is a registered operator\n        address operatorAddress = ServiceOperators.asOperatorAddress(operator.ecdsaPublicKey);\n        require(operators[operatorAddress].ecdsaPublicKey.length > 0, \"Operator not registered\");\n\n        // Check if operator is part of the service instance\n        require(isOperatorInServiceInstance(serviceId, operatorAddress), \"Operator not part of service instance\");\n\n        // Decode the inputs and outputs\n        uint256 input = abi.decode(inputs, (uint256));\n        uint256 output = abi.decode(outputs, (uint256));\n\n        // Check if the output is the square of the input\n        return output == input * input;\n    }\n\n    function isOperatorInServiceInstance(uint64 serviceId, address operatorAddress) public view returns (bool) {\n        for (uint256 i = 0; i < serviceInstances[serviceId].length; i++) {\n            if (serviceInstances[serviceId][i] == operatorAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/flake.lock": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1731533236,\n        \"narHash\": \"sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"11707dc2f618dd54ca8739b309ec4fc024de578b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"foundry\": {\n      \"inputs\": {\n        \"flake-utils\": [\n          \"flake-utils\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1737993222,\n        \"narHash\": \"sha256-K0ImLNtYE7DxiDvF6iOLAP4zpsWI1OnNdtDtMu9SfSs=\",\n        \"owner\": \"shazow\",\n        \"repo\": \"foundry.nix\",\n        \"rev\": \"ca0fd680ad9eba8623614af71cda00b6b3334ee9\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"shazow\",\n        \"ref\": \"monthly\",\n        \"repo\": \"foundry.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1737942377,\n        \"narHash\": \"sha256-8Eo/jRAgT3CbAloyqOj6uPN1EqBvLI/Tv2g+RxHjkhU=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"88a55dffa4d44d294c74c298daf75824dc0aafb5\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"foundry\": \"foundry\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n",
  "/dependencies/tnt-core-0.3.0/flake.nix": "{\n  description = \"TNT Core Smart contracts development environment\";\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n    foundry = {\n      url = \"github:shazow/foundry.nix/monthly\";\n      inputs = {\n        nixpkgs.follows = \"nixpkgs\";\n        flake-utils.follows = \"flake-utils\";\n      };\n    };\n  };\n\n  outputs = { self, nixpkgs, foundry, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        overlays = [ foundry.overlay ];\n        pkgs = import nixpkgs {\n          inherit system overlays;\n        };\n      in\n      {\n        devShells.default = pkgs.mkShell {\n          name = \"tnt-core\";\n          nativeBuildInputs = [ ];\n          buildInputs = [\n            pkgs.foundry-bin\n            # Nodejs\n            pkgs.nodePackages.typescript-language-server\n            pkgs.nodejs_22\n            pkgs.nodePackages.yarn\n          ];\n          packages = [ ];\n        };\n      });\n}\n",
  "/dependencies/tnt-core-0.3.0/foundry.toml": "# Full reference https://github.com/foundry-rs/foundry/tree/master/config\n\n[profile.default]\nbytecode_hash = \"none\"\nfuzz = { runs = 1_000 }\ngas_reports = [\"*\"]\nlibs = [\"dependencies\"]\n# optimizer = true (default)\noptimizer_runs = 200\nfs_permissions = [{ access = \"read-write\", path = \"./\" }]\nsolc = \"0.8.20\"\nevm_version = \"shanghai\"\n\n[profile.ci]\nverbosity = 4\n\n[fmt]\nbracket_spacing = true\nint_types = \"long\"\nline_length = 120\nmultiline_func_header = \"all\"\nnumber_underscore = \"thousands\"\nquote_style = \"double\"\ntab_width = 4\nwrap_comments = true\n\n\n[invariant]\nfail_on_revert = false\nruns = 256\ndepth = 120\n\n[rpc_endpoints]\n# Uncomment to enable the RPC server\narbitrum_goerli = \"${ARBITRUM_GOERLI_RPC}\"\narbitrum = \"${ARBITRUM_RPC}\"\nmainnet = \"${MAINNET_RPC}\"\ntangle_local = \"${TANGLE_LOCAL_RPC}\"\ntangle_testnet = \"${TANGLE_TESTNET_RPC}\"\ntangle_mainnet = \"${TANGLE_MAINNET_RPC}\"\n\n[etherscan]\nsepolia = { key = \"${SEPOLIA_KEY}\" }\nbase-sepolia = { key = \"${BASE_SEPOLIA_KEY}\" }\ntangle_testnet = { key = \"${TANGLE_TESTNET_KEY}\", url = \"https://testnet-explorer.tangle.tools\" }\ntangle_mainnet = { key = \"${TANGLE_MAINNET_KEY}\", url = \"https://explorer.tangle.tools\" }\n\n[dependencies]\nforge-std = \"1.9.4\"\n\"@openzeppelin-contracts\" = \"5.1.0\"\n",
  "/dependencies/tnt-core-0.3.0/remappings.txt": "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.1.0/\nforge-std/=dependencies/forge-std-1.9.4/src/\n",
  "/dependencies/tnt-core-0.3.0/scripts/MBSMDeployer.s.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\nimport {Script} from \"forge-std/Script.sol\";\n\nimport \"../src/MasterBlueprintServiceManager.sol\";\n\n// Here is how you can run this script:\n// forge script scripts/MBSMDeployer.s.sol -vvvv --broadcast --evm-version london --legacy --private-key $(subkey inspect //Alice --scheme Ecdsa --output-type json | jq -r .secretSeed)\n\ncontract MBSMDeployerScript is Script {\n    function run() public {\n        vm.createSelectFork(\"tangle_local\");\n        vm.startBroadcast();\n        // TODO: Change this to the actual protocol fees receiver address\n        address payable protocolFeesReceiver = payable(address(0x0));\n        new MasterBlueprintServiceManager(protocolFeesReceiver);\n        vm.stopBroadcast();\n\n        // vm.createSelectFork(\"base-sepolia\");\n        // vm.startBroadcast();\n        // new Counter();\n        // vm.stopBroadcast();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/soldeer.lock": "[[dependencies]]\nname = \"@openzeppelin-contracts\"\nversion = \"5.1.0\"\nurl = \"https://soldeer-revisions.s3.amazonaws.com/@openzeppelin-contracts/5_1_0_19-10-2024_10:28:52_contracts.zip\"\nchecksum = \"fd3d1ea561cb27897008aee18ada6e85f248eb161c86e4435272fc2b5777574f\"\nintegrity = \"cb6cf6e878f2943b2291d5636a9d72ac51d43d8135896ceb6cf88d36c386f212\"\n\n[[dependencies]]\nname = \"forge-std\"\nversion = \"1.9.4\"\nurl = \"https://soldeer-revisions.s3.amazonaws.com/forge-std/1_9_4_25-10-2024_14:36:59_forge-std-1.9.zip\"\nchecksum = \"b5be24beb5e4dab5e42221b2ad1288b64c826bee5ee71b6159ba93ffe86f14d4\"\nintegrity = \"3874463846ab995a6a9a88412913cacec6144f7605daa1af57c2d8bf3f210b13\"\n",
  "/dependencies/tnt-core-0.3.0/src/AssetsLib.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n/// @title Assets Library\n/// @notice A library for handling asset types and conversions in a blockchain system\n/// @dev Provides utilities for managing different asset types and converting between asset IDs and addresses\nlibrary Assets {\n    /// @dev Represents different types of assets that can be used in the system\n    enum Kind {\n        /// @notice Custom Asset Id\n        Custom,\n        /// @notice Standard ERC20 token asset type\n        Erc20\n    }\n\n    /// @dev Represents an asset with its type and associated data\n    struct Asset {\n        /// @notice The kind/type of the asset (Custom or ERC20)\n        Kind kind;\n        /// @notice The data associated with the asset, encoded as bytes32\n        /// @dev The data is encoded as follows:\n        /// - For Custom assets: The asset ID is stored as uint256\n        /// - For ERC20 assets: The token address is stored as address\n        bytes32 data;\n    }\n\n    /// @dev The asset kind is not supported by the library.\n    error UnsupportedAssetKind(uint256 kind);\n\n    /// @dev The supplied address is not a valid asset address, it does not start with 0xFFFFFFFF.\n    error InvalidAssetId(address assetAddress);\n\n    /// @notice Converts a given asset to its corresponding address representation.\n    /// @dev The conversion follows the pattern: 0xFFFFFFFF followed by the 16-byte asset ID or if the asset is an ERC20\n    /// token,\n    /// the address of the token contract.\n    ///\n    /// @param asset The asset be converted.\n    /// @return The address representation of the asset.\n    function toAddress(Asset memory asset) internal pure returns (address) {\n        if (isErc20(asset)) {\n            return address(uint160(uint256(asset.data)));\n        } else if (isCustom(asset)) {\n            return toAddress(asset.data);\n        } else {\n            revert UnsupportedAssetKind(uint256(asset.kind));\n        }\n    }\n\n    /// @notice Converts a given asset ID to its corresponding address representation.\n    /// @dev The conversion follows the pattern: 0xFFFFFFFF followed by the 16-byte asset ID.\n    ///\n    /// @param assetId The bytes32 asset ID to be converted.\n    /// @return The address representation of the asset ID.\n    function toAddress(bytes32 assetId) internal pure returns (address) {\n        // Construct the address by combining the prefix 0xFFFFFFFF00000000000000000000000000000000\n        // with the lower 16 bytes of the assetId.\n        // This ensures the address follows the designated asset address format.\n        return address(uint160(uint256(0xFFFFFFFF << 128) | uint256(assetId)));\n    }\n\n    /// @notice Converts an asset address back to its original asset ID.\n    /// @dev Validates that the address starts with the prefix 0xFFFFFFFF and extracts the 16-byte asset ID.\n    ///\n    /// @param assetAddress The address to be converted back to an asset ID.\n    /// @return The bytes32 representation of the original asset ID.\n    function toAssetId(address assetAddress) internal pure returns (bytes32) {\n        // Convert the address to a uint256 for bit manipulation.\n        uint256 addr = uint256(uint160(assetAddress));\n\n        // Ensure the upper 128 bits match the expected prefix 0xFFFFFFFF.\n        if (!isAssetIdCompatible(assetAddress)) {\n            revert InvalidAssetId(assetAddress);\n        }\n\n        // Extract the lower 128 bits which represent the original asset ID.\n        uint128 assetIdUint = uint128(addr);\n\n        // Convert the uint128 asset ID back to bytes32 format.\n        return bytes32(uint256(assetIdUint));\n    }\n\n    /// @notice Converts an asset address to an asset representation.\n    /// @dev Converts the asset address to an asset ID and constructs an asset object.\n    /// @param assetAddress The address of the asset to convert.\n    /// @return Asset Returns the asset representation of the provided address.\n    function toAsset(address assetAddress) internal pure returns (Asset memory) {\n        if (isAssetIdCompatible(assetAddress)) {\n            return Asset(Kind.Custom, toAssetId(assetAddress));\n        } else {\n            return Asset(Kind.Erc20, bytes32(uint256(uint160(assetAddress))));\n        }\n    }\n\n    /// @notice Determines if the provided asset is an ERC20 token.\n    /// @dev Checks if the asset kind matches the ERC20 enum value.\n    /// @param asset The asset to check.\n    /// @return bool Returns true if the asset is an ERC20 token, false otherwise.\n    function isErc20(Asset memory asset) internal pure returns (bool) {\n        return asset.kind == Kind.Erc20;\n    }\n\n    /// @notice Checks i the given asset is a Cstom type.\n    /// @dev Verifies if the asset's kid property mathes he Custom type.\n    /// @param asset The asset to check, defned by its kind and data.\n    /// @return bool Returns true if the asset is Custom, false otherwise.\n    function isCustom(Asset memory asset) internal pure returns (bool) {\n        return asset.kind == Kind.Custom;\n    }\n\n    /// @notice Checks if the given asset address is compatible by verifying it starts with the prefix 0xFFFFFFFF.\n    /// @dev This function converts the asset address to a uint256 and ensures the upper 128 bits match 0xFFFFFFFF.\n    /// @param assetAddress The address of the asset to check for compatibility.\n    /// @return bool Returns true if the asset address is compatible, false otherwise.\n    function isAssetIdCompatible(address assetAddress) internal pure returns (bool) {\n        // Convert the address to a uint256 for bit manipulation.\n        uint256 addr = uint256(uint160(assetAddress));\n\n        // Ensure the upper 128 bits match the expected prefix 0xFFFFFFFF.\n        if ((addr >> 128) != 0xFFFFFFFF) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /// @notice Determines if the provided asset is a native asset.\n    /// @dev This function checks the asset kind and verifies if the asset address or ID corresponds to a native asset.\n    /// @param asset The asset to be checked, defined by its kind and data.\n    /// @return bool Returns true if the asset is native, false otherwise.\n    function isNative(Asset memory asset) internal pure returns (bool) {\n        if (isErc20(asset)) {\n            address assetAddress = address(uint160(uint256(asset.data)));\n            return (assetAddress == address(0));\n        } else if (isCustom(asset)) {\n            uint256 assetId = uint256(asset.data);\n            return (assetId == 0);\n        } else {\n            return false;\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/src/BlueprintServiceManagerBase.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"src/Permissions.sol\";\nimport \"src/IBlueprintServiceManager.sol\";\n\n/// @title BlueprintServiceManagerBase\n/// @author Tangle Network Team\n/// @dev This contract acts as a manager for the lifecycle of a Blueprint Instance,\n/// facilitating various stages such as registration, service requests, job execution,\n/// and job result handling. It is designed to be used by the service blueprint designer\n/// (gadget developer) and integrates with the RootChain for permissioned operations.\n/// Each function serves as a hook for different lifecycle events, and reverting any\n/// of these functions interrupts the process flow.\ncontract BlueprintServiceManagerBase is IBlueprintServiceManager, RootChainEnabled {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Assets for Assets.Asset;\n    using Assets for address;\n    using Assets for bytes32;\n\n    /// @dev The Current Blueprint Id\n    uint256 public currentBlueprintId;\n\n    /// @dev The address of the owner of the blueprint\n    address public blueprintOwner;\n\n    /// @dev a mapping between service id and permitted payment assets.\n    /// @dev serviceId => EnumerableSet of permitted payment assets.\n    /// @notice This mapping is used to store the permitted payment assets for each service.\n    mapping(uint64 => EnumerableSet.AddressSet) private _permittedPaymentAssets;\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onBlueprintCreated(uint64 blueprintId, address owner, address mbsm) external virtual onlyFromRootChain {\n        currentBlueprintId = blueprintId;\n        blueprintOwner = owner;\n        masterBlueprintServiceManager = mbsm;\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onRegister(\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata registrationInputs\n    )\n        external\n        payable\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onUnregister(ServiceOperators.OperatorPreferences calldata operator) external virtual onlyFromMaster { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onUpdatePriceTargets(ServiceOperators.OperatorPreferences calldata operator)\n        external\n        payable\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onRequest(ServiceOperators.RequestParams calldata params) external payable virtual onlyFromMaster { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onApprove(\n        ServiceOperators.OperatorPreferences calldata operator,\n        uint64 requestId,\n        uint8 restakingPercent\n    )\n        external\n        payable\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onReject(\n        ServiceOperators.OperatorPreferences calldata operator,\n        uint64 requestId\n    )\n        external\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onServiceInitialized(\n        uint64 requestId,\n        uint64 serviceId,\n        address owner,\n        address[] calldata permittedCallers,\n        uint64 ttl\n    )\n        external\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onJobCall(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        bytes calldata inputs\n    )\n        external\n        payable\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onJobResult(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata inputs,\n        bytes calldata outputs\n    )\n        external\n        payable\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onServiceTermination(uint64 serviceId, address owner) external virtual onlyFromMaster { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onUnappliedSlash(\n        uint64 serviceId,\n        bytes calldata offender,\n        uint8 slashPercent\n    )\n        external\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onSlash(\n        uint64 serviceId,\n        bytes calldata offender,\n        uint8 slashPercent\n    )\n        external\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function canJoin(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        view\n        virtual\n        onlyFromMaster\n        returns (bool allowed)\n    {\n        return false;\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onOperatorJoined(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function canLeave(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        view\n        virtual\n        onlyFromMaster\n        returns (bool allowed)\n    {\n        return false;\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onOperatorLeft(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        virtual\n        onlyFromMaster\n    { }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function querySlashingOrigin(uint64) external view virtual returns (address slashingOrigin) {\n        return address(this);\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function queryDisputeOrigin(uint64) external view virtual returns (address disputeOrigin) {\n        return address(this);\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function queryDeveloperPaymentAddress(uint64)\n        external\n        view\n        virtual\n        returns (address payable developerPaymentAddress)\n    {\n        return payable(blueprintOwner);\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function queryIsPaymentAssetAllowed(\n        uint64 serviceId,\n        Assets.Asset calldata asset\n    )\n        external\n        view\n        virtual\n        returns (bool isAllowed)\n    {\n        return _isAssetPermitted(serviceId, asset);\n    }\n\n    /**\n     * @notice Permits a specific asset for a given service.\n     * @dev Adds the asset to the set of permitted payment assets based on its kind.\n     * @param serviceId The ID of the service for which the asset is being permitted.\n     * @param asset The asset to be permitted, defined by its kind and data.\n     */\n    function _permitAsset(uint64 serviceId, Assets.Asset calldata asset) internal virtual returns (bool added) {\n        address assetAddress = asset.toAddress();\n        bool _added = _permittedPaymentAssets[serviceId].add(assetAddress);\n        return _added;\n    }\n\n    /**\n     * @notice Revokes a previously permitted asset for a given service.\n     * @dev Removes the asset from the set of permitted payment assets based on its kind.\n     * @param serviceId The ID of the service for which the asset is being revoked.\n     * @param asset The asset to be revoked, defined by its kind and data.\n     */\n    function _revokeAsset(uint64 serviceId, Assets.Asset calldata asset) internal virtual returns (bool removed) {\n        address assetAddress = asset.toAddress();\n        bool _removed = _permittedPaymentAssets[serviceId].remove(assetAddress);\n        return _removed;\n    }\n\n    /**\n     * @notice Clears all permitted assets for a given service.\n     * @dev Iterates through the set of permitted assets and removes each one.\n     * @param serviceId The ID of the service for which permitted assets are being cleared.\n     */\n    function _clearPermittedAssets(uint64 serviceId) internal virtual returns (bool cleared) {\n        EnumerableSet.AddressSet storage permittedAssets = _permittedPaymentAssets[serviceId];\n        uint256 length = permittedAssets.length();\n        while (length > 0) {\n            address assetAddress = permittedAssets.at(0);\n            permittedAssets.remove(assetAddress);\n            length = permittedAssets.length();\n        }\n\n        // The set should be empty after clearing all permitted assets.\n        return permittedAssets.length() == 0;\n    }\n\n    /**\n     * @notice Retrieves all permitted assets for a given service as an array of addresses.\n     * @dev Converts the EnumerableSet of permitted assets to a dynamic array of addresses.\n     * @param serviceId The ID of the service for which permitted assets are being retrieved.\n     * @return assets An array of addresses representing the permitted assets.\n     */\n    function _getPermittedAssetsAsAddresses(uint64 serviceId) internal view virtual returns (address[] memory) {\n        EnumerableSet.AddressSet storage permittedAssets = _permittedPaymentAssets[serviceId];\n        address[] memory assets = new address[](permittedAssets.length());\n        for (uint256 i = 0; i < permittedAssets.length(); i++) {\n            assets[i] = permittedAssets.at(i);\n        }\n        return assets;\n    }\n\n    /**\n     * @notice Retrieves all permitted assets for a given service as an array of Asset structs.\n     * @dev Converts the EnumerableSet of permitted assets to a dynamic array of ServiceOperators.Asset.\n     * @param serviceId The ID of the service for which permitted assets are being retrieved.\n     * @return assets An array of ServiceOperators.Asset structs representing the permitted assets.\n     */\n    function _getPermittedAssets(uint64 serviceId) internal view virtual returns (Assets.Asset[] memory) {\n        EnumerableSet.AddressSet storage permittedAssets = _permittedPaymentAssets[serviceId];\n        Assets.Asset[] memory assets = new Assets.Asset[](permittedAssets.length());\n        for (uint256 i = 0; i < permittedAssets.length(); i++) {\n            address assetAddress = permittedAssets.at(i);\n            if (assetAddress == address(0)) {\n                continue;\n            }\n            assets[i] = assetAddress.toAsset();\n        }\n        return assets;\n    }\n\n    /**\n     * @notice Checks if a specific asset is permitted for a given service.\n     * @dev Determines if the asset is contained within the set of permitted payment assets based on its kind.\n     * @param serviceId The ID of the service to check.\n     * @param asset The asset to check, defined by its kind and data.\n     * @return isAllowed Boolean indicating whether the asset is permitted.\n     */\n    function _isAssetPermitted(uint64 serviceId, Assets.Asset calldata asset) internal view virtual returns (bool) {\n        // Native assets are always permitted.\n        if (asset.isNative()) {\n            return true;\n        } else {\n            address assetAddress = asset.toAddress();\n            return _permittedPaymentAssets[serviceId].contains(assetAddress);\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/src/IBlueprintServiceManager.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"./ServiceOperatorsLib.sol\";\n\n/// @title IBlueprintServiceManager\n/// @dev Interface for the BlueprintServiceManager contract, which acts as a manager for the lifecycle of a Blueprint\n/// Instance,\n/// facilitating various stages such as registration, service requests, job execution, and job result handling.\ninterface IBlueprintServiceManager {\n    /// @dev Hook to handle blueprint creation. Gets called by the root chain when a new blueprint is created.\n    /// Could be a good place to store the master blueprint service manager address\n    /// or any other blueprint related data.\n    /// @param blueprintId The unique identifier for the blueprint.\n    /// @param owner The address of the blueprint owner.\n    /// @param mbsm The address of the master blueprint service manager.\n    function onBlueprintCreated(uint64 blueprintId, address owner, address mbsm) external;\n\n    /// @dev Hook for service operator registration. Called when a service operator\n    /// attempts to register with the blueprint.\n    /// @param operator The operator's details.\n    /// @param registrationInputs Inputs required for registration in bytes format.\n    function onRegister(\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata registrationInputs\n    )\n        external\n        payable;\n\n    /// @dev Hook for service operator unregistration. Called when a service operator\n    /// attempts to unregister from the blueprint.\n    /// @param operator The operator's details.\n    function onUnregister(ServiceOperators.OperatorPreferences calldata operator) external;\n\n    /// @dev Hook for updating operator's Price Targets. Called when an operator updates\n    /// their price targets.\n    /// @param operator The operator's details with the to be updated price targets.\n    function onUpdatePriceTargets(ServiceOperators.OperatorPreferences calldata operator) external payable;\n\n    /// @dev Hook for service instance requests. Called when a user requests a service\n    /// instance from the blueprint but this does not mean the service is initiated yet.\n    /// To get notified when the service is initiated, implement the `onServiceInitialized` hook.\n    ///\n    /// @param params The parameters for the service request.\n    function onRequest(ServiceOperators.RequestParams calldata params) external payable;\n\n    /// @dev Hook for service request approval. Called when a service request is approved by an operator.\n    /// @param operator The operator's details.\n    /// @param requestId The ID of the request.\n    /// @param restakingPercent The percentage of the restaking amount (0-100).\n    function onApprove(\n        ServiceOperators.OperatorPreferences calldata operator,\n        uint64 requestId,\n        uint8 restakingPercent\n    )\n        external\n        payable;\n\n    /// @dev Hook for service request rejection. Called when a service request is rejected by an operator.\n    /// @param operator The operator's details.\n    /// @param requestId The ID of the request.\n    function onReject(ServiceOperators.OperatorPreferences calldata operator, uint64 requestId) external;\n\n    /// @dev Hook for service initialization. Called when a service is initialized.\n    /// This hook is called after the service is approved from all of the operators.\n    ///\n    /// @param requestId The ID of the request.\n    /// @param serviceId The ID of the service.\n    /// @param owner The owner of the service.\n    /// @param permittedCallers  The list of permitted callers for the service.\n    /// @param ttl The time-to-live for the service.\n    function onServiceInitialized(\n        uint64 requestId,\n        uint64 serviceId,\n        address owner,\n        address[] calldata permittedCallers,\n        uint64 ttl\n    )\n        external;\n\n    /// @dev Hook for job calls on the service. Called when a job is called within\n    /// the service context.\n    /// @param serviceId The ID of the service where the job is called.\n    /// @param job The job identifier.\n    /// @param jobCallId A unique ID for the job call.\n    /// @param inputs Inputs required for the job execution in bytes format.\n    function onJobCall(uint64 serviceId, uint8 job, uint64 jobCallId, bytes calldata inputs) external payable;\n\n    /// @dev Hook for handling job result. Called when operators send the result\n    /// of a job execution.\n    /// @param serviceId The ID of the service related to the job.\n    /// @param job The job identifier.\n    /// @param jobCallId The unique ID for the job call.\n    /// @param operator The operator sending the result in bytes format.\n    /// @param inputs Inputs used for the job execution in bytes format.\n    /// @param outputs Outputs resulting from the job execution in bytes format.\n    function onJobResult(\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata inputs,\n        bytes calldata outputs\n    )\n        external\n        payable;\n\n    /// @dev Hook for service termination. Called when a service is terminated.\n    /// @param serviceId The ID of the service to be terminated.\n    /// @param owner The owner of the service.\n    function onServiceTermination(uint64 serviceId, address owner) external;\n\n    /// @dev Hook for handling unapplied slashes. Called when a slash is queued and still not yet applied to an\n    /// offender.\n    /// @param serviceId The ID of the service related to the slash.\n    /// @param offender The offender's details in bytes format.\n    /// @param slashPercent The percentage of the slash.\n    function onUnappliedSlash(\n        uint64 serviceId,\n        bytes calldata offender,\n        uint8 slashPercent\n    )\n        external;\n\n    /// @dev Hook for handling applied slashes. Called when a slash is applied to an offender.\n    /// @param serviceId The ID of the service related to the slash.\n    /// @param offender The offender's details in bytes format.\n    /// @param slashPercent The percentage of the slash.\n    function onSlash(uint64 serviceId, bytes calldata offender, uint8 slashPercent) external;\n\n    /// @dev Hook to check if an operator can join a service instance\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    /// @return allowed Returns true if the operator is allowed to join\n    function canJoin(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        view\n        returns (bool allowed);\n\n    /// @dev Hook called after an operator has joined a service instance\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    function onOperatorJoined(uint64 serviceId, ServiceOperators.OperatorPreferences calldata operator) external;\n\n    /// @dev Hook to check if an operator can leave a service instance\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    /// @return allowed Returns true if the operator is allowed to leave\n    function canLeave(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        view\n        returns (bool allowed);\n\n    /// @dev Hook called after an operator has left a service instance\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    function onOperatorLeft(uint64 serviceId, ServiceOperators.OperatorPreferences calldata operator) external;\n\n    /// @dev Query the slashing origin for a service. This mainly used by the runtime to determine the allowed account\n    /// that can slash a service. by default, the service manager is the only account that can slash a service. override\n    /// this\n    /// function to allow other accounts to slash a service.\n    /// @param serviceId The ID of the service.\n    /// @return slashingOrigin The account that can slash the offender.\n    function querySlashingOrigin(uint64 serviceId) external view returns (address slashingOrigin);\n\n    /// @dev Query the dispute origin for a service. This mainly used by the runtime to determine the allowed account\n    /// that can dispute an unapplied slash and remove it. by default, the service manager is the only account that can\n    /// dispute a\n    /// service. override this\n    /// function to allow other accounts to dispute a service.\n    /// @param serviceId The ID of the service.\n    /// @return disputeOrigin The account that can dispute the unapplied slash for that service\n    function queryDisputeOrigin(uint64 serviceId) external view returns (address disputeOrigin);\n\n    /// @dev Query the developer payment address for a service. This mainly used by the runtime or the Master Blueprint\n    /// Service\n    /// Manager\n    /// to determine the developer payment address for a service.\n    /// @notice This function should be implemented by the Blueprint Service Manager contract.\n    /// @param serviceId The ID of the service.\n    /// @return developerPaymentAddress The address of the developer payment address for that service\n    function queryDeveloperPaymentAddress(uint64 serviceId)\n        external\n        view\n        returns (address payable developerPaymentAddress);\n\n    /// @dev Determines if a specified payment asset is permitted for a given service.\n    /// @param serviceId The ID of the service to check against.\n    /// @param asset The asset to verify for allowance.\n    /// @return isAllowed Returns true if the asset is allowed, false otherwise.\n    function queryIsPaymentAssetAllowed(\n        uint64 serviceId,\n        Assets.Asset calldata asset\n    )\n        external\n        view\n        returns (bool isAllowed);\n}\n",
  "/dependencies/tnt-core-0.3.0/src/MasterBlueprintServiceManager.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"src/Permissions.sol\";\nimport \"src/IBlueprintServiceManager.sol\";\n\n/// @title Master Blueprint Service Manager\n/// @author Tangle\n/// @dev This contract acts as an interceptor between the root chain and blueprint service manager contracts.\ncontract MasterBlueprintServiceManager is RootChainEnabled, AccessControl, Pausable {\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Assets for Assets.Asset;\n    using Assets for address;\n    using Assets for bytes32;\n    using SafeERC20 for IERC20;\n\n    // ===== Constants =====\n\n    /// @dev The role that allows the contract to pause and unpause the contract.\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    /// @dev The role that allows the change of tranches and their percentages.\n    bytes32 public constant TRENCH_UPDATE_ROLE = keccak256(\"TRENCH_UPDATE_ROLE\");\n\n    /// @dev The base percentage value.\n    uint16 public constant BASE_PERCENT = 10_000;\n\n    /// @title Blueprint Structs\n    /// @dev Defines the Blueprint and related data structures for the service.\n    /// @notice Use this struct to define the blueprint of a service.\n    struct Blueprint {\n        /// @dev The metadata information about the service.\n        ServiceMetadata metadata;\n        /// @dev The address of the blueprint service manager.\n        address manager;\n        /// @dev The Master Blueprint Service Manager revision.\n        uint32 mbsmRevision;\n    }\n\n    /// @dev Contains metadata information about the service.\n    /// @notice Provides descriptive details about the service.\n    struct ServiceMetadata {\n        string name;\n        string description; // Empty string represents None\n        string author; // Empty string represents None\n        string category; // Empty string represents None\n        string codeRepository; // Empty string represents None\n        string logo; // Empty string represents None\n        string website; // Empty string represents None\n        string license; // Empty string represents None\n    }\n\n    /// @dev Defines the different tranches for the blueprint.\n    /// @notice Use this enum to define the different tranches for the blueprint.\n    enum TrancheKind {\n        /// @notice Blueprint Developer tranche\n        /// @dev The developer tranche is for the developer of the blueprint.\n        Developer,\n        /// @notice Blueprint Protocol tranche\n        /// @dev The protocol tranche is for the protocol.\n        Protocol,\n        /// @notice Blueprint Operators tranche\n        /// @dev The operators tranche is for the operators of the blueprint.\n        Operators,\n        /// @notice Blueprint Restakers tranche\n        /// @dev The restakers tranche is for the restakers of the blueprint.\n        Restakers\n    }\n\n    /// @dev Defines the tranche with the percentage.\n    /// @notice Use this struct to define the tranche with the percentage.\n    struct Tranche {\n        /// @dev The kind of the tranche.\n        TrancheKind kind;\n        /// @dev The percentage of the tranche in the scale of `10000`.\n        /// where `10000` is equal to `100%` and `1` is equal to `0.01%`.\n        /// Any value between `1` and `10000` is valid for the percentage, inclusive.\n        uint16 percent;\n    }\n\n    // ============ Events ============\n\n    /// @dev Emitted when a new blueprint is created.\n    /// @notice A new blueprint is created.\n    /// @param owner The owner of the blueprint.\n    /// @param blueprintId The unique identifier for the blueprint.\n    /// @param blueprint The blueprint data.\n    event BlueprintCreated(address indexed owner, uint64 indexed blueprintId, Blueprint blueprint);\n\n    /// @dev Emitted when a service operator registers with a blueprint.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param operator The operator's preferences.\n    event OperatorRegistered(uint64 indexed blueprintId, ServiceOperators.OperatorPreferences operator);\n\n    /// @dev Emitted when a service operator unregisters from a blueprint.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param operator The operator's preferences.\n    event OperatorUnregistered(uint64 indexed blueprintId, ServiceOperators.OperatorPreferences operator);\n\n    /// @dev Emitted when an operator updates their price targets.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param operator The operator's updated preferences.\n    event PriceTargetsUpdated(uint64 indexed blueprintId, ServiceOperators.OperatorPreferences operator);\n\n    /// @dev Emitted when a service instance is requested from a blueprint.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param requestId The ID of the request.\n    /// @param requester The address of the service requester.\n    /// @param ttl The time-to-live for the service.\n    /// @param asset The asset used for payment for the service.\n    /// @param amount The amount of the payment asset.\n    event ServiceRequested(\n        uint64 indexed blueprintId,\n        uint64 indexed requestId,\n        address indexed requester,\n        uint64 ttl,\n        Assets.Asset asset,\n        uint256 amount\n    );\n\n    /// @dev Emitted when a service request is approved by an operator.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param requestId The ID of the request.\n    /// @param operator The operator's preferences.\n    /// @param restakingPercent The percentage of the restaking amount.\n    event RequestApproved(\n        uint64 indexed blueprintId,\n        uint64 indexed requestId,\n        ServiceOperators.OperatorPreferences operator,\n        uint8 restakingPercent\n    );\n\n    /// @dev Emitted when a service request is rejected by an operator.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param requestId The ID of the request.\n    /// @param operator The operator's preferences.\n    event RequestRejected(\n        uint64 indexed blueprintId, uint64 indexed requestId, ServiceOperators.OperatorPreferences operator\n    );\n\n    /// @dev Emitted when a service is initialized.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param requestId The ID of the request.\n    /// @param serviceId The ID of the service.\n    /// @param owner The owner of the service.\n    /// @param ttl The time-to-live for the service.\n    event ServiceInitialized(\n        uint64 indexed blueprintId, uint64 indexed requestId, uint64 indexed serviceId, address owner, uint64 ttl\n    );\n\n    /// @dev Emitted when a job is called within the service context.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param serviceId The ID of the service.\n    /// @param job The job identifier.\n    /// @param jobCallId The unique ID for the job call.\n    event JobCalled(uint64 indexed blueprintId, uint64 indexed serviceId, uint8 job, uint64 jobCallId);\n\n    /// @dev Emitted when a job result is received from an operator.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param serviceId The ID of the service.\n    /// @param job The job identifier.\n    /// @param jobCallId The unique ID for the job call.\n    /// @param operator The operator's preferences.\n    event JobResultReceived(\n        uint64 indexed blueprintId,\n        uint64 indexed serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences operator\n    );\n\n    /// @dev Emitted when a service is terminated.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param serviceId The ID of the service.\n    /// @param owner The owner of the service.\n    event ServiceTerminated(uint64 indexed blueprintId, uint64 indexed serviceId, address owner);\n\n    /// @dev Emitted when a slash is queued but not yet applied.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param serviceId The ID of the service.\n    /// @param offender The offender's details.\n    /// @param slashPercent The percentage of the slash.\n    event UnappliedSlash(\n        uint64 indexed blueprintId, uint64 indexed serviceId, bytes offender, uint8 slashPercent\n    );\n\n    /// @dev Emitted when a slash is applied to an offender.\n    /// @param blueprintId The unique identifier of the blueprint.\n    /// @param serviceId The ID of the service.\n    /// @param offender The offender's details.\n    /// @param slashPercent The percentage of the slash.\n    event Slashed(\n        uint64 indexed blueprintId, uint64 indexed serviceId, bytes offender, uint8 slashPercent\n    );\n\n    // =========== Errors ============\n\n    /// @dev Error when the tranches are invalid and does not sum up to 100%.\n    /// @notice The tranches should always sum up to 10000 (100%).\n    error InvalidTranches();\n\n    // ============ Storage ============\n\n    /// @dev Mapping that store the blueprint service manager contracts.\n    /// @notice Contains the blueprints created by the runtime.\n    ///\n    /// blueprintId => Blueprint Service Manager address\n    EnumerableMap.UintToAddressMap private blueprints;\n\n    /// @dev Mapping to store the blueprint owners.\n    /// @notice Contains the owner of the blueprints.\n    ///\n    /// blueprintId => owner\n    EnumerableMap.UintToAddressMap private blueprintOwners;\n\n    /// @dev Mapping that stores the Service requests for a blueprint.\n    /// @notice Contains the service requests for a blueprint.\n    ///\n    /// requestId => request\n    mapping(uint64 => ServiceOperators.RequestParams) private serviceRequests;\n\n    /// @dev An array of tranches and their percentages.\n    /// always sum up to 10000 (100%).\n    Tranche[] public tranches;\n\n    /// @dev The address of the protocol fees receiver.\n    /// @notice The address that receives the protocol fees.\n    address payable public protocolFeesReceiver;\n\n    // ============ Constructor ============\n\n    constructor(address payable _protocolFeesReceiver) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(PAUSER_ROLE, _msgSender());\n        _grantRole(TRENCH_UPDATE_ROLE, _msgSender());\n\n        _grantRole(DEFAULT_ADMIN_ROLE, ROOT_CHAIN);\n\n        _intializeDefaultTranches();\n        protocolFeesReceiver = _protocolFeesReceiver;\n    }\n\n    // ======== Functions =========\n\n    /// @dev Hook to handle blueprint creation. Gets called by the root chain when a new blueprint is created.\n    /// @param blueprintId The unique identifier for the blueprint.\n    /// @param owner The address of the blueprint owner.\n    /// @param blueprint The blueprint data.\n    function onBlueprintCreated(\n        uint64 blueprintId,\n        address owner,\n        Blueprint calldata blueprint\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        blueprints.set(blueprintId, blueprint.manager);\n        blueprintOwners.set(blueprintId, owner);\n        emit BlueprintCreated(owner, blueprintId, blueprint);\n    }\n\n    /// @dev Called by the runtime when a service operator attempts to register with the blueprint.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param operator The Service Operator.\n    /// @param registrationInputs The registration inputs in bytes format.\n    function onRegister(\n        uint64 blueprintId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata registrationInputs\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onRegister(operator, registrationInputs);\n        emit OperatorRegistered(blueprintId, operator);\n    }\n\n    /// @dev Called when a service operator attempts to unregister from the blueprint.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param operator The operator's details.\n    function onUnregister(\n        uint64 blueprintId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        public\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onUnregister(operator);\n        emit OperatorUnregistered(blueprintId, operator);\n    }\n\n    /// @dev Called when an operator updates their price targets.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param operator The operator's details with the updated price targets.\n    function onUpdatePriceTargets(\n        uint64 blueprintId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onUpdatePriceTargets(operator);\n        emit PriceTargetsUpdated(blueprintId, operator);\n    }\n\n    /// @dev Called when a user requests a service instance from the blueprint.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param params The request parameters.\n    function onRequest(\n        uint64 blueprintId,\n        ServiceOperators.RequestParams calldata params\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onRequest(params);\n        serviceRequests[params.requestId] = params;\n        emit ServiceRequested(\n            blueprintId, params.requestId, params.requester, params.ttl, params.paymentAsset, params.amount\n        );\n    }\n\n    /// @dev Called when a service request is approved by an operator.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param operator The operator's details.\n    /// @param requestId The ID of the request.\n    /// @param restakingPercent The percentage of the restaking amount.\n    function onApprove(\n        uint64 blueprintId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        uint64 requestId,\n        uint8 restakingPercent\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onApprove(operator, requestId, restakingPercent);\n        emit RequestApproved(blueprintId, requestId, operator, restakingPercent);\n    }\n\n    /// @dev Called when a service request is rejected by an operator.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param operator The operator's details.\n    /// @param requestId The ID of the request.\n    function onReject(\n        uint64 blueprintId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        uint64 requestId\n    )\n        public\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onReject(operator, requestId);\n        delete serviceRequests[requestId];\n        emit RequestRejected(blueprintId, requestId, operator);\n    }\n\n    /// @dev Called when a service is initialized.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param requestId The ID of the request.\n    /// @param serviceId The ID of the service.\n    /// @param owner The owner of the service.\n    /// @param permittedCallers The list of permitted callers.\n    /// @param ttl The time-to-live for the service.\n    function onServiceInitialized(\n        uint64 blueprintId,\n        uint64 requestId,\n        uint64 serviceId,\n        address owner,\n        address[] calldata permittedCallers,\n        uint64 ttl\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        IBlueprintServiceManager manager = IBlueprintServiceManager(blueprints.get(blueprintId));\n        ServiceOperators.RequestParams memory request = serviceRequests[requestId];\n        _splitFunds(manager, serviceId, request);\n        manager.onServiceInitialized(requestId, serviceId, owner, permittedCallers, ttl);\n        emit ServiceInitialized(blueprintId, requestId, serviceId, owner, ttl);\n    }\n\n    /// @dev Called when a job is called within the service context.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @param job The job identifier.\n    /// @param jobCallId The unique ID for the job call.\n    /// @param inputs The inputs required for the job execution.\n    function onJobCall(\n        uint64 blueprintId,\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        bytes calldata inputs\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onJobCall(serviceId, job, jobCallId, inputs);\n        emit JobCalled(blueprintId, serviceId, job, jobCallId);\n    }\n\n    /// @dev Called when operators send the result of a job execution.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @param job The job identifier.\n    /// @param jobCallId The unique ID for the job call.\n    /// @param operator The operator sending the result.\n    /// @param inputs The inputs used for the job execution.\n    /// @param outputs The outputs from the job execution.\n    function onJobResult(\n        uint64 blueprintId,\n        uint64 serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences calldata operator,\n        bytes calldata inputs,\n        bytes calldata outputs\n    )\n        public\n        payable\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onJobResult(serviceId, job, jobCallId, operator, inputs, outputs);\n        emit JobResultReceived(blueprintId, serviceId, job, jobCallId, operator);\n    }\n\n    /// @dev Called when a service is terminated.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @param owner The owner of the service.\n    function onServiceTermination(\n        uint64 blueprintId,\n        uint64 serviceId,\n        address owner\n    )\n        public\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onServiceTermination(serviceId, owner);\n        emit ServiceTerminated(blueprintId, serviceId, owner);\n    }\n\n    /// @dev Called when a slash is queued but not yet applied.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @param offender The offender's details.\n    /// @param slashPercent The percentage of the slash.\n    function onUnappliedSlash(\n        uint64 blueprintId,\n        uint64 serviceId,\n        bytes calldata offender,\n        uint8 slashPercent\n    )\n        public\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onUnappliedSlash(serviceId, offender, slashPercent);\n        emit UnappliedSlash(blueprintId, serviceId, offender, slashPercent);\n    }\n\n    /// @dev Called when a slash is applied to an offender.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @param offender The offender's details.\n    /// @param slashPercent The percentage of the slash.\n    function onSlash(\n        uint64 blueprintId,\n        uint64 serviceId,\n        bytes calldata offender,\n        uint8 slashPercent\n    )\n        public\n        onlyFromRootChain\n        whenNotPaused\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onSlash(serviceId, offender, slashPercent);\n        emit Slashed(blueprintId, serviceId, offender, slashPercent);\n    }\n\n    /// @dev Query the slashing origin for a service.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @return slashingOrigin The account that can slash the offender.\n    function querySlashingOrigin(uint64 blueprintId, uint64 serviceId) public view returns (address slashingOrigin) {\n        address manager = blueprints.get(blueprintId);\n        return IBlueprintServiceManager(manager).querySlashingOrigin(serviceId);\n    }\n\n    /// @dev Query the dispute origin for a service.\n    /// @param blueprintId The blueprint unique identifier.\n    /// @param serviceId The ID of the service.\n    /// @return disputeOrigin The account that can dispute the unapplied slash.\n    function queryDisputeOrigin(uint64 blueprintId, uint64 serviceId) public view returns (address disputeOrigin) {\n        address manager = blueprints.get(blueprintId);\n        return IBlueprintServiceManager(manager).queryDisputeOrigin(serviceId);\n    }\n\n    /// @dev Hook to check if an operator can join a service instance\n    /// @param blueprintId The blueprint unique identifier\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    /// @return allowed Returns true if the operator is allowed to join\n    function canJoin(\n        uint64 blueprintId,\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        public\n        view\n        returns (bool allowed)\n    {\n        address manager = blueprints.get(blueprintId);\n        return IBlueprintServiceManager(manager).canJoin(serviceId, operator);\n    }\n\n    /// @dev Hook called after an operator has joined a service instance\n    /// @param blueprintId The blueprint unique identifier\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    function onOperatorJoined(\n        uint64 blueprintId,\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        public\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onOperatorJoined(serviceId, operator);\n    }\n\n    /// @dev Hook to check if an operator can leave a service instance\n    /// @param blueprintId The blueprint unique identifier\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    /// @return allowed Returns true if the operator is allowed to leave\n    function canLeave(\n        uint64 blueprintId,\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        public\n        view\n        returns (bool allowed)\n    {\n        address manager = blueprints.get(blueprintId);\n        return IBlueprintServiceManager(manager).canLeave(serviceId, operator);\n    }\n\n    /// @dev Hook called after an operator has left a service instance\n    /// @param blueprintId The blueprint unique identifier\n    /// @param serviceId The ID of the service instance\n    /// @param operator The operator's preferences and details\n    function onOperatorLeft(\n        uint64 blueprintId,\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        public\n    {\n        address manager = blueprints.get(blueprintId);\n        IBlueprintServiceManager(manager).onOperatorLeft(serviceId, operator);\n    }\n\n    /// @dev Pause the contract.\n    /// @notice Only the pauser can pause the contract.\n    function pause() public onlyRole(PAUSER_ROLE) whenNotPaused {\n        _pause();\n    }\n\n    /// @dev Unpause the contract.\n    /// @notice Only the pauser can unpause the contract.\n    function unpause() public onlyRole(PAUSER_ROLE) whenPaused {\n        _unpause();\n    }\n\n    /// @dev Update the tranches and their percentages.\n    /// @param _tranches The array of tranches and their percentages.\n    /// @notice Only the tranche updater can update the tranches.\n    function setTranches(Tranche[] calldata _tranches) public onlyRole(TRENCH_UPDATE_ROLE) {\n        _setTranches(_tranches);\n    }\n\n    /// @dev Initialize the default tranches for the blueprint.\n    function _intializeDefaultTranches() internal {\n        Tranche[] memory _tranches = new Tranche[](4);\n        _tranches[0] = Tranche(TrancheKind.Developer, 5000); // 50%\n        _tranches[1] = Tranche(TrancheKind.Protocol, 2000); // 20%\n        _tranches[2] = Tranche(TrancheKind.Operators, 1000); // 10%\n        _tranches[3] = Tranche(TrancheKind.Restakers, 2000); // 20%\n        _verifyTranches(_tranches);\n        // Clear the default tranches and set the new ones.\n        for (uint256 i = 0; i < _tranches.length; i++) {\n            tranches.push(_tranches[i]);\n        }\n    }\n\n    /// @dev Set the tranches and their percentages.\n    /// @param _tranches The array of tranches and their percentages.\n    /// @notice the tranches should always sum up to 10000 (100%).\n    function _setTranches(Tranche[] calldata _tranches) internal {\n        _verifyTranches(_tranches);\n        delete tranches;\n        for (uint256 i = 0; i < _tranches.length; i++) {\n            tranches.push(_tranches[i]);\n        }\n    }\n\n    /// @dev Verify the tranches and their percentages.\n    function _verifyTranches(Tranche[] memory _tranches) internal pure {\n        uint16 sum = 0;\n        for (uint256 i = 0; i < _tranches.length; i++) {\n            sum += _tranches[i].percent;\n        }\n        if (sum != BASE_PERCENT) {\n            revert InvalidTranches();\n        }\n    }\n\n    /// @dev an internal function to split the funds between the tranches.\n    /// @param manager The Blueprint Service Manager contract.\n    /// @param serviceId The ID of the service.\n    /// @param request The request parameters.\n    function _splitFunds(\n        IBlueprintServiceManager manager,\n        uint64 serviceId,\n        ServiceOperators.RequestParams memory request\n    )\n        internal\n    {\n        uint256 totalAmount = request.amount;\n        if (totalAmount == 0) {\n            return;\n        }\n        uint256 developerAmount = 0;\n        uint256 protocolAmount = 0;\n        uint256 operatorAmount = 0;\n        uint256 restakerAmount = 0;\n\n        for (uint256 i = 0; i < tranches.length; i++) {\n            Tranche memory tranche = tranches[i];\n            uint256 trancheAmount = (totalAmount * tranche.percent) / BASE_PERCENT;\n            if (tranche.kind == TrancheKind.Developer) {\n                developerAmount = trancheAmount;\n            } else if (tranche.kind == TrancheKind.Protocol) {\n                protocolAmount = trancheAmount;\n            } else if (tranche.kind == TrancheKind.Operators) {\n                operatorAmount = trancheAmount;\n            } else if (tranche.kind == TrancheKind.Restakers) {\n                restakerAmount = trancheAmount;\n            }\n        }\n\n        uint256 toRewardsPallet = operatorAmount + restakerAmount;\n\n        address payable developer = manager.queryDeveloperPaymentAddress(serviceId);\n        if (request.paymentAsset.isNative()) {\n            // Native asset\n            developer.transfer(developerAmount);\n            protocolFeesReceiver.transfer(protocolAmount);\n            // TODO: call the rewards pallet precompile here with the funds.\n            // for now, we will transfer the funds to the rewards pallet.\n            payable(address(REWARDS_PALLET)).transfer(toRewardsPallet);\n        } else {\n            // ERC20\n            address token = request.paymentAsset.toAddress();\n            IERC20(token).safeTransfer(developer, developerAmount);\n            IERC20(token).safeTransfer(protocolFeesReceiver, protocolAmount);\n            IERC20(token).safeTransfer(REWARDS_PALLET, toRewardsPallet);\n            // TODO: call the rewards pallet precompile here.\n        }\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/src/Permissions.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n/// @title Root Chain Enabled\n/// @dev This contract defines the root chain address and provides a modifier to restrict access to the root chain\n/// @notice This contract is used to restrict access of certain functions to the root chain only.\ncontract RootChainEnabled {\n    /// @notice The address of the root chain\n    address public constant ROOT_CHAIN = 0x09dF6A941ee03B1e632904E382e10862fA9cc0e3;\n    /// @notice The address of the rewards pallet\n    address public constant REWARDS_PALLET = address(0x7e87d5);\n\n    address public masterBlueprintServiceManager;\n\n    /// @notice Error message for unauthorized access\n    error OnlyRootChainAllowed(address caller, address rootChain);\n\n    /// @notice Error message for unauthorized access\n    error OnlyMasterBlueprintServiceManagerAllowed(address caller, address masterBlueprintServiceManager);\n\n    /// @dev Get the root chain address\n    /// @return rootChainAddress The address of the root chain\n    function rootChain() external pure returns (address rootChainAddress) {\n        return ROOT_CHAIN;\n    }\n\n    /// @dev Get the rewards pallet address\n    /// @return rewardsPalletAddress The address of the rewards pallet\n    function rewardsPallet() external pure returns (address rewardsPalletAddress) {\n        return REWARDS_PALLET;\n    }\n\n    /// @dev Get the master blueprint service manager address\n    /// @return mbsm The address of the master blueprint service manager\n    function masterBlueprintServiceManagerAddress() external view returns (address mbsm) {\n        return masterBlueprintServiceManager;\n    }\n\n    /// @dev Only root chain can call this function\n    /// @notice This function can only be called by the root chain\n    modifier onlyFromRootChain() {\n        if (msg.sender != ROOT_CHAIN) {\n            revert OnlyRootChainAllowed(msg.sender, ROOT_CHAIN);\n        }\n        _;\n    }\n\n    /// @dev Only master blueprint service manager can call this function\n    /// @notice This function can only be called by the master blueprint service manager\n    modifier onlyFromMaster() {\n        if (msg.sender != masterBlueprintServiceManager) {\n            revert OnlyMasterBlueprintServiceManagerAllowed(msg.sender, masterBlueprintServiceManager);\n        }\n        _;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/src/ServiceOperatorsLib.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { Assets } from \"./AssetsLib.sol\";\n\n/// @title Service Operators Library\n/// @author Tangle Network Team\n/// @dev Contains structs and enums related to service operators.\n/// @notice Holds different structs and enums related to service operators.\nlibrary ServiceOperators {\n    /// @dev Represents the preferences of an operator, including their ECDSA public key and price targets.\n    struct OperatorPreferences {\n        /// @notice The ECDSA public key of the operator.\n        bytes ecdsaPublicKey;\n        /// @notice The price targets associated with the operator.\n        PriceTargets priceTargets;\n    }\n\n    /// @dev Defines the pricing targets for various resources such as CPU, memory, and different types of storage.\n    struct PriceTargets {\n        /// @notice The CPU price target.\n        uint64 cpu;\n        /// @notice The memory price target.\n        uint64 mem;\n        /// @notice The HDD storage price target.\n        uint64 storage_hdd;\n        /// @notice The SSD storage price target.\n        uint64 storage_ssd;\n        /// @notice The NVMe storage price target.\n        uint64 storage_nvme;\n    }\n\n    /// @dev Represents parameters for a service request\n    struct RequestParams {\n        /// @notice Unique identifier for the request\n        uint64 requestId;\n        /// @notice Address of the requester\n        address requester;\n        /// @notice Array of operator preferences containing public keys and price targets\n        OperatorPreferences[] operators;\n        /// @notice Input parameters for the request encoded as bytes\n        bytes requestInputs;\n        /// @notice Array of addresses that are permitted to call the service\n        address[] permittedCallers;\n        /// @notice Time-to-live value indicating how long the service is valid\n        uint64 ttl;\n        /// @notice Asset to be used for payment\n        Assets.Asset paymentAsset;\n        /// @notice Amount of payment asset to be used\n        uint256 amount;\n    }\n\n    /// @dev Converts a public key to an operator address.\n    /// @param publicKey The uncompressed public key to convert.\n    /// @return operator address The operator address.\n    function asOperatorAddress(bytes calldata publicKey) internal pure returns (address operator) {\n        return address(uint160(uint256(keccak256(publicKey))));\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/src/SlashAlert.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n/// @title Slash Alert Interface\n/// @notice Interface for handling slashing events in the re-staking protocol\n/// @dev Implement this interface to handle slashing events for remote tokens\ninterface ISlashAlert {\n    /// @notice Called when a slashing event occurs\n    /// @param blueprintId The ID of the blueprint\n    /// @param serviceId The ID of the service\n    /// @param operator The address/account of the operator being slashed (32 bytes)\n    /// @param slashAmount The amount to slash in wei\n    function onSlash(\n        uint64 blueprintId,\n        uint64 serviceId, \n        bytes32 operator,\n        uint256 slashAmount\n    ) external;\n}\n",
  "/dependencies/tnt-core-0.3.0/test/AssetsLib.t.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { Test } from \"forge-std/Test.sol\";\nimport { Assets } from \"../src/AssetsLib.sol\";\n\ncontract AssetsLibTest is Test {\n    // Test constants\n    address constant TEST_ERC20_ADDRESS = address(0x1234567890123456789012345678901234567890);\n    bytes32 constant TEST_ASSET_ID = bytes32(uint256(123));\n\n    function setUp() public {\n        // No setup required as we're testing a library\n    }\n\n    function testErc20AssetConversion() public {\n        Assets.Asset memory asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(TEST_ERC20_ADDRESS))) });\n\n        address result = Assets.toAddress(asset);\n        assertEq(result, TEST_ERC20_ADDRESS, \"ERC20 address conversion failed\");\n    }\n\n    function testCustomAssetConversion() public {\n        Assets.Asset memory asset = Assets.Asset({ kind: Assets.Kind.Custom, data: TEST_ASSET_ID });\n\n        address result = Assets.toAddress(asset);\n        assertTrue(Assets.isAssetIdCompatible(result), \"Custom asset address should be compatible\");\n        assertEq(Assets.toAssetId(result), TEST_ASSET_ID, \"Asset ID conversion failed\");\n    }\n\n    function testAssetIdToAddressConversion() public {\n        address result = Assets.toAddress(bytes32(uint256(0xAB))); // Using 0xAB as test value\n        assertTrue(Assets.isAssetIdCompatible(result), \"Result should be asset ID compatible\");\n        assertEq(result, 0xffffFfFF000000000000000000000000000000AB, \"Asset ID to address conversion failed\");\n    }\n\n    function testInvalidAssetIdReversion() public {\n        address invalidAddress = address(0x1234567890123456789012345678901234567890);\n        vm.expectRevert(abi.encodeWithSelector(Assets.InvalidAssetId.selector, invalidAddress));\n        Assets.toAssetId(invalidAddress);\n    }\n\n    function testAssetTypeChecks() public {\n        Assets.Asset memory erc20Asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(TEST_ERC20_ADDRESS))) });\n\n        Assets.Asset memory customAsset = Assets.Asset({ kind: Assets.Kind.Custom, data: TEST_ASSET_ID });\n\n        assertTrue(Assets.isErc20(erc20Asset), \"Should be identified as ERC20\");\n        assertFalse(Assets.isErc20(customAsset), \"Should not be identified as ERC20\");\n        assertTrue(Assets.isCustom(customAsset), \"Should be identified as Custom\");\n        assertFalse(Assets.isCustom(erc20Asset), \"Should not be identified as Custom\");\n    }\n\n    function testToAssetConversion() public {\n        // Test ERC20 address conversion\n        Assets.Asset memory erc20Result = Assets.toAsset(TEST_ERC20_ADDRESS);\n        assertTrue(Assets.isErc20(erc20Result), \"Should convert to ERC20 asset\");\n        assertEq(address(uint160(uint256(erc20Result.data))), TEST_ERC20_ADDRESS, \"ERC20 address mismatch\");\n\n        // Test Custom asset address conversion\n        Assets.Asset memory customResult = Assets.toAsset(0xffffFfFF000000000000000000000000000000AB);\n        assertTrue(Assets.isCustom(customResult), \"Should convert to Custom asset\");\n        assertEq(customResult.data, bytes32(uint256(0xAB)), \"Custom asset ID mismatch\");\n    }\n\n    function testNativeAssetChecks() public {\n        // Test native ERC20 (address(0))\n        Assets.Asset memory nativeErc20 = Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(0) });\n        assertTrue(Assets.isNative(nativeErc20), \"Should identify native ERC20\");\n\n        // Test native Custom asset (id = 0)\n        Assets.Asset memory nativeCustom = Assets.Asset({ kind: Assets.Kind.Custom, data: bytes32(0) });\n        assertTrue(Assets.isNative(nativeCustom), \"Should identify native Custom asset\");\n\n        // Test non-native assets\n        Assets.Asset memory nonNativeErc20 =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(TEST_ERC20_ADDRESS))) });\n        assertFalse(Assets.isNative(nonNativeErc20), \"Should not identify as native ERC20\");\n\n        Assets.Asset memory nonNativeCustom = Assets.Asset({ kind: Assets.Kind.Custom, data: TEST_ASSET_ID });\n        assertFalse(Assets.isNative(nonNativeCustom), \"Should not identify as native Custom asset\");\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/test/BlueprintServiceManagerBase.t.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { Test } from \"forge-std/Test.sol\";\nimport \"src/BlueprintServiceManagerBase.sol\";\nimport \"src/IBlueprintServiceManager.sol\";\nimport \"./MockERC20.sol\";\nimport \"./MockBlueprintServiceManager.sol\";\n\ncontract BlueprintServiceManagerBaseTest is Test {\n    using Assets for Assets.Asset;\n    using Assets for address;\n    using Assets for bytes32;\n\n    MockBlueprintServiceManager manager;\n    address rootChain = 0x09dF6A941ee03B1e632904E382e10862fA9cc0e3;\n    address masterBlueprintServiceManager = address(0x2222222222222222222222222222222222222222);\n    address blueprintOwner = address(0x3333333333333333333333333333333333333333);\n    MockERC20 mockToken;\n\n    function setUp() public {\n        // Deploy Mock Blueprint Service Manager\n        manager = new MockBlueprintServiceManager();\n\n        // Set the master blueprint service manager\n        manager.setMasterBlueprintServiceManager(masterBlueprintServiceManager);\n\n        // Deploy a Mock ERC20 token\n        mockToken = new MockERC20();\n        mockToken.initialize(\"MockToken\", \"MTK\", 18);\n    }\n\n    // Utility modifier to simulate calls from root chain\n    modifier onlyRootChain() {\n        vm.prank(rootChain);\n        _;\n    }\n\n    // Utility modifier to simulate calls from master blueprint service manager\n    modifier onlyMaster() {\n        vm.prank(masterBlueprintServiceManager);\n        _;\n    }\n\n    // Test onBlueprintCreated\n    function test_OnBlueprintCreated_SetsStateCorrectly() public onlyRootChain {\n        uint64 blueprintId = 1;\n        manager.onBlueprintCreated(blueprintId, blueprintOwner, masterBlueprintServiceManager);\n\n        assertEq(manager.currentBlueprintId(), blueprintId, \"Incorrect blueprint ID set\");\n        assertEq(manager.blueprintOwner(), blueprintOwner, \"Incorrect blueprint owner set\");\n        assertEq(manager.masterBlueprintServiceManager(), masterBlueprintServiceManager, \"Incorrect MBSM set\");\n    }\n\n    // Test onRegister\n    function test_OnRegister_CalledByMaster() public onlyMaster {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n        bytes memory registrationInputs = \"registration data\";\n\n        // Expect no revert\n        manager.onRegister(operator, registrationInputs);\n    }\n\n    function test_OnRegister_RevertsWhenNotMaster() public {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n        bytes memory registrationInputs = \"registration data\";\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onRegister(operator, registrationInputs);\n    }\n\n    // Test onUnregister\n    function test_OnUnregister_CalledByMaster() public onlyMaster {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        // Expect no revert\n        manager.onUnregister(operator);\n    }\n\n    function test_OnUnregister_RevertsWhenNotMaster() public {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onUnregister(operator);\n    }\n\n    // Test onUpdatePriceTargets\n    function test_OnUpdatePriceTargets_CalledByMaster() public onlyMaster {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        // Expect no revert\n        manager.onUpdatePriceTargets(operator);\n    }\n\n    function test_OnUpdatePriceTargets_RevertsWhenNotMaster() public {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onUpdatePriceTargets(operator);\n    }\n\n    // Test onRequest\n    function test_OnRequest_CalledByMaster() public onlyMaster {\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: 1,\n            requester: address(0x444),\n            operators: new ServiceOperators.OperatorPreferences[](0),\n            requestInputs: \"input data\",\n            permittedCallers: new address[](0),\n            ttl: 1000,\n            paymentAsset: Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) }),\n            amount: 1000\n        });\n\n        // Expect no revert\n        manager.onRequest(params);\n    }\n\n    function test_OnRequest_RevertsWhenNotMaster() public {\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: 1,\n            requester: address(0x444),\n            operators: new ServiceOperators.OperatorPreferences[](0),\n            requestInputs: \"input data\",\n            permittedCallers: new address[](0),\n            ttl: 1000,\n            paymentAsset: Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) }),\n            amount: 1000\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onRequest(params);\n    }\n\n    // Test onApprove\n    function test_OnApprove_CalledByMaster() public onlyMaster {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 200,\n                mem: 300,\n                storage_hdd: 400,\n                storage_ssd: 500,\n                storage_nvme: 600\n            })\n        });\n        uint64 requestId = 2;\n        uint8 restakingPercent = 10;\n\n        // Expect no revert\n        manager.onApprove(operator, requestId, restakingPercent);\n    }\n\n    function test_OnApprove_RevertsWhenNotMaster() public {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 200,\n                mem: 300,\n                storage_hdd: 400,\n                storage_ssd: 500,\n                storage_nvme: 600\n            })\n        });\n        uint64 requestId = 2;\n        uint8 restakingPercent = 10;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onApprove(operator, requestId, restakingPercent);\n    }\n\n    // Test onReject\n    function test_OnReject_CalledByMaster() public onlyMaster {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 250,\n                mem: 350,\n                storage_hdd: 450,\n                storage_ssd: 550,\n                storage_nvme: 650\n            })\n        });\n        uint64 requestId = 3;\n\n        // Expect no revert\n        manager.onReject(operator, requestId);\n    }\n\n    function test_OnReject_RevertsWhenNotMaster() public {\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 250,\n                mem: 350,\n                storage_hdd: 450,\n                storage_ssd: 550,\n                storage_nvme: 650\n            })\n        });\n        uint64 requestId = 3;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onReject(operator, requestId);\n    }\n\n    // Test onServiceInitialized\n    function test_OnServiceInitialized_CalledByMaster() public onlyMaster {\n        uint64 requestId = 4;\n        uint64 serviceId = 100;\n        address owner = address(0x555);\n        address[] memory permittedCallers = new address[](2);\n        permittedCallers[0] = address(0x666);\n        permittedCallers[1] = address(0x777);\n        uint64 ttl = 2000;\n\n        // Expect no revert\n        manager.onServiceInitialized(requestId, serviceId, owner, permittedCallers, ttl);\n\n        // Verify state or behaviors as needed (if any)\n        // Since the base contract does not implement, no state change to verify\n    }\n\n    function test_OnServiceInitialized_RevertsWhenNotMaster() public {\n        uint64 requestId = 4;\n        uint64 serviceId = 100;\n        address owner = address(0x555);\n        address[] memory permittedCallers = new address[](2);\n        permittedCallers[0] = address(0x666);\n        permittedCallers[1] = address(0x777);\n        uint64 ttl = 2000;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onServiceInitialized(requestId, serviceId, owner, permittedCallers, ttl);\n    }\n\n    // Test onJobCall\n    function test_OnJobCall_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 101;\n        uint8 job = 1;\n        uint64 jobCallId = 500;\n        bytes memory inputs = \"job inputs\";\n\n        // Expect no revert\n        manager.onJobCall(serviceId, job, jobCallId, inputs);\n    }\n\n    function test_OnJobCall_RevertsWhenNotMaster() public {\n        uint64 serviceId = 101;\n        uint8 job = 1;\n        uint64 jobCallId = 500;\n        bytes memory inputs = \"job inputs\";\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onJobCall(serviceId, job, jobCallId, inputs);\n    }\n\n    // Test onJobResult\n    function test_OnJobResult_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 102;\n        uint8 job = 2;\n        uint64 jobCallId = 600;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0x123456\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 300,\n                mem: 400,\n                storage_hdd: 500,\n                storage_ssd: 600,\n                storage_nvme: 700\n            })\n        });\n        bytes memory inputs = \"job inputs\";\n        bytes memory outputs = \"job outputs\";\n\n        // Expect no revert\n        manager.onJobResult(serviceId, job, jobCallId, operator, inputs, outputs);\n    }\n\n    function test_OnJobResult_RevertsWhenNotMaster() public {\n        uint64 serviceId = 102;\n        uint8 job = 2;\n        uint64 jobCallId = 600;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0x123456\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 300,\n                mem: 400,\n                storage_hdd: 500,\n                storage_ssd: 600,\n                storage_nvme: 700\n            })\n        });\n        bytes memory inputs = \"job inputs\";\n        bytes memory outputs = \"job outputs\";\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onJobResult(serviceId, job, jobCallId, operator, inputs, outputs);\n    }\n\n    // Test onServiceTermination\n    function test_OnServiceTermination_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 103;\n        address owner = address(0x888);\n\n        // Expect no revert\n        manager.onServiceTermination(serviceId, owner);\n    }\n\n    function test_OnServiceTermination_RevertsWhenNotMaster() public {\n        uint64 serviceId = 103;\n        address owner = address(0x888);\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onServiceTermination(serviceId, owner);\n    }\n\n    // Test onUnappliedSlash\n    function test_OnUnappliedSlash_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 104;\n        bytes memory offender = \"offender data\";\n        uint8 slashPercent = 5;\n\n        // Expect no revert\n        manager.onUnappliedSlash(serviceId, offender, slashPercent);\n    }\n\n    function test_OnUnappliedSlash_RevertsWhenNotMaster() public {\n        uint64 serviceId = 104;\n        bytes memory offender = \"offender data\";\n        uint8 slashPercent = 5;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onUnappliedSlash(serviceId, offender, slashPercent);\n    }\n\n    // Test onSlash\n    function test_OnSlash_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 105;\n        bytes memory offender = \"offender data\";\n        uint8 slashPercent = 10;\n        uint256 totalPayout = 2000 ether;\n\n        // Expect no revert\n        manager.onSlash(serviceId, offender, slashPercent);\n    }\n\n    function test_OnSlash_RevertsWhenNotMaster() public {\n        uint64 serviceId = 105;\n        bytes memory offender = \"offender data\";\n        uint8 slashPercent = 10;\n        uint256 totalPayout = 2000 ether;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onSlash(serviceId, offender, slashPercent);\n    }\n\n    // Test querySlashingOrigin\n    function test_QuerySlashingOrigin_ReturnsCorrectAddress() public view {\n        uint64 serviceId = 106;\n        address expected = address(manager);\n\n        address result = manager.querySlashingOrigin(serviceId);\n        assertEq(result, expected, \"Slashing origin should be the contract itself\");\n    }\n\n    // Test queryDisputeOrigin\n    function test_QueryDisputeOrigin_ReturnsCorrectAddress() public view {\n        uint64 serviceId = 107;\n        address expected = address(manager);\n\n        address result = manager.queryDisputeOrigin(serviceId);\n        assertEq(result, expected, \"Dispute origin should be the contract itself\");\n    }\n\n    // Test queryDeveloperPaymentAddress\n    function test_QueryDeveloperPaymentAddress_ReturnsBlueprintOwner() public view {\n        uint64 serviceId = 108;\n\n        address payable result = manager.queryDeveloperPaymentAddress(serviceId);\n        assertEq(result, payable(manager.blueprintOwner()), \"Developer payment address should be blueprint owner\");\n    }\n\n    // Test queryIsPaymentAssetAllowed\n    function test_QueryIsPaymentAssetAllowed_Erc20AssetAllowed() public onlyMaster {\n        uint64 serviceId = 109;\n        Assets.Asset memory asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n\n        // Permit the asset\n        manager.permitAsset(serviceId, asset);\n\n        bool isAllowed = manager.queryIsPaymentAssetAllowed(serviceId, asset);\n        assertTrue(isAllowed, \"ERC20 asset should be allowed\");\n    }\n\n    function test_QueryIsPaymentAssetAllowed_Erc20AssetNotAllowed() public view {\n        uint64 serviceId = 110;\n        Assets.Asset memory asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n\n        bool isAllowed = manager.queryIsPaymentAssetAllowed(serviceId, asset);\n        assertFalse(isAllowed, \"ERC20 asset should not be allowed initially\");\n    }\n\n    function test_QueryIsPaymentAssetAllowed_CustomAssetAllowed() public onlyMaster {\n        uint64 serviceId = 111;\n        bytes32 assetId = bytes32(uint256(123_456));\n        Assets.Asset memory asset = Assets.Asset({ kind: Assets.Kind.Custom, data: assetId });\n\n        // Permit the asset\n        manager.permitAsset(serviceId, asset);\n\n        bool isAllowed = manager.queryIsPaymentAssetAllowed(serviceId, asset);\n        assertTrue(isAllowed, \"Custom asset should be allowed\");\n    }\n\n    function test_QueryIsPaymentAssetAllowed_CustomAssetNotAllowed() public view {\n        uint64 serviceId = 112;\n        bytes32 assetId = bytes32(uint256(654_321));\n        Assets.Asset memory asset = Assets.Asset({ kind: Assets.Kind.Custom, data: assetId });\n\n        bool isAllowed = manager.queryIsPaymentAssetAllowed(serviceId, asset);\n        assertFalse(isAllowed, \"Custom asset should not be allowed initially\");\n    }\n\n    // Test _permitAsset and _revokeAsset\n    function test_PermitAndRevokeAsset() public onlyMaster {\n        uint64 serviceId = 113;\n        Assets.Asset memory erc20Asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n        bytes32 customAssetId = bytes32(uint256(789_012));\n        Assets.Asset memory customAsset = Assets.Asset({ kind: Assets.Kind.Custom, data: customAssetId });\n\n        // Permit both assets\n        manager.permitAsset(serviceId, erc20Asset);\n        manager.permitAsset(serviceId, customAsset);\n\n        // Check if allowed\n        assertTrue(manager.queryIsPaymentAssetAllowed(serviceId, erc20Asset), \"ERC20 asset should be allowed\");\n        assertTrue(manager.queryIsPaymentAssetAllowed(serviceId, customAsset), \"Custom asset should be allowed\");\n\n        // Revoke ERC20 asset\n        manager.revokeAsset(serviceId, erc20Asset);\n        assertFalse(manager.queryIsPaymentAssetAllowed(serviceId, erc20Asset), \"ERC20 asset should be revoked\");\n        assertTrue(manager.queryIsPaymentAssetAllowed(serviceId, customAsset), \"Custom asset should still be allowed\");\n\n        // Revoke Custom asset\n        manager.revokeAsset(serviceId, customAsset);\n        assertFalse(manager.queryIsPaymentAssetAllowed(serviceId, customAsset), \"Custom asset should be revoked\");\n    }\n\n    // Test _clearPermittedAssets\n    function test_ClearPermittedAssets() public onlyMaster {\n        uint64 serviceId = 114;\n        Assets.Asset memory erc20Asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n        bytes32 customAssetId = bytes32(uint256(890_123));\n        Assets.Asset memory customAsset = Assets.Asset({ kind: Assets.Kind.Custom, data: customAssetId });\n\n        // Permit both assets\n        manager.permitAsset(serviceId, erc20Asset);\n        manager.permitAsset(serviceId, customAsset);\n\n        // Verify assets are permitted\n        assertTrue(manager.queryIsPaymentAssetAllowed(serviceId, erc20Asset), \"ERC20 asset should be allowed\");\n        assertTrue(manager.queryIsPaymentAssetAllowed(serviceId, customAsset), \"Custom asset should be allowed\");\n\n        // Clear all permitted assets\n        manager.clearPermittedAssets(serviceId);\n\n        // Verify assets are revoked\n        assertFalse(manager.queryIsPaymentAssetAllowed(serviceId, erc20Asset), \"ERC20 asset should be revoked\");\n        assertFalse(manager.queryIsPaymentAssetAllowed(serviceId, customAsset), \"Custom asset should be revoked\");\n    }\n\n    // Test _getPermittedAssetsAsAddresses\n    function test_GetPermittedAssetsAsAddresses() public onlyMaster {\n        uint64 serviceId = 115;\n        Assets.Asset memory erc20Asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n\n        manager.permitAsset(serviceId, erc20Asset);\n\n        address[] memory permitted = manager.getPermittedAssetsAsAddresses(serviceId);\n        assertEq(permitted.length, 1, \"Should have one permitted asset\");\n        assertEq(permitted[0], address(mockToken), \"Permitted asset address mismatch\");\n    }\n\n    // Test _getPermittedAssets\n    function test_GetPermittedAssets() public onlyMaster {\n        uint64 serviceId = 116;\n        Assets.Asset memory erc20Asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n        bytes32 customAssetId = bytes32(uint256(345_678));\n        Assets.Asset memory customAsset = Assets.Asset({ kind: Assets.Kind.Custom, data: customAssetId });\n\n        manager.permitAsset(serviceId, erc20Asset);\n        manager.permitAsset(serviceId, customAsset);\n\n        Assets.Asset[] memory permitted = manager.getPermittedAssets(serviceId);\n        assertEq(permitted.length, 2, \"Should have two permitted assets\");\n\n        // Verify ERC20 asset\n        assertTrue(permitted[0].kind == Assets.Kind.Erc20, \"First asset should be ERC20\");\n        assertEq(address(uint160(uint256(permitted[0].data))), address(mockToken), \"ERC20 asset data mismatch\");\n\n        // Verify Custom asset\n        assertTrue(permitted[1].kind == Assets.Kind.Custom, \"Second asset should be Custom\");\n        assertEq(permitted[1].data, customAssetId, \"Custom asset data mismatch\");\n    }\n\n    // Test asset ID to address and back\n    function test_AssetIdConversion() public onlyMaster {\n        bytes32 assetId = bytes32(uint256(567_890));\n        address assetAddress = assetId.toAddress();\n        bytes32 convertedId = assetAddress.toAssetId();\n        assertEq(assetId, convertedId, \"Asset ID should match after conversion\");\n    }\n\n    // Test invalid asset address conversion\n    function test_AddressToAssetId_InvalidAddress() public {\n        address invalidAssetAddress = address(0xABCDEF);\n        vm.expectRevert(abi.encodeWithSelector(Assets.InvalidAssetId.selector, invalidAssetAddress));\n\n        invalidAssetAddress.toAssetId();\n    }\n\n    // Test native asset check\n    function test_IsNativeAsset_Erc20NonNative() public view {\n        Assets.Asset memory erc20Asset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(mockToken)))) });\n\n        bool isNative = erc20Asset.isNative();\n        assertFalse(isNative, \"ERC20 asset should not be native\");\n    }\n\n    function test_IsNativeAsset_CustomNonNative() public pure {\n        Assets.Asset memory customAsset = Assets.Asset({ kind: Assets.Kind.Custom, data: bytes32(uint256(678_901)) });\n\n        bool isNative = customAsset.isNative();\n        assertFalse(isNative, \"Custom asset should not be native\");\n    }\n\n    function test_IsNativeAsset_NativeErc20() public pure {\n        Assets.Asset memory nativeErc20 =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(0)))) });\n\n        bool isNative = nativeErc20.isNative();\n        assertTrue(isNative, \"Erc20 with address 0 should be native\");\n    }\n\n    function test_IsNativeAsset_NativeCustom() public pure {\n        Assets.Asset memory nativeCustom = Assets.Asset({ kind: Assets.Kind.Custom, data: bytes32(uint256(0)) });\n\n        bool isNative = nativeCustom.isNative();\n        assertTrue(isNative, \"Custom asset with ID 0 should be native\");\n    }\n\n    function test_canJoin_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        bool canJoin = manager.canJoin(serviceId, operator);\n        assertTrue(canJoin, \"Default implementation should allow joining\");\n    }\n\n    function test_canJoin_RevertsWhenNotMaster() public {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(this),\n                masterBlueprintServiceManager\n            )\n        );\n        manager.canJoin(serviceId, operator);\n    }\n\n    function test_onOperatorJoined_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        // Should not revert\n        manager.onOperatorJoined(serviceId, operator);\n    }\n\n    function test_onOperatorJoined_RevertsWhenNotMaster() public {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onOperatorJoined(serviceId, operator);\n    }\n\n    function test_canLeave_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        bool canLeave = manager.canLeave(serviceId, operator);\n        assertTrue(canLeave, \"Default implementation should allow leaving\");\n    }\n\n    function test_canLeave_RevertsWhenNotMaster() public {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(this),\n                masterBlueprintServiceManager\n            )\n        );\n        manager.canLeave(serviceId, operator);\n    }\n\n    function test_onOperatorLeft_CalledByMaster() public onlyMaster {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        // Should not revert\n        manager.onOperatorLeft(serviceId, operator);\n    }\n\n    function test_onOperatorLeft_RevertsWhenNotMaster() public {\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: \"0xabcdef\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                RootChainEnabled.OnlyMasterBlueprintServiceManagerAllowed.selector,\n                address(0x999),\n                masterBlueprintServiceManager\n            )\n        );\n        vm.prank(address(0x999));\n        manager.onOperatorLeft(serviceId, operator);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/test/HookTest.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"../src/BlueprintServiceManagerBase.sol\";\n\ncontract HookTestBlueprintServiceManager is BlueprintServiceManagerBase {\n    event OnBlueprintCreated();\n    event OnRegister();\n    event OnUnregister();\n    event OnUpdatePriceTargets();\n    event OnRequest();\n    event OnApprove();\n    event OnReject();\n    event OnServiceInitialized();\n    event OnJobCall();\n    event OnJobResult();\n    event OnServiceTermination();\n    event OnUnappliedSlash();\n    event OnSlash();\n\n    function onBlueprintCreated(\n        uint64 blueprintId,\n        address owner,\n        address mbsm\n    ) external override onlyFromRootChain {\n        currentBlueprintId = blueprintId;\n        blueprintOwner = owner;\n        masterBlueprintServiceManager = mbsm;\n        emit OnBlueprintCreated();\n    }\n\n    function onRegister(\n        ServiceOperators.OperatorPreferences calldata,\n        bytes calldata\n    ) external payable override onlyFromMaster {\n        emit OnRegister();\n    }\n\n    function onUnregister(\n        ServiceOperators.OperatorPreferences calldata\n    ) external override onlyFromMaster {\n        emit OnUnregister();\n    }\n\n    function onUpdatePriceTargets(\n        ServiceOperators.OperatorPreferences calldata\n    ) external payable override onlyFromMaster {\n        emit OnUpdatePriceTargets();\n    }\n\n    function onRequest(\n        ServiceOperators.RequestParams calldata\n    ) external payable override onlyFromMaster {\n        emit OnRequest();\n    }\n\n    function onApprove(\n        ServiceOperators.OperatorPreferences calldata,\n        uint64,\n        uint8\n    ) external payable override onlyFromMaster {\n        emit OnApprove();\n    }\n\n    function onReject(\n        ServiceOperators.OperatorPreferences calldata,\n        uint64\n    ) external override onlyFromMaster {\n        emit OnReject();\n    }\n\n    function onServiceInitialized(\n        uint64,\n        uint64,\n        address,\n        address[] calldata,\n        uint64\n    ) external override onlyFromMaster {\n        emit OnServiceInitialized();\n    }\n\n    function onJobCall(\n        uint64,\n        uint8,\n        uint64,\n        bytes calldata\n    ) external payable override onlyFromMaster {\n        emit OnJobCall();\n    }\n\n    function onJobResult(\n        uint64,\n        uint8,\n        uint64,\n        ServiceOperators.OperatorPreferences calldata,\n        bytes calldata,\n        bytes calldata\n    ) external payable override onlyFromMaster {\n        emit OnJobResult();\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onServiceTermination(\n        uint64,\n        address\n    ) external override onlyFromMaster {\n        emit OnServiceTermination();\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onUnappliedSlash(\n        uint64,\n        bytes calldata,\n        uint8\n    ) external override onlyFromMaster {\n        emit OnUnappliedSlash();\n    }\n\n    /// @inheritdoc IBlueprintServiceManager\n    function onSlash(uint64, bytes calldata, uint8) external override {\n        emit OnSlash();\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/test/MasterBlueprintServiceManager.t.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { Test } from \"forge-std/Test.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { MasterBlueprintServiceManager } from \"src/MasterBlueprintServiceManager.sol\";\nimport \"./MockERC20.sol\";\nimport \"src/IBlueprintServiceManager.sol\";\nimport \"src/AssetsLib.sol\";\nimport \"src/ServiceOperatorsLib.sol\";\nimport \"./MockBlueprintServiceManager.sol\";\n\ncontract MasterBlueprintServiceManagerTest is Test {\n    using Assets for address;\n    using Assets for Assets.Asset;\n\n    MasterBlueprintServiceManager masterManager;\n    MockBlueprintServiceManager mockManager;\n    MockERC20 erc20Token;\n    address payable protocolFeesReceiver = payable(address(0xdead));\n    address payable blueprintOwner = payable(address(0xbeef));\n\n    // Set up roles\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant TRENCH_UPDATE_ROLE = keccak256(\"TRENCH_UPDATE_ROLE\");\n\n    address public ROOT_CHAIN = address(0x09dF6A941ee03B1e632904E382e10862fA9cc0e3);\n\n    uint16 public constant BASE_PERCENT = 10_000;\n\n    event BlueprintCreated(\n        address indexed owner, uint64 indexed blueprintId, MasterBlueprintServiceManager.Blueprint blueprint\n    );\n    event OperatorRegistered(uint64 indexed blueprintId, ServiceOperators.OperatorPreferences operator);\n    event OperatorUnregistered(uint64 indexed blueprintId, ServiceOperators.OperatorPreferences operator);\n    event PriceTargetsUpdated(uint64 indexed blueprintId, ServiceOperators.OperatorPreferences operator);\n    event ServiceRequested(\n        uint64 indexed blueprintId,\n        uint64 indexed requestId,\n        address indexed requester,\n        uint64 ttl,\n        Assets.Asset asset,\n        uint256 amount\n    );\n    event RequestApproved(\n        uint64 indexed blueprintId,\n        uint64 indexed requestId,\n        ServiceOperators.OperatorPreferences operator,\n        uint8 restakingPercent\n    );\n    event RequestRejected(\n        uint64 indexed blueprintId, uint64 indexed requestId, ServiceOperators.OperatorPreferences operator\n    );\n    event ServiceInitialized(\n        uint64 indexed blueprintId, uint64 indexed requestId, uint64 indexed serviceId, address owner, uint64 ttl\n    );\n    event JobCalled(uint64 indexed blueprintId, uint64 indexed serviceId, uint8 job, uint64 jobCallId);\n    event JobResultReceived(\n        uint64 indexed blueprintId,\n        uint64 indexed serviceId,\n        uint8 job,\n        uint64 jobCallId,\n        ServiceOperators.OperatorPreferences operator\n    );\n    event ServiceTerminated(uint64 indexed blueprintId, uint64 indexed serviceId, address owner);\n    event UnappliedSlash(\n        uint64 indexed blueprintId, uint64 indexed serviceId, bytes offender, uint8 slashPercent\n    );\n    event Slashed(\n        uint64 indexed blueprintId, uint64 indexed serviceId, bytes offender, uint8 slashPercent\n    );\n\n    function setUp() public {\n        // Impersonate the ROOT_CHAIN address for deployment\n        vm.startPrank(ROOT_CHAIN);\n        masterManager = new MasterBlueprintServiceManager(protocolFeesReceiver);\n        vm.stopPrank();\n\n        // Create mock blueprint service manager\n        mockManager = new MockBlueprintServiceManager();\n        mockManager.setMasterBlueprintServiceManager(address(masterManager));\n        mockManager.setBlueprintOwner(address(payable(blueprintOwner)));\n\n        // Deploy a mock ERC20 token\n        erc20Token = new MockERC20();\n        erc20Token.initialize(\"Mock Token\", \"MTK\", 18);\n        erc20Token.mint(address(this), 1_000_000 ether);\n\n        // Grant necessary roles to the test contract\n        vm.startPrank(ROOT_CHAIN);\n        masterManager.grantRole(masterManager.DEFAULT_ADMIN_ROLE(), address(this));\n        masterManager.grantRole(PAUSER_ROLE, address(this));\n        masterManager.grantRole(TRENCH_UPDATE_ROLE, address(this));\n        vm.stopPrank();\n    }\n\n    modifier asRootChain() {\n        vm.startPrank(ROOT_CHAIN);\n        _;\n        vm.stopPrank();\n    }\n\n    // Test onBlueprintCreated\n    function test_onBlueprintCreated() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Prepare Blueprint data\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        // Expect the BlueprintCreated event\n        vm.expectEmit(true, true, false, true);\n        emit BlueprintCreated(owner, blueprintId, blueprint);\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n    }\n\n    function test_onBlueprintCreated_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n    }\n\n    // Test onRegister\n    function test_onRegister() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        bytes memory registrationInputs = hex\"\";\n\n        // Expect the OperatorRegistered event\n        vm.expectEmit(true, false, false, true);\n        emit OperatorRegistered(blueprintId, operatorPrefs);\n\n        masterManager.onRegister(blueprintId, operatorPrefs, registrationInputs);\n    }\n\n    function test_onRegister_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n        bytes memory registrationInputs = hex\"\";\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onRegister(blueprintId, operatorPrefs, registrationInputs);\n    }\n\n    // Test onUnregister\n    function test_onUnregister() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        // Expect the OperatorUnregistered event\n        vm.expectEmit(true, false, false, true);\n        emit OperatorUnregistered(blueprintId, operatorPrefs);\n\n        masterManager.onUnregister(blueprintId, operatorPrefs);\n    }\n\n    function test_onUnregister_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onUnregister(blueprintId, operatorPrefs);\n    }\n\n    // Test onUpdatePriceTargets\n    function test_onUpdatePriceTargets() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        // Expect the PriceTargetsUpdated event\n        vm.expectEmit(true, false, false, true);\n        emit PriceTargetsUpdated(blueprintId, operatorPrefs);\n\n        masterManager.onUpdatePriceTargets(blueprintId, operatorPrefs);\n    }\n\n    function test_onUpdatePriceTargets_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onUpdatePriceTargets(blueprintId, operatorPrefs);\n    }\n\n    // Test onRequest\n    function test_onRequest() public asRootChain {\n        uint64 blueprintId = 1;\n        address requester = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, requester, blueprint);\n\n        // Prepare request parameters\n        uint64 requestId = 1;\n        uint64 ttl = 1000;\n\n        ServiceOperators.OperatorPreferences[] memory operators = new ServiceOperators.OperatorPreferences[](1);\n        operators[0] = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        address[] memory permittedCallers = new address[](1);\n        permittedCallers[0] = address(this);\n\n        Assets.Asset memory paymentAsset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(erc20Token)))) });\n\n        uint256 amount = 100 ether;\n\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: requestId,\n            requester: requester,\n            operators: operators,\n            requestInputs: hex\"\",\n            permittedCallers: permittedCallers,\n            ttl: ttl,\n            paymentAsset: paymentAsset,\n            amount: amount\n        });\n\n        // Expect the ServiceRequested event\n        vm.expectEmit(true, true, true, true);\n        emit ServiceRequested(blueprintId, requestId, requester, ttl, paymentAsset, amount);\n\n        masterManager.onRequest(blueprintId, params);\n    }\n\n    function test_onRequest_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        address requester = address(this);\n\n        // Prepare request parameters\n        uint64 requestId = 1;\n        uint64 ttl = 1000;\n\n        ServiceOperators.OperatorPreferences[] memory operators = new ServiceOperators.OperatorPreferences[](1);\n        operators[0] = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        address[] memory permittedCallers = new address[](1);\n        permittedCallers[0] = address(this);\n\n        Assets.Asset memory paymentAsset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(erc20Token)))) });\n\n        uint256 amount = 100 ether;\n\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: requestId,\n            requester: requester,\n            operators: operators,\n            requestInputs: hex\"\",\n            permittedCallers: permittedCallers,\n            ttl: ttl,\n            paymentAsset: paymentAsset,\n            amount: amount\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onRequest(blueprintId, params);\n    }\n\n    // Test onApprove\n    function test_onApprove() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        uint64 requestId = 1;\n        uint8 restakingPercent = 10;\n\n        // Expect the RequestApproved event\n        vm.expectEmit(true, true, false, true);\n        emit RequestApproved(blueprintId, requestId, operatorPrefs, restakingPercent);\n\n        masterManager.onApprove(blueprintId, operatorPrefs, requestId, restakingPercent);\n    }\n\n    function test_onApprove_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        uint64 requestId = 1;\n        uint8 restakingPercent = 10;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onApprove(blueprintId, operatorPrefs, requestId, restakingPercent);\n    }\n\n    // Test onReject\n    function test_onReject() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        uint64 requestId = 1;\n\n        // Expect the RequestRejected event\n        vm.expectEmit(true, true, false, true);\n        emit RequestRejected(blueprintId, requestId, operatorPrefs);\n\n        masterManager.onReject(blueprintId, operatorPrefs, requestId);\n    }\n\n    function test_onReject_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        uint64 requestId = 1;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onReject(blueprintId, operatorPrefs, requestId);\n    }\n\n    // Test onServiceInitialized\n    function test_onServiceInitialized() public asRootChain {\n        uint64 blueprintId = 1;\n        uint64 requestId = 1;\n        uint64 serviceId = 1;\n        uint64 ttl = 1000;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Prepare permitted callers\n        address[] memory permittedCallers = new address[](1);\n        permittedCallers[0] = address(this);\n\n        // Expect the ServiceInitialized event\n        vm.expectEmit(true, true, true, true);\n        emit ServiceInitialized(blueprintId, requestId, serviceId, owner, ttl);\n\n        masterManager.onServiceInitialized(blueprintId, requestId, serviceId, owner, permittedCallers, ttl);\n    }\n\n    function test_onServiceInitialized_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        uint64 requestId = 1;\n        uint64 serviceId = 1;\n        uint64 ttl = 1000;\n        address owner = address(this);\n\n        address[] memory permittedCallers = new address[](1);\n        permittedCallers[0] = address(this);\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onServiceInitialized(blueprintId, requestId, serviceId, owner, permittedCallers, ttl);\n    }\n\n    // Test onJobCall\n    function test_onJobCall() public asRootChain {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        uint8 job = 1;\n        uint64 jobCallId = 1;\n        bytes memory inputs = hex\"\";\n\n        // Create a blueprint first\n        address owner = address(this);\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Expect the JobCalled event\n        vm.expectEmit(true, true, false, true);\n        emit JobCalled(blueprintId, serviceId, job, jobCallId);\n\n        masterManager.onJobCall(blueprintId, serviceId, job, jobCallId, inputs);\n    }\n\n    function test_onJobCall_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        uint8 job = 1;\n        uint64 jobCallId = 1;\n        bytes memory inputs = hex\"\";\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n        masterManager.onJobCall(blueprintId, serviceId, job, jobCallId, inputs);\n    }\n\n    // Test onJobResult\n    function test_onJobResult() public asRootChain {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        uint8 job = 1;\n        uint64 jobCallId = 1;\n        bytes memory inputs = hex\"\";\n        bytes memory outputs = hex\"\";\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"abcd\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 200,\n                mem: 300,\n                storage_hdd: 400,\n                storage_ssd: 500,\n                storage_nvme: 600\n            })\n        });\n\n        // Create a blueprint first\n        address owner = address(this);\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Expect the JobResultReceived event\n        vm.expectEmit(true, true, false, true);\n        emit JobResultReceived(blueprintId, serviceId, job, jobCallId, operatorPrefs);\n\n        masterManager.onJobResult(blueprintId, serviceId, job, jobCallId, operatorPrefs, inputs, outputs);\n    }\n\n    function test_onJobResult_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        uint8 job = 1;\n        uint64 jobCallId = 1;\n        bytes memory inputs = hex\"\";\n        bytes memory outputs = hex\"\";\n\n        // Prepare operator preferences\n        ServiceOperators.OperatorPreferences memory operatorPrefs = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"abcd\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 200,\n                mem: 300,\n                storage_hdd: 400,\n                storage_ssd: 500,\n                storage_nvme: 600\n            })\n        });\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n\n        masterManager.onJobResult(blueprintId, serviceId, job, jobCallId, operatorPrefs, inputs, outputs);\n    }\n\n    // Test onServiceTermination\n    function test_onServiceTermination() public asRootChain {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Expect the ServiceTerminated event\n        vm.expectEmit(true, true, false, true);\n        emit ServiceTerminated(blueprintId, serviceId, owner);\n\n        masterManager.onServiceTermination(blueprintId, serviceId, owner);\n    }\n\n    function test_onServiceTermination_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        address owner = address(this);\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n\n        masterManager.onServiceTermination(blueprintId, serviceId, owner);\n    }\n\n    // Test onUnappliedSlash\n    function test_onUnappliedSlash() public asRootChain {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        bytes memory offender = hex\"abcd\";\n        uint8 slashPercent = 20;\n\n        // Create a blueprint first\n        address owner = address(this);\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Expect the UnappliedSlash event\n        vm.expectEmit(true, true, false, true);\n        emit UnappliedSlash(blueprintId, serviceId, offender, slashPercent);\n\n        masterManager.onUnappliedSlash(blueprintId, serviceId, offender, slashPercent);\n    }\n\n    function test_onUnappliedSlash_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        bytes memory offender = hex\"abcd\";\n        uint8 slashPercent = 20;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n\n        masterManager.onUnappliedSlash(blueprintId, serviceId, offender, slashPercent);\n    }\n\n    // Test onSlash\n    function test_onSlash() public asRootChain {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        bytes memory offender = hex\"abcd\";\n        uint8 slashPercent = 15;\n        uint256 totalPayout = 500 ether;\n\n        // Create a blueprint first\n        address owner = address(this);\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        // Expect the Slashed event\n        vm.expectEmit(true, true, false, true);\n        emit Slashed(blueprintId, serviceId, offender, slashPercent);\n\n        masterManager.onSlash(blueprintId, serviceId, offender, slashPercent);\n    }\n\n    function test_onSlash_NotFromRootChain() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        bytes memory offender = hex\"abcd\";\n        uint8 slashPercent = 15;\n\n        vm.expectRevert(\n            abi.encodeWithSelector(RootChainEnabled.OnlyRootChainAllowed.selector, address(this), ROOT_CHAIN)\n        );\n\n        masterManager.onSlash(blueprintId, serviceId, offender, slashPercent);\n    }\n\n    // Test querySlashingOrigin\n    function test_querySlashingOrigin() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        address expectedOrigin = address(mockManager);\n\n        // Create a blueprint first\n        address owner = address(this);\n\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        vm.startPrank(ROOT_CHAIN);\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n        vm.stopPrank();\n\n        address slashingOrigin = masterManager.querySlashingOrigin(blueprintId, serviceId);\n        assertEq(slashingOrigin, expectedOrigin);\n    }\n\n    // Test queryDisputeOrigin\n    function test_queryDisputeOrigin() public {\n        uint64 blueprintId = 1;\n        uint64 serviceId = 1;\n        address expectedOrigin = address(mockManager);\n\n        // Create a blueprint first\n        address owner = address(this);\n\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        vm.startPrank(ROOT_CHAIN);\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n        vm.stopPrank();\n\n        address disputeOrigin = masterManager.queryDisputeOrigin(blueprintId, serviceId);\n        assertEq(disputeOrigin, expectedOrigin);\n    }\n\n    // Test pause and unpause\n    function test_pauseAndUnpause() public {\n        masterManager.pause();\n        assertTrue(masterManager.paused());\n\n        // Attempt to call a function that is affected by whenNotPaused\n        vm.startPrank(ROOT_CHAIN);\n\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        vm.expectRevert(Pausable.EnforcedPause.selector);\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        vm.stopPrank();\n\n        masterManager.unpause();\n        assertFalse(masterManager.paused());\n    }\n\n    function test_pause_Unauthorized() public {\n        assertFalse(masterManager.hasRole(PAUSER_ROLE, address(0x1234)));\n        vm.prank(address(0x1234));\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                IAccessControl.AccessControlUnauthorizedAccount.selector, address(0x1234), PAUSER_ROLE\n            )\n        );\n        masterManager.pause();\n    }\n\n    // Test setTranches\n    function test_setTranches() public {\n        MasterBlueprintServiceManager.Tranche[] memory newTranches = new MasterBlueprintServiceManager.Tranche[](2);\n        newTranches[0] = MasterBlueprintServiceManager.Tranche({\n            kind: MasterBlueprintServiceManager.TrancheKind.Developer,\n            percent: 7000 // 70%\n         });\n        newTranches[1] = MasterBlueprintServiceManager.Tranche({\n            kind: MasterBlueprintServiceManager.TrancheKind.Protocol,\n            percent: 3000 // 30%\n         });\n\n        masterManager.setTranches(newTranches);\n\n        // Since tranches is public, we can check the new values\n        (MasterBlueprintServiceManager.TrancheKind kind0, uint16 percent0) = masterManager.tranches(0);\n        assertEq(uint8(kind0), uint8(MasterBlueprintServiceManager.TrancheKind.Developer));\n        assertEq(percent0, 7000);\n\n        (MasterBlueprintServiceManager.TrancheKind kind1, uint16 percent1) = masterManager.tranches(1);\n        assertEq(uint8(kind1), uint8(MasterBlueprintServiceManager.TrancheKind.Protocol));\n        assertEq(percent1, 3000);\n    }\n\n    function test_setTranches_InvalidSum() public {\n        MasterBlueprintServiceManager.Tranche[] memory newTranches = new MasterBlueprintServiceManager.Tranche[](2);\n        newTranches[0] = MasterBlueprintServiceManager.Tranche({\n            kind: MasterBlueprintServiceManager.TrancheKind.Developer,\n            percent: 5000 // 50%\n         });\n        newTranches[1] = MasterBlueprintServiceManager.Tranche({\n            kind: MasterBlueprintServiceManager.TrancheKind.Protocol,\n            percent: 4000 // 40%\n         });\n\n        vm.expectRevert(MasterBlueprintServiceManager.InvalidTranches.selector);\n        masterManager.setTranches(newTranches);\n    }\n\n    function test_setTranches_Unauthorized() public {\n        MasterBlueprintServiceManager.Tranche[] memory newTranches = new MasterBlueprintServiceManager.Tranche[](2);\n        newTranches[0] = MasterBlueprintServiceManager.Tranche({\n            kind: MasterBlueprintServiceManager.TrancheKind.Developer,\n            percent: 7000 // 70%\n         });\n        newTranches[1] = MasterBlueprintServiceManager.Tranche({\n            kind: MasterBlueprintServiceManager.TrancheKind.Protocol,\n            percent: 3000 // 30%\n         });\n\n        vm.prank(address(0x1234));\n        vm.expectRevert(\n            abi.encodeWithSelector(\n                IAccessControl.AccessControlUnauthorizedAccount.selector, address(0x1234), TRENCH_UPDATE_ROLE\n            )\n        );\n\n        masterManager.setTranches(newTranches);\n    }\n\n    // Test spliting the payment with ERC20\n    function test_paymentSplit_erc20() public asRootChain {\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(1, address(this), blueprint);\n\n        ServiceOperators.OperatorPreferences[] memory operators = new ServiceOperators.OperatorPreferences[](1);\n        operators[0] = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        address[] memory permittedCallers = new address[](1);\n        permittedCallers[0] = address(this);\n\n        Assets.Asset memory paymentAsset =\n            Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(erc20Token)))) });\n\n        uint256 amount = 100 ether;\n\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: 1,\n            requester: address(this),\n            operators: operators,\n            requestInputs: hex\"\",\n            permittedCallers: permittedCallers,\n            ttl: 1000,\n            paymentAsset: paymentAsset,\n            amount: amount\n        });\n\n        masterManager.onRequest(1, params);\n\n        // Approve the request\n        uint8 restakingPercent = 10;\n        masterManager.onApprove(1, operators[0], 1, restakingPercent);\n\n        vm.startPrank(address(this));\n        erc20Token.transfer(address(masterManager), amount);\n        vm.stopPrank();\n\n        vm.startPrank(ROOT_CHAIN);\n\n        masterManager.onServiceInitialized(1, 1, 1, address(this), permittedCallers, 1000);\n\n        // query the tranches to check the payment split\n        (MasterBlueprintServiceManager.TrancheKind kind, uint16 percent) = masterManager.tranches(0);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Developer);\n        address dev = mockManager.queryDeveloperPaymentAddress(1);\n        uint256 expectedBalance = (amount * percent) / BASE_PERCENT;\n        uint256 actualBalance = IERC20(erc20Token).balanceOf(dev);\n        assertEq(actualBalance, expectedBalance);\n\n        (kind, percent) = masterManager.tranches(1);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Protocol);\n\n        address protocol = masterManager.protocolFeesReceiver();\n        expectedBalance = (amount * percent) / BASE_PERCENT;\n        actualBalance = IERC20(erc20Token).balanceOf(protocol);\n        assertEq(actualBalance, expectedBalance);\n\n        (kind, percent) = masterManager.tranches(2);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Operators);\n        uint16 operatorPercent = percent;\n        (kind, percent) = masterManager.tranches(3);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Restakers);\n        uint16 restakerPercent = percent;\n        uint16 rewardsPalletPercent = operatorPercent + restakerPercent;\n        address rewardsPallet = masterManager.rewardsPallet();\n        expectedBalance = (amount * rewardsPalletPercent) / BASE_PERCENT;\n        actualBalance = IERC20(erc20Token).balanceOf(rewardsPallet);\n        assertEq(actualBalance, expectedBalance);\n\n        vm.stopPrank();\n    }\n\n    // Test spliting the payment with Native Token\n    function test_paymentSplit_native() public asRootChain {\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"Test Description\",\n            author: \"Test Author\",\n            category: \"Test Category\",\n            codeRepository: \"https://github.com/example\",\n            logo: \"https://example.com/logo.png\",\n            website: \"https://example.com\",\n            license: \"MIT\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(1, address(this), blueprint);\n\n        ServiceOperators.OperatorPreferences[] memory operators = new ServiceOperators.OperatorPreferences[](1);\n        operators[0] = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 150,\n                mem: 250,\n                storage_hdd: 350,\n                storage_ssd: 450,\n                storage_nvme: 550\n            })\n        });\n\n        address[] memory permittedCallers = new address[](1);\n        permittedCallers[0] = address(this);\n\n        Assets.Asset memory paymentAsset = Assets.Asset({ kind: Assets.Kind.Custom, data: bytes32(0x0) });\n\n        uint256 amount = 100 ether;\n\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: 1,\n            requester: address(this),\n            operators: operators,\n            requestInputs: hex\"\",\n            permittedCallers: permittedCallers,\n            ttl: 1000,\n            paymentAsset: paymentAsset,\n            amount: amount\n        });\n\n        masterManager.onRequest(1, params);\n\n        // Approve the request\n        uint8 restakingPercent = 10;\n        masterManager.onApprove(1, operators[0], 1, restakingPercent);\n\n        vm.startPrank(address(this));\n        payable(address(ROOT_CHAIN)).transfer(amount);\n        vm.stopPrank();\n\n        vm.startPrank(ROOT_CHAIN);\n\n        masterManager.onServiceInitialized{ value: amount }(1, 1, 1, address(this), permittedCallers, 1000);\n\n        // query the tranches to check the payment split\n        (MasterBlueprintServiceManager.TrancheKind kind, uint16 percent) = masterManager.tranches(0);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Developer);\n        address dev = mockManager.queryDeveloperPaymentAddress(1);\n        uint256 expectedBalance = (amount * percent) / BASE_PERCENT;\n        uint256 actualBalance = dev.balance;\n        assertEq(actualBalance, expectedBalance);\n\n        (kind, percent) = masterManager.tranches(1);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Protocol);\n\n        address protocol = masterManager.protocolFeesReceiver();\n        expectedBalance = (amount * percent) / BASE_PERCENT;\n        actualBalance = protocol.balance;\n        assertEq(actualBalance, expectedBalance);\n\n        (kind, percent) = masterManager.tranches(2);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Operators);\n        uint16 operatorPercent = percent;\n        (kind, percent) = masterManager.tranches(3);\n        assert(kind == MasterBlueprintServiceManager.TrancheKind.Restakers);\n        uint16 restakerPercent = percent;\n        uint16 rewardsPalletPercent = operatorPercent + restakerPercent;\n        address rewardsPallet = masterManager.rewardsPallet();\n        expectedBalance = (amount * rewardsPalletPercent) / BASE_PERCENT;\n        actualBalance = rewardsPallet.balance;\n        assertEq(actualBalance, expectedBalance);\n\n        vm.stopPrank();\n    }\n\n    function test_canJoin() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        uint64 serviceId = 1;\n        bool canJoin = masterManager.canJoin(blueprintId, serviceId, operator);\n        assertTrue(canJoin, \"Operator should be able to join\");\n    }\n\n    function test_onOperatorJoined() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        // Should not revert\n        masterManager.onOperatorJoined(blueprintId, serviceId, operator);\n    }\n\n    function test_canLeave() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        uint64 serviceId = 1;\n        bool canLeave = masterManager.canLeave(blueprintId, serviceId, operator);\n        assertTrue(canLeave, \"Operator should be able to leave\");\n    }\n\n    function test_onOperatorLeft() public asRootChain {\n        uint64 blueprintId = 1;\n        address owner = address(this);\n\n        // Create a blueprint first\n        MasterBlueprintServiceManager.ServiceMetadata memory metadata = MasterBlueprintServiceManager.ServiceMetadata({\n            name: \"Test Blueprint\",\n            description: \"\",\n            author: \"\",\n            category: \"\",\n            codeRepository: \"\",\n            logo: \"\",\n            website: \"\",\n            license: \"\"\n        });\n\n        MasterBlueprintServiceManager.Blueprint memory blueprint = MasterBlueprintServiceManager.Blueprint({\n            metadata: metadata,\n            manager: address(mockManager),\n            mbsmRevision: 1\n        });\n\n        masterManager.onBlueprintCreated(blueprintId, owner, blueprint);\n\n        uint64 serviceId = 1;\n        ServiceOperators.OperatorPreferences memory operator = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"1234\",\n            priceTargets: ServiceOperators.PriceTargets({\n                cpu: 100,\n                mem: 200,\n                storage_hdd: 300,\n                storage_ssd: 400,\n                storage_nvme: 500\n            })\n        });\n\n        // Should not revert\n        masterManager.onOperatorLeft(blueprintId, serviceId, operator);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/test/MockBlueprintServiceManager.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"src/BlueprintServiceManagerBase.sol\";\nimport \"src/IBlueprintServiceManager.sol\";\n\ncontract MockBlueprintServiceManager is BlueprintServiceManagerBase {\n    // Expose internal functions for testing\n    function permitAsset(uint64 serviceId, Assets.Asset calldata asset) external returns (bool) {\n        return _permitAsset(serviceId, asset);\n    }\n\n    function revokeAsset(uint64 serviceId, Assets.Asset calldata asset) external returns (bool) {\n        return _revokeAsset(serviceId, asset);\n    }\n\n    function clearPermittedAssets(uint64 serviceId) external returns (bool) {\n        return _clearPermittedAssets(serviceId);\n    }\n\n    function getPermittedAssetsAsAddresses(uint64 serviceId) external view returns (address[] memory) {\n        return _getPermittedAssetsAsAddresses(serviceId);\n    }\n\n    function getPermittedAssets(uint64 serviceId) external view returns (Assets.Asset[] memory) {\n        return _getPermittedAssets(serviceId);\n    }\n\n    function setMasterBlueprintServiceManager(address mbsm) external {\n        masterBlueprintServiceManager = mbsm;\n    }\n\n    function setBlueprintOwner(address owner) external {\n        blueprintOwner = owner;\n    }\n\n    function setCurrentBlueprintId(uint64 id) external {\n        currentBlueprintId = id;\n    }\n\n    function canJoin(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        view\n        virtual\n        override\n        onlyFromMaster\n        returns (bool allowed)\n    {\n        return true;\n    }\n\n    function canLeave(\n        uint64 serviceId,\n        ServiceOperators.OperatorPreferences calldata operator\n    )\n        external\n        view\n        virtual\n        override\n        onlyFromMaster\n        returns (bool allowed)\n    {\n        return true;\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/test/MockERC20.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in\n/// production.\n/// @dev Forked from:\n/// https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract ERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) {\n            _allowance[from][msg.sender] = _sub(allowed, amount);\n        }\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\ncontract MockERC20 is ERC20 {\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n}\n",
  "/dependencies/tnt-core-0.3.0/test/ServiceOperatorsLib.t.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { Test } from \"forge-std/Test.sol\";\nimport { ServiceOperators } from \"../src/ServiceOperatorsLib.sol\";\nimport { Assets } from \"../src/AssetsLib.sol\";\n\ncontract ServiceOperatorsLibTest is Test {\n    // Test constants\n    bytes constant TEST_PUBLIC_KEY =\n        hex\"04d2688b6bc2ce7676a3a9d2f85e178d1964e0fdc1cc8d8ed3d196b5ca6d7932d18f1a48789057ed03d100147b365627427b1918c405c932c2ca81625fd8a23975\";\n    address constant EXPECTED_OPERATOR = address(0x9C7483fb4D62C4f48E5d1049BB87B3E54b013E6b);\n\n    function setUp() public {\n        // No setup required as we're testing a library\n    }\n\n    function testStructInitialization() public {\n        // Test PriceTargets initialization\n        ServiceOperators.PriceTargets memory prices =\n            ServiceOperators.PriceTargets({ cpu: 100, mem: 200, storage_hdd: 300, storage_ssd: 400, storage_nvme: 500 });\n\n        assertEq(prices.cpu, 100, \"CPU price not set correctly\");\n        assertEq(prices.mem, 200, \"Memory price not set correctly\");\n        assertEq(prices.storage_hdd, 300, \"HDD storage price not set correctly\");\n        assertEq(prices.storage_ssd, 400, \"SSD storage price not set correctly\");\n        assertEq(prices.storage_nvme, 500, \"NVMe storage price not set correctly\");\n\n        // Test OperatorPreferences initialization\n        ServiceOperators.OperatorPreferences memory prefs =\n            ServiceOperators.OperatorPreferences({ ecdsaPublicKey: TEST_PUBLIC_KEY, priceTargets: prices });\n\n        assertEq(prefs.ecdsaPublicKey, TEST_PUBLIC_KEY, \"ECDSA public key not set correctly\");\n        assertEq(prefs.priceTargets.cpu, prices.cpu, \"Price targets not set correctly\");\n    }\n\n    function testRequestParamsInitialization() public {\n        // Create operator preferences array\n        ServiceOperators.OperatorPreferences[] memory operators = new ServiceOperators.OperatorPreferences[](2);\n\n        // Set up price targets for operators\n        ServiceOperators.PriceTargets memory prices1 =\n            ServiceOperators.PriceTargets({ cpu: 100, mem: 200, storage_hdd: 300, storage_ssd: 400, storage_nvme: 500 });\n\n        ServiceOperators.PriceTargets memory prices2 =\n            ServiceOperators.PriceTargets({ cpu: 150, mem: 250, storage_hdd: 350, storage_ssd: 450, storage_nvme: 550 });\n\n        // Set up operator preferences\n        operators[0] = ServiceOperators.OperatorPreferences({ ecdsaPublicKey: TEST_PUBLIC_KEY, priceTargets: prices1 });\n\n        operators[1] = ServiceOperators.OperatorPreferences({\n            ecdsaPublicKey: hex\"04e2688b6bc2ce7676a3a9d2f85e178d1964e0fdc1cc8d8ed3d196b5ca6d7932d18f1a48789057ed03d100147b365627427b1918c405c932c2ca81625fd8a23976\",\n            priceTargets: prices2\n        });\n\n        // Set up permitted callers\n        address[] memory permittedCallers = new address[](2);\n        permittedCallers[0] = address(0x1234);\n        permittedCallers[1] = address(0x5678);\n\n        // Create request params\n        ServiceOperators.RequestParams memory params = ServiceOperators.RequestParams({\n            requestId: 12_345,\n            requester: address(this),\n            operators: operators,\n            requestInputs: hex\"1234567890\",\n            permittedCallers: permittedCallers,\n            ttl: 3600,\n            paymentAsset: Assets.Asset({ kind: Assets.Kind.Erc20, data: bytes32(uint256(uint160(address(0x1)))) }),\n            amount: 1000\n        });\n\n        // Verify request params\n        assertEq(params.requestId, 12_345, \"Request ID not set correctly\");\n        assertEq(params.requester, address(this), \"Requester not set correctly\");\n        assertEq(params.operators.length, 2, \"Operators array length incorrect\");\n        assertEq(params.requestInputs, hex\"1234567890\", \"Request inputs not set correctly\");\n        assertEq(params.permittedCallers.length, 2, \"Permitted callers array length incorrect\");\n        assertEq(params.ttl, 3600, \"TTL not set correctly\");\n        assertEq(params.amount, 1000, \"Amount not set correctly\");\n\n        // Verify first operator\n        assertEq(params.operators[0].ecdsaPublicKey, TEST_PUBLIC_KEY, \"First operator public key not set correctly\");\n        assertEq(params.operators[0].priceTargets.cpu, 100, \"First operator CPU price not set correctly\");\n\n        // Verify permitted callers\n        assertEq(params.permittedCallers[0], address(0x1234), \"First permitted caller not set correctly\");\n        assertEq(params.permittedCallers[1], address(0x5678), \"Second permitted caller not set correctly\");\n    }\n\n    function testDifferentPublicKeysProduceDifferentAddresses(bytes calldata key1, bytes calldata key2) public {\n        vm.assume(keccak256(key1) != keccak256(key2));\n\n        address operator1 = ServiceOperators.asOperatorAddress(key1);\n        address operator2 = ServiceOperators.asOperatorAddress(key2);\n\n        assertTrue(operator1 != operator2, \"Different public keys should produce different addresses\");\n    }\n}\n",
  "/foundry.toml": "[profile.default]\nsrc = \"contracts/src\"\ntest = \"contracts/test\"\nout = \"contracts/out\"\nscript = \"contracts/script\"\ncache_path = \"contracts/cache\"\nbroadcast = \"contracts/broadcast\"\nlibs = [\"dependencies\"]\nauto_detect_remappings = true\n\n[soldeer]\nrecursive_deps = true\nremappings_location = \"txt\"\nremappings_version = false\n\n[dependencies]\ntnt-core = \"0.3.0\"\n\n# See more config options https://github.com/foundry-rs/foundry/blob/master/crates/config/README.md#all-options\n",
  "/remappings.txt": "tnt-core/=dependencies/tnt-core-0.3.0/src\n",
  "/soldeer.lock": "[[dependencies]]\nname = \"tnt-core\"\nversion = \"0.3.0\"\nurl = \"https://soldeer-revisions.s3.amazonaws.com/tnt-core/0_3_0_21-02-2025_19:54:56_tnt-core.zip\"\nchecksum = \"f4939e5485b12372bf1e81e148fe48535295fb13fc14a1572e340475b52ff3d1\"\nintegrity = \"63fac62953c0dc031f4f12e3143d0ae4adfade69f5c6b1263ac610dc6db6b3ba\"\n",
  "/taplo.toml": "[formatting]\nalign_entries = false\narray_auto_expand = true\ncolumn_width = 120\n"
}