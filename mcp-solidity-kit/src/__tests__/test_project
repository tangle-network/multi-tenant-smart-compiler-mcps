{
  "/echidna.config.yaml": "corpusDir: \"corpus-magic\"\n",
  "/foundry.toml": "[profile.default]\nsrc = \"src\"\nout = \"out\"\nlibs = [\"lib\"]\nsolc = \"0.8.19\"\nremappings = []\n",
  "/seed.txt": "[\n    {\n        \"_gas'\": \"0xffffffff\",\n        \"_delay\": [\"0x13647\", \"0xccf6\"],\n        \"_src\": \"00a329c0648769a73afac7f9381e08fb43dbea70\",\n        \"_dst\": \"00a329c0648769a73afac7f9381e08fb43dbea72\",\n        \"_value\": \"0x0\",\n        \"_call\": {\n            \"tag\": \"SolCall\",\n            \"contents\": [\n                \"magic\",\n                [\n                    {\n                        \"contents\": [256, \"42\"],\n                        \"tag\": \"AbiUInt\"\n                    },\n                    {\n                        \"contents\": [256, \"129\"],\n                        \"tag\": \"AbiUInt\"\n                    },\n                    {\n                        \"contents\": [256, \"333\"],\n                        \"tag\": \"AbiUInt\"\n                    },\n                    {\n                        \"tag\": \"AbiUInt\",\n                        \"contents\": [256, \"0\"]\n                    }\n                ]\n            ]\n        },\n        \"_gasprice'\": \"0xa904461f1\"\n    }\n]",
  "/src/Safe.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Safe {\n    mapping(address => uint256) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n    }\n}",
  "/src/Vulnerable.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Vulnerable {\n    mapping(address => uint256) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n        balances[msg.sender] -= amount;\n    }\n}\n\ncontract VulnerableEchidna is Vulnerable {\n    // State variable for Echidna to manipulate\n    uint256 public value;\n\n    // Function for Echidna to test\n    function echidna_always_true() public pure returns (bool) {\n        return true;\n    }\n\n    function echidna_test_balance_never_decreases_unexpectedly() public payable {\n        uint256 initialBalance = address(this).balance;\n        uint256 temp = value;\n        assert(address(this).balance >= initialBalance - msg.value + temp - temp);\n    }\n}"
}